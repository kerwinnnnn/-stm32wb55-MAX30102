
BLE_PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012724  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001c70  08012868  08012868  00013868  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080144d8  080144d8  000154d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080144e0  080144e0  000154e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080144e4  080144e4  000154e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001f4  20000008  080144e8  00016008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  200001fc  080146dc  000161fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000234  08014711  00016234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003d0c  20000248  08014722  00016248  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003f54  08014722  00016f54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00017a67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00018000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00018000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  08014722  000171e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   00033016  00000000  00000000  00017a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000076e0  00000000  00000000  0004aaad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002cd0  00000000  00000000  00052190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000223d  00000000  00000000  00054e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002ff0d  00000000  00000000  0005709d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00039e6b  00000000  00000000  00086faa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000fcdc6  00000000  00000000  000c0e15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  001bdbdb  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000cf04  00000000  00000000  001bdc20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000054  00000000  00000000  001cab24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000248 	.word	0x20000248
 800015c:	00000000 	.word	0x00000000
 8000160:	0801284c 	.word	0x0801284c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000024c 	.word	0x2000024c
 800017c:	0801284c 	.word	0x0801284c

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b9a0 	b.w	8000f90 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f83c 	bl	8000cd4 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_d2lz>:
 8000c68:	b538      	push	{r3, r4, r5, lr}
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	4604      	mov	r4, r0
 8000c70:	460d      	mov	r5, r1
 8000c72:	f7ff ff0b 	bl	8000a8c <__aeabi_dcmplt>
 8000c76:	b928      	cbnz	r0, 8000c84 <__aeabi_d2lz+0x1c>
 8000c78:	4620      	mov	r0, r4
 8000c7a:	4629      	mov	r1, r5
 8000c7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c80:	f000 b80a 	b.w	8000c98 <__aeabi_d2ulz>
 8000c84:	4620      	mov	r0, r4
 8000c86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c8a:	f000 f805 	bl	8000c98 <__aeabi_d2ulz>
 8000c8e:	4240      	negs	r0, r0
 8000c90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c94:	bd38      	pop	{r3, r4, r5, pc}
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2ulz>:
 8000c98:	b5d0      	push	{r4, r6, r7, lr}
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000ccc <__aeabi_d2ulz+0x34>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	4606      	mov	r6, r0
 8000ca0:	460f      	mov	r7, r1
 8000ca2:	f7ff fc81 	bl	80005a8 <__aeabi_dmul>
 8000ca6:	f7ff ff57 	bl	8000b58 <__aeabi_d2uiz>
 8000caa:	4604      	mov	r4, r0
 8000cac:	f7ff fc02 	bl	80004b4 <__aeabi_ui2d>
 8000cb0:	4b07      	ldr	r3, [pc, #28]	@ (8000cd0 <__aeabi_d2ulz+0x38>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f7ff fc78 	bl	80005a8 <__aeabi_dmul>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	460b      	mov	r3, r1
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	4639      	mov	r1, r7
 8000cc0:	f7ff faba 	bl	8000238 <__aeabi_dsub>
 8000cc4:	f7ff ff48 	bl	8000b58 <__aeabi_d2uiz>
 8000cc8:	4621      	mov	r1, r4
 8000cca:	bdd0      	pop	{r4, r6, r7, pc}
 8000ccc:	3df00000 	.word	0x3df00000
 8000cd0:	41f00000 	.word	0x41f00000

08000cd4 <__udivmoddi4>:
 8000cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd8:	9d08      	ldr	r5, [sp, #32]
 8000cda:	460c      	mov	r4, r1
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d14e      	bne.n	8000d7e <__udivmoddi4+0xaa>
 8000ce0:	4694      	mov	ip, r2
 8000ce2:	458c      	cmp	ip, r1
 8000ce4:	4686      	mov	lr, r0
 8000ce6:	fab2 f282 	clz	r2, r2
 8000cea:	d962      	bls.n	8000db2 <__udivmoddi4+0xde>
 8000cec:	b14a      	cbz	r2, 8000d02 <__udivmoddi4+0x2e>
 8000cee:	f1c2 0320 	rsb	r3, r2, #32
 8000cf2:	4091      	lsls	r1, r2
 8000cf4:	fa20 f303 	lsr.w	r3, r0, r3
 8000cf8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cfc:	4319      	orrs	r1, r3
 8000cfe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f f68c 	uxth.w	r6, ip
 8000d0a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb07 1114 	mls	r1, r7, r4, r1
 8000d16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1a:	fb04 f106 	mul.w	r1, r4, r6
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	d90a      	bls.n	8000d38 <__udivmoddi4+0x64>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d2a:	f080 8112 	bcs.w	8000f52 <__udivmoddi4+0x27e>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 810f 	bls.w	8000f52 <__udivmoddi4+0x27e>
 8000d34:	3c02      	subs	r4, #2
 8000d36:	4463      	add	r3, ip
 8000d38:	1a59      	subs	r1, r3, r1
 8000d3a:	fa1f f38e 	uxth.w	r3, lr
 8000d3e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d42:	fb07 1110 	mls	r1, r7, r0, r1
 8000d46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4a:	fb00 f606 	mul.w	r6, r0, r6
 8000d4e:	429e      	cmp	r6, r3
 8000d50:	d90a      	bls.n	8000d68 <__udivmoddi4+0x94>
 8000d52:	eb1c 0303 	adds.w	r3, ip, r3
 8000d56:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d5a:	f080 80fc 	bcs.w	8000f56 <__udivmoddi4+0x282>
 8000d5e:	429e      	cmp	r6, r3
 8000d60:	f240 80f9 	bls.w	8000f56 <__udivmoddi4+0x282>
 8000d64:	4463      	add	r3, ip
 8000d66:	3802      	subs	r0, #2
 8000d68:	1b9b      	subs	r3, r3, r6
 8000d6a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d6e:	2100      	movs	r1, #0
 8000d70:	b11d      	cbz	r5, 8000d7a <__udivmoddi4+0xa6>
 8000d72:	40d3      	lsrs	r3, r2
 8000d74:	2200      	movs	r2, #0
 8000d76:	e9c5 3200 	strd	r3, r2, [r5]
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d905      	bls.n	8000d8e <__udivmoddi4+0xba>
 8000d82:	b10d      	cbz	r5, 8000d88 <__udivmoddi4+0xb4>
 8000d84:	e9c5 0100 	strd	r0, r1, [r5]
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4608      	mov	r0, r1
 8000d8c:	e7f5      	b.n	8000d7a <__udivmoddi4+0xa6>
 8000d8e:	fab3 f183 	clz	r1, r3
 8000d92:	2900      	cmp	r1, #0
 8000d94:	d146      	bne.n	8000e24 <__udivmoddi4+0x150>
 8000d96:	42a3      	cmp	r3, r4
 8000d98:	d302      	bcc.n	8000da0 <__udivmoddi4+0xcc>
 8000d9a:	4290      	cmp	r0, r2
 8000d9c:	f0c0 80f0 	bcc.w	8000f80 <__udivmoddi4+0x2ac>
 8000da0:	1a86      	subs	r6, r0, r2
 8000da2:	eb64 0303 	sbc.w	r3, r4, r3
 8000da6:	2001      	movs	r0, #1
 8000da8:	2d00      	cmp	r5, #0
 8000daa:	d0e6      	beq.n	8000d7a <__udivmoddi4+0xa6>
 8000dac:	e9c5 6300 	strd	r6, r3, [r5]
 8000db0:	e7e3      	b.n	8000d7a <__udivmoddi4+0xa6>
 8000db2:	2a00      	cmp	r2, #0
 8000db4:	f040 8090 	bne.w	8000ed8 <__udivmoddi4+0x204>
 8000db8:	eba1 040c 	sub.w	r4, r1, ip
 8000dbc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dc0:	fa1f f78c 	uxth.w	r7, ip
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dce:	fb08 4416 	mls	r4, r8, r6, r4
 8000dd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dd6:	fb07 f006 	mul.w	r0, r7, r6
 8000dda:	4298      	cmp	r0, r3
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0x11c>
 8000dde:	eb1c 0303 	adds.w	r3, ip, r3
 8000de2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000de6:	d202      	bcs.n	8000dee <__udivmoddi4+0x11a>
 8000de8:	4298      	cmp	r0, r3
 8000dea:	f200 80cd 	bhi.w	8000f88 <__udivmoddi4+0x2b4>
 8000dee:	4626      	mov	r6, r4
 8000df0:	1a1c      	subs	r4, r3, r0
 8000df2:	fa1f f38e 	uxth.w	r3, lr
 8000df6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dfa:	fb08 4410 	mls	r4, r8, r0, r4
 8000dfe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e02:	fb00 f707 	mul.w	r7, r0, r7
 8000e06:	429f      	cmp	r7, r3
 8000e08:	d908      	bls.n	8000e1c <__udivmoddi4+0x148>
 8000e0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e0e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x146>
 8000e14:	429f      	cmp	r7, r3
 8000e16:	f200 80b0 	bhi.w	8000f7a <__udivmoddi4+0x2a6>
 8000e1a:	4620      	mov	r0, r4
 8000e1c:	1bdb      	subs	r3, r3, r7
 8000e1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e22:	e7a5      	b.n	8000d70 <__udivmoddi4+0x9c>
 8000e24:	f1c1 0620 	rsb	r6, r1, #32
 8000e28:	408b      	lsls	r3, r1
 8000e2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e2e:	431f      	orrs	r7, r3
 8000e30:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e34:	fa04 f301 	lsl.w	r3, r4, r1
 8000e38:	ea43 030c 	orr.w	r3, r3, ip
 8000e3c:	40f4      	lsrs	r4, r6
 8000e3e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e42:	0c38      	lsrs	r0, r7, #16
 8000e44:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e48:	fbb4 fef0 	udiv	lr, r4, r0
 8000e4c:	fa1f fc87 	uxth.w	ip, r7
 8000e50:	fb00 441e 	mls	r4, r0, lr, r4
 8000e54:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e58:	fb0e f90c 	mul.w	r9, lr, ip
 8000e5c:	45a1      	cmp	r9, r4
 8000e5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e62:	d90a      	bls.n	8000e7a <__udivmoddi4+0x1a6>
 8000e64:	193c      	adds	r4, r7, r4
 8000e66:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e6a:	f080 8084 	bcs.w	8000f76 <__udivmoddi4+0x2a2>
 8000e6e:	45a1      	cmp	r9, r4
 8000e70:	f240 8081 	bls.w	8000f76 <__udivmoddi4+0x2a2>
 8000e74:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e78:	443c      	add	r4, r7
 8000e7a:	eba4 0409 	sub.w	r4, r4, r9
 8000e7e:	fa1f f983 	uxth.w	r9, r3
 8000e82:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e86:	fb00 4413 	mls	r4, r0, r3, r4
 8000e8a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e8e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e92:	45a4      	cmp	ip, r4
 8000e94:	d907      	bls.n	8000ea6 <__udivmoddi4+0x1d2>
 8000e96:	193c      	adds	r4, r7, r4
 8000e98:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e9c:	d267      	bcs.n	8000f6e <__udivmoddi4+0x29a>
 8000e9e:	45a4      	cmp	ip, r4
 8000ea0:	d965      	bls.n	8000f6e <__udivmoddi4+0x29a>
 8000ea2:	3b02      	subs	r3, #2
 8000ea4:	443c      	add	r4, r7
 8000ea6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000eaa:	fba0 9302 	umull	r9, r3, r0, r2
 8000eae:	eba4 040c 	sub.w	r4, r4, ip
 8000eb2:	429c      	cmp	r4, r3
 8000eb4:	46ce      	mov	lr, r9
 8000eb6:	469c      	mov	ip, r3
 8000eb8:	d351      	bcc.n	8000f5e <__udivmoddi4+0x28a>
 8000eba:	d04e      	beq.n	8000f5a <__udivmoddi4+0x286>
 8000ebc:	b155      	cbz	r5, 8000ed4 <__udivmoddi4+0x200>
 8000ebe:	ebb8 030e 	subs.w	r3, r8, lr
 8000ec2:	eb64 040c 	sbc.w	r4, r4, ip
 8000ec6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eca:	40cb      	lsrs	r3, r1
 8000ecc:	431e      	orrs	r6, r3
 8000ece:	40cc      	lsrs	r4, r1
 8000ed0:	e9c5 6400 	strd	r6, r4, [r5]
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	e750      	b.n	8000d7a <__udivmoddi4+0xa6>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f103 	lsr.w	r1, r0, r3
 8000ee0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ee4:	fa24 f303 	lsr.w	r3, r4, r3
 8000ee8:	4094      	lsls	r4, r2
 8000eea:	430c      	orrs	r4, r1
 8000eec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ef0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ef4:	fa1f f78c 	uxth.w	r7, ip
 8000ef8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000efc:	fb08 3110 	mls	r1, r8, r0, r3
 8000f00:	0c23      	lsrs	r3, r4, #16
 8000f02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f06:	fb00 f107 	mul.w	r1, r0, r7
 8000f0a:	4299      	cmp	r1, r3
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x24c>
 8000f0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f12:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f16:	d22c      	bcs.n	8000f72 <__udivmoddi4+0x29e>
 8000f18:	4299      	cmp	r1, r3
 8000f1a:	d92a      	bls.n	8000f72 <__udivmoddi4+0x29e>
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	4463      	add	r3, ip
 8000f20:	1a5b      	subs	r3, r3, r1
 8000f22:	b2a4      	uxth	r4, r4
 8000f24:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f28:	fb08 3311 	mls	r3, r8, r1, r3
 8000f2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f30:	fb01 f307 	mul.w	r3, r1, r7
 8000f34:	42a3      	cmp	r3, r4
 8000f36:	d908      	bls.n	8000f4a <__udivmoddi4+0x276>
 8000f38:	eb1c 0404 	adds.w	r4, ip, r4
 8000f3c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f40:	d213      	bcs.n	8000f6a <__udivmoddi4+0x296>
 8000f42:	42a3      	cmp	r3, r4
 8000f44:	d911      	bls.n	8000f6a <__udivmoddi4+0x296>
 8000f46:	3902      	subs	r1, #2
 8000f48:	4464      	add	r4, ip
 8000f4a:	1ae4      	subs	r4, r4, r3
 8000f4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f50:	e739      	b.n	8000dc6 <__udivmoddi4+0xf2>
 8000f52:	4604      	mov	r4, r0
 8000f54:	e6f0      	b.n	8000d38 <__udivmoddi4+0x64>
 8000f56:	4608      	mov	r0, r1
 8000f58:	e706      	b.n	8000d68 <__udivmoddi4+0x94>
 8000f5a:	45c8      	cmp	r8, r9
 8000f5c:	d2ae      	bcs.n	8000ebc <__udivmoddi4+0x1e8>
 8000f5e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f62:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f66:	3801      	subs	r0, #1
 8000f68:	e7a8      	b.n	8000ebc <__udivmoddi4+0x1e8>
 8000f6a:	4631      	mov	r1, r6
 8000f6c:	e7ed      	b.n	8000f4a <__udivmoddi4+0x276>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	e799      	b.n	8000ea6 <__udivmoddi4+0x1d2>
 8000f72:	4630      	mov	r0, r6
 8000f74:	e7d4      	b.n	8000f20 <__udivmoddi4+0x24c>
 8000f76:	46d6      	mov	lr, sl
 8000f78:	e77f      	b.n	8000e7a <__udivmoddi4+0x1a6>
 8000f7a:	4463      	add	r3, ip
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	e74d      	b.n	8000e1c <__udivmoddi4+0x148>
 8000f80:	4606      	mov	r6, r0
 8000f82:	4623      	mov	r3, r4
 8000f84:	4608      	mov	r0, r1
 8000f86:	e70f      	b.n	8000da8 <__udivmoddi4+0xd4>
 8000f88:	3e02      	subs	r6, #2
 8000f8a:	4463      	add	r3, ip
 8000f8c:	e730      	b.n	8000df0 <__udivmoddi4+0x11c>
 8000f8e:	bf00      	nop

08000f90 <__aeabi_idiv0>:
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <adjust_Current>:




void adjust_Current(uint8_t n_brightness)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]
	uint8_t current_inc=0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	73fb      	strb	r3, [r7, #15]
	current_inc=(255-n_brightness)*MAX_LED_REGISTER/255;
 8000fa2:	79fb      	ldrb	r3, [r7, #7]
 8000fa4:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8000fa8:	22c8      	movs	r2, #200	@ 0xc8
 8000faa:	fb02 f303 	mul.w	r3, r2, r3
 8000fae:	4a12      	ldr	r2, [pc, #72]	@ (8000ff8 <adjust_Current+0x64>)
 8000fb0:	fb82 1203 	smull	r1, r2, r2, r3
 8000fb4:	441a      	add	r2, r3
 8000fb6:	11d2      	asrs	r2, r2, #7
 8000fb8:	17db      	asrs	r3, r3, #31
 8000fba:	1ad3      	subs	r3, r2, r3
 8000fbc:	73fb      	strb	r3, [r7, #15]
	if(current_inc>MAX_LED_INC)current_inc=MAX_LED_INC;
 8000fbe:	7bfb      	ldrb	r3, [r7, #15]
 8000fc0:	2b0a      	cmp	r3, #10
 8000fc2:	d901      	bls.n	8000fc8 <adjust_Current+0x34>
 8000fc4:	230a      	movs	r3, #10
 8000fc6:	73fb      	strb	r3, [r7, #15]
	current+=current_inc;
 8000fc8:	4b0c      	ldr	r3, [pc, #48]	@ (8000ffc <adjust_Current+0x68>)
 8000fca:	781a      	ldrb	r2, [r3, #0]
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
 8000fce:	4413      	add	r3, r2
 8000fd0:	b2da      	uxtb	r2, r3
 8000fd2:	4b0a      	ldr	r3, [pc, #40]	@ (8000ffc <adjust_Current+0x68>)
 8000fd4:	701a      	strb	r2, [r3, #0]
	if(current> MAX_LED_REGISTER)current=MAX_LED_REGISTER;
 8000fd6:	4b09      	ldr	r3, [pc, #36]	@ (8000ffc <adjust_Current+0x68>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	2bc8      	cmp	r3, #200	@ 0xc8
 8000fdc:	d902      	bls.n	8000fe4 <adjust_Current+0x50>
 8000fde:	4b07      	ldr	r3, [pc, #28]	@ (8000ffc <adjust_Current+0x68>)
 8000fe0:	22c8      	movs	r2, #200	@ 0xc8
 8000fe2:	701a      	strb	r2, [r3, #0]
	max30102_Reg_Write(REG_LED1_PA, current);
 8000fe4:	4b05      	ldr	r3, [pc, #20]	@ (8000ffc <adjust_Current+0x68>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	4619      	mov	r1, r3
 8000fea:	200c      	movs	r0, #12
 8000fec:	f000 f808 	bl	8001000 <max30102_Reg_Write>

}
 8000ff0:	bf00      	nop
 8000ff2:	3710      	adds	r7, #16
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	80808081 	.word	0x80808081
 8000ffc:	2000000c 	.word	0x2000000c

08001000 <max30102_Reg_Write>:

void max30102_Reg_Write(uint8_t Register_Address,uint8_t Data)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b088      	sub	sp, #32
 8001004:	af04      	add	r7, sp, #16
 8001006:	4603      	mov	r3, r0
 8001008:	460a      	mov	r2, r1
 800100a:	71fb      	strb	r3, [r7, #7]
 800100c:	4613      	mov	r3, r2
 800100e:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0]=Register_Address;
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	733b      	strb	r3, [r7, #12]
	buf[1]=Data;
 8001014:	79bb      	ldrb	r3, [r7, #6]
 8001016:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(&hi2c1,I2C_WRITE_ADDR, buf[0], I2C_MEMADD_SIZE_8BIT,&buf[1], 2, HAL_MAX_DELAY);
 8001018:	7b3b      	ldrb	r3, [r7, #12]
 800101a:	461a      	mov	r2, r3
 800101c:	f04f 33ff 	mov.w	r3, #4294967295
 8001020:	9302      	str	r3, [sp, #8]
 8001022:	2302      	movs	r3, #2
 8001024:	9301      	str	r3, [sp, #4]
 8001026:	f107 030c 	add.w	r3, r7, #12
 800102a:	3301      	adds	r3, #1
 800102c:	9300      	str	r3, [sp, #0]
 800102e:	2301      	movs	r3, #1
 8001030:	21ae      	movs	r1, #174	@ 0xae
 8001032:	4803      	ldr	r0, [pc, #12]	@ (8001040 <max30102_Reg_Write+0x40>)
 8001034:	f004 f94c 	bl	80052d0 <HAL_I2C_Mem_Write>
}
 8001038:	bf00      	nop
 800103a:	3710      	adds	r7, #16
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20002a1c 	.word	0x20002a1c

08001044 <max30102_Reg_Read>:

void max30102_Reg_Read(uint8_t Register_Address,uint8_t *Data)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b088      	sub	sp, #32
 8001048:	af04      	add	r7, sp, #16
 800104a:	4603      	mov	r3, r0
 800104c:	6039      	str	r1, [r7, #0]
 800104e:	71fb      	strb	r3, [r7, #7]
	uint8_t buf[2];
	buf[0]=Register_Address;
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Mem_Read(&hi2c1,I2C_READ_ADDR, buf[0], I2C_MEMADD_SIZE_8BIT,&buf[1], 1, HAL_MAX_DELAY);
 8001054:	7b3b      	ldrb	r3, [r7, #12]
 8001056:	461a      	mov	r2, r3
 8001058:	f04f 33ff 	mov.w	r3, #4294967295
 800105c:	9302      	str	r3, [sp, #8]
 800105e:	2301      	movs	r3, #1
 8001060:	9301      	str	r3, [sp, #4]
 8001062:	f107 030c 	add.w	r3, r7, #12
 8001066:	3301      	adds	r3, #1
 8001068:	9300      	str	r3, [sp, #0]
 800106a:	2301      	movs	r3, #1
 800106c:	21af      	movs	r1, #175	@ 0xaf
 800106e:	4805      	ldr	r0, [pc, #20]	@ (8001084 <max30102_Reg_Read+0x40>)
 8001070:	f004 fa42 	bl	80054f8 <HAL_I2C_Mem_Read>
	*Data=buf[1];
 8001074:	7b7a      	ldrb	r2, [r7, #13]
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	701a      	strb	r2, [r3, #0]
}
 800107a:	bf00      	nop
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20002a1c 	.word	0x20002a1c

08001088 <max30102_FIFO_ReadBytes>:

void max30102_FIFO_ReadBytes(uint32_t *Red_Data,uint32_t *IR_Data)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b08a      	sub	sp, #40	@ 0x28
 800108c:	af04      	add	r7, sp, #16
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	6039      	str	r1, [r7, #0]
	uint8_t data[6];
	uint8_t temp;
	max30102_Reg_Read(REG_INTR_STATUS_1,&temp);
 8001092:	f107 030f 	add.w	r3, r7, #15
 8001096:	4619      	mov	r1, r3
 8001098:	2000      	movs	r0, #0
 800109a:	f7ff ffd3 	bl	8001044 <max30102_Reg_Read>
	max30102_Reg_Read(REG_INTR_STATUS_2,&temp);
 800109e:	f107 030f 	add.w	r3, r7, #15
 80010a2:	4619      	mov	r1, r3
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ffcd 	bl	8001044 <max30102_Reg_Read>
	HAL_I2C_Mem_Read(&hi2c1,I2C_READ_ADDR, REG_FIFO_DATA, I2C_MEMADD_SIZE_8BIT,data, 6, HAL_MAX_DELAY);
 80010aa:	f04f 33ff 	mov.w	r3, #4294967295
 80010ae:	9302      	str	r3, [sp, #8]
 80010b0:	2306      	movs	r3, #6
 80010b2:	9301      	str	r3, [sp, #4]
 80010b4:	f107 0310 	add.w	r3, r7, #16
 80010b8:	9300      	str	r3, [sp, #0]
 80010ba:	2301      	movs	r3, #1
 80010bc:	2207      	movs	r2, #7
 80010be:	21af      	movs	r1, #175	@ 0xaf
 80010c0:	480c      	ldr	r0, [pc, #48]	@ (80010f4 <max30102_FIFO_ReadBytes+0x6c>)
 80010c2:	f004 fa19 	bl	80054f8 <HAL_I2C_Mem_Read>

	*Red_Data = ((uint32_t)data[0] << 16) | ((uint32_t)data[1] << 8) | (uint32_t)data[2];
 80010c6:	7c3b      	ldrb	r3, [r7, #16]
 80010c8:	041a      	lsls	r2, r3, #16
 80010ca:	7c7b      	ldrb	r3, [r7, #17]
 80010cc:	021b      	lsls	r3, r3, #8
 80010ce:	4313      	orrs	r3, r2
 80010d0:	7cba      	ldrb	r2, [r7, #18]
 80010d2:	431a      	orrs	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	601a      	str	r2, [r3, #0]
	*IR_Data = ((uint32_t)data[3] << 16) | ((uint32_t)data[4] << 8) | (uint32_t)data[5];
 80010d8:	7cfb      	ldrb	r3, [r7, #19]
 80010da:	041a      	lsls	r2, r3, #16
 80010dc:	7d3b      	ldrb	r3, [r7, #20]
 80010de:	021b      	lsls	r3, r3, #8
 80010e0:	4313      	orrs	r3, r2
 80010e2:	7d7a      	ldrb	r2, [r7, #21]
 80010e4:	431a      	orrs	r2, r3
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	601a      	str	r2, [r3, #0]


}
 80010ea:	bf00      	nop
 80010ec:	3718      	adds	r7, #24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	20002a1c 	.word	0x20002a1c

080010f8 <max30102_Init>:
void max30102_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
	max30102_Reg_Write(REG_MODE_CONFIG,0x40);//MAX30102reset
 80010fc:	2140      	movs	r1, #64	@ 0x40
 80010fe:	2009      	movs	r0, #9
 8001100:	f7ff ff7e 	bl	8001000 <max30102_Reg_Write>

	max30102_Reg_Write(REG_INTR_ENABLE_1,0xc0);	// INTR setting
 8001104:	21c0      	movs	r1, #192	@ 0xc0
 8001106:	2002      	movs	r0, #2
 8001108:	f7ff ff7a 	bl	8001000 <max30102_Reg_Write>
	max30102_Reg_Write(REG_INTR_ENABLE_2,0x00);
 800110c:	2100      	movs	r1, #0
 800110e:	2003      	movs	r0, #3
 8001110:	f7ff ff76 	bl	8001000 <max30102_Reg_Write>
	max30102_Reg_Write(REG_FIFO_WR_PTR,0x00);  	//FIFO_WR_PTR[4:0]
 8001114:	2100      	movs	r1, #0
 8001116:	2004      	movs	r0, #4
 8001118:	f7ff ff72 	bl	8001000 <max30102_Reg_Write>
	max30102_Reg_Write(REG_OVF_COUNTER,0x00);  	//OVF_COUNTER[4:0]
 800111c:	2100      	movs	r1, #0
 800111e:	2005      	movs	r0, #5
 8001120:	f7ff ff6e 	bl	8001000 <max30102_Reg_Write>
	max30102_Reg_Write(REG_FIFO_RD_PTR,0x00);  	//FIFO_RD_PTR[4:0]
 8001124:	2100      	movs	r1, #0
 8001126:	2006      	movs	r0, #6
 8001128:	f7ff ff6a 	bl	8001000 <max30102_Reg_Write>
	max30102_Reg_Write(REG_FIFO_CONFIG,0x0f);  	//sample avg = 1, fifo rollover=false, fifo almost full = 17
 800112c:	210f      	movs	r1, #15
 800112e:	2008      	movs	r0, #8
 8001130:	f7ff ff66 	bl	8001000 <max30102_Reg_Write>
	max30102_Reg_Write(REG_MODE_CONFIG,0x03);  	//0x02 for Red only, 0x03 for SpO2 mode 0x07 multimode LED
 8001134:	2103      	movs	r1, #3
 8001136:	2009      	movs	r0, #9
 8001138:	f7ff ff62 	bl	8001000 <max30102_Reg_Write>
	max30102_Reg_Write(REG_SPO2_CONFIG,0x27);  	// SPO2_ADC range = 4096nA, SPO2 sample rate (100 Hz), LED pulseWidth (400uS)
 800113c:	2127      	movs	r1, #39	@ 0x27
 800113e:	200a      	movs	r0, #10
 8001140:	f7ff ff5e 	bl	8001000 <max30102_Reg_Write>
	max30102_Reg_Write(REG_LED1_PA,0x24);   	//Choose value for ~ 7mA for LED1
 8001144:	2124      	movs	r1, #36	@ 0x24
 8001146:	200c      	movs	r0, #12
 8001148:	f7ff ff5a 	bl	8001000 <max30102_Reg_Write>
	max30102_Reg_Write(REG_LED2_PA,0x24);   	// Choose value for ~ 7mA for LED2
 800114c:	2124      	movs	r1, #36	@ 0x24
 800114e:	200d      	movs	r0, #13
 8001150:	f7ff ff56 	bl	8001000 <max30102_Reg_Write>
	max30102_Reg_Write(REG_PILOT_PA,0x7f);   	// Choose value for ~ 25mA for Pilot LED
 8001154:	217f      	movs	r1, #127	@ 0x7f
 8001156:	2010      	movs	r0, #16
 8001158:	f7ff ff52 	bl	8001000 <max30102_Reg_Write>
}
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}

08001160 <max30102_Safety>:

void max30102_Safety(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af04      	add	r7, sp, #16
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7)>0);
 8001166:	bf00      	nop
 8001168:	2180      	movs	r1, #128	@ 0x80
 800116a:	4817      	ldr	r0, [pc, #92]	@ (80011c8 <max30102_Safety+0x68>)
 800116c:	f003 ffc0 	bl	80050f0 <HAL_GPIO_ReadPin>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d1f8      	bne.n	8001168 <max30102_Safety+0x8>
	int i=0;
 8001176:	2300      	movs	r3, #0
 8001178:	607b      	str	r3, [r7, #4]
	for(i=0;i<500;i++)
 800117a:	2300      	movs	r3, #0
 800117c:	607b      	str	r3, [r7, #4]
 800117e:	e00e      	b.n	800119e <max30102_Safety+0x3e>
	  {
		  max30102_FIFO_ReadBytes((ir_buffer+i),(red_buffer+i));
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	4a11      	ldr	r2, [pc, #68]	@ (80011cc <max30102_Safety+0x6c>)
 8001186:	441a      	add	r2, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	4910      	ldr	r1, [pc, #64]	@ (80011d0 <max30102_Safety+0x70>)
 800118e:	440b      	add	r3, r1
 8001190:	4619      	mov	r1, r3
 8001192:	4610      	mov	r0, r2
 8001194:	f7ff ff78 	bl	8001088 <max30102_FIFO_ReadBytes>
	for(i=0;i<500;i++)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	3301      	adds	r3, #1
 800119c:	607b      	str	r3, [r7, #4]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80011a4:	dbec      	blt.n	8001180 <max30102_Safety+0x20>

	  }
	  maxim_heart_rate_and_oxygen_saturation(ir_buffer, buffer_length, red_buffer, &n_sp02, &ch_spo2_valid, &n_heart_rate, &ch_hr_valid);
 80011a6:	4b0b      	ldr	r3, [pc, #44]	@ (80011d4 <max30102_Safety+0x74>)
 80011a8:	6819      	ldr	r1, [r3, #0]
 80011aa:	4b0b      	ldr	r3, [pc, #44]	@ (80011d8 <max30102_Safety+0x78>)
 80011ac:	9302      	str	r3, [sp, #8]
 80011ae:	4b0b      	ldr	r3, [pc, #44]	@ (80011dc <max30102_Safety+0x7c>)
 80011b0:	9301      	str	r3, [sp, #4]
 80011b2:	4b0b      	ldr	r3, [pc, #44]	@ (80011e0 <max30102_Safety+0x80>)
 80011b4:	9300      	str	r3, [sp, #0]
 80011b6:	4b0b      	ldr	r3, [pc, #44]	@ (80011e4 <max30102_Safety+0x84>)
 80011b8:	4a05      	ldr	r2, [pc, #20]	@ (80011d0 <max30102_Safety+0x70>)
 80011ba:	4804      	ldr	r0, [pc, #16]	@ (80011cc <max30102_Safety+0x6c>)
 80011bc:	f000 f8f2 	bl	80013a4 <maxim_heart_rate_and_oxygen_saturation>
}
 80011c0:	bf00      	nop
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	48000400 	.word	0x48000400
 80011cc:	20000264 	.word	0x20000264
 80011d0:	20000a34 	.word	0x20000a34
 80011d4:	20000008 	.word	0x20000008
 80011d8:	20001210 	.word	0x20001210
 80011dc:	2000120c 	.word	0x2000120c
 80011e0:	20001208 	.word	0x20001208
 80011e4:	20001204 	.word	0x20001204

080011e8 <max30102_Calculate_HR_BO_Value>:

void max30102_Calculate_HR_BO_Value(int32_t* HR_Value,int8_t* HR_Valid,int32_t* BO_Value,int8_t* BO_Valid)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08e      	sub	sp, #56	@ 0x38
 80011ec:	af04      	add	r7, sp, #16
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	607a      	str	r2, [r7, #4]
 80011f4:	603b      	str	r3, [r7, #0]
	int i;
	int32_t prev_data;

	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7)>0);
 80011f6:	bf00      	nop
 80011f8:	2180      	movs	r1, #128	@ 0x80
 80011fa:	4860      	ldr	r0, [pc, #384]	@ (800137c <max30102_Calculate_HR_BO_Value+0x194>)
 80011fc:	f003 ff78 	bl	80050f0 <HAL_GPIO_ReadPin>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d1f8      	bne.n	80011f8 <max30102_Calculate_HR_BO_Value+0x10>
	uint32_t min=0x3FFFF;
 8001206:	4b5e      	ldr	r3, [pc, #376]	@ (8001380 <max30102_Calculate_HR_BO_Value+0x198>)
 8001208:	623b      	str	r3, [r7, #32]
	uint32_t max=0;
 800120a:	2300      	movs	r3, #0
 800120c:	61fb      	str	r3, [r7, #28]
	for(i=0;i<500;i++)
 800120e:	2300      	movs	r3, #0
 8001210:	627b      	str	r3, [r7, #36]	@ 0x24
 8001212:	e026      	b.n	8001262 <max30102_Calculate_HR_BO_Value+0x7a>
		{
			max30102_FIFO_ReadBytes((ir_buffer+i),(red_buffer+i));
 8001214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	4a5a      	ldr	r2, [pc, #360]	@ (8001384 <max30102_Calculate_HR_BO_Value+0x19c>)
 800121a:	441a      	add	r2, r3
 800121c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	4959      	ldr	r1, [pc, #356]	@ (8001388 <max30102_Calculate_HR_BO_Value+0x1a0>)
 8001222:	440b      	add	r3, r1
 8001224:	4619      	mov	r1, r3
 8001226:	4610      	mov	r0, r2
 8001228:	f7ff ff2e 	bl	8001088 <max30102_FIFO_ReadBytes>
			if(min>red_buffer[i])
 800122c:	4a56      	ldr	r2, [pc, #344]	@ (8001388 <max30102_Calculate_HR_BO_Value+0x1a0>)
 800122e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001234:	6a3a      	ldr	r2, [r7, #32]
 8001236:	429a      	cmp	r2, r3
 8001238:	d904      	bls.n	8001244 <max30102_Calculate_HR_BO_Value+0x5c>
				{
				  min=red_buffer[i];
 800123a:	4a53      	ldr	r2, [pc, #332]	@ (8001388 <max30102_Calculate_HR_BO_Value+0x1a0>)
 800123c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800123e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001242:	623b      	str	r3, [r7, #32]
				};
			if(max<red_buffer[i])
 8001244:	4a50      	ldr	r2, [pc, #320]	@ (8001388 <max30102_Calculate_HR_BO_Value+0x1a0>)
 8001246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800124c:	69fa      	ldr	r2, [r7, #28]
 800124e:	429a      	cmp	r2, r3
 8001250:	d204      	bcs.n	800125c <max30102_Calculate_HR_BO_Value+0x74>
			  	{
				  max=red_buffer[i];
 8001252:	4a4d      	ldr	r2, [pc, #308]	@ (8001388 <max30102_Calculate_HR_BO_Value+0x1a0>)
 8001254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800125a:	61fb      	str	r3, [r7, #28]
	for(i=0;i<500;i++)
 800125c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800125e:	3301      	adds	r3, #1
 8001260:	627b      	str	r3, [r7, #36]	@ 0x24
 8001262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001264:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001268:	dbd4      	blt.n	8001214 <max30102_Calculate_HR_BO_Value+0x2c>
			  	};
		 }


	for(i=400;i<500;i++)
 800126a:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800126e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001270:	e05c      	b.n	800132c <max30102_Calculate_HR_BO_Value+0x144>
		{
			max30102_FIFO_ReadBytes((ir_buffer+i),(red_buffer+i));
 8001272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	4a43      	ldr	r2, [pc, #268]	@ (8001384 <max30102_Calculate_HR_BO_Value+0x19c>)
 8001278:	441a      	add	r2, r3
 800127a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	4942      	ldr	r1, [pc, #264]	@ (8001388 <max30102_Calculate_HR_BO_Value+0x1a0>)
 8001280:	440b      	add	r3, r1
 8001282:	4619      	mov	r1, r3
 8001284:	4610      	mov	r0, r2
 8001286:	f7ff feff 	bl	8001088 <max30102_FIFO_ReadBytes>
			prev_data=red_buffer[i-1];
 800128a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800128c:	3b01      	subs	r3, #1
 800128e:	4a3e      	ldr	r2, [pc, #248]	@ (8001388 <max30102_Calculate_HR_BO_Value+0x1a0>)
 8001290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001294:	617b      	str	r3, [r7, #20]
			int32_t f_temp=red_buffer[i]-prev_data;
 8001296:	4a3c      	ldr	r2, [pc, #240]	@ (8001388 <max30102_Calculate_HR_BO_Value+0x1a0>)
 8001298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800129a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	61bb      	str	r3, [r7, #24]
			if(f_temp>0)
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	dd13      	ble.n	80012d2 <max30102_Calculate_HR_BO_Value+0xea>
			  {
				if(max==min)
 80012aa:	69fa      	ldr	r2, [r7, #28]
 80012ac:	6a3b      	ldr	r3, [r7, #32]
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d102      	bne.n	80012b8 <max30102_Calculate_HR_BO_Value+0xd0>
				{
					f_temp=0;
 80012b2:	2300      	movs	r3, #0
 80012b4:	61bb      	str	r3, [r7, #24]
 80012b6:	e01f      	b.n	80012f8 <max30102_Calculate_HR_BO_Value+0x110>
				}
				else
				{
					f_temp/=max-min;
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	69f9      	ldr	r1, [r7, #28]
 80012bc:	6a3b      	ldr	r3, [r7, #32]
 80012be:	1acb      	subs	r3, r1, r3
 80012c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80012c4:	61bb      	str	r3, [r7, #24]
					f_temp*=MAX_BRIGHTNESS;
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	4613      	mov	r3, r2
 80012ca:	021b      	lsls	r3, r3, #8
 80012cc:	1a9b      	subs	r3, r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
 80012d0:	e012      	b.n	80012f8 <max30102_Calculate_HR_BO_Value+0x110>
				}
			  }
			else
			  {
				if(max==min)
 80012d2:	69fa      	ldr	r2, [r7, #28]
 80012d4:	6a3b      	ldr	r3, [r7, #32]
 80012d6:	429a      	cmp	r2, r3
 80012d8:	d102      	bne.n	80012e0 <max30102_Calculate_HR_BO_Value+0xf8>
					{
						f_temp=0;
 80012da:	2300      	movs	r3, #0
 80012dc:	61bb      	str	r3, [r7, #24]
 80012de:	e00b      	b.n	80012f8 <max30102_Calculate_HR_BO_Value+0x110>
					}
				else{
					f_temp/=min-max;
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	6a39      	ldr	r1, [r7, #32]
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	1acb      	subs	r3, r1, r3
 80012e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ec:	61bb      	str	r3, [r7, #24]
					f_temp*=MAX_BRIGHTNESS;
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	4613      	mov	r3, r2
 80012f2:	021b      	lsls	r3, r3, #8
 80012f4:	1a9b      	subs	r3, r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]

				    }

			  }
			 n_brightness=f_temp;
 80012f8:	4a24      	ldr	r2, [pc, #144]	@ (800138c <max30102_Calculate_HR_BO_Value+0x1a4>)
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	6013      	str	r3, [r2, #0]
			 if(n_brightness<0)
 80012fe:	4b23      	ldr	r3, [pc, #140]	@ (800138c <max30102_Calculate_HR_BO_Value+0x1a4>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	2b00      	cmp	r3, #0
 8001304:	da02      	bge.n	800130c <max30102_Calculate_HR_BO_Value+0x124>
				  {
					 n_brightness=0;
 8001306:	4b21      	ldr	r3, [pc, #132]	@ (800138c <max30102_Calculate_HR_BO_Value+0x1a4>)
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
				  }
			 if(n_brightness>MAX_BRIGHTNESS)
 800130c:	4b1f      	ldr	r3, [pc, #124]	@ (800138c <max30102_Calculate_HR_BO_Value+0x1a4>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2bff      	cmp	r3, #255	@ 0xff
 8001312:	dd02      	ble.n	800131a <max30102_Calculate_HR_BO_Value+0x132>
				  {
					 n_brightness=MAX_BRIGHTNESS;
 8001314:	4b1d      	ldr	r3, [pc, #116]	@ (800138c <max30102_Calculate_HR_BO_Value+0x1a4>)
 8001316:	22ff      	movs	r2, #255	@ 0xff
 8001318:	601a      	str	r2, [r3, #0]
				  }
			 adjust_Current(n_brightness);
 800131a:	4b1c      	ldr	r3, [pc, #112]	@ (800138c <max30102_Calculate_HR_BO_Value+0x1a4>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	b2db      	uxtb	r3, r3
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff fe37 	bl	8000f94 <adjust_Current>
	for(i=400;i<500;i++)
 8001326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001328:	3301      	adds	r3, #1
 800132a:	627b      	str	r3, [r7, #36]	@ 0x24
 800132c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800132e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001332:	db9e      	blt.n	8001272 <max30102_Calculate_HR_BO_Value+0x8a>
		  }
		  maxim_heart_rate_and_oxygen_saturation(ir_buffer, buffer_length, red_buffer, &n_sp02, &ch_spo2_valid, &n_heart_rate, &ch_hr_valid);
 8001334:	4b16      	ldr	r3, [pc, #88]	@ (8001390 <max30102_Calculate_HR_BO_Value+0x1a8>)
 8001336:	6819      	ldr	r1, [r3, #0]
 8001338:	4b16      	ldr	r3, [pc, #88]	@ (8001394 <max30102_Calculate_HR_BO_Value+0x1ac>)
 800133a:	9302      	str	r3, [sp, #8]
 800133c:	4b16      	ldr	r3, [pc, #88]	@ (8001398 <max30102_Calculate_HR_BO_Value+0x1b0>)
 800133e:	9301      	str	r3, [sp, #4]
 8001340:	4b16      	ldr	r3, [pc, #88]	@ (800139c <max30102_Calculate_HR_BO_Value+0x1b4>)
 8001342:	9300      	str	r3, [sp, #0]
 8001344:	4b16      	ldr	r3, [pc, #88]	@ (80013a0 <max30102_Calculate_HR_BO_Value+0x1b8>)
 8001346:	4a10      	ldr	r2, [pc, #64]	@ (8001388 <max30102_Calculate_HR_BO_Value+0x1a0>)
 8001348:	480e      	ldr	r0, [pc, #56]	@ (8001384 <max30102_Calculate_HR_BO_Value+0x19c>)
 800134a:	f000 f82b 	bl	80013a4 <maxim_heart_rate_and_oxygen_saturation>
		  *HR_Value=n_heart_rate;
 800134e:	4b12      	ldr	r3, [pc, #72]	@ (8001398 <max30102_Calculate_HR_BO_Value+0x1b0>)
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	601a      	str	r2, [r3, #0]
		  *HR_Valid=ch_hr_valid;
 8001356:	4b0f      	ldr	r3, [pc, #60]	@ (8001394 <max30102_Calculate_HR_BO_Value+0x1ac>)
 8001358:	f993 2000 	ldrsb.w	r2, [r3]
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	701a      	strb	r2, [r3, #0]
		  *BO_Value=n_sp02;
 8001360:	4b0f      	ldr	r3, [pc, #60]	@ (80013a0 <max30102_Calculate_HR_BO_Value+0x1b8>)
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	601a      	str	r2, [r3, #0]
		  *BO_Valid=ch_spo2_valid;
 8001368:	4b0c      	ldr	r3, [pc, #48]	@ (800139c <max30102_Calculate_HR_BO_Value+0x1b4>)
 800136a:	f993 2000 	ldrsb.w	r2, [r3]
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	701a      	strb	r2, [r3, #0]

}
 8001372:	bf00      	nop
 8001374:	3728      	adds	r7, #40	@ 0x28
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	48000400 	.word	0x48000400
 8001380:	0003ffff 	.word	0x0003ffff
 8001384:	20000264 	.word	0x20000264
 8001388:	20000a34 	.word	0x20000a34
 800138c:	20001214 	.word	0x20001214
 8001390:	20000008 	.word	0x20000008
 8001394:	20001210 	.word	0x20001210
 8001398:	2000120c 	.word	0x2000120c
 800139c:	20001208 	.word	0x20001208
 80013a0:	20001204 	.word	0x20001204

080013a4 <maxim_heart_rate_and_oxygen_saturation>:
* \param[out]    *pn_heart_rate          - Calculated heart rate value
* \param[out]    *pch_hr_valid           - 1 if the calculated heart rate value is valid
*
* \retval       None
*/
{
 80013a4:	b590      	push	{r4, r7, lr}
 80013a6:	b0d3      	sub	sp, #332	@ 0x14c
 80013a8:	af04      	add	r7, sp, #16
 80013aa:	f507 749c 	add.w	r4, r7, #312	@ 0x138
 80013ae:	f5a4 7496 	sub.w	r4, r4, #300	@ 0x12c
 80013b2:	6020      	str	r0, [r4, #0]
 80013b4:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 80013b8:	f5a0 7098 	sub.w	r0, r0, #304	@ 0x130
 80013bc:	6001      	str	r1, [r0, #0]
 80013be:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 80013c2:	f5a1 719a 	sub.w	r1, r1, #308	@ 0x134
 80013c6:	600a      	str	r2, [r1, #0]
 80013c8:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80013cc:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 80013d0:	6013      	str	r3, [r2, #0]
    int32_t n_y_dc_max, n_x_dc_max;
    int32_t n_y_dc_max_idx, n_x_dc_max_idx;
    int32_t an_ratio[5],n_ratio_average;
    int32_t n_nume,  n_denom ;
    // remove DC of ir signal
    un_ir_mean =0;
 80013d2:	2300      	movs	r3, #0
 80013d4:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    for (k=0 ; k<n_ir_buffer_length ; k++ ) un_ir_mean += pun_ir_buffer[k] ;
 80013d8:	2300      	movs	r3, #0
 80013da:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80013de:	e013      	b.n	8001408 <maxim_heart_rate_and_oxygen_saturation+0x64>
 80013e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80013ea:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 80013ee:	6812      	ldr	r2, [r2, #0]
 80013f0:	4413      	add	r3, r2
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 80013f8:	4413      	add	r3, r2
 80013fa:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80013fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001402:	3301      	adds	r3, #1
 8001404:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8001408:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800140c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001410:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	429a      	cmp	r2, r3
 8001418:	dbe2      	blt.n	80013e0 <maxim_heart_rate_and_oxygen_saturation+0x3c>
    un_ir_mean =un_ir_mean/n_ir_buffer_length ;
 800141a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800141e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8001428:	fbb2 f3f3 	udiv	r3, r2, r3
 800142c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    for (k=0 ; k<n_ir_buffer_length ; k++ )  an_x[k] =  pun_ir_buffer[k] - un_ir_mean ;
 8001430:	2300      	movs	r3, #0
 8001432:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8001436:	e017      	b.n	8001468 <maxim_heart_rate_and_oxygen_saturation+0xc4>
 8001438:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8001442:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8001446:	6812      	ldr	r2, [r2, #0]
 8001448:	4413      	add	r3, r2
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	4619      	mov	r1, r3
 8001454:	4ad5      	ldr	r2, [pc, #852]	@ (80017ac <maxim_heart_rate_and_oxygen_saturation+0x408>)
 8001456:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800145a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800145e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001462:	3301      	adds	r3, #1
 8001464:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8001468:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800146c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001470:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	429a      	cmp	r2, r3
 8001478:	dbde      	blt.n	8001438 <maxim_heart_rate_and_oxygen_saturation+0x94>

    // 4 pt Moving Average
    for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
 800147a:	2300      	movs	r3, #0
 800147c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8001480:	e02c      	b.n	80014dc <maxim_heart_rate_and_oxygen_saturation+0x138>
        n_denom= ( an_x[k]+an_x[k+1]+ an_x[k+2]+ an_x[k+3]);
 8001482:	4aca      	ldr	r2, [pc, #808]	@ (80017ac <maxim_heart_rate_and_oxygen_saturation+0x408>)
 8001484:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001488:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800148c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001490:	3301      	adds	r3, #1
 8001492:	49c6      	ldr	r1, [pc, #792]	@ (80017ac <maxim_heart_rate_and_oxygen_saturation+0x408>)
 8001494:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001498:	441a      	add	r2, r3
 800149a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800149e:	3302      	adds	r3, #2
 80014a0:	49c2      	ldr	r1, [pc, #776]	@ (80017ac <maxim_heart_rate_and_oxygen_saturation+0x408>)
 80014a2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80014a6:	441a      	add	r2, r3
 80014a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80014ac:	3303      	adds	r3, #3
 80014ae:	49bf      	ldr	r1, [pc, #764]	@ (80017ac <maxim_heart_rate_and_oxygen_saturation+0x408>)
 80014b0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80014b4:	4413      	add	r3, r2
 80014b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        an_x[k]=  n_denom/(int32_t)4;
 80014ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80014be:	2b00      	cmp	r3, #0
 80014c0:	da00      	bge.n	80014c4 <maxim_heart_rate_and_oxygen_saturation+0x120>
 80014c2:	3303      	adds	r3, #3
 80014c4:	109b      	asrs	r3, r3, #2
 80014c6:	4619      	mov	r1, r3
 80014c8:	4ab8      	ldr	r2, [pc, #736]	@ (80017ac <maxim_heart_rate_and_oxygen_saturation+0x408>)
 80014ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80014ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
 80014d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80014d6:	3301      	adds	r3, #1
 80014d8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80014dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80014e0:	f5b3 7ff8 	cmp.w	r3, #496	@ 0x1f0
 80014e4:	dbcd      	blt.n	8001482 <maxim_heart_rate_and_oxygen_saturation+0xde>
    }

    // get difference of smoothed IR signal

    for( k=0; k<BUFFER_SIZE-MA4_SIZE-1;  k++)
 80014e6:	2300      	movs	r3, #0
 80014e8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80014ec:	e015      	b.n	800151a <maxim_heart_rate_and_oxygen_saturation+0x176>
        an_dx[k]= (an_x[k+1]- an_x[k]);
 80014ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80014f2:	3301      	adds	r3, #1
 80014f4:	4aad      	ldr	r2, [pc, #692]	@ (80017ac <maxim_heart_rate_and_oxygen_saturation+0x408>)
 80014f6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80014fa:	49ac      	ldr	r1, [pc, #688]	@ (80017ac <maxim_heart_rate_and_oxygen_saturation+0x408>)
 80014fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001500:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001504:	1ad2      	subs	r2, r2, r3
 8001506:	49aa      	ldr	r1, [pc, #680]	@ (80017b0 <maxim_heart_rate_and_oxygen_saturation+0x40c>)
 8001508:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800150c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for( k=0; k<BUFFER_SIZE-MA4_SIZE-1;  k++)
 8001510:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001514:	3301      	adds	r3, #1
 8001516:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800151a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800151e:	f5b3 7ff7 	cmp.w	r3, #494	@ 0x1ee
 8001522:	dde4      	ble.n	80014ee <maxim_heart_rate_and_oxygen_saturation+0x14a>

    // 2-pt Moving Average to an_dx
    for(k=0; k< BUFFER_SIZE-MA4_SIZE-2; k++){
 8001524:	2300      	movs	r3, #0
 8001526:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800152a:	e019      	b.n	8001560 <maxim_heart_rate_and_oxygen_saturation+0x1bc>
        an_dx[k] =  ( an_dx[k]+an_dx[k+1])/2 ;
 800152c:	4aa0      	ldr	r2, [pc, #640]	@ (80017b0 <maxim_heart_rate_and_oxygen_saturation+0x40c>)
 800152e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001532:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001536:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800153a:	3301      	adds	r3, #1
 800153c:	499c      	ldr	r1, [pc, #624]	@ (80017b0 <maxim_heart_rate_and_oxygen_saturation+0x40c>)
 800153e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001542:	4413      	add	r3, r2
 8001544:	0fda      	lsrs	r2, r3, #31
 8001546:	4413      	add	r3, r2
 8001548:	105b      	asrs	r3, r3, #1
 800154a:	4619      	mov	r1, r3
 800154c:	4a98      	ldr	r2, [pc, #608]	@ (80017b0 <maxim_heart_rate_and_oxygen_saturation+0x40c>)
 800154e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001552:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(k=0; k< BUFFER_SIZE-MA4_SIZE-2; k++){
 8001556:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800155a:	3301      	adds	r3, #1
 800155c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8001560:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001564:	f5b3 7ff7 	cmp.w	r3, #494	@ 0x1ee
 8001568:	dbe0      	blt.n	800152c <maxim_heart_rate_and_oxygen_saturation+0x188>
    }

    // hamming window
    // flip wave form so that we can detect valley with peak detector
    for ( i=0 ; i<BUFFER_SIZE-HAMMING_SIZE-MA4_SIZE-2 ;i++){
 800156a:	2300      	movs	r3, #0
 800156c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001570:	e039      	b.n	80015e6 <maxim_heart_rate_and_oxygen_saturation+0x242>
        s= 0;
 8001572:	2300      	movs	r3, #0
 8001574:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
        for( k=i; k<i+ HAMMING_SIZE ;k++){
 8001578:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800157c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8001580:	e018      	b.n	80015b4 <maxim_heart_rate_and_oxygen_saturation+0x210>
            s -= an_dx[k] *auw_hamm[k-i] ;
 8001582:	4a8b      	ldr	r2, [pc, #556]	@ (80017b0 <maxim_heart_rate_and_oxygen_saturation+0x40c>)
 8001584:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001588:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800158c:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 8001590:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001594:	1a8a      	subs	r2, r1, r2
 8001596:	4987      	ldr	r1, [pc, #540]	@ (80017b4 <maxim_heart_rate_and_oxygen_saturation+0x410>)
 8001598:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800159c:	fb02 f303 	mul.w	r3, r2, r3
 80015a0:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
        for( k=i; k<i+ HAMMING_SIZE ;k++){
 80015aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80015ae:	3301      	adds	r3, #1
 80015b0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80015b4:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80015b8:	3304      	adds	r3, #4
 80015ba:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80015be:	429a      	cmp	r2, r3
 80015c0:	dddf      	ble.n	8001582 <maxim_heart_rate_and_oxygen_saturation+0x1de>
                     }
        an_dx[i]= s/ (int32_t)1146; // divide by sum of auw_hamm
 80015c2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80015c6:	4a7c      	ldr	r2, [pc, #496]	@ (80017b8 <maxim_heart_rate_and_oxygen_saturation+0x414>)
 80015c8:	fb82 1203 	smull	r1, r2, r2, r3
 80015cc:	1252      	asrs	r2, r2, #9
 80015ce:	17db      	asrs	r3, r3, #31
 80015d0:	1ad2      	subs	r2, r2, r3
 80015d2:	4977      	ldr	r1, [pc, #476]	@ (80017b0 <maxim_heart_rate_and_oxygen_saturation+0x40c>)
 80015d4:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80015d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for ( i=0 ; i<BUFFER_SIZE-HAMMING_SIZE-MA4_SIZE-2 ;i++){
 80015dc:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80015e0:	3301      	adds	r3, #1
 80015e2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80015e6:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80015ea:	f5b3 7ff4 	cmp.w	r3, #488	@ 0x1e8
 80015ee:	ddc0      	ble.n	8001572 <maxim_heart_rate_and_oxygen_saturation+0x1ce>
    }


    n_th1=0; // threshold calculation
 80015f0:	2300      	movs	r3, #0
 80015f2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    for ( k=0 ; k<BUFFER_SIZE-HAMMING_SIZE ;k++){
 80015f6:	2300      	movs	r3, #0
 80015f8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80015fc:	e011      	b.n	8001622 <maxim_heart_rate_and_oxygen_saturation+0x27e>
        n_th1 += ((an_dx[k]>0)? an_dx[k] : ((int32_t)0-an_dx[k])) ;
 80015fe:	4a6c      	ldr	r2, [pc, #432]	@ (80017b0 <maxim_heart_rate_and_oxygen_saturation+0x40c>)
 8001600:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001608:	2b00      	cmp	r3, #0
 800160a:	bfb8      	it	lt
 800160c:	425b      	neglt	r3, r3
 800160e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001612:	4413      	add	r3, r2
 8001614:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    for ( k=0 ; k<BUFFER_SIZE-HAMMING_SIZE ;k++){
 8001618:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800161c:	3301      	adds	r3, #1
 800161e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8001622:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001626:	f5b3 7ff7 	cmp.w	r3, #494	@ 0x1ee
 800162a:	dde8      	ble.n	80015fe <maxim_heart_rate_and_oxygen_saturation+0x25a>
    }
    n_th1= n_th1/ ( BUFFER_SIZE-HAMMING_SIZE);
 800162c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001630:	4a62      	ldr	r2, [pc, #392]	@ (80017bc <maxim_heart_rate_and_oxygen_saturation+0x418>)
 8001632:	fb82 1203 	smull	r1, r2, r2, r3
 8001636:	1192      	asrs	r2, r2, #6
 8001638:	17db      	asrs	r3, r3, #31
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    // peak location is acutally index for sharpest location of raw signal since we flipped the signal
    maxim_find_peaks( an_dx_peak_locs, &n_npks, an_dx, BUFFER_SIZE-HAMMING_SIZE, n_th1, 8, 5 );//peak_height, peak_distance, max_num_peaks
 8001640:	f107 01dc 	add.w	r1, r7, #220	@ 0xdc
 8001644:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8001648:	2305      	movs	r3, #5
 800164a:	9302      	str	r3, [sp, #8]
 800164c:	2308      	movs	r3, #8
 800164e:	9301      	str	r3, [sp, #4]
 8001650:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001654:	9300      	str	r3, [sp, #0]
 8001656:	f240 13ef 	movw	r3, #495	@ 0x1ef
 800165a:	4a55      	ldr	r2, [pc, #340]	@ (80017b0 <maxim_heart_rate_and_oxygen_saturation+0x40c>)
 800165c:	f000 fb7c 	bl	8001d58 <maxim_find_peaks>

    n_peak_interval_sum =0;
 8001660:	2300      	movs	r3, #0
 8001662:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    if (n_npks>=2){
 8001666:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800166a:	2b01      	cmp	r3, #1
 800166c:	dd3c      	ble.n	80016e8 <maxim_heart_rate_and_oxygen_saturation+0x344>
        for (k=1; k<n_npks; k++)
 800166e:	2301      	movs	r3, #1
 8001670:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8001674:	e01b      	b.n	80016ae <maxim_heart_rate_and_oxygen_saturation+0x30a>
            n_peak_interval_sum += (an_dx_peak_locs[k]-an_dx_peak_locs[k -1]);
 8001676:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800167a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800167e:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001682:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001686:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800168a:	1e59      	subs	r1, r3, #1
 800168c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001690:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001694:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 800169e:	4413      	add	r3, r2
 80016a0:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
        for (k=1; k<n_npks; k++)
 80016a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80016a8:	3301      	adds	r3, #1
 80016aa:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80016ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80016b2:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80016b6:	429a      	cmp	r2, r3
 80016b8:	dbdd      	blt.n	8001676 <maxim_heart_rate_and_oxygen_saturation+0x2d2>
        n_peak_interval_sum=n_peak_interval_sum/(n_npks-1);
 80016ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80016be:	3b01      	subs	r3, #1
 80016c0:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 80016c4:	fb92 f3f3 	sdiv	r3, r2, r3
 80016c8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
        *pn_heart_rate=(int32_t)(6000/n_peak_interval_sum);// beats per minutes
 80016cc:	f241 7270 	movw	r2, #6000	@ 0x1770
 80016d0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80016d4:	fb92 f2f3 	sdiv	r2, r2, r3
 80016d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80016dc:	601a      	str	r2, [r3, #0]
        *pch_hr_valid  = 1;
 80016de:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80016e2:	2201      	movs	r2, #1
 80016e4:	701a      	strb	r2, [r3, #0]
 80016e6:	e007      	b.n	80016f8 <maxim_heart_rate_and_oxygen_saturation+0x354>
    }
    else  {
        *pn_heart_rate = -999;
 80016e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80016ec:	4a34      	ldr	r2, [pc, #208]	@ (80017c0 <maxim_heart_rate_and_oxygen_saturation+0x41c>)
 80016ee:	601a      	str	r2, [r3, #0]
        *pch_hr_valid  = 0;
 80016f0:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80016f4:	2200      	movs	r2, #0
 80016f6:	701a      	strb	r2, [r3, #0]
    }

    for ( k=0 ; k<n_npks ;k++)
 80016f8:	2300      	movs	r3, #0
 80016fa:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80016fe:	e015      	b.n	800172c <maxim_heart_rate_and_oxygen_saturation+0x388>
        an_ir_valley_locs[k]=an_dx_peak_locs[k]+HAMMING_SIZE/2;
 8001700:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001704:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001708:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800170c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001710:	1c9a      	adds	r2, r3, #2
 8001712:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 800171c:	443b      	add	r3, r7
 800171e:	f843 2c98 	str.w	r2, [r3, #-152]
    for ( k=0 ; k<n_npks ;k++)
 8001722:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001726:	3301      	adds	r3, #1
 8001728:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800172c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001730:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001734:	429a      	cmp	r2, r3
 8001736:	dbe3      	blt.n	8001700 <maxim_heart_rate_and_oxygen_saturation+0x35c>


    // raw value : RED(=y) and IR(=X)
    // we need to assess DC and AC value of ir and red PPG.
    for (k=0 ; k<n_ir_buffer_length ; k++ )  {
 8001738:	2300      	movs	r3, #0
 800173a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800173e:	e024      	b.n	800178a <maxim_heart_rate_and_oxygen_saturation+0x3e6>
        an_x[k] =  pun_ir_buffer[k] ;
 8001740:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800174a:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800174e:	6812      	ldr	r2, [r2, #0]
 8001750:	4413      	add	r3, r2
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4619      	mov	r1, r3
 8001756:	4a15      	ldr	r2, [pc, #84]	@ (80017ac <maxim_heart_rate_and_oxygen_saturation+0x408>)
 8001758:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800175c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        an_y[k] =  pun_red_buffer[k] ;
 8001760:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800176a:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 800176e:	6812      	ldr	r2, [r2, #0]
 8001770:	4413      	add	r3, r2
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4619      	mov	r1, r3
 8001776:	4a13      	ldr	r2, [pc, #76]	@ (80017c4 <maxim_heart_rate_and_oxygen_saturation+0x420>)
 8001778:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800177c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (k=0 ; k<n_ir_buffer_length ; k++ )  {
 8001780:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001784:	3301      	adds	r3, #1
 8001786:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800178a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800178e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001792:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	429a      	cmp	r2, r3
 800179a:	dbd1      	blt.n	8001740 <maxim_heart_rate_and_oxygen_saturation+0x39c>
    }

    // find precise min near an_ir_valley_locs
    n_exact_ir_valley_locs_count =0;
 800179c:	2300      	movs	r3, #0
 800179e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    for(k=0 ; k<n_npks ;k++){
 80017a2:	2300      	movs	r3, #0
 80017a4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80017a8:	e069      	b.n	800187e <maxim_heart_rate_and_oxygen_saturation+0x4da>
 80017aa:	bf00      	nop
 80017ac:	200019d8 	.word	0x200019d8
 80017b0:	20001218 	.word	0x20001218
 80017b4:	08013ce0 	.word	0x08013ce0
 80017b8:	725f9bed 	.word	0x725f9bed
 80017bc:	21195767 	.word	0x21195767
 80017c0:	fffffc19 	.word	0xfffffc19
 80017c4:	200021a8 	.word	0x200021a8
        un_only_once =1;
 80017c8:	2301      	movs	r3, #1
 80017ca:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
        m=an_ir_valley_locs[k];
 80017ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 80017d8:	443b      	add	r3, r7
 80017da:	f853 3c98 	ldr.w	r3, [r3, #-152]
 80017de:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
        n_c_min= 16777216;//2^24;
 80017e2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80017e6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        if (m+5 <  BUFFER_SIZE-HAMMING_SIZE  && m-5 >0){
 80017ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80017ee:	f5b3 7ff5 	cmp.w	r3, #490	@ 0x1ea
 80017f2:	da3f      	bge.n	8001874 <maxim_heart_rate_and_oxygen_saturation+0x4d0>
 80017f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80017f8:	2b05      	cmp	r3, #5
 80017fa:	dd3b      	ble.n	8001874 <maxim_heart_rate_and_oxygen_saturation+0x4d0>
            for(i= m-5;i<m+5; i++)
 80017fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001800:	3b05      	subs	r3, #5
 8001802:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001806:	e025      	b.n	8001854 <maxim_heart_rate_and_oxygen_saturation+0x4b0>
                if (an_x[i]<n_c_min){
 8001808:	4a8a      	ldr	r2, [pc, #552]	@ (8001a34 <maxim_heart_rate_and_oxygen_saturation+0x690>)
 800180a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800180e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001812:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001816:	429a      	cmp	r2, r3
 8001818:	dd17      	ble.n	800184a <maxim_heart_rate_and_oxygen_saturation+0x4a6>
                    if (un_only_once >0){
 800181a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800181e:	2b00      	cmp	r3, #0
 8001820:	d002      	beq.n	8001828 <maxim_heart_rate_and_oxygen_saturation+0x484>
                       un_only_once =0;
 8001822:	2300      	movs	r3, #0
 8001824:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
                   }
                   n_c_min= an_x[i] ;
 8001828:	4a82      	ldr	r2, [pc, #520]	@ (8001a34 <maxim_heart_rate_and_oxygen_saturation+0x690>)
 800182a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800182e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001832:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
                   an_exact_ir_valley_locs[k]=i;
 8001836:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8001840:	443b      	add	r3, r7
 8001842:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001846:	f843 2cd4 	str.w	r2, [r3, #-212]
            for(i= m-5;i<m+5; i++)
 800184a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800184e:	3301      	adds	r3, #1
 8001850:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001854:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001858:	3304      	adds	r3, #4
 800185a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800185e:	429a      	cmp	r2, r3
 8001860:	ddd2      	ble.n	8001808 <maxim_heart_rate_and_oxygen_saturation+0x464>
                }
            if (un_only_once ==0)
 8001862:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001866:	2b00      	cmp	r3, #0
 8001868:	d104      	bne.n	8001874 <maxim_heart_rate_and_oxygen_saturation+0x4d0>
                n_exact_ir_valley_locs_count ++ ;
 800186a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800186e:	3301      	adds	r3, #1
 8001870:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    for(k=0 ; k<n_npks ;k++){
 8001874:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001878:	3301      	adds	r3, #1
 800187a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800187e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001882:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001886:	429a      	cmp	r2, r3
 8001888:	db9e      	blt.n	80017c8 <maxim_heart_rate_and_oxygen_saturation+0x424>
        }
    }
    if (n_exact_ir_valley_locs_count <2 ){
 800188a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800188e:	2b01      	cmp	r3, #1
 8001890:	dc0b      	bgt.n	80018aa <maxim_heart_rate_and_oxygen_saturation+0x506>
       *pn_spo2 =  -999 ; // do not use SPO2 since signal ratio is out of range
 8001892:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001896:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a66      	ldr	r2, [pc, #408]	@ (8001a38 <maxim_heart_rate_and_oxygen_saturation+0x694>)
 800189e:	601a      	str	r2, [r3, #0]
       *pch_spo2_valid  = 0;
 80018a0:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80018a4:	2200      	movs	r2, #0
 80018a6:	701a      	strb	r2, [r3, #0]
       return;
 80018a8:	e24a      	b.n	8001d40 <maxim_heart_rate_and_oxygen_saturation+0x99c>
    }
    // 4 pt MA
    for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
 80018aa:	2300      	movs	r3, #0
 80018ac:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80018b0:	e04c      	b.n	800194c <maxim_heart_rate_and_oxygen_saturation+0x5a8>
        an_x[k]=( an_x[k]+an_x[k+1]+ an_x[k+2]+ an_x[k+3])/(int32_t)4;
 80018b2:	4a60      	ldr	r2, [pc, #384]	@ (8001a34 <maxim_heart_rate_and_oxygen_saturation+0x690>)
 80018b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80018b8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80018bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80018c0:	3301      	adds	r3, #1
 80018c2:	495c      	ldr	r1, [pc, #368]	@ (8001a34 <maxim_heart_rate_and_oxygen_saturation+0x690>)
 80018c4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80018c8:	441a      	add	r2, r3
 80018ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80018ce:	3302      	adds	r3, #2
 80018d0:	4958      	ldr	r1, [pc, #352]	@ (8001a34 <maxim_heart_rate_and_oxygen_saturation+0x690>)
 80018d2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80018d6:	441a      	add	r2, r3
 80018d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80018dc:	3303      	adds	r3, #3
 80018de:	4955      	ldr	r1, [pc, #340]	@ (8001a34 <maxim_heart_rate_and_oxygen_saturation+0x690>)
 80018e0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80018e4:	4413      	add	r3, r2
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	da00      	bge.n	80018ec <maxim_heart_rate_and_oxygen_saturation+0x548>
 80018ea:	3303      	adds	r3, #3
 80018ec:	109b      	asrs	r3, r3, #2
 80018ee:	4619      	mov	r1, r3
 80018f0:	4a50      	ldr	r2, [pc, #320]	@ (8001a34 <maxim_heart_rate_and_oxygen_saturation+0x690>)
 80018f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80018f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        an_y[k]=( an_y[k]+an_y[k+1]+ an_y[k+2]+ an_y[k+3])/(int32_t)4;
 80018fa:	4a50      	ldr	r2, [pc, #320]	@ (8001a3c <maxim_heart_rate_and_oxygen_saturation+0x698>)
 80018fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001900:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001904:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001908:	3301      	adds	r3, #1
 800190a:	494c      	ldr	r1, [pc, #304]	@ (8001a3c <maxim_heart_rate_and_oxygen_saturation+0x698>)
 800190c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001910:	441a      	add	r2, r3
 8001912:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001916:	3302      	adds	r3, #2
 8001918:	4948      	ldr	r1, [pc, #288]	@ (8001a3c <maxim_heart_rate_and_oxygen_saturation+0x698>)
 800191a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800191e:	441a      	add	r2, r3
 8001920:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001924:	3303      	adds	r3, #3
 8001926:	4945      	ldr	r1, [pc, #276]	@ (8001a3c <maxim_heart_rate_and_oxygen_saturation+0x698>)
 8001928:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800192c:	4413      	add	r3, r2
 800192e:	2b00      	cmp	r3, #0
 8001930:	da00      	bge.n	8001934 <maxim_heart_rate_and_oxygen_saturation+0x590>
 8001932:	3303      	adds	r3, #3
 8001934:	109b      	asrs	r3, r3, #2
 8001936:	4619      	mov	r1, r3
 8001938:	4a40      	ldr	r2, [pc, #256]	@ (8001a3c <maxim_heart_rate_and_oxygen_saturation+0x698>)
 800193a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800193e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
 8001942:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001946:	3301      	adds	r3, #1
 8001948:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800194c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001950:	f5b3 7ff8 	cmp.w	r3, #496	@ 0x1f0
 8001954:	dbad      	blt.n	80018b2 <maxim_heart_rate_and_oxygen_saturation+0x50e>
    }

    //using an_exact_ir_valley_locs , find ir-red DC andir-red AC for SPO2 calibration ratio
    //finding AC/DC maximum of raw ir * red between two valley locations
    n_ratio_average =0;
 8001956:	2300      	movs	r3, #0
 8001958:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    n_i_ratio_count =0;
 800195c:	2300      	movs	r3, #0
 800195e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128

    for(k=0; k< 5; k++) an_ratio[k]=0;
 8001962:	2300      	movs	r3, #0
 8001964:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8001968:	e00d      	b.n	8001986 <maxim_heart_rate_and_oxygen_saturation+0x5e2>
 800196a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800196e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001972:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001976:	2100      	movs	r1, #0
 8001978:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800197c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001980:	3301      	adds	r3, #1
 8001982:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8001986:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800198a:	2b04      	cmp	r3, #4
 800198c:	dded      	ble.n	800196a <maxim_heart_rate_and_oxygen_saturation+0x5c6>
    for (k=0; k< n_exact_ir_valley_locs_count; k++){
 800198e:	2300      	movs	r3, #0
 8001990:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8001994:	e01b      	b.n	80019ce <maxim_heart_rate_and_oxygen_saturation+0x62a>
        if (an_exact_ir_valley_locs[k] > BUFFER_SIZE ){
 8001996:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 80019a0:	443b      	add	r3, r7
 80019a2:	f853 3cd4 	ldr.w	r3, [r3, #-212]
 80019a6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80019aa:	dd0b      	ble.n	80019c4 <maxim_heart_rate_and_oxygen_saturation+0x620>
            *pn_spo2 =  -999 ; // do not use SPO2 since valley loc is out of range
 80019ac:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80019b0:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a20      	ldr	r2, [pc, #128]	@ (8001a38 <maxim_heart_rate_and_oxygen_saturation+0x694>)
 80019b8:	601a      	str	r2, [r3, #0]
            *pch_spo2_valid  = 0;
 80019ba:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80019be:	2200      	movs	r2, #0
 80019c0:	701a      	strb	r2, [r3, #0]
            return;
 80019c2:	e1bd      	b.n	8001d40 <maxim_heart_rate_and_oxygen_saturation+0x99c>
    for (k=0; k< n_exact_ir_valley_locs_count; k++){
 80019c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80019c8:	3301      	adds	r3, #1
 80019ca:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80019ce:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80019d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80019d6:	429a      	cmp	r2, r3
 80019d8:	dbdd      	blt.n	8001996 <maxim_heart_rate_and_oxygen_saturation+0x5f2>
        }
    }
    // find max between two valley locations
    // and use ratio betwen AC compoent of Ir & Red and DC compoent of Ir & Red for SPO2

    for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
 80019da:	2300      	movs	r3, #0
 80019dc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80019e0:	e14b      	b.n	8001c7a <maxim_heart_rate_and_oxygen_saturation+0x8d6>
        n_y_dc_max= -16777216 ;
 80019e2:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 80019e6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        n_x_dc_max= - 16777216;
 80019ea:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 80019ee:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        if (an_exact_ir_valley_locs[k+1]-an_exact_ir_valley_locs[k] >10){
 80019f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80019f6:	3301      	adds	r3, #1
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 80019fe:	443b      	add	r3, r7
 8001a00:	f853 2cd4 	ldr.w	r2, [r3, #-212]
 8001a04:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8001a0e:	443b      	add	r3, r7
 8001a10:	f853 3cd4 	ldr.w	r3, [r3, #-212]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b0a      	cmp	r3, #10
 8001a18:	f340 812a 	ble.w	8001c70 <maxim_heart_rate_and_oxygen_saturation+0x8cc>
            for (i=an_exact_ir_valley_locs[k]; i< an_exact_ir_valley_locs[k+1]; i++){
 8001a1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8001a26:	443b      	add	r3, r7
 8001a28:	f853 3cd4 	ldr.w	r3, [r3, #-212]
 8001a2c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001a30:	e033      	b.n	8001a9a <maxim_heart_rate_and_oxygen_saturation+0x6f6>
 8001a32:	bf00      	nop
 8001a34:	200019d8 	.word	0x200019d8
 8001a38:	fffffc19 	.word	0xfffffc19
 8001a3c:	200021a8 	.word	0x200021a8
                if (an_x[i]> n_x_dc_max) {n_x_dc_max =an_x[i];n_x_dc_max_idx =i; }
 8001a40:	4ac1      	ldr	r2, [pc, #772]	@ (8001d48 <maxim_heart_rate_and_oxygen_saturation+0x9a4>)
 8001a42:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001a46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a4a:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	da0a      	bge.n	8001a68 <maxim_heart_rate_and_oxygen_saturation+0x6c4>
 8001a52:	4abd      	ldr	r2, [pc, #756]	@ (8001d48 <maxim_heart_rate_and_oxygen_saturation+0x9a4>)
 8001a54:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001a58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a5c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8001a60:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001a64:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
                if (an_y[i]> n_y_dc_max) {n_y_dc_max =an_y[i];n_y_dc_max_idx=i;}
 8001a68:	4ab8      	ldr	r2, [pc, #736]	@ (8001d4c <maxim_heart_rate_and_oxygen_saturation+0x9a8>)
 8001a6a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001a6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a72:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8001a76:	429a      	cmp	r2, r3
 8001a78:	da0a      	bge.n	8001a90 <maxim_heart_rate_and_oxygen_saturation+0x6ec>
 8001a7a:	4ab4      	ldr	r2, [pc, #720]	@ (8001d4c <maxim_heart_rate_and_oxygen_saturation+0x9a8>)
 8001a7c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001a80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a84:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8001a88:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001a8c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            for (i=an_exact_ir_valley_locs[k]; i< an_exact_ir_valley_locs[k+1]; i++){
 8001a90:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001a94:	3301      	adds	r3, #1
 8001a96:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001a9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8001aa6:	443b      	add	r3, r7
 8001aa8:	f853 3cd4 	ldr.w	r3, [r3, #-212]
 8001aac:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	dbc5      	blt.n	8001a40 <maxim_heart_rate_and_oxygen_saturation+0x69c>
            }
            n_y_ac= (an_y[an_exact_ir_valley_locs[k+1]] - an_y[an_exact_ir_valley_locs[k] ] )*(n_y_dc_max_idx -an_exact_ir_valley_locs[k]); //red
 8001ab4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001ab8:	3301      	adds	r3, #1
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8001ac0:	443b      	add	r3, r7
 8001ac2:	f853 3cd4 	ldr.w	r3, [r3, #-212]
 8001ac6:	4aa1      	ldr	r2, [pc, #644]	@ (8001d4c <maxim_heart_rate_and_oxygen_saturation+0x9a8>)
 8001ac8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001acc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8001ad6:	443b      	add	r3, r7
 8001ad8:	f853 3cd4 	ldr.w	r3, [r3, #-212]
 8001adc:	499b      	ldr	r1, [pc, #620]	@ (8001d4c <maxim_heart_rate_and_oxygen_saturation+0x9a8>)
 8001ade:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001ae2:	1ad2      	subs	r2, r2, r3
 8001ae4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8001aee:	443b      	add	r3, r7
 8001af0:	f853 3cd4 	ldr.w	r3, [r3, #-212]
 8001af4:	f8d7 1104 	ldr.w	r1, [r7, #260]	@ 0x104
 8001af8:	1acb      	subs	r3, r1, r3
 8001afa:	fb02 f303 	mul.w	r3, r2, r3
 8001afe:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
            n_y_ac=  an_y[an_exact_ir_valley_locs[k]] + n_y_ac/ (an_exact_ir_valley_locs[k+1] - an_exact_ir_valley_locs[k])  ;
 8001b02:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8001b0c:	443b      	add	r3, r7
 8001b0e:	f853 3cd4 	ldr.w	r3, [r3, #-212]
 8001b12:	4a8e      	ldr	r2, [pc, #568]	@ (8001d4c <maxim_heart_rate_and_oxygen_saturation+0x9a8>)
 8001b14:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001b18:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8001b24:	443b      	add	r3, r7
 8001b26:	f853 1cd4 	ldr.w	r1, [r3, #-212]
 8001b2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8001b34:	443b      	add	r3, r7
 8001b36:	f853 3cd4 	ldr.w	r3, [r3, #-212]
 8001b3a:	1acb      	subs	r3, r1, r3
 8001b3c:	f8d7 10f0 	ldr.w	r1, [r7, #240]	@ 0xf0
 8001b40:	fb91 f3f3 	sdiv	r3, r1, r3
 8001b44:	4413      	add	r3, r2
 8001b46:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0


            n_y_ac=  an_y[n_y_dc_max_idx] - n_y_ac;    // subracting linear DC compoenents from raw
 8001b4a:	4a80      	ldr	r2, [pc, #512]	@ (8001d4c <maxim_heart_rate_and_oxygen_saturation+0x9a8>)
 8001b4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001b50:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001b54:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
            n_x_ac= (an_x[an_exact_ir_valley_locs[k+1]] - an_x[an_exact_ir_valley_locs[k] ] )*(n_x_dc_max_idx -an_exact_ir_valley_locs[k]); // ir
 8001b5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001b62:	3301      	adds	r3, #1
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8001b6a:	443b      	add	r3, r7
 8001b6c:	f853 3cd4 	ldr.w	r3, [r3, #-212]
 8001b70:	4a75      	ldr	r2, [pc, #468]	@ (8001d48 <maxim_heart_rate_and_oxygen_saturation+0x9a4>)
 8001b72:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001b76:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8001b80:	443b      	add	r3, r7
 8001b82:	f853 3cd4 	ldr.w	r3, [r3, #-212]
 8001b86:	4970      	ldr	r1, [pc, #448]	@ (8001d48 <maxim_heart_rate_and_oxygen_saturation+0x9a4>)
 8001b88:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001b8c:	1ad2      	subs	r2, r2, r3
 8001b8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8001b98:	443b      	add	r3, r7
 8001b9a:	f853 3cd4 	ldr.w	r3, [r3, #-212]
 8001b9e:	f8d7 1100 	ldr.w	r1, [r7, #256]	@ 0x100
 8001ba2:	1acb      	subs	r3, r1, r3
 8001ba4:	fb02 f303 	mul.w	r3, r2, r3
 8001ba8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
            n_x_ac=  an_x[an_exact_ir_valley_locs[k]] + n_x_ac/ (an_exact_ir_valley_locs[k+1] - an_exact_ir_valley_locs[k]);
 8001bac:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8001bb6:	443b      	add	r3, r7
 8001bb8:	f853 3cd4 	ldr.w	r3, [r3, #-212]
 8001bbc:	4a62      	ldr	r2, [pc, #392]	@ (8001d48 <maxim_heart_rate_and_oxygen_saturation+0x9a4>)
 8001bbe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001bc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8001bce:	443b      	add	r3, r7
 8001bd0:	f853 1cd4 	ldr.w	r1, [r3, #-212]
 8001bd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8001bde:	443b      	add	r3, r7
 8001be0:	f853 3cd4 	ldr.w	r3, [r3, #-212]
 8001be4:	1acb      	subs	r3, r1, r3
 8001be6:	f8d7 10ec 	ldr.w	r1, [r7, #236]	@ 0xec
 8001bea:	fb91 f3f3 	sdiv	r3, r1, r3
 8001bee:	4413      	add	r3, r2
 8001bf0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
            n_x_ac=  an_x[n_y_dc_max_idx] - n_x_ac;      // subracting linear DC compoenents from raw
 8001bf4:	4a54      	ldr	r2, [pc, #336]	@ (8001d48 <maxim_heart_rate_and_oxygen_saturation+0x9a4>)
 8001bf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001bfa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001bfe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
            n_nume=( n_y_ac *n_x_dc_max)>>7 ; //prepare X100 to preserve floating value
 8001c08:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8001c0c:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8001c10:	fb02 f303 	mul.w	r3, r2, r3
 8001c14:	11db      	asrs	r3, r3, #7
 8001c16:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
            n_denom= ( n_x_ac *n_y_dc_max)>>7;
 8001c1a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001c1e:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8001c22:	fb02 f303 	mul.w	r3, r2, r3
 8001c26:	11db      	asrs	r3, r3, #7
 8001c28:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
            if (n_denom>0  && n_i_ratio_count <5 &&  n_nume != 0)
 8001c2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	dd1d      	ble.n	8001c70 <maxim_heart_rate_and_oxygen_saturation+0x8cc>
 8001c34:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001c38:	2b04      	cmp	r3, #4
 8001c3a:	dc19      	bgt.n	8001c70 <maxim_heart_rate_and_oxygen_saturation+0x8cc>
 8001c3c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d015      	beq.n	8001c70 <maxim_heart_rate_and_oxygen_saturation+0x8cc>
            {
                an_ratio[n_i_ratio_count]= (n_nume*100)/n_denom ; //formular is ( n_y_ac *n_x_dc_max) / ( n_x_ac *n_y_dc_max) ;
 8001c44:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8001c48:	2264      	movs	r2, #100	@ 0x64
 8001c4a:	fb03 f202 	mul.w	r2, r3, r2
 8001c4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001c52:	fb92 f1f3 	sdiv	r1, r2, r3
 8001c56:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001c5a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001c5e:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8001c62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                n_i_ratio_count++;
 8001c66:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
 8001c70:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001c74:	3301      	adds	r3, #1
 8001c76:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8001c7a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001c84:	429a      	cmp	r2, r3
 8001c86:	f6ff aeac 	blt.w	80019e2 <maxim_heart_rate_and_oxygen_saturation+0x63e>
            }
        }
    }

    maxim_sort_ascend(an_ratio, n_i_ratio_count);
 8001c8a:	f107 0314 	add.w	r3, r7, #20
 8001c8e:	f8d7 1128 	ldr.w	r1, [r7, #296]	@ 0x128
 8001c92:	4618      	mov	r0, r3
 8001c94:	f000 f955 	bl	8001f42 <maxim_sort_ascend>
    n_middle_idx= n_i_ratio_count/2;
 8001c98:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001c9c:	0fda      	lsrs	r2, r3, #31
 8001c9e:	4413      	add	r3, r2
 8001ca0:	105b      	asrs	r3, r3, #1
 8001ca2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8

    if (n_middle_idx >1)
 8001ca6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	dd17      	ble.n	8001cde <maxim_heart_rate_and_oxygen_saturation+0x93a>
        n_ratio_average =( an_ratio[n_middle_idx-1] +an_ratio[n_middle_idx])/2; // use median
 8001cae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001cb2:	1e5a      	subs	r2, r3, #1
 8001cb4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001cb8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001cbc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001cc0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001cc4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001cc8:	f8d7 10f8 	ldr.w	r1, [r7, #248]	@ 0xf8
 8001ccc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	0fda      	lsrs	r2, r3, #31
 8001cd4:	4413      	add	r3, r2
 8001cd6:	105b      	asrs	r3, r3, #1
 8001cd8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001cdc:	e009      	b.n	8001cf2 <maxim_heart_rate_and_oxygen_saturation+0x94e>
    else
        n_ratio_average = an_ratio[n_middle_idx ];
 8001cde:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001ce2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001ce6:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 8001cea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cee:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc

    if( n_ratio_average>2 && n_ratio_average <184){
 8001cf2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	dd17      	ble.n	8001d2a <maxim_heart_rate_and_oxygen_saturation+0x986>
 8001cfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001cfe:	2bb7      	cmp	r3, #183	@ 0xb7
 8001d00:	dc13      	bgt.n	8001d2a <maxim_heart_rate_and_oxygen_saturation+0x986>
        n_spo2_calc= uch_spo2_table[n_ratio_average] ;
 8001d02:	4a13      	ldr	r2, [pc, #76]	@ (8001d50 <maxim_heart_rate_and_oxygen_saturation+0x9ac>)
 8001d04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001d08:	4413      	add	r3, r2
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
        *pn_spo2 = n_spo2_calc ;
 8001d10:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001d14:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8001d1e:	601a      	str	r2, [r3, #0]
        *pch_spo2_valid  = 1;//  float_SPO2 =  -45.060*n_ratio_average* n_ratio_average/10000 + 30.354 *n_ratio_average/100 + 94.845 ;  // for comparison with table
 8001d20:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8001d24:	2201      	movs	r2, #1
 8001d26:	701a      	strb	r2, [r3, #0]
 8001d28:	e00a      	b.n	8001d40 <maxim_heart_rate_and_oxygen_saturation+0x99c>
    }
    else{
        *pn_spo2 =  -999 ; // do not use SPO2 since signal ratio is out of range
 8001d2a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001d2e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a07      	ldr	r2, [pc, #28]	@ (8001d54 <maxim_heart_rate_and_oxygen_saturation+0x9b0>)
 8001d36:	601a      	str	r2, [r3, #0]
        *pch_spo2_valid  = 0;
 8001d38:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	701a      	strb	r2, [r3, #0]
    }
}
 8001d40:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd90      	pop	{r4, r7, pc}
 8001d48:	200019d8 	.word	0x200019d8
 8001d4c:	200021a8 	.word	0x200021a8
 8001d50:	08013d20 	.word	0x08013d20
 8001d54:	fffffc19 	.word	0xfffffc19

08001d58 <maxim_find_peaks>:
* \par          Details
*               Find at most MAX_NUM peaks above MIN_HEIGHT separated by at least MIN_DISTANCE
*
* \retval       None
*/
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af02      	add	r7, sp, #8
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	607a      	str	r2, [r7, #4]
 8001d64:	603b      	str	r3, [r7, #0]
    maxim_peaks_above_min_height( pn_locs, pn_npks, pn_x, n_size, n_min_height );
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	9300      	str	r3, [sp, #0]
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	68b9      	ldr	r1, [r7, #8]
 8001d70:	68f8      	ldr	r0, [r7, #12]
 8001d72:	f000 f812 	bl	8001d9a <maxim_peaks_above_min_height>
    maxim_remove_close_peaks( pn_locs, pn_npks, pn_x, n_min_distance );
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	68b9      	ldr	r1, [r7, #8]
 8001d7c:	68f8      	ldr	r0, [r7, #12]
 8001d7e:	f000 f880 	bl	8001e82 <maxim_remove_close_peaks>
    *pn_npks = min( *pn_npks, n_max_num );
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	6a3b      	ldr	r3, [r7, #32]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	bfa8      	it	ge
 8001d8c:	461a      	movge	r2, r3
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	601a      	str	r2, [r3, #0]
}
 8001d92:	bf00      	nop
 8001d94:	3710      	adds	r7, #16
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <maxim_peaks_above_min_height>:
* \par          Details
*               Find all peaks above MIN_HEIGHT
*
* \retval       None
*/
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	b087      	sub	sp, #28
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	60f8      	str	r0, [r7, #12]
 8001da2:	60b9      	str	r1, [r7, #8]
 8001da4:	607a      	str	r2, [r7, #4]
 8001da6:	603b      	str	r3, [r7, #0]
    int32_t i = 1, n_width;
 8001da8:	2301      	movs	r3, #1
 8001daa:	617b      	str	r3, [r7, #20]
    *pn_npks = 0;
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	2200      	movs	r2, #0
 8001db0:	601a      	str	r2, [r3, #0]

    while (i < n_size-1){
 8001db2:	e05a      	b.n	8001e6a <maxim_peaks_above_min_height+0xd0>
        if (pn_x[i] > n_min_height && pn_x[i] > pn_x[i-1]){            // find left edge of potential peaks
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	4413      	add	r3, r2
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	6a3a      	ldr	r2, [r7, #32]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	da4f      	bge.n	8001e64 <maxim_peaks_above_min_height+0xca>
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	4413      	add	r3, r2
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001dd4:	3b01      	subs	r3, #1
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	6879      	ldr	r1, [r7, #4]
 8001dda:	440b      	add	r3, r1
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	429a      	cmp	r2, r3
 8001de0:	dd40      	ble.n	8001e64 <maxim_peaks_above_min_height+0xca>
            n_width = 1;
 8001de2:	2301      	movs	r3, #1
 8001de4:	613b      	str	r3, [r7, #16]
            while (i+n_width < n_size && pn_x[i] == pn_x[i+n_width])    // find flat peaks
 8001de6:	e002      	b.n	8001dee <maxim_peaks_above_min_height+0x54>
                n_width++;
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	3301      	adds	r3, #1
 8001dec:	613b      	str	r3, [r7, #16]
            while (i+n_width < n_size && pn_x[i] == pn_x[i+n_width])    // find flat peaks
 8001dee:	697a      	ldr	r2, [r7, #20]
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	4413      	add	r3, r2
 8001df4:	683a      	ldr	r2, [r7, #0]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	dd0d      	ble.n	8001e16 <maxim_peaks_above_min_height+0x7c>
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	4413      	add	r3, r2
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	6979      	ldr	r1, [r7, #20]
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	440b      	add	r3, r1
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	6879      	ldr	r1, [r7, #4]
 8001e0e:	440b      	add	r3, r1
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d0e8      	beq.n	8001de8 <maxim_peaks_above_min_height+0x4e>
            if (pn_x[i] > pn_x[i+n_width] && (*pn_npks) < 15 ){                            // find right edge of peaks
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	6979      	ldr	r1, [r7, #20]
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	440b      	add	r3, r1
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	6879      	ldr	r1, [r7, #4]
 8001e2a:	440b      	add	r3, r1
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	dd13      	ble.n	8001e5a <maxim_peaks_above_min_height+0xc0>
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2b0e      	cmp	r3, #14
 8001e38:	dc0f      	bgt.n	8001e5a <maxim_peaks_above_min_height+0xc0>
                pn_locs[(*pn_npks)++] = i;
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	1c59      	adds	r1, r3, #1
 8001e40:	68ba      	ldr	r2, [r7, #8]
 8001e42:	6011      	str	r1, [r2, #0]
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	68fa      	ldr	r2, [r7, #12]
 8001e48:	4413      	add	r3, r2
 8001e4a:	697a      	ldr	r2, [r7, #20]
 8001e4c:	601a      	str	r2, [r3, #0]
                // for flat peaks, peak location is left edge
                i += n_width+1;
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	3301      	adds	r3, #1
 8001e52:	697a      	ldr	r2, [r7, #20]
 8001e54:	4413      	add	r3, r2
 8001e56:	617b      	str	r3, [r7, #20]
            if (pn_x[i] > pn_x[i+n_width] && (*pn_npks) < 15 ){                            // find right edge of peaks
 8001e58:	e007      	b.n	8001e6a <maxim_peaks_above_min_height+0xd0>
            }
            else
                i += n_width;
 8001e5a:	697a      	ldr	r2, [r7, #20]
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	4413      	add	r3, r2
 8001e60:	617b      	str	r3, [r7, #20]
            if (pn_x[i] > pn_x[i+n_width] && (*pn_npks) < 15 ){                            // find right edge of peaks
 8001e62:	e002      	b.n	8001e6a <maxim_peaks_above_min_height+0xd0>
        }
        else
            i++;
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	3301      	adds	r3, #1
 8001e68:	617b      	str	r3, [r7, #20]
    while (i < n_size-1){
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	3b01      	subs	r3, #1
 8001e6e:	697a      	ldr	r2, [r7, #20]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	db9f      	blt.n	8001db4 <maxim_peaks_above_min_height+0x1a>
    }
}
 8001e74:	bf00      	nop
 8001e76:	bf00      	nop
 8001e78:	371c      	adds	r7, #28
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr

08001e82 <maxim_remove_close_peaks>:
* \par          Details
*               Remove peaks separated by less than MIN_DISTANCE
*
* \retval       None
*/
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b088      	sub	sp, #32
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	60f8      	str	r0, [r7, #12]
 8001e8a:	60b9      	str	r1, [r7, #8]
 8001e8c:	607a      	str	r2, [r7, #4]
 8001e8e:	603b      	str	r3, [r7, #0]

    int32_t i, j, n_old_npks, n_dist;

    /* Order peaks from large to small */
    maxim_sort_indices_descend( pn_x, pn_locs, *pn_npks );
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	461a      	mov	r2, r3
 8001e96:	68f9      	ldr	r1, [r7, #12]
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f000 f895 	bl	8001fc8 <maxim_sort_indices_descend>

    for ( i = -1; i < *pn_npks; i++ ){
 8001e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001ea2:	61fb      	str	r3, [r7, #28]
 8001ea4:	e03e      	b.n	8001f24 <maxim_remove_close_peaks+0xa2>
        n_old_npks = *pn_npks;
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	617b      	str	r3, [r7, #20]
        *pn_npks = i+1;
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	1c5a      	adds	r2, r3, #1
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	601a      	str	r2, [r3, #0]
        for ( j = i+1; j < n_old_npks; j++ ){
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	61bb      	str	r3, [r7, #24]
 8001eba:	e02c      	b.n	8001f16 <maxim_remove_close_peaks+0x94>
            n_dist =  pn_locs[j] - ( i == -1 ? -1 : pn_locs[i] ); // lag-zero peak of autocorr is at index -1
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	68fa      	ldr	r2, [r7, #12]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ecc:	d005      	beq.n	8001eda <maxim_remove_close_peaks+0x58>
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	68f9      	ldr	r1, [r7, #12]
 8001ed4:	440b      	add	r3, r1
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	e001      	b.n	8001ede <maxim_remove_close_peaks+0x5c>
 8001eda:	f04f 33ff 	mov.w	r3, #4294967295
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	613b      	str	r3, [r7, #16]
            if ( n_dist > n_min_distance || n_dist < -n_min_distance )
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	dc04      	bgt.n	8001ef4 <maxim_remove_close_peaks+0x72>
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	425b      	negs	r3, r3
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	da0d      	bge.n	8001f10 <maxim_remove_close_peaks+0x8e>
                pn_locs[(*pn_npks)++] = pn_locs[j];
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	68fa      	ldr	r2, [r7, #12]
 8001efa:	441a      	add	r2, r3
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	1c58      	adds	r0, r3, #1
 8001f02:	68b9      	ldr	r1, [r7, #8]
 8001f04:	6008      	str	r0, [r1, #0]
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	68f9      	ldr	r1, [r7, #12]
 8001f0a:	440b      	add	r3, r1
 8001f0c:	6812      	ldr	r2, [r2, #0]
 8001f0e:	601a      	str	r2, [r3, #0]
        for ( j = i+1; j < n_old_npks; j++ ){
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	3301      	adds	r3, #1
 8001f14:	61bb      	str	r3, [r7, #24]
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	dbce      	blt.n	8001ebc <maxim_remove_close_peaks+0x3a>
    for ( i = -1; i < *pn_npks; i++ ){
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	3301      	adds	r3, #1
 8001f22:	61fb      	str	r3, [r7, #28]
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	69fa      	ldr	r2, [r7, #28]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	dbbb      	blt.n	8001ea6 <maxim_remove_close_peaks+0x24>
        }
    }

    // Resort indices longo ascending order
    maxim_sort_ascend( pn_locs, *pn_npks );
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4619      	mov	r1, r3
 8001f34:	68f8      	ldr	r0, [r7, #12]
 8001f36:	f000 f804 	bl	8001f42 <maxim_sort_ascend>
}
 8001f3a:	bf00      	nop
 8001f3c:	3720      	adds	r7, #32
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <maxim_sort_ascend>:
* \par          Details
*               Sort array in ascending order (insertion sort algorithm)
*
* \retval       None
*/
{
 8001f42:	b480      	push	{r7}
 8001f44:	b087      	sub	sp, #28
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
 8001f4a:	6039      	str	r1, [r7, #0]
    int32_t i, j, n_temp;
    for (i = 1; i < n_size; i++) {
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	617b      	str	r3, [r7, #20]
 8001f50:	e02f      	b.n	8001fb2 <maxim_sort_ascend+0x70>
        n_temp = pn_x[i];
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	4413      	add	r3, r2
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	60fb      	str	r3, [r7, #12]
        for (j = i; j > 0 && n_temp < pn_x[j-1]; j--)
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	613b      	str	r3, [r7, #16]
 8001f62:	e00f      	b.n	8001f84 <maxim_sort_ascend+0x42>
            pn_x[j] = pn_x[j-1];
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001f6a:	3b01      	subs	r3, #1
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	441a      	add	r2, r3
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	6879      	ldr	r1, [r7, #4]
 8001f78:	440b      	add	r3, r1
 8001f7a:	6812      	ldr	r2, [r2, #0]
 8001f7c:	601a      	str	r2, [r3, #0]
        for (j = i; j > 0 && n_temp < pn_x[j-1]; j--)
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	3b01      	subs	r3, #1
 8001f82:	613b      	str	r3, [r7, #16]
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	dd0a      	ble.n	8001fa0 <maxim_sort_ascend+0x5e>
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001f90:	3b01      	subs	r3, #1
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	4413      	add	r3, r2
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	68fa      	ldr	r2, [r7, #12]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	dbe1      	blt.n	8001f64 <maxim_sort_ascend+0x22>
        pn_x[j] = n_temp;
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	68fa      	ldr	r2, [r7, #12]
 8001faa:	601a      	str	r2, [r3, #0]
    for (i = 1; i < n_size; i++) {
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	3301      	adds	r3, #1
 8001fb0:	617b      	str	r3, [r7, #20]
 8001fb2:	697a      	ldr	r2, [r7, #20]
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	dbcb      	blt.n	8001f52 <maxim_sort_ascend+0x10>
    }
}
 8001fba:	bf00      	nop
 8001fbc:	bf00      	nop
 8001fbe:	371c      	adds	r7, #28
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <maxim_sort_indices_descend>:
* \par          Details
*               Sort indices according to descending order (insertion sort algorithm)
*
* \retval       None
*/
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b089      	sub	sp, #36	@ 0x24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	607a      	str	r2, [r7, #4]
    int32_t i, j, n_temp;
    for (i = 1; i < n_size; i++) {
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	61fb      	str	r3, [r7, #28]
 8001fd8:	e037      	b.n	800204a <maxim_sort_indices_descend+0x82>
        n_temp = pn_indx[i];
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	68ba      	ldr	r2, [r7, #8]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	617b      	str	r3, [r7, #20]
        for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	61bb      	str	r3, [r7, #24]
 8001fea:	e00f      	b.n	800200c <maxim_sort_indices_descend+0x44>
            pn_indx[j] = pn_indx[j-1];
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001ff2:	3b01      	subs	r3, #1
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	68ba      	ldr	r2, [r7, #8]
 8001ff8:	441a      	add	r2, r3
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	68b9      	ldr	r1, [r7, #8]
 8002000:	440b      	add	r3, r1
 8002002:	6812      	ldr	r2, [r2, #0]
 8002004:	601a      	str	r2, [r3, #0]
        for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	3b01      	subs	r3, #1
 800200a:	61bb      	str	r3, [r7, #24]
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	2b00      	cmp	r3, #0
 8002010:	dd12      	ble.n	8002038 <maxim_sort_indices_descend+0x70>
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	68fa      	ldr	r2, [r7, #12]
 8002018:	4413      	add	r3, r2
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002022:	3b01      	subs	r3, #1
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	68b9      	ldr	r1, [r7, #8]
 8002028:	440b      	add	r3, r1
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	68f9      	ldr	r1, [r7, #12]
 8002030:	440b      	add	r3, r1
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	429a      	cmp	r2, r3
 8002036:	dcd9      	bgt.n	8001fec <maxim_sort_indices_descend+0x24>
        pn_indx[j] = n_temp;
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	68ba      	ldr	r2, [r7, #8]
 800203e:	4413      	add	r3, r2
 8002040:	697a      	ldr	r2, [r7, #20]
 8002042:	601a      	str	r2, [r3, #0]
    for (i = 1; i < n_size; i++) {
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	3301      	adds	r3, #1
 8002048:	61fb      	str	r3, [r7, #28]
 800204a:	69fa      	ldr	r2, [r7, #28]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	429a      	cmp	r2, r3
 8002050:	dbc3      	blt.n	8001fda <maxim_sort_indices_descend+0x12>
    }
}
 8002052:	bf00      	nop
 8002054:	bf00      	nop
 8002056:	3724      	adds	r7, #36	@ 0x24
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002068:	4b06      	ldr	r3, [pc, #24]	@ (8002084 <LL_EXTI_EnableIT_32_63+0x24>)
 800206a:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800206e:	4905      	ldr	r1, [pc, #20]	@ (8002084 <LL_EXTI_EnableIT_32_63+0x24>)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4313      	orrs	r3, r2
 8002074:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr
 8002084:	58000800 	.word	0x58000800

08002088 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002088:	b480      	push	{r7}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002090:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002094:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002096:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4313      	orrs	r3, r2
 800209e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80020a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020a4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4013      	ands	r3, r2
 80020aa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80020ac:	68fb      	ldr	r3, [r7, #12]
}
 80020ae:	bf00      	nop
 80020b0:	3714      	adds	r7, #20
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr

080020ba <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80020ba:	b480      	push	{r7}
 80020bc:	b085      	sub	sp, #20
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 80020c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020c6:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 80020ca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	f8c1 314c 	str.w	r3, [r1, #332]	@ 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 80020d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020da:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4013      	ands	r3, r2
 80020e2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80020e4:	68fb      	ldr	r3, [r7, #12]
}
 80020e6:	bf00      	nop
 80020e8:	3714      	adds	r7, #20
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr

080020f2 <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 80020f6:	f002 f9b3 	bl	8004460 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 80020fa:	f002 f9b7 	bl	800446c <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 80020fe:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8002102:	f7ff ffad 	bl	8002060 <LL_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 8002106:	f009 fbb3 	bl	800b870 <DbgTraceInit>
#endif

  APPD_SetCPU2GpioConfig( );
 800210a:	f000 f821 	bl	8002150 <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 800210e:	f000 f8c1 	bl	8002294 <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 8002112:	bf00      	nop
}
 8002114:	bd80      	pop	{r7, pc}
	...

08002118 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8002118:	b5b0      	push	{r4, r5, r7, lr}
 800211a:	b088      	sub	sp, #32
 800211c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 800211e:	4b0b      	ldr	r3, [pc, #44]	@ (800214c <APPD_EnableCPU2+0x34>)
 8002120:	1d3c      	adds	r4, r7, #4
 8002122:	461d      	mov	r5, r3
 8002124:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002126:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002128:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800212c:	c403      	stmia	r4!, {r0, r1}
 800212e:	8022      	strh	r2, [r4, #0]
 8002130:	3402      	adds	r4, #2
 8002132:	0c13      	lsrs	r3, r2, #16
 8002134:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8002136:	f009 faaf 	bl	800b698 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 800213a:	1d3b      	adds	r3, r7, #4
 800213c:	4618      	mov	r0, r3
 800213e:	f008 fd40 	bl	800abc2 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8002142:	bf00      	nop
}
 8002144:	3720      	adds	r7, #32
 8002146:	46bd      	mov	sp, r7
 8002148:	bdb0      	pop	{r4, r5, r7, pc}
 800214a:	bf00      	nop
 800214c:	08012868 	.word	0x08012868

08002150 <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b088      	sub	sp, #32
 8002154:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 8002156:	1d3b      	adds	r3, r7, #4
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	605a      	str	r2, [r3, #4]
 800215e:	609a      	str	r2, [r3, #8]
 8002160:	60da      	str	r2, [r3, #12]
 8002162:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;
  gpioa_pin_list = 0;
 8002164:	2300      	movs	r3, #0
 8002166:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 8002168:	2300      	movs	r3, #0
 800216a:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 800216c:	2300      	movs	r3, #0
 800216e:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8002170:	2300      	movs	r3, #0
 8002172:	77fb      	strb	r3, [r7, #31]
 8002174:	e036      	b.n	80021e4 <APPD_SetCPU2GpioConfig+0x94>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 8002176:	7ffb      	ldrb	r3, [r7, #31]
 8002178:	4a43      	ldr	r2, [pc, #268]	@ (8002288 <APPD_SetCPU2GpioConfig+0x138>)
 800217a:	00db      	lsls	r3, r3, #3
 800217c:	4413      	add	r3, r2
 800217e:	799b      	ldrb	r3, [r3, #6]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d02c      	beq.n	80021de <APPD_SetCPU2GpioConfig+0x8e>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 8002184:	7ffb      	ldrb	r3, [r7, #31]
 8002186:	4a40      	ldr	r2, [pc, #256]	@ (8002288 <APPD_SetCPU2GpioConfig+0x138>)
 8002188:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800218c:	4a3f      	ldr	r2, [pc, #252]	@ (800228c <APPD_SetCPU2GpioConfig+0x13c>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d01b      	beq.n	80021ca <APPD_SetCPU2GpioConfig+0x7a>
 8002192:	4a3e      	ldr	r2, [pc, #248]	@ (800228c <APPD_SetCPU2GpioConfig+0x13c>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d821      	bhi.n	80021dc <APPD_SetCPU2GpioConfig+0x8c>
 8002198:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800219c:	d003      	beq.n	80021a6 <APPD_SetCPU2GpioConfig+0x56>
 800219e:	4a3c      	ldr	r2, [pc, #240]	@ (8002290 <APPD_SetCPU2GpioConfig+0x140>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d009      	beq.n	80021b8 <APPD_SetCPU2GpioConfig+0x68>
          break;
        case (uint32_t)GPIOC:
          gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;
        default:
          break;
 80021a4:	e01a      	b.n	80021dc <APPD_SetCPU2GpioConfig+0x8c>
          gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 80021a6:	7ffb      	ldrb	r3, [r7, #31]
 80021a8:	4a37      	ldr	r2, [pc, #220]	@ (8002288 <APPD_SetCPU2GpioConfig+0x138>)
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	4413      	add	r3, r2
 80021ae:	889a      	ldrh	r2, [r3, #4]
 80021b0:	8bbb      	ldrh	r3, [r7, #28]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	83bb      	strh	r3, [r7, #28]
          break;
 80021b6:	e012      	b.n	80021de <APPD_SetCPU2GpioConfig+0x8e>
          gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 80021b8:	7ffb      	ldrb	r3, [r7, #31]
 80021ba:	4a33      	ldr	r2, [pc, #204]	@ (8002288 <APPD_SetCPU2GpioConfig+0x138>)
 80021bc:	00db      	lsls	r3, r3, #3
 80021be:	4413      	add	r3, r2
 80021c0:	889a      	ldrh	r2, [r3, #4]
 80021c2:	8b7b      	ldrh	r3, [r7, #26]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	837b      	strh	r3, [r7, #26]
          break;
 80021c8:	e009      	b.n	80021de <APPD_SetCPU2GpioConfig+0x8e>
          gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 80021ca:	7ffb      	ldrb	r3, [r7, #31]
 80021cc:	4a2e      	ldr	r2, [pc, #184]	@ (8002288 <APPD_SetCPU2GpioConfig+0x138>)
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	4413      	add	r3, r2
 80021d2:	889a      	ldrh	r2, [r3, #4]
 80021d4:	8b3b      	ldrh	r3, [r7, #24]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	833b      	strh	r3, [r7, #24]
          break;
 80021da:	e000      	b.n	80021de <APPD_SetCPU2GpioConfig+0x8e>
          break;
 80021dc:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 80021de:	7ffb      	ldrb	r3, [r7, #31]
 80021e0:	3301      	adds	r3, #1
 80021e2:	77fb      	strb	r3, [r7, #31]
 80021e4:	7ffb      	ldrb	r3, [r7, #31]
 80021e6:	2b25      	cmp	r3, #37	@ 0x25
 80021e8:	d9c5      	bls.n	8002176 <APPD_SetCPU2GpioConfig+0x26>
      }
    }
  }

  gpio_config.Pull = GPIO_NOPULL;
 80021ea:	2300      	movs	r3, #0
 80021ec:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 80021ee:	2301      	movs	r3, #1
 80021f0:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021f2:	2303      	movs	r3, #3
 80021f4:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 80021f6:	8bbb      	ldrh	r3, [r7, #28]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d014      	beq.n	8002226 <APPD_SetCPU2GpioConfig+0xd6>
  {
    gpio_config.Pin = gpioa_pin_list;
 80021fc:	8bbb      	ldrh	r3, [r7, #28]
 80021fe:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002200:	2001      	movs	r0, #1
 8002202:	f7ff ff41 	bl	8002088 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 8002206:	2001      	movs	r0, #1
 8002208:	f7ff ff57 	bl	80020ba <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 800220c:	1d3b      	adds	r3, r7, #4
 800220e:	4619      	mov	r1, r3
 8002210:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002214:	f002 fdfc 	bl	8004e10 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 8002218:	8bbb      	ldrh	r3, [r7, #28]
 800221a:	2200      	movs	r2, #0
 800221c:	4619      	mov	r1, r3
 800221e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002222:	f002 ff7d 	bl	8005120 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 8002226:	8b7b      	ldrh	r3, [r7, #26]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d012      	beq.n	8002252 <APPD_SetCPU2GpioConfig+0x102>
  {
    gpio_config.Pin = gpiob_pin_list;
 800222c:	8b7b      	ldrh	r3, [r7, #26]
 800222e:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002230:	2002      	movs	r0, #2
 8002232:	f7ff ff29 	bl	8002088 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 8002236:	2002      	movs	r0, #2
 8002238:	f7ff ff3f 	bl	80020ba <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 800223c:	1d3b      	adds	r3, r7, #4
 800223e:	4619      	mov	r1, r3
 8002240:	4813      	ldr	r0, [pc, #76]	@ (8002290 <APPD_SetCPU2GpioConfig+0x140>)
 8002242:	f002 fde5 	bl	8004e10 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 8002246:	8b7b      	ldrh	r3, [r7, #26]
 8002248:	2200      	movs	r2, #0
 800224a:	4619      	mov	r1, r3
 800224c:	4810      	ldr	r0, [pc, #64]	@ (8002290 <APPD_SetCPU2GpioConfig+0x140>)
 800224e:	f002 ff67 	bl	8005120 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 8002252:	8b3b      	ldrh	r3, [r7, #24]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d013      	beq.n	8002280 <APPD_SetCPU2GpioConfig+0x130>
  {
    gpio_config.Pin = gpioc_pin_list;
 8002258:	8b3b      	ldrh	r3, [r7, #24]
 800225a:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800225c:	2004      	movs	r0, #4
 800225e:	f7ff ff13 	bl	8002088 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 8002262:	2004      	movs	r0, #4
 8002264:	f7ff ff29 	bl	80020ba <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 8002268:	1d3b      	adds	r3, r7, #4
 800226a:	4619      	mov	r1, r3
 800226c:	4807      	ldr	r0, [pc, #28]	@ (800228c <APPD_SetCPU2GpioConfig+0x13c>)
 800226e:	f002 fdcf 	bl	8004e10 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 8002272:	8b3b      	ldrh	r3, [r7, #24]
 8002274:	2200      	movs	r2, #0
 8002276:	4619      	mov	r1, r3
 8002278:	4804      	ldr	r0, [pc, #16]	@ (800228c <APPD_SetCPU2GpioConfig+0x13c>)
 800227a:	f002 ff51 	bl	8005120 <HAL_GPIO_WritePin>
  }

/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 800227e:	bf00      	nop
 8002280:	bf00      	nop
}
 8002282:	3720      	adds	r7, #32
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	08013dd8 	.word	0x08013dd8
 800228c:	48000800 	.word	0x48000800
 8002290:	48000400 	.word	0x48000400

08002294 <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 8002298:	bf00      	nop
}
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr

080022a2 <DbgOutputInit>:
 * WRAP FUNCTIONS
 *
*************************************************************/
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	af00      	add	r7, sp, #0
#endif
}
else if (CFG_DEBUG_TRACE_UART == hw_uart1)
{
#if(CFG_HW_USART1_ENABLED == 1)
    MX_USART1_UART_Init();
 80022a6:	f001 ff03 	bl	80040b0 <MX_USART1_UART_Init>
#endif
}
#endif

/* USER CODE END DbgOutputInit */
  return;
 80022aa:	bf00      	nop
}
 80022ac:	bd80      	pop	{r7, pc}

080022ae <DbgOutputTraces>:

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b084      	sub	sp, #16
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	60f8      	str	r0, [r7, #12]
 80022b6:	460b      	mov	r3, r1
 80022b8:	607a      	str	r2, [r7, #4]
 80022ba:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 80022bc:	897a      	ldrh	r2, [r7, #10]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	68f9      	ldr	r1, [r7, #12]
 80022c2:	2000      	movs	r0, #0
 80022c4:	f001 fa18 	bl	80036f8 <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 80022c8:	bf00      	nop
}
 80022ca:	3710      	adds	r7, #16
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80022d8:	4b07      	ldr	r3, [pc, #28]	@ (80022f8 <LL_C2_PWR_SetPowerMode+0x28>)
 80022da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80022de:	f023 0207 	bic.w	r2, r3, #7
 80022e2:	4905      	ldr	r1, [pc, #20]	@ (80022f8 <LL_C2_PWR_SetPowerMode+0x28>)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 80022ec:	bf00      	nop
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr
 80022f8:	58000400 	.word	0x58000400

080022fc <LL_EXTI_EnableIT_32_63>:
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002304:	4b06      	ldr	r3, [pc, #24]	@ (8002320 <LL_EXTI_EnableIT_32_63+0x24>)
 8002306:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800230a:	4905      	ldr	r1, [pc, #20]	@ (8002320 <LL_EXTI_EnableIT_32_63+0x24>)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	4313      	orrs	r3, r2
 8002310:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr
 8002320:	58000800 	.word	0x58000800

08002324 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 800232c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002330:	4a0a      	ldr	r2, [pc, #40]	@ (800235c <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8002332:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8002336:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800233a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800233e:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	021b      	lsls	r3, r3, #8
 8002346:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800234a:	4313      	orrs	r3, r2
 800234c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 8002350:	bf00      	nop
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr
 800235c:	cafecafe 	.word	0xcafecafe

08002360 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8002368:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8002372:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4313      	orrs	r3, r2
 800237a:	608b      	str	r3, [r1, #8]
}
 800237c:	bf00      	nop
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 800238c:	4b04      	ldr	r3, [pc, #16]	@ (80023a0 <LL_DBGMCU_GetDeviceID+0x18>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8002394:	4618      	mov	r0, r3
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	e0042000 	.word	0xe0042000

080023a4 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 80023a8:	4b04      	ldr	r3, [pc, #16]	@ (80023bc <LL_DBGMCU_GetRevisionID+0x18>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	0c1b      	lsrs	r3, r3, #16
 80023ae:	b29b      	uxth	r3, r3
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	e0042000 	.word	0xe0042000

080023c0 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	22ff      	movs	r2, #255	@ 0xff
 80023cc:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80023ce:	bf00      	nop
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr

080023da <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 80023da:	b480      	push	{r7}
 80023dc:	b083      	sub	sp, #12
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	22ca      	movs	r2, #202	@ 0xca
 80023e6:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2253      	movs	r2, #83	@ 0x53
 80023ec:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80023ee:	bf00      	nop
 80023f0:	370c      	adds	r7, #12
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr

080023fa <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 80023fa:	b480      	push	{r7}
 80023fc:	b083      	sub	sp, #12
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
 8002402:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f023 0207 	bic.w	r2, r3, #7
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	431a      	orrs	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	609a      	str	r2, [r3, #8]
}
 8002414:	bf00      	nop
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002424:	4b04      	ldr	r3, [pc, #16]	@ (8002438 <MX_APPE_Config+0x18>)
 8002426:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800242a:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 800242c:	f000 f826 	bl	800247c <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8002430:	f000 f82b 	bl	800248a <Config_HSE>

  return;
 8002434:	bf00      	nop
}
 8002436:	bd80      	pop	{r7, pc}
 8002438:	58004000 	.word	0x58004000

0800243c <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8002440:	f000 f837 	bl	80024b2 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8002444:	f000 f850 	bl	80024e8 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8002448:	4904      	ldr	r1, [pc, #16]	@ (800245c <MX_APPE_Init+0x20>)
 800244a:	2000      	movs	r0, #0
 800244c:	f000 ff62 	bl	8003314 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 8002450:	f7ff fe4f 	bl	80020f2 <APPD_Init>
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8002454:	f000 f856 	bl	8002504 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8002458:	bf00      	nop
}
 800245a:	bd80      	pop	{r7, pc}
 800245c:	20002abc 	.word	0x20002abc

08002460 <Init_Smps>:

void Init_Smps(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8002464:	bf00      	nop
}
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr

0800246e <Init_Exti>:

void Init_Exti(void)
{
 800246e:	b580      	push	{r7, lr}
 8002470:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8002472:	2050      	movs	r0, #80	@ 0x50
 8002474:	f7ff ff42 	bl	80022fc <LL_EXTI_EnableIT_32_63>

  return;
 8002478:	bf00      	nop
}
 800247a:	bd80      	pop	{r7, pc}

0800247c <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8002480:	bf00      	nop
}
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr

0800248a <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 800248a:	b580      	push	{r7, lr}
 800248c:	b082      	sub	sp, #8
 800248e:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8002490:	2000      	movs	r0, #0
 8002492:	f009 fa6b 	bl	800b96c <OTP_Read>
 8002496:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d005      	beq.n	80024aa <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	799b      	ldrb	r3, [r3, #6]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7ff ff3e 	bl	8002324 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 80024a8:	bf00      	nop
 80024aa:	bf00      	nop
}
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <System_Init>:

static void System_Init(void)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	af00      	add	r7, sp, #0
  Init_Smps();
 80024b6:	f7ff ffd3 	bl	8002460 <Init_Smps>

  Init_Exti();
 80024ba:	f7ff ffd8 	bl	800246e <Init_Exti>

  Init_Rtc();
 80024be:	f000 f803 	bl	80024c8 <Init_Rtc>

  return;
 80024c2:	bf00      	nop
}
 80024c4:	bd80      	pop	{r7, pc}
	...

080024c8 <Init_Rtc>:

static void Init_Rtc(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 80024cc:	4805      	ldr	r0, [pc, #20]	@ (80024e4 <Init_Rtc+0x1c>)
 80024ce:	f7ff ff84 	bl	80023da <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 80024d2:	2100      	movs	r1, #0
 80024d4:	4803      	ldr	r0, [pc, #12]	@ (80024e4 <Init_Rtc+0x1c>)
 80024d6:	f7ff ff90 	bl	80023fa <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 80024da:	4802      	ldr	r0, [pc, #8]	@ (80024e4 <Init_Rtc+0x1c>)
 80024dc:	f7ff ff70 	bl	80023c0 <LL_RTC_EnableWriteProtection>

  return;
 80024e0:	bf00      	nop
}
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	40002800 	.word	0x40002800

080024e8 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80024ec:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80024f0:	f7ff ff36 	bl	8002360 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80024f4:	f00b fb12 	bl	800db1c <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80024f8:	2004      	movs	r0, #4
 80024fa:	f7ff fee9 	bl	80022d0 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 80024fe:	bf00      	nop
}
 8002500:	bd80      	pop	{r7, pc}
	...

08002504 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b088      	sub	sp, #32
 8002508:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 800250a:	f008 ff0f 	bl	800b32c <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 800250e:	4a11      	ldr	r2, [pc, #68]	@ (8002554 <appe_Tl_Init+0x50>)
 8002510:	2100      	movs	r1, #0
 8002512:	2004      	movs	r0, #4
 8002514:	f00b fc40 	bl	800dd98 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8002518:	4b0f      	ldr	r3, [pc, #60]	@ (8002558 <appe_Tl_Init+0x54>)
 800251a:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 800251c:	4b0f      	ldr	r3, [pc, #60]	@ (800255c <appe_Tl_Init+0x58>)
 800251e:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8002520:	463b      	mov	r3, r7
 8002522:	4619      	mov	r1, r3
 8002524:	480e      	ldr	r0, [pc, #56]	@ (8002560 <appe_Tl_Init+0x5c>)
 8002526:	f008 fdc3 	bl	800b0b0 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 800252a:	4b0e      	ldr	r3, [pc, #56]	@ (8002564 <appe_Tl_Init+0x60>)
 800252c:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 800252e:	4b0e      	ldr	r3, [pc, #56]	@ (8002568 <appe_Tl_Init+0x64>)
 8002530:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8002532:	4b0e      	ldr	r3, [pc, #56]	@ (800256c <appe_Tl_Init+0x68>)
 8002534:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8002536:	f240 533c 	movw	r3, #1340	@ 0x53c
 800253a:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 800253c:	f107 0308 	add.w	r3, r7, #8
 8002540:	4618      	mov	r0, r3
 8002542:	f009 f835 	bl	800b5b0 <TL_MM_Init>

  TL_Enable();
 8002546:	f008 feeb 	bl	800b320 <TL_Enable>

  return;
 800254a:	bf00      	nop
}
 800254c:	3720      	adds	r7, #32
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	0800b0e9 	.word	0x0800b0e9
 8002558:	20030734 	.word	0x20030734
 800255c:	08002571 	.word	0x08002571
 8002560:	08002589 	.word	0x08002589
 8002564:	2003094c 	.word	0x2003094c
 8002568:	20030840 	.word	0x20030840
 800256c:	200301f8 	.word	0x200301f8

08002570 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	4603      	mov	r3, r0
 8002578:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 800257a:	bf00      	nop
}
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
	...

08002588 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b088      	sub	sp, #32
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	330b      	adds	r3, #11
 8002596:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	881b      	ldrh	r3, [r3, #0]
 800259c:	b29b      	uxth	r3, r3
 800259e:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 80025a2:	2b07      	cmp	r3, #7
 80025a4:	f200 80d0 	bhi.w	8002748 <APPE_SysUserEvtRx+0x1c0>
 80025a8:	a201      	add	r2, pc, #4	@ (adr r2, 80025b0 <APPE_SysUserEvtRx+0x28>)
 80025aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025ae:	bf00      	nop
 80025b0:	080025d1 	.word	0x080025d1
 80025b4:	08002663 	.word	0x08002663
 80025b8:	08002685 	.word	0x08002685
 80025bc:	08002749 	.word	0x08002749
 80025c0:	080026c9 	.word	0x080026c9
 80025c4:	080026ed 	.word	0x080026ed
 80025c8:	08002709 	.word	0x08002709
 80025cc:	0800272d 	.word	0x0800272d
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 80025d0:	f107 030c 	add.w	r3, r7, #12
 80025d4:	4618      	mov	r0, r3
 80025d6:	f008 fb21 	bl	800ac1c <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 80025da:	485e      	ldr	r0, [pc, #376]	@ (8002754 <APPE_SysUserEvtRx+0x1cc>)
 80025dc:	f009 f8e8 	bl	800b7b0 <DbgTraceGetFileName>
 80025e0:	4601      	mov	r1, r0
 80025e2:	f44f 73b5 	mov.w	r3, #362	@ 0x16a
 80025e6:	4a5c      	ldr	r2, [pc, #368]	@ (8002758 <APPE_SysUserEvtRx+0x1d0>)
 80025e8:	485c      	ldr	r0, [pc, #368]	@ (800275c <APPE_SysUserEvtRx+0x1d4>)
 80025ea:	f00c fc21 	bl	800ee30 <iprintf>
 80025ee:	7b3b      	ldrb	r3, [r7, #12]
 80025f0:	4619      	mov	r1, r3
 80025f2:	7b7b      	ldrb	r3, [r7, #13]
 80025f4:	461a      	mov	r2, r3
 80025f6:	7bbb      	ldrb	r3, [r7, #14]
 80025f8:	4859      	ldr	r0, [pc, #356]	@ (8002760 <APPE_SysUserEvtRx+0x1d8>)
 80025fa:	f00c fc19 	bl	800ee30 <iprintf>
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 80025fe:	4855      	ldr	r0, [pc, #340]	@ (8002754 <APPE_SysUserEvtRx+0x1cc>)
 8002600:	f009 f8d6 	bl	800b7b0 <DbgTraceGetFileName>
 8002604:	4601      	mov	r1, r0
 8002606:	f240 136b 	movw	r3, #363	@ 0x16b
 800260a:	4a53      	ldr	r2, [pc, #332]	@ (8002758 <APPE_SysUserEvtRx+0x1d0>)
 800260c:	4853      	ldr	r0, [pc, #332]	@ (800275c <APPE_SysUserEvtRx+0x1d4>)
 800260e:	f00c fc0f 	bl	800ee30 <iprintf>
 8002612:	7c3b      	ldrb	r3, [r7, #16]
 8002614:	4619      	mov	r1, r3
 8002616:	4853      	ldr	r0, [pc, #332]	@ (8002764 <APPE_SysUserEvtRx+0x1dc>)
 8002618:	f00c fc0a 	bl	800ee30 <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 800261c:	484d      	ldr	r0, [pc, #308]	@ (8002754 <APPE_SysUserEvtRx+0x1cc>)
 800261e:	f009 f8c7 	bl	800b7b0 <DbgTraceGetFileName>
 8002622:	4601      	mov	r1, r0
 8002624:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 8002628:	4a4b      	ldr	r2, [pc, #300]	@ (8002758 <APPE_SysUserEvtRx+0x1d0>)
 800262a:	484c      	ldr	r0, [pc, #304]	@ (800275c <APPE_SysUserEvtRx+0x1d4>)
 800262c:	f00c fc00 	bl	800ee30 <iprintf>
 8002630:	7dbb      	ldrb	r3, [r7, #22]
 8002632:	4619      	mov	r1, r3
 8002634:	7dfb      	ldrb	r3, [r7, #23]
 8002636:	461a      	mov	r2, r3
 8002638:	7e3b      	ldrb	r3, [r7, #24]
 800263a:	484b      	ldr	r0, [pc, #300]	@ (8002768 <APPE_SysUserEvtRx+0x1e0>)
 800263c:	f00c fbf8 	bl	800ee30 <iprintf>

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 8002640:	4844      	ldr	r0, [pc, #272]	@ (8002754 <APPE_SysUserEvtRx+0x1cc>)
 8002642:	f009 f8b5 	bl	800b7b0 <DbgTraceGetFileName>
 8002646:	4601      	mov	r1, r0
 8002648:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 800264c:	4a42      	ldr	r2, [pc, #264]	@ (8002758 <APPE_SysUserEvtRx+0x1d0>)
 800264e:	4843      	ldr	r0, [pc, #268]	@ (800275c <APPE_SysUserEvtRx+0x1d4>)
 8002650:	f00c fbee 	bl	800ee30 <iprintf>
 8002654:	4845      	ldr	r0, [pc, #276]	@ (800276c <APPE_SysUserEvtRx+0x1e4>)
 8002656:	f00c fbeb 	bl	800ee30 <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f000 f8e0 	bl	8002820 <APPE_SysEvtReadyProcessing>
    break;
 8002660:	e073      	b.n	800274a <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 8002662:	483c      	ldr	r0, [pc, #240]	@ (8002754 <APPE_SysUserEvtRx+0x1cc>)
 8002664:	f009 f8a4 	bl	800b7b0 <DbgTraceGetFileName>
 8002668:	4601      	mov	r1, r0
 800266a:	f240 1373 	movw	r3, #371	@ 0x173
 800266e:	4a3a      	ldr	r2, [pc, #232]	@ (8002758 <APPE_SysUserEvtRx+0x1d0>)
 8002670:	483a      	ldr	r0, [pc, #232]	@ (800275c <APPE_SysUserEvtRx+0x1d4>)
 8002672:	f00c fbdd 	bl	800ee30 <iprintf>
 8002676:	483e      	ldr	r0, [pc, #248]	@ (8002770 <APPE_SysUserEvtRx+0x1e8>)
 8002678:	f00c fbda 	bl	800ee30 <iprintf>
    APPE_SysEvtError(pPayload);
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f000 f885 	bl	800278c <APPE_SysEvtError>
    break;
 8002682:	e062      	b.n	800274a <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CPU2 \n");
 8002684:	4833      	ldr	r0, [pc, #204]	@ (8002754 <APPE_SysUserEvtRx+0x1cc>)
 8002686:	f009 f893 	bl	800b7b0 <DbgTraceGetFileName>
 800268a:	4601      	mov	r1, r0
 800268c:	f44f 73bc 	mov.w	r3, #376	@ 0x178
 8002690:	4a31      	ldr	r2, [pc, #196]	@ (8002758 <APPE_SysUserEvtRx+0x1d0>)
 8002692:	4832      	ldr	r0, [pc, #200]	@ (800275c <APPE_SysUserEvtRx+0x1d4>)
 8002694:	f00c fbcc 	bl	800ee30 <iprintf>
 8002698:	4836      	ldr	r0, [pc, #216]	@ (8002774 <APPE_SysUserEvtRx+0x1ec>)
 800269a:	f00c fc39 	bl	800ef10 <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 800269e:	482d      	ldr	r0, [pc, #180]	@ (8002754 <APPE_SysUserEvtRx+0x1cc>)
 80026a0:	f009 f886 	bl	800b7b0 <DbgTraceGetFileName>
 80026a4:	4601      	mov	r1, r0
 80026a6:	f240 1379 	movw	r3, #377	@ 0x179
 80026aa:	4a2b      	ldr	r2, [pc, #172]	@ (8002758 <APPE_SysUserEvtRx+0x1d0>)
 80026ac:	482b      	ldr	r0, [pc, #172]	@ (800275c <APPE_SysUserEvtRx+0x1d4>)
 80026ae:	f00c fbbf 	bl	800ee30 <iprintf>
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	3302      	adds	r3, #2
 80026b6:	6819      	ldr	r1, [r3, #0]
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	3302      	adds	r3, #2
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	461a      	mov	r2, r3
 80026c0:	482d      	ldr	r0, [pc, #180]	@ (8002778 <APPE_SysUserEvtRx+0x1f0>)
 80026c2:	f00c fbb5 	bl	800ee30 <iprintf>
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
    break;
 80026c6:	e040      	b.n	800274a <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 80026c8:	4822      	ldr	r0, [pc, #136]	@ (8002754 <APPE_SysUserEvtRx+0x1cc>)
 80026ca:	f009 f871 	bl	800b7b0 <DbgTraceGetFileName>
 80026ce:	4601      	mov	r1, r0
 80026d0:	f240 137f 	movw	r3, #383	@ 0x17f
 80026d4:	4a20      	ldr	r2, [pc, #128]	@ (8002758 <APPE_SysUserEvtRx+0x1d0>)
 80026d6:	4821      	ldr	r0, [pc, #132]	@ (800275c <APPE_SysUserEvtRx+0x1d4>)
 80026d8:	f00c fbaa 	bl	800ee30 <iprintf>
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	3302      	adds	r3, #2
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4619      	mov	r1, r3
 80026e4:	4825      	ldr	r0, [pc, #148]	@ (800277c <APPE_SysUserEvtRx+0x1f4>)
 80026e6:	f00c fba3 	bl	800ee30 <iprintf>
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
    break;
 80026ea:	e02e      	b.n	800274a <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 80026ec:	4819      	ldr	r0, [pc, #100]	@ (8002754 <APPE_SysUserEvtRx+0x1cc>)
 80026ee:	f009 f85f 	bl	800b7b0 <DbgTraceGetFileName>
 80026f2:	4601      	mov	r1, r0
 80026f4:	f44f 73c2 	mov.w	r3, #388	@ 0x184
 80026f8:	4a17      	ldr	r2, [pc, #92]	@ (8002758 <APPE_SysUserEvtRx+0x1d0>)
 80026fa:	4818      	ldr	r0, [pc, #96]	@ (800275c <APPE_SysUserEvtRx+0x1d4>)
 80026fc:	f00c fb98 	bl	800ee30 <iprintf>
 8002700:	481f      	ldr	r0, [pc, #124]	@ (8002780 <APPE_SysUserEvtRx+0x1f8>)
 8002702:	f00c fb95 	bl	800ee30 <iprintf>
    break;
 8002706:	e020      	b.n	800274a <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 8002708:	4812      	ldr	r0, [pc, #72]	@ (8002754 <APPE_SysUserEvtRx+0x1cc>)
 800270a:	f009 f851 	bl	800b7b0 <DbgTraceGetFileName>
 800270e:	4601      	mov	r1, r0
 8002710:	f44f 73c4 	mov.w	r3, #392	@ 0x188
 8002714:	4a10      	ldr	r2, [pc, #64]	@ (8002758 <APPE_SysUserEvtRx+0x1d0>)
 8002716:	4811      	ldr	r0, [pc, #68]	@ (800275c <APPE_SysUserEvtRx+0x1d4>)
 8002718:	f00c fb8a 	bl	800ee30 <iprintf>
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	3302      	adds	r3, #2
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4619      	mov	r1, r3
 8002724:	4817      	ldr	r0, [pc, #92]	@ (8002784 <APPE_SysUserEvtRx+0x1fc>)
 8002726:	f00c fb83 	bl	800ee30 <iprintf>
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
    break;
 800272a:	e00e      	b.n	800274a <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 800272c:	4809      	ldr	r0, [pc, #36]	@ (8002754 <APPE_SysUserEvtRx+0x1cc>)
 800272e:	f009 f83f 	bl	800b7b0 <DbgTraceGetFileName>
 8002732:	4601      	mov	r1, r0
 8002734:	f240 138d 	movw	r3, #397	@ 0x18d
 8002738:	4a07      	ldr	r2, [pc, #28]	@ (8002758 <APPE_SysUserEvtRx+0x1d0>)
 800273a:	4808      	ldr	r0, [pc, #32]	@ (800275c <APPE_SysUserEvtRx+0x1d4>)
 800273c:	f00c fb78 	bl	800ee30 <iprintf>
 8002740:	4811      	ldr	r0, [pc, #68]	@ (8002788 <APPE_SysUserEvtRx+0x200>)
 8002742:	f00c fb75 	bl	800ee30 <iprintf>
    break;
 8002746:	e000      	b.n	800274a <APPE_SysUserEvtRx+0x1c2>

  default:
    break;
 8002748:	bf00      	nop
  }

  return;
 800274a:	bf00      	nop
}
 800274c:	3720      	adds	r7, #32
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	08012884 	.word	0x08012884
 8002758:	08013f08 	.word	0x08013f08
 800275c:	0801289c 	.word	0x0801289c
 8002760:	080128b0 	.word	0x080128b0
 8002764:	080128d4 	.word	0x080128d4
 8002768:	080128f0 	.word	0x080128f0
 800276c:	08012908 	.word	0x08012908
 8002770:	08012928 	.word	0x08012928
 8002774:	0801294c 	.word	0x0801294c
 8002778:	0801299c 	.word	0x0801299c
 800277c:	080129c4 	.word	0x080129c4
 8002780:	08012a00 	.word	0x08012a00
 8002784:	08012a24 	.word	0x08012a24
 8002788:	08012a60 	.word	0x08012a60

0800278c <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	330b      	adds	r3, #11
 800279a:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	3302      	adds	r3, #2
 80027a0:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 80027a2:	4819      	ldr	r0, [pc, #100]	@ (8002808 <APPE_SysEvtError+0x7c>)
 80027a4:	f009 f804 	bl	800b7b0 <DbgTraceGetFileName>
 80027a8:	4601      	mov	r1, r0
 80027aa:	f240 13a5 	movw	r3, #421	@ 0x1a5
 80027ae:	4a17      	ldr	r2, [pc, #92]	@ (800280c <APPE_SysEvtError+0x80>)
 80027b0:	4817      	ldr	r0, [pc, #92]	@ (8002810 <APPE_SysEvtError+0x84>)
 80027b2:	f00c fb3d 	bl	800ee30 <iprintf>
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	4619      	mov	r1, r3
 80027bc:	4815      	ldr	r0, [pc, #84]	@ (8002814 <APPE_SysEvtError+0x88>)
 80027be:	f00c fb37 	bl	800ee30 <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d10d      	bne.n	80027e6 <APPE_SysEvtError+0x5a>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 80027ca:	480f      	ldr	r0, [pc, #60]	@ (8002808 <APPE_SysEvtError+0x7c>)
 80027cc:	f008 fff0 	bl	800b7b0 <DbgTraceGetFileName>
 80027d0:	4601      	mov	r1, r0
 80027d2:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 80027d6:	4a0d      	ldr	r2, [pc, #52]	@ (800280c <APPE_SysEvtError+0x80>)
 80027d8:	480d      	ldr	r0, [pc, #52]	@ (8002810 <APPE_SysEvtError+0x84>)
 80027da:	f00c fb29 	bl	800ee30 <iprintf>
 80027de:	480e      	ldr	r0, [pc, #56]	@ (8002818 <APPE_SysEvtError+0x8c>)
 80027e0:	f00c fb96 	bl	800ef10 <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 80027e4:	e00d      	b.n	8002802 <APPE_SysEvtError+0x76>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 80027e6:	4808      	ldr	r0, [pc, #32]	@ (8002808 <APPE_SysEvtError+0x7c>)
 80027e8:	f008 ffe2 	bl	800b7b0 <DbgTraceGetFileName>
 80027ec:	4601      	mov	r1, r0
 80027ee:	f44f 73d7 	mov.w	r3, #430	@ 0x1ae
 80027f2:	4a06      	ldr	r2, [pc, #24]	@ (800280c <APPE_SysEvtError+0x80>)
 80027f4:	4806      	ldr	r0, [pc, #24]	@ (8002810 <APPE_SysEvtError+0x84>)
 80027f6:	f00c fb1b 	bl	800ee30 <iprintf>
 80027fa:	4808      	ldr	r0, [pc, #32]	@ (800281c <APPE_SysEvtError+0x90>)
 80027fc:	f00c fb88 	bl	800ef10 <puts>
  return;
 8002800:	bf00      	nop
}
 8002802:	3710      	adds	r7, #16
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	08012884 	.word	0x08012884
 800280c:	08013f1c 	.word	0x08013f1c
 8002810:	0801289c 	.word	0x0801289c
 8002814:	08012a84 	.word	0x08012a84
 8002818:	08012ab4 	.word	0x08012ab4
 800281c:	08012af0 	.word	0x08012af0

08002820 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b08a      	sub	sp, #40	@ 0x28
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8002828:	f107 0308 	add.w	r3, r7, #8
 800282c:	2200      	movs	r2, #0
 800282e:	601a      	str	r2, [r3, #0]
 8002830:	605a      	str	r2, [r3, #4]
 8002832:	609a      	str	r2, [r3, #8]
 8002834:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8002836:	2300      	movs	r3, #0
 8002838:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 800283a:	2300      	movs	r3, #0
 800283c:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	330b      	adds	r3, #11
 8002844:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	3302      	adds	r3, #2
 800284a:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d146      	bne.n	80028e2 <APPE_SysEvtReadyProcessing+0xc2>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 8002854:	4836      	ldr	r0, [pc, #216]	@ (8002930 <APPE_SysEvtReadyProcessing+0x110>)
 8002856:	f008 ffab 	bl	800b7b0 <DbgTraceGetFileName>
 800285a:	4601      	mov	r1, r0
 800285c:	f44f 73e2 	mov.w	r3, #452	@ 0x1c4
 8002860:	4a34      	ldr	r2, [pc, #208]	@ (8002934 <APPE_SysEvtReadyProcessing+0x114>)
 8002862:	4835      	ldr	r0, [pc, #212]	@ (8002938 <APPE_SysEvtReadyProcessing+0x118>)
 8002864:	f00c fae4 	bl	800ee30 <iprintf>
 8002868:	4834      	ldr	r0, [pc, #208]	@ (800293c <APPE_SysEvtReadyProcessing+0x11c>)
 800286a:	f00c fb51 	bl	800ef10 <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2();
 800286e:	f7ff fc53 	bl	8002118 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8002872:	230f      	movs	r3, #15
 8002874:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8002876:	237f      	movs	r3, #127	@ 0x7f
 8002878:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 800287a:	f7ff fd93 	bl	80023a4 <LL_DBGMCU_GetRevisionID>
 800287e:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 8002880:	482b      	ldr	r0, [pc, #172]	@ (8002930 <APPE_SysEvtReadyProcessing+0x110>)
 8002882:	f008 ff95 	bl	800b7b0 <DbgTraceGetFileName>
 8002886:	4601      	mov	r1, r0
 8002888:	f44f 73ee 	mov.w	r3, #476	@ 0x1dc
 800288c:	4a29      	ldr	r2, [pc, #164]	@ (8002934 <APPE_SysEvtReadyProcessing+0x114>)
 800288e:	482a      	ldr	r0, [pc, #168]	@ (8002938 <APPE_SysEvtReadyProcessing+0x118>)
 8002890:	f00c face 	bl	800ee30 <iprintf>
 8002894:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002896:	482a      	ldr	r0, [pc, #168]	@ (8002940 <APPE_SysEvtReadyProcessing+0x120>)
 8002898:	f00c faca 	bl	800ee30 <iprintf>

    config_param.RevisionID = (uint16_t)RevisionID;
 800289c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800289e:	b29b      	uxth	r3, r3
 80028a0:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 80028a2:	f7ff fd71 	bl	8002388 <LL_DBGMCU_GetDeviceID>
 80028a6:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
 80028a8:	4821      	ldr	r0, [pc, #132]	@ (8002930 <APPE_SysEvtReadyProcessing+0x110>)
 80028aa:	f008 ff81 	bl	800b7b0 <DbgTraceGetFileName>
 80028ae:	4601      	mov	r1, r0
 80028b0:	f240 13e1 	movw	r3, #481	@ 0x1e1
 80028b4:	4a1f      	ldr	r2, [pc, #124]	@ (8002934 <APPE_SysEvtReadyProcessing+0x114>)
 80028b6:	4820      	ldr	r0, [pc, #128]	@ (8002938 <APPE_SysEvtReadyProcessing+0x118>)
 80028b8:	f00c faba 	bl	800ee30 <iprintf>
 80028bc:	6a39      	ldr	r1, [r7, #32]
 80028be:	4821      	ldr	r0, [pc, #132]	@ (8002944 <APPE_SysEvtReadyProcessing+0x124>)
 80028c0:	f00c fab6 	bl	800ee30 <iprintf>
    config_param.DeviceID = (uint16_t)DeviceID;
 80028c4:	6a3b      	ldr	r3, [r7, #32]
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 80028ca:	f107 0308 	add.w	r3, r7, #8
 80028ce:	4618      	mov	r0, r3
 80028d0:	f008 f98e 	bl	800abf0 <SHCI_C2_Config>

    APP_BLE_Init();
 80028d4:	f009 fd50 	bl	800c378 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80028d8:	2100      	movs	r1, #0
 80028da:	2001      	movs	r0, #1
 80028dc:	f00b f930 	bl	800db40 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 80028e0:	e022      	b.n	8002928 <APPE_SysEvtReadyProcessing+0x108>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d110      	bne.n	800290c <APPE_SysEvtReadyProcessing+0xec>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 80028ea:	4811      	ldr	r0, [pc, #68]	@ (8002930 <APPE_SysEvtReadyProcessing+0x110>)
 80028ec:	f008 ff60 	bl	800b7b0 <DbgTraceGetFileName>
 80028f0:	4601      	mov	r1, r0
 80028f2:	f44f 73f7 	mov.w	r3, #494	@ 0x1ee
 80028f6:	4a0f      	ldr	r2, [pc, #60]	@ (8002934 <APPE_SysEvtReadyProcessing+0x114>)
 80028f8:	480f      	ldr	r0, [pc, #60]	@ (8002938 <APPE_SysEvtReadyProcessing+0x118>)
 80028fa:	f00c fa99 	bl	800ee30 <iprintf>
 80028fe:	4812      	ldr	r0, [pc, #72]	@ (8002948 <APPE_SysEvtReadyProcessing+0x128>)
 8002900:	f00c fa96 	bl	800ee30 <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	701a      	strb	r2, [r3, #0]
  return;
 800290a:	e00d      	b.n	8002928 <APPE_SysEvtReadyProcessing+0x108>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 800290c:	4808      	ldr	r0, [pc, #32]	@ (8002930 <APPE_SysEvtReadyProcessing+0x110>)
 800290e:	f008 ff4f 	bl	800b7b0 <DbgTraceGetFileName>
 8002912:	4601      	mov	r1, r0
 8002914:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8002918:	4a06      	ldr	r2, [pc, #24]	@ (8002934 <APPE_SysEvtReadyProcessing+0x114>)
 800291a:	4807      	ldr	r0, [pc, #28]	@ (8002938 <APPE_SysEvtReadyProcessing+0x118>)
 800291c:	f00c fa88 	bl	800ee30 <iprintf>
 8002920:	480a      	ldr	r0, [pc, #40]	@ (800294c <APPE_SysEvtReadyProcessing+0x12c>)
 8002922:	f00c fa85 	bl	800ee30 <iprintf>
  return;
 8002926:	bf00      	nop
}
 8002928:	3728      	adds	r7, #40	@ 0x28
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	08012884 	.word	0x08012884
 8002934:	08013f30 	.word	0x08013f30
 8002938:	0801289c 	.word	0x0801289c
 800293c:	08012b28 	.word	0x08012b28
 8002940:	08012b44 	.word	0x08012b44
 8002944:	08012b68 	.word	0x08012b68
 8002948:	08012b88 	.word	0x08012b88
 800294c:	08012bbc 	.word	0x08012bbc

08002950 <MX_APPE_Process>:
    __WFI();
  }
}

void MX_APPE_Process(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8002954:	f04f 30ff 	mov.w	r0, #4294967295
 8002958:	f00b f922 	bl	800dba0 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 800295c:	bf00      	nop
 800295e:	bd80      	pop	{r7, pc}

08002960 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8002964:	bf00      	nop
}
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr

0800296e <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 800296e:	b580      	push	{r7, lr}
 8002970:	b082      	sub	sp, #8
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
 8002976:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8002978:	f04f 30ff 	mov.w	r0, #4294967295
 800297c:	f00b f910 	bl	800dba0 <UTIL_SEQ_Run>
  return;
 8002980:	bf00      	nop
}
 8002982:	3708      	adds	r7, #8
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}

08002988 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8002990:	2100      	movs	r1, #0
 8002992:	2004      	movs	r0, #4
 8002994:	f00b fa22 	bl	800dddc <UTIL_SEQ_SetTask>
  return;
 8002998:	bf00      	nop
}
 800299a:	3708      	adds	r7, #8
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80029a8:	2002      	movs	r0, #2
 80029aa:	f00b fa83 	bl	800deb4 <UTIL_SEQ_SetEvt>
  return;
 80029ae:	bf00      	nop
}
 80029b0:	3708      	adds	r7, #8
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b082      	sub	sp, #8
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80029be:	2002      	movs	r0, #2
 80029c0:	f00b fa98 	bl	800def4 <UTIL_SEQ_WaitEvt>
  return;
 80029c4:	bf00      	nop
}
 80029c6:	3708      	adds	r7, #8
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <LL_AHB1_GRP1_EnableClock>:
{
 80029cc:	b480      	push	{r7}
 80029ce:	b085      	sub	sp, #20
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80029d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029d8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80029da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80029e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029e8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4013      	ands	r3, r2
 80029ee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80029f0:	68fb      	ldr	r3, [r7, #12]
}
 80029f2:	bf00      	nop
 80029f4:	3714      	adds	r7, #20
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr

080029fe <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80029fe:	b580      	push	{r7, lr}
 8002a00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002a02:	2004      	movs	r0, #4
 8002a04:	f7ff ffe2 	bl	80029cc <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002a08:	2001      	movs	r0, #1
 8002a0a:	f7ff ffdf 	bl	80029cc <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002a0e:	2200      	movs	r2, #0
 8002a10:	2100      	movs	r1, #0
 8002a12:	200b      	movs	r0, #11
 8002a14:	f001 fe6b 	bl	80046ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002a18:	200b      	movs	r0, #11
 8002a1a:	f001 fe82 	bl	8004722 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002a1e:	2200      	movs	r2, #0
 8002a20:	2100      	movs	r1, #0
 8002a22:	200c      	movs	r0, #12
 8002a24:	f001 fe63 	bl	80046ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002a28:	200c      	movs	r0, #12
 8002a2a:	f001 fe7a 	bl	8004722 <HAL_NVIC_EnableIRQ>

}
 8002a2e:	bf00      	nop
 8002a30:	bd80      	pop	{r7, pc}

08002a32 <LL_AHB2_GRP1_EnableClock>:
{
 8002a32:	b480      	push	{r7}
 8002a34:	b085      	sub	sp, #20
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002a3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a3e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002a40:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002a4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a4e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4013      	ands	r3, r2
 8002a54:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a56:	68fb      	ldr	r3, [r7, #12]
}
 8002a58:	bf00      	nop
 8002a5a:	3714      	adds	r7, #20
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b086      	sub	sp, #24
 8002a68:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a6a:	1d3b      	adds	r3, r7, #4
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]
 8002a70:	605a      	str	r2, [r3, #4]
 8002a72:	609a      	str	r2, [r3, #8]
 8002a74:	60da      	str	r2, [r3, #12]
 8002a76:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a78:	2004      	movs	r0, #4
 8002a7a:	f7ff ffda 	bl	8002a32 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a7e:	2002      	movs	r0, #2
 8002a80:	f7ff ffd7 	bl	8002a32 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a84:	2001      	movs	r0, #1
 8002a86:	f7ff ffd4 	bl	8002a32 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5, GPIO_PIN_RESET);
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	2123      	movs	r1, #35	@ 0x23
 8002a8e:	4815      	ldr	r0, [pc, #84]	@ (8002ae4 <MX_GPIO_Init+0x80>)
 8002a90:	f002 fb46 	bl	8005120 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002a94:	2310      	movs	r3, #16
 8002a96:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002aa0:	1d3b      	adds	r3, r7, #4
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	4810      	ldr	r0, [pc, #64]	@ (8002ae8 <MX_GPIO_Init+0x84>)
 8002aa6:	f002 f9b3 	bl	8004e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5;
 8002aaa:	2323      	movs	r3, #35	@ 0x23
 8002aac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aba:	1d3b      	adds	r3, r7, #4
 8002abc:	4619      	mov	r1, r3
 8002abe:	4809      	ldr	r0, [pc, #36]	@ (8002ae4 <MX_GPIO_Init+0x80>)
 8002ac0:	f002 f9a6 	bl	8004e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002ac4:	2380      	movs	r3, #128	@ 0x80
 8002ac6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002acc:	2301      	movs	r3, #1
 8002ace:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ad0:	1d3b      	adds	r3, r7, #4
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	4803      	ldr	r0, [pc, #12]	@ (8002ae4 <MX_GPIO_Init+0x80>)
 8002ad6:	f002 f99b 	bl	8004e10 <HAL_GPIO_Init>

}
 8002ada:	bf00      	nop
 8002adc:	3718      	adds	r7, #24
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	48000400 	.word	0x48000400
 8002ae8:	48000800 	.word	0x48000800

08002aec <LL_EXTI_EnableIT_0_31>:
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002af4:	4b06      	ldr	r3, [pc, #24]	@ (8002b10 <LL_EXTI_EnableIT_0_31+0x24>)
 8002af6:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8002afa:	4905      	ldr	r1, [pc, #20]	@ (8002b10 <LL_EXTI_EnableIT_0_31+0x24>)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8002b04:	bf00      	nop
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr
 8002b10:	58000800 	.word	0x58000800

08002b14 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002b1c:	4b05      	ldr	r3, [pc, #20]	@ (8002b34 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	4904      	ldr	r1, [pc, #16]	@ (8002b34 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	600b      	str	r3, [r1, #0]

}
 8002b28:	bf00      	nop
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr
 8002b34:	58000800 	.word	0x58000800

08002b38 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002b3e:	4b0d      	ldr	r3, [pc, #52]	@ (8002b74 <ReadRtcSsrValue+0x3c>)
 8002b40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002b46:	4b0b      	ldr	r3, [pc, #44]	@ (8002b74 <ReadRtcSsrValue+0x3c>)
 8002b48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8002b4e:	e005      	b.n	8002b5c <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002b54:	4b07      	ldr	r3, [pc, #28]	@ (8002b74 <ReadRtcSsrValue+0x3c>)
 8002b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d1f5      	bne.n	8002b50 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8002b64:	683b      	ldr	r3, [r7, #0]
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	40002800 	.word	0x40002800

08002b78 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b085      	sub	sp, #20
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	4603      	mov	r3, r0
 8002b80:	460a      	mov	r2, r1
 8002b82:	71fb      	strb	r3, [r7, #7]
 8002b84:	4613      	mov	r3, r2
 8002b86:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8002b88:	79ba      	ldrb	r2, [r7, #6]
 8002b8a:	491d      	ldr	r1, [pc, #116]	@ (8002c00 <LinkTimerAfter+0x88>)
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	4413      	add	r3, r2
 8002b92:	00db      	lsls	r3, r3, #3
 8002b94:	440b      	add	r3, r1
 8002b96:	3315      	adds	r3, #21
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002b9c:	7bfb      	ldrb	r3, [r7, #15]
 8002b9e:	2b06      	cmp	r3, #6
 8002ba0:	d009      	beq.n	8002bb6 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8002ba2:	7bfa      	ldrb	r2, [r7, #15]
 8002ba4:	4916      	ldr	r1, [pc, #88]	@ (8002c00 <LinkTimerAfter+0x88>)
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	4413      	add	r3, r2
 8002bac:	00db      	lsls	r3, r3, #3
 8002bae:	440b      	add	r3, r1
 8002bb0:	3314      	adds	r3, #20
 8002bb2:	79fa      	ldrb	r2, [r7, #7]
 8002bb4:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8002bb6:	79fa      	ldrb	r2, [r7, #7]
 8002bb8:	4911      	ldr	r1, [pc, #68]	@ (8002c00 <LinkTimerAfter+0x88>)
 8002bba:	4613      	mov	r3, r2
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	4413      	add	r3, r2
 8002bc0:	00db      	lsls	r3, r3, #3
 8002bc2:	440b      	add	r3, r1
 8002bc4:	3315      	adds	r3, #21
 8002bc6:	7bfa      	ldrb	r2, [r7, #15]
 8002bc8:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8002bca:	79fa      	ldrb	r2, [r7, #7]
 8002bcc:	490c      	ldr	r1, [pc, #48]	@ (8002c00 <LinkTimerAfter+0x88>)
 8002bce:	4613      	mov	r3, r2
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	4413      	add	r3, r2
 8002bd4:	00db      	lsls	r3, r3, #3
 8002bd6:	440b      	add	r3, r1
 8002bd8:	3314      	adds	r3, #20
 8002bda:	79ba      	ldrb	r2, [r7, #6]
 8002bdc:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8002bde:	79ba      	ldrb	r2, [r7, #6]
 8002be0:	4907      	ldr	r1, [pc, #28]	@ (8002c00 <LinkTimerAfter+0x88>)
 8002be2:	4613      	mov	r3, r2
 8002be4:	005b      	lsls	r3, r3, #1
 8002be6:	4413      	add	r3, r2
 8002be8:	00db      	lsls	r3, r3, #3
 8002bea:	440b      	add	r3, r1
 8002bec:	3315      	adds	r3, #21
 8002bee:	79fa      	ldrb	r2, [r7, #7]
 8002bf0:	701a      	strb	r2, [r3, #0]

  return;
 8002bf2:	bf00      	nop
}
 8002bf4:	3714      	adds	r7, #20
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	20002978 	.word	0x20002978

08002c04 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b085      	sub	sp, #20
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	460a      	mov	r2, r1
 8002c0e:	71fb      	strb	r3, [r7, #7]
 8002c10:	4613      	mov	r3, r2
 8002c12:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8002c14:	4b29      	ldr	r3, [pc, #164]	@ (8002cbc <LinkTimerBefore+0xb8>)
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	79ba      	ldrb	r2, [r7, #6]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d032      	beq.n	8002c86 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8002c20:	79ba      	ldrb	r2, [r7, #6]
 8002c22:	4927      	ldr	r1, [pc, #156]	@ (8002cc0 <LinkTimerBefore+0xbc>)
 8002c24:	4613      	mov	r3, r2
 8002c26:	005b      	lsls	r3, r3, #1
 8002c28:	4413      	add	r3, r2
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	440b      	add	r3, r1
 8002c2e:	3314      	adds	r3, #20
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8002c34:	7bfa      	ldrb	r2, [r7, #15]
 8002c36:	4922      	ldr	r1, [pc, #136]	@ (8002cc0 <LinkTimerBefore+0xbc>)
 8002c38:	4613      	mov	r3, r2
 8002c3a:	005b      	lsls	r3, r3, #1
 8002c3c:	4413      	add	r3, r2
 8002c3e:	00db      	lsls	r3, r3, #3
 8002c40:	440b      	add	r3, r1
 8002c42:	3315      	adds	r3, #21
 8002c44:	79fa      	ldrb	r2, [r7, #7]
 8002c46:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8002c48:	79fa      	ldrb	r2, [r7, #7]
 8002c4a:	491d      	ldr	r1, [pc, #116]	@ (8002cc0 <LinkTimerBefore+0xbc>)
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	005b      	lsls	r3, r3, #1
 8002c50:	4413      	add	r3, r2
 8002c52:	00db      	lsls	r3, r3, #3
 8002c54:	440b      	add	r3, r1
 8002c56:	3315      	adds	r3, #21
 8002c58:	79ba      	ldrb	r2, [r7, #6]
 8002c5a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8002c5c:	79fa      	ldrb	r2, [r7, #7]
 8002c5e:	4918      	ldr	r1, [pc, #96]	@ (8002cc0 <LinkTimerBefore+0xbc>)
 8002c60:	4613      	mov	r3, r2
 8002c62:	005b      	lsls	r3, r3, #1
 8002c64:	4413      	add	r3, r2
 8002c66:	00db      	lsls	r3, r3, #3
 8002c68:	440b      	add	r3, r1
 8002c6a:	3314      	adds	r3, #20
 8002c6c:	7bfa      	ldrb	r2, [r7, #15]
 8002c6e:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8002c70:	79ba      	ldrb	r2, [r7, #6]
 8002c72:	4913      	ldr	r1, [pc, #76]	@ (8002cc0 <LinkTimerBefore+0xbc>)
 8002c74:	4613      	mov	r3, r2
 8002c76:	005b      	lsls	r3, r3, #1
 8002c78:	4413      	add	r3, r2
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	440b      	add	r3, r1
 8002c7e:	3314      	adds	r3, #20
 8002c80:	79fa      	ldrb	r2, [r7, #7]
 8002c82:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8002c84:	e014      	b.n	8002cb0 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8002c86:	79fa      	ldrb	r2, [r7, #7]
 8002c88:	490d      	ldr	r1, [pc, #52]	@ (8002cc0 <LinkTimerBefore+0xbc>)
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	005b      	lsls	r3, r3, #1
 8002c8e:	4413      	add	r3, r2
 8002c90:	00db      	lsls	r3, r3, #3
 8002c92:	440b      	add	r3, r1
 8002c94:	3315      	adds	r3, #21
 8002c96:	79ba      	ldrb	r2, [r7, #6]
 8002c98:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8002c9a:	79ba      	ldrb	r2, [r7, #6]
 8002c9c:	4908      	ldr	r1, [pc, #32]	@ (8002cc0 <LinkTimerBefore+0xbc>)
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	4413      	add	r3, r2
 8002ca4:	00db      	lsls	r3, r3, #3
 8002ca6:	440b      	add	r3, r1
 8002ca8:	3314      	adds	r3, #20
 8002caa:	79fa      	ldrb	r2, [r7, #7]
 8002cac:	701a      	strb	r2, [r3, #0]
  return;
 8002cae:	bf00      	nop
}
 8002cb0:	3714      	adds	r7, #20
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	20002a08 	.word	0x20002a08
 8002cc0:	20002978 	.word	0x20002978

08002cc4 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	4603      	mov	r3, r0
 8002ccc:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002cce:	4b4e      	ldr	r3, [pc, #312]	@ (8002e08 <linkTimer+0x144>)
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	2b06      	cmp	r3, #6
 8002cd6:	d118      	bne.n	8002d0a <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8002cd8:	4b4b      	ldr	r3, [pc, #300]	@ (8002e08 <linkTimer+0x144>)
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	b2da      	uxtb	r2, r3
 8002cde:	4b4b      	ldr	r3, [pc, #300]	@ (8002e0c <linkTimer+0x148>)
 8002ce0:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8002ce2:	4a49      	ldr	r2, [pc, #292]	@ (8002e08 <linkTimer+0x144>)
 8002ce4:	79fb      	ldrb	r3, [r7, #7]
 8002ce6:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8002ce8:	79fa      	ldrb	r2, [r7, #7]
 8002cea:	4949      	ldr	r1, [pc, #292]	@ (8002e10 <linkTimer+0x14c>)
 8002cec:	4613      	mov	r3, r2
 8002cee:	005b      	lsls	r3, r3, #1
 8002cf0:	4413      	add	r3, r2
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	440b      	add	r3, r1
 8002cf6:	3315      	adds	r3, #21
 8002cf8:	2206      	movs	r2, #6
 8002cfa:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002cfc:	4b45      	ldr	r3, [pc, #276]	@ (8002e14 <linkTimer+0x150>)
 8002cfe:	f04f 32ff 	mov.w	r2, #4294967295
 8002d02:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8002d04:	2300      	movs	r3, #0
 8002d06:	81fb      	strh	r3, [r7, #14]
 8002d08:	e078      	b.n	8002dfc <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8002d0a:	f000 f909 	bl	8002f20 <ReturnTimeElapsed>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8002d12:	79fa      	ldrb	r2, [r7, #7]
 8002d14:	493e      	ldr	r1, [pc, #248]	@ (8002e10 <linkTimer+0x14c>)
 8002d16:	4613      	mov	r3, r2
 8002d18:	005b      	lsls	r3, r3, #1
 8002d1a:	4413      	add	r3, r2
 8002d1c:	00db      	lsls	r3, r3, #3
 8002d1e:	440b      	add	r3, r1
 8002d20:	3308      	adds	r3, #8
 8002d22:	6819      	ldr	r1, [r3, #0]
 8002d24:	89fb      	ldrh	r3, [r7, #14]
 8002d26:	79fa      	ldrb	r2, [r7, #7]
 8002d28:	4419      	add	r1, r3
 8002d2a:	4839      	ldr	r0, [pc, #228]	@ (8002e10 <linkTimer+0x14c>)
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	005b      	lsls	r3, r3, #1
 8002d30:	4413      	add	r3, r2
 8002d32:	00db      	lsls	r3, r3, #3
 8002d34:	4403      	add	r3, r0
 8002d36:	3308      	adds	r3, #8
 8002d38:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8002d3a:	79fa      	ldrb	r2, [r7, #7]
 8002d3c:	4934      	ldr	r1, [pc, #208]	@ (8002e10 <linkTimer+0x14c>)
 8002d3e:	4613      	mov	r3, r2
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	4413      	add	r3, r2
 8002d44:	00db      	lsls	r3, r3, #3
 8002d46:	440b      	add	r3, r1
 8002d48:	3308      	adds	r3, #8
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8002d4e:	4b2e      	ldr	r3, [pc, #184]	@ (8002e08 <linkTimer+0x144>)
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	4619      	mov	r1, r3
 8002d56:	4a2e      	ldr	r2, [pc, #184]	@ (8002e10 <linkTimer+0x14c>)
 8002d58:	460b      	mov	r3, r1
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	440b      	add	r3, r1
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	4413      	add	r3, r2
 8002d62:	3308      	adds	r3, #8
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	68ba      	ldr	r2, [r7, #8]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d337      	bcc.n	8002ddc <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8002d6c:	4b26      	ldr	r3, [pc, #152]	@ (8002e08 <linkTimer+0x144>)
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8002d72:	7b7a      	ldrb	r2, [r7, #13]
 8002d74:	4926      	ldr	r1, [pc, #152]	@ (8002e10 <linkTimer+0x14c>)
 8002d76:	4613      	mov	r3, r2
 8002d78:	005b      	lsls	r3, r3, #1
 8002d7a:	4413      	add	r3, r2
 8002d7c:	00db      	lsls	r3, r3, #3
 8002d7e:	440b      	add	r3, r1
 8002d80:	3315      	adds	r3, #21
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8002d86:	e013      	b.n	8002db0 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8002d88:	7b7a      	ldrb	r2, [r7, #13]
 8002d8a:	4921      	ldr	r1, [pc, #132]	@ (8002e10 <linkTimer+0x14c>)
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	4413      	add	r3, r2
 8002d92:	00db      	lsls	r3, r3, #3
 8002d94:	440b      	add	r3, r1
 8002d96:	3315      	adds	r3, #21
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8002d9c:	7b7a      	ldrb	r2, [r7, #13]
 8002d9e:	491c      	ldr	r1, [pc, #112]	@ (8002e10 <linkTimer+0x14c>)
 8002da0:	4613      	mov	r3, r2
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	4413      	add	r3, r2
 8002da6:	00db      	lsls	r3, r3, #3
 8002da8:	440b      	add	r3, r1
 8002daa:	3315      	adds	r3, #21
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8002db0:	7b3b      	ldrb	r3, [r7, #12]
 8002db2:	2b06      	cmp	r3, #6
 8002db4:	d00b      	beq.n	8002dce <linkTimer+0x10a>
 8002db6:	7b3a      	ldrb	r2, [r7, #12]
 8002db8:	4915      	ldr	r1, [pc, #84]	@ (8002e10 <linkTimer+0x14c>)
 8002dba:	4613      	mov	r3, r2
 8002dbc:	005b      	lsls	r3, r3, #1
 8002dbe:	4413      	add	r3, r2
 8002dc0:	00db      	lsls	r3, r3, #3
 8002dc2:	440b      	add	r3, r1
 8002dc4:	3308      	adds	r3, #8
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	68ba      	ldr	r2, [r7, #8]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d2dc      	bcs.n	8002d88 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8002dce:	7b7a      	ldrb	r2, [r7, #13]
 8002dd0:	79fb      	ldrb	r3, [r7, #7]
 8002dd2:	4611      	mov	r1, r2
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7ff fecf 	bl	8002b78 <LinkTimerAfter>
 8002dda:	e00f      	b.n	8002dfc <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8002ddc:	4b0a      	ldr	r3, [pc, #40]	@ (8002e08 <linkTimer+0x144>)
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	b2da      	uxtb	r2, r3
 8002de2:	79fb      	ldrb	r3, [r7, #7]
 8002de4:	4611      	mov	r1, r2
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7ff ff0c 	bl	8002c04 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8002dec:	4b06      	ldr	r3, [pc, #24]	@ (8002e08 <linkTimer+0x144>)
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	b2da      	uxtb	r2, r3
 8002df2:	4b06      	ldr	r3, [pc, #24]	@ (8002e0c <linkTimer+0x148>)
 8002df4:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8002df6:	4a04      	ldr	r2, [pc, #16]	@ (8002e08 <linkTimer+0x144>)
 8002df8:	79fb      	ldrb	r3, [r7, #7]
 8002dfa:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8002dfc:	89fb      	ldrh	r3, [r7, #14]
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3710      	adds	r7, #16
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	20002a08 	.word	0x20002a08
 8002e0c:	20002a09 	.word	0x20002a09
 8002e10:	20002978 	.word	0x20002978
 8002e14:	20002a0c 	.word	0x20002a0c

08002e18 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b085      	sub	sp, #20
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	4603      	mov	r3, r0
 8002e20:	460a      	mov	r2, r1
 8002e22:	71fb      	strb	r3, [r7, #7]
 8002e24:	4613      	mov	r3, r2
 8002e26:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8002e28:	4b39      	ldr	r3, [pc, #228]	@ (8002f10 <UnlinkTimer+0xf8>)
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	79fa      	ldrb	r2, [r7, #7]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d111      	bne.n	8002e58 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8002e34:	4b36      	ldr	r3, [pc, #216]	@ (8002f10 <UnlinkTimer+0xf8>)
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	b2da      	uxtb	r2, r3
 8002e3a:	4b36      	ldr	r3, [pc, #216]	@ (8002f14 <UnlinkTimer+0xfc>)
 8002e3c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8002e3e:	79fa      	ldrb	r2, [r7, #7]
 8002e40:	4935      	ldr	r1, [pc, #212]	@ (8002f18 <UnlinkTimer+0x100>)
 8002e42:	4613      	mov	r3, r2
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	4413      	add	r3, r2
 8002e48:	00db      	lsls	r3, r3, #3
 8002e4a:	440b      	add	r3, r1
 8002e4c:	3315      	adds	r3, #21
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	b2da      	uxtb	r2, r3
 8002e52:	4b2f      	ldr	r3, [pc, #188]	@ (8002f10 <UnlinkTimer+0xf8>)
 8002e54:	701a      	strb	r2, [r3, #0]
 8002e56:	e03e      	b.n	8002ed6 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8002e58:	79fa      	ldrb	r2, [r7, #7]
 8002e5a:	492f      	ldr	r1, [pc, #188]	@ (8002f18 <UnlinkTimer+0x100>)
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	005b      	lsls	r3, r3, #1
 8002e60:	4413      	add	r3, r2
 8002e62:	00db      	lsls	r3, r3, #3
 8002e64:	440b      	add	r3, r1
 8002e66:	3314      	adds	r3, #20
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8002e6c:	79fa      	ldrb	r2, [r7, #7]
 8002e6e:	492a      	ldr	r1, [pc, #168]	@ (8002f18 <UnlinkTimer+0x100>)
 8002e70:	4613      	mov	r3, r2
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	4413      	add	r3, r2
 8002e76:	00db      	lsls	r3, r3, #3
 8002e78:	440b      	add	r3, r1
 8002e7a:	3315      	adds	r3, #21
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8002e80:	79f9      	ldrb	r1, [r7, #7]
 8002e82:	7bfa      	ldrb	r2, [r7, #15]
 8002e84:	4824      	ldr	r0, [pc, #144]	@ (8002f18 <UnlinkTimer+0x100>)
 8002e86:	460b      	mov	r3, r1
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	440b      	add	r3, r1
 8002e8c:	00db      	lsls	r3, r3, #3
 8002e8e:	4403      	add	r3, r0
 8002e90:	3315      	adds	r3, #21
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	b2d8      	uxtb	r0, r3
 8002e96:	4920      	ldr	r1, [pc, #128]	@ (8002f18 <UnlinkTimer+0x100>)
 8002e98:	4613      	mov	r3, r2
 8002e9a:	005b      	lsls	r3, r3, #1
 8002e9c:	4413      	add	r3, r2
 8002e9e:	00db      	lsls	r3, r3, #3
 8002ea0:	440b      	add	r3, r1
 8002ea2:	3315      	adds	r3, #21
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002ea8:	7bbb      	ldrb	r3, [r7, #14]
 8002eaa:	2b06      	cmp	r3, #6
 8002eac:	d013      	beq.n	8002ed6 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8002eae:	79f9      	ldrb	r1, [r7, #7]
 8002eb0:	7bba      	ldrb	r2, [r7, #14]
 8002eb2:	4819      	ldr	r0, [pc, #100]	@ (8002f18 <UnlinkTimer+0x100>)
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	005b      	lsls	r3, r3, #1
 8002eb8:	440b      	add	r3, r1
 8002eba:	00db      	lsls	r3, r3, #3
 8002ebc:	4403      	add	r3, r0
 8002ebe:	3314      	adds	r3, #20
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	b2d8      	uxtb	r0, r3
 8002ec4:	4914      	ldr	r1, [pc, #80]	@ (8002f18 <UnlinkTimer+0x100>)
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	4413      	add	r3, r2
 8002ecc:	00db      	lsls	r3, r3, #3
 8002ece:	440b      	add	r3, r1
 8002ed0:	3314      	adds	r3, #20
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8002ed6:	79fa      	ldrb	r2, [r7, #7]
 8002ed8:	490f      	ldr	r1, [pc, #60]	@ (8002f18 <UnlinkTimer+0x100>)
 8002eda:	4613      	mov	r3, r2
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	4413      	add	r3, r2
 8002ee0:	00db      	lsls	r3, r3, #3
 8002ee2:	440b      	add	r3, r1
 8002ee4:	330c      	adds	r3, #12
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8002eea:	4b09      	ldr	r3, [pc, #36]	@ (8002f10 <UnlinkTimer+0xf8>)
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	2b06      	cmp	r3, #6
 8002ef2:	d107      	bne.n	8002f04 <UnlinkTimer+0xec>
 8002ef4:	79bb      	ldrb	r3, [r7, #6]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d104      	bne.n	8002f04 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002efa:	4b08      	ldr	r3, [pc, #32]	@ (8002f1c <UnlinkTimer+0x104>)
 8002efc:	f04f 32ff 	mov.w	r2, #4294967295
 8002f00:	601a      	str	r2, [r3, #0]
  }

  return;
 8002f02:	bf00      	nop
 8002f04:	bf00      	nop
}
 8002f06:	3714      	adds	r7, #20
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr
 8002f10:	20002a08 	.word	0x20002a08
 8002f14:	20002a09 	.word	0x20002a09
 8002f18:	20002978 	.word	0x20002978
 8002f1c:	20002a0c 	.word	0x20002a0c

08002f20 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8002f26:	4b1a      	ldr	r3, [pc, #104]	@ (8002f90 <ReturnTimeElapsed+0x70>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f2e:	d026      	beq.n	8002f7e <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8002f30:	f7ff fe02 	bl	8002b38 <ReadRtcSsrValue>
 8002f34:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8002f36:	4b16      	ldr	r3, [pc, #88]	@ (8002f90 <ReturnTimeElapsed+0x70>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d805      	bhi.n	8002f4c <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8002f40:	4b13      	ldr	r3, [pc, #76]	@ (8002f90 <ReturnTimeElapsed+0x70>)
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	607b      	str	r3, [r7, #4]
 8002f4a:	e00a      	b.n	8002f62 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8002f4c:	4b11      	ldr	r3, [pc, #68]	@ (8002f94 <ReturnTimeElapsed+0x74>)
 8002f4e:	881b      	ldrh	r3, [r3, #0]
 8002f50:	461a      	mov	r2, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8002f58:	4b0d      	ldr	r3, [pc, #52]	@ (8002f90 <ReturnTimeElapsed+0x70>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	683a      	ldr	r2, [r7, #0]
 8002f5e:	4413      	add	r3, r2
 8002f60:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8002f62:	4b0d      	ldr	r3, [pc, #52]	@ (8002f98 <ReturnTimeElapsed+0x78>)
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	461a      	mov	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	fb02 f303 	mul.w	r3, r2, r3
 8002f6e:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8002f70:	4b0a      	ldr	r3, [pc, #40]	@ (8002f9c <ReturnTimeElapsed+0x7c>)
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	461a      	mov	r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	40d3      	lsrs	r3, r2
 8002f7a:	607b      	str	r3, [r7, #4]
 8002f7c:	e001      	b.n	8002f82 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	b29b      	uxth	r3, r3
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3708      	adds	r7, #8
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	20002a0c 	.word	0x20002a0c
 8002f94:	20002a14 	.word	0x20002a14
 8002f98:	20002a12 	.word	0x20002a12
 8002f9c:	20002a11 	.word	0x20002a11

08002fa0 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8002faa:	88fb      	ldrh	r3, [r7, #6]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d108      	bne.n	8002fc2 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8002fb0:	f7ff fdc2 	bl	8002b38 <ReadRtcSsrValue>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	4a21      	ldr	r2, [pc, #132]	@ (800303c <RestartWakeupCounter+0x9c>)
 8002fb8:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8002fba:	2003      	movs	r0, #3
 8002fbc:	f001 fbd9 	bl	8004772 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8002fc0:	e039      	b.n	8003036 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8002fc2:	88fb      	ldrh	r3, [r7, #6]
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d803      	bhi.n	8002fd0 <RestartWakeupCounter+0x30>
 8002fc8:	4b1d      	ldr	r3, [pc, #116]	@ (8003040 <RestartWakeupCounter+0xa0>)
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d002      	beq.n	8002fd6 <RestartWakeupCounter+0x36>
      Value -= 1;
 8002fd0:	88fb      	ldrh	r3, [r7, #6]
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002fd6:	bf00      	nop
 8002fd8:	4b1a      	ldr	r3, [pc, #104]	@ (8003044 <RestartWakeupCounter+0xa4>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	f003 0304 	and.w	r3, r3, #4
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d0f8      	beq.n	8002fd8 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002fe6:	4b17      	ldr	r3, [pc, #92]	@ (8003044 <RestartWakeupCounter+0xa4>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	b2da      	uxtb	r2, r3
 8002fee:	4b15      	ldr	r3, [pc, #84]	@ (8003044 <RestartWakeupCounter+0xa4>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8002ff6:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002ff8:	4b13      	ldr	r3, [pc, #76]	@ (8003048 <RestartWakeupCounter+0xa8>)
 8002ffa:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002ffe:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8003000:	2003      	movs	r0, #3
 8003002:	f001 fbc4 	bl	800478e <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8003006:	4b11      	ldr	r3, [pc, #68]	@ (800304c <RestartWakeupCounter+0xac>)
 8003008:	695b      	ldr	r3, [r3, #20]
 800300a:	0c1b      	lsrs	r3, r3, #16
 800300c:	041b      	lsls	r3, r3, #16
 800300e:	88fa      	ldrh	r2, [r7, #6]
 8003010:	490e      	ldr	r1, [pc, #56]	@ (800304c <RestartWakeupCounter+0xac>)
 8003012:	4313      	orrs	r3, r2
 8003014:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8003016:	f7ff fd8f 	bl	8002b38 <ReadRtcSsrValue>
 800301a:	4603      	mov	r3, r0
 800301c:	4a07      	ldr	r2, [pc, #28]	@ (800303c <RestartWakeupCounter+0x9c>)
 800301e:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8003020:	4b08      	ldr	r3, [pc, #32]	@ (8003044 <RestartWakeupCounter+0xa4>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	689a      	ldr	r2, [r3, #8]
 8003026:	4b07      	ldr	r3, [pc, #28]	@ (8003044 <RestartWakeupCounter+0xa4>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800302e:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8003030:	f3af 8000 	nop.w
  return ;
 8003034:	bf00      	nop
}
 8003036:	3708      	adds	r7, #8
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	20002a0c 	.word	0x20002a0c
 8003040:	20002a11 	.word	0x20002a11
 8003044:	20002abc 	.word	0x20002abc
 8003048:	58000800 	.word	0x58000800
 800304c:	40002800 	.word	0x40002800

08003050 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8003056:	4b45      	ldr	r3, [pc, #276]	@ (800316c <RescheduleTimerList+0x11c>)
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800305e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003062:	d107      	bne.n	8003074 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8003064:	bf00      	nop
 8003066:	4b42      	ldr	r3, [pc, #264]	@ (8003170 <RescheduleTimerList+0x120>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	f003 0304 	and.w	r3, r3, #4
 8003070:	2b00      	cmp	r3, #0
 8003072:	d1f8      	bne.n	8003066 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8003074:	4b3e      	ldr	r3, [pc, #248]	@ (8003170 <RescheduleTimerList+0x120>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	689a      	ldr	r2, [r3, #8]
 800307a:	4b3d      	ldr	r3, [pc, #244]	@ (8003170 <RescheduleTimerList+0x120>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003082:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8003084:	4b3b      	ldr	r3, [pc, #236]	@ (8003174 <RescheduleTimerList+0x124>)
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 800308a:	7bfa      	ldrb	r2, [r7, #15]
 800308c:	493a      	ldr	r1, [pc, #232]	@ (8003178 <RescheduleTimerList+0x128>)
 800308e:	4613      	mov	r3, r2
 8003090:	005b      	lsls	r3, r3, #1
 8003092:	4413      	add	r3, r2
 8003094:	00db      	lsls	r3, r3, #3
 8003096:	440b      	add	r3, r1
 8003098:	3308      	adds	r3, #8
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 800309e:	f7ff ff3f 	bl	8002f20 <ReturnTimeElapsed>
 80030a2:	4603      	mov	r3, r0
 80030a4:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 80030a6:	88fb      	ldrh	r3, [r7, #6]
 80030a8:	68ba      	ldr	r2, [r7, #8]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d205      	bcs.n	80030ba <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 80030ae:	2300      	movs	r3, #0
 80030b0:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80030b2:	4b32      	ldr	r3, [pc, #200]	@ (800317c <RescheduleTimerList+0x12c>)
 80030b4:	2201      	movs	r2, #1
 80030b6:	701a      	strb	r2, [r3, #0]
 80030b8:	e04d      	b.n	8003156 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 80030ba:	88fb      	ldrh	r3, [r7, #6]
 80030bc:	4a30      	ldr	r2, [pc, #192]	@ (8003180 <RescheduleTimerList+0x130>)
 80030be:	8812      	ldrh	r2, [r2, #0]
 80030c0:	b292      	uxth	r2, r2
 80030c2:	4413      	add	r3, r2
 80030c4:	461a      	mov	r2, r3
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d906      	bls.n	80030da <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 80030cc:	4b2c      	ldr	r3, [pc, #176]	@ (8003180 <RescheduleTimerList+0x130>)
 80030ce:	881b      	ldrh	r3, [r3, #0]
 80030d0:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 80030d2:	4b2a      	ldr	r3, [pc, #168]	@ (800317c <RescheduleTimerList+0x12c>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	701a      	strb	r2, [r3, #0]
 80030d8:	e03d      	b.n	8003156 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	b29a      	uxth	r2, r3
 80030de:	88fb      	ldrh	r3, [r7, #6]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80030e4:	4b25      	ldr	r3, [pc, #148]	@ (800317c <RescheduleTimerList+0x12c>)
 80030e6:	2201      	movs	r2, #1
 80030e8:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80030ea:	e034      	b.n	8003156 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 80030ec:	7bfa      	ldrb	r2, [r7, #15]
 80030ee:	4922      	ldr	r1, [pc, #136]	@ (8003178 <RescheduleTimerList+0x128>)
 80030f0:	4613      	mov	r3, r2
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	4413      	add	r3, r2
 80030f6:	00db      	lsls	r3, r3, #3
 80030f8:	440b      	add	r3, r1
 80030fa:	3308      	adds	r3, #8
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	88fb      	ldrh	r3, [r7, #6]
 8003100:	429a      	cmp	r2, r3
 8003102:	d20a      	bcs.n	800311a <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8003104:	7bfa      	ldrb	r2, [r7, #15]
 8003106:	491c      	ldr	r1, [pc, #112]	@ (8003178 <RescheduleTimerList+0x128>)
 8003108:	4613      	mov	r3, r2
 800310a:	005b      	lsls	r3, r3, #1
 800310c:	4413      	add	r3, r2
 800310e:	00db      	lsls	r3, r3, #3
 8003110:	440b      	add	r3, r1
 8003112:	3308      	adds	r3, #8
 8003114:	2200      	movs	r2, #0
 8003116:	601a      	str	r2, [r3, #0]
 8003118:	e013      	b.n	8003142 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 800311a:	7bfa      	ldrb	r2, [r7, #15]
 800311c:	4916      	ldr	r1, [pc, #88]	@ (8003178 <RescheduleTimerList+0x128>)
 800311e:	4613      	mov	r3, r2
 8003120:	005b      	lsls	r3, r3, #1
 8003122:	4413      	add	r3, r2
 8003124:	00db      	lsls	r3, r3, #3
 8003126:	440b      	add	r3, r1
 8003128:	3308      	adds	r3, #8
 800312a:	6819      	ldr	r1, [r3, #0]
 800312c:	88fb      	ldrh	r3, [r7, #6]
 800312e:	7bfa      	ldrb	r2, [r7, #15]
 8003130:	1ac9      	subs	r1, r1, r3
 8003132:	4811      	ldr	r0, [pc, #68]	@ (8003178 <RescheduleTimerList+0x128>)
 8003134:	4613      	mov	r3, r2
 8003136:	005b      	lsls	r3, r3, #1
 8003138:	4413      	add	r3, r2
 800313a:	00db      	lsls	r3, r3, #3
 800313c:	4403      	add	r3, r0
 800313e:	3308      	adds	r3, #8
 8003140:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8003142:	7bfa      	ldrb	r2, [r7, #15]
 8003144:	490c      	ldr	r1, [pc, #48]	@ (8003178 <RescheduleTimerList+0x128>)
 8003146:	4613      	mov	r3, r2
 8003148:	005b      	lsls	r3, r3, #1
 800314a:	4413      	add	r3, r2
 800314c:	00db      	lsls	r3, r3, #3
 800314e:	440b      	add	r3, r1
 8003150:	3315      	adds	r3, #21
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8003156:	7bfb      	ldrb	r3, [r7, #15]
 8003158:	2b06      	cmp	r3, #6
 800315a:	d1c7      	bne.n	80030ec <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 800315c:	89bb      	ldrh	r3, [r7, #12]
 800315e:	4618      	mov	r0, r3
 8003160:	f7ff ff1e 	bl	8002fa0 <RestartWakeupCounter>

  return ;
 8003164:	bf00      	nop
}
 8003166:	3710      	adds	r7, #16
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	40002800 	.word	0x40002800
 8003170:	20002abc 	.word	0x20002abc
 8003174:	20002a08 	.word	0x20002a08
 8003178:	20002978 	.word	0x20002978
 800317c:	20002a10 	.word	0x20002a10
 8003180:	20002a16 	.word	0x20002a16

08003184 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b08a      	sub	sp, #40	@ 0x28
 8003188:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800318a:	f3ef 8310 	mrs	r3, PRIMASK
 800318e:	617b      	str	r3, [r7, #20]
  return(result);
 8003190:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003192:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8003194:	b672      	cpsid	i
}
 8003196:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8003198:	4b59      	ldr	r3, [pc, #356]	@ (8003300 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	22ca      	movs	r2, #202	@ 0xca
 800319e:	625a      	str	r2, [r3, #36]	@ 0x24
 80031a0:	4b57      	ldr	r3, [pc, #348]	@ (8003300 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2253      	movs	r2, #83	@ 0x53
 80031a6:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 80031a8:	4b55      	ldr	r3, [pc, #340]	@ (8003300 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	689a      	ldr	r2, [r3, #8]
 80031ae:	4b54      	ldr	r3, [pc, #336]	@ (8003300 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031b6:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 80031b8:	4b52      	ldr	r3, [pc, #328]	@ (8003304 <HW_TS_RTC_Wakeup_Handler+0x180>)
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 80031c0:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80031c4:	4950      	ldr	r1, [pc, #320]	@ (8003308 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80031c6:	4613      	mov	r3, r2
 80031c8:	005b      	lsls	r3, r3, #1
 80031ca:	4413      	add	r3, r2
 80031cc:	00db      	lsls	r3, r3, #3
 80031ce:	440b      	add	r3, r1
 80031d0:	330c      	adds	r3, #12
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d16e      	bne.n	80032b8 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 80031da:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80031de:	494a      	ldr	r1, [pc, #296]	@ (8003308 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80031e0:	4613      	mov	r3, r2
 80031e2:	005b      	lsls	r3, r3, #1
 80031e4:	4413      	add	r3, r2
 80031e6:	00db      	lsls	r3, r3, #3
 80031e8:	440b      	add	r3, r1
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 80031ee:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80031f2:	4945      	ldr	r1, [pc, #276]	@ (8003308 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80031f4:	4613      	mov	r3, r2
 80031f6:	005b      	lsls	r3, r3, #1
 80031f8:	4413      	add	r3, r2
 80031fa:	00db      	lsls	r3, r3, #3
 80031fc:	440b      	add	r3, r1
 80031fe:	3310      	adds	r3, #16
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8003204:	4b41      	ldr	r3, [pc, #260]	@ (800330c <HW_TS_RTC_Wakeup_Handler+0x188>)
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	b2db      	uxtb	r3, r3
 800320a:	2b00      	cmp	r3, #0
 800320c:	d04c      	beq.n	80032a8 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 800320e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8003212:	493d      	ldr	r1, [pc, #244]	@ (8003308 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8003214:	4613      	mov	r3, r2
 8003216:	005b      	lsls	r3, r3, #1
 8003218:	4413      	add	r3, r2
 800321a:	00db      	lsls	r3, r3, #3
 800321c:	440b      	add	r3, r1
 800321e:	330d      	adds	r3, #13
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	b2db      	uxtb	r3, r3
 8003224:	2b01      	cmp	r3, #1
 8003226:	d124      	bne.n	8003272 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8003228:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800322c:	2101      	movs	r1, #1
 800322e:	4618      	mov	r0, r3
 8003230:	f7ff fdf2 	bl	8002e18 <UnlinkTimer>
 8003234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003236:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	f383 8810 	msr	PRIMASK, r3
}
 800323e:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8003240:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8003244:	4930      	ldr	r1, [pc, #192]	@ (8003308 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8003246:	4613      	mov	r3, r2
 8003248:	005b      	lsls	r3, r3, #1
 800324a:	4413      	add	r3, r2
 800324c:	00db      	lsls	r3, r3, #3
 800324e:	440b      	add	r3, r1
 8003250:	3304      	adds	r3, #4
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003258:	4611      	mov	r1, r2
 800325a:	4618      	mov	r0, r3
 800325c:	f000 f9b8 	bl	80035d0 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8003260:	4b27      	ldr	r3, [pc, #156]	@ (8003300 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	22ca      	movs	r2, #202	@ 0xca
 8003266:	625a      	str	r2, [r3, #36]	@ 0x24
 8003268:	4b25      	ldr	r3, [pc, #148]	@ (8003300 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2253      	movs	r2, #83	@ 0x53
 800326e:	625a      	str	r2, [r3, #36]	@ 0x24
 8003270:	e012      	b.n	8003298 <HW_TS_RTC_Wakeup_Handler+0x114>
 8003272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003274:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f383 8810 	msr	PRIMASK, r3
}
 800327c:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 800327e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003282:	4618      	mov	r0, r3
 8003284:	f000 f920 	bl	80034c8 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8003288:	4b1d      	ldr	r3, [pc, #116]	@ (8003300 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	22ca      	movs	r2, #202	@ 0xca
 800328e:	625a      	str	r2, [r3, #36]	@ 0x24
 8003290:	4b1b      	ldr	r3, [pc, #108]	@ (8003300 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2253      	movs	r2, #83	@ 0x53
 8003296:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8003298:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800329c:	69fa      	ldr	r2, [r7, #28]
 800329e:	4619      	mov	r1, r3
 80032a0:	69b8      	ldr	r0, [r7, #24]
 80032a2:	f000 fa1b 	bl	80036dc <HW_TS_RTC_Int_AppNot>
 80032a6:	e022      	b.n	80032ee <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 80032a8:	f7ff fed2 	bl	8003050 <RescheduleTimerList>
 80032ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ae:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	f383 8810 	msr	PRIMASK, r3
}
 80032b6:	e01a      	b.n	80032ee <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80032b8:	bf00      	nop
 80032ba:	4b11      	ldr	r3, [pc, #68]	@ (8003300 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	f003 0304 	and.w	r3, r3, #4
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d0f8      	beq.n	80032ba <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80032c8:	4b0d      	ldr	r3, [pc, #52]	@ (8003300 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	b2da      	uxtb	r2, r3
 80032d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003300 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80032d8:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80032da:	4b0d      	ldr	r3, [pc, #52]	@ (8003310 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80032dc:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80032e0:	60da      	str	r2, [r3, #12]
 80032e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032e4:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f383 8810 	msr	PRIMASK, r3
}
 80032ec:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80032ee:	4b04      	ldr	r3, [pc, #16]	@ (8003300 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	22ff      	movs	r2, #255	@ 0xff
 80032f4:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 80032f6:	bf00      	nop
}
 80032f8:	3728      	adds	r7, #40	@ 0x28
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	20002abc 	.word	0x20002abc
 8003304:	20002a08 	.word	0x20002a08
 8003308:	20002978 	.word	0x20002978
 800330c:	20002a10 	.word	0x20002a10
 8003310:	58000800 	.word	0x58000800

08003314 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b088      	sub	sp, #32
 8003318:	af00      	add	r7, sp, #0
 800331a:	4603      	mov	r3, r0
 800331c:	6039      	str	r1, [r7, #0]
 800331e:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8003320:	4b5e      	ldr	r3, [pc, #376]	@ (800349c <HW_TS_Init+0x188>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	22ca      	movs	r2, #202	@ 0xca
 8003326:	625a      	str	r2, [r3, #36]	@ 0x24
 8003328:	4b5c      	ldr	r3, [pc, #368]	@ (800349c <HW_TS_Init+0x188>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2253      	movs	r2, #83	@ 0x53
 800332e:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003330:	4b5b      	ldr	r3, [pc, #364]	@ (80034a0 <HW_TS_Init+0x18c>)
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	4a5a      	ldr	r2, [pc, #360]	@ (80034a0 <HW_TS_Init+0x18c>)
 8003336:	f043 0320 	orr.w	r3, r3, #32
 800333a:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 800333c:	4b58      	ldr	r3, [pc, #352]	@ (80034a0 <HW_TS_Init+0x18c>)
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	b2db      	uxtb	r3, r3
 8003342:	f003 0307 	and.w	r3, r3, #7
 8003346:	b2db      	uxtb	r3, r3
 8003348:	f1c3 0304 	rsb	r3, r3, #4
 800334c:	b2da      	uxtb	r2, r3
 800334e:	4b55      	ldr	r3, [pc, #340]	@ (80034a4 <HW_TS_Init+0x190>)
 8003350:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8003352:	4b53      	ldr	r3, [pc, #332]	@ (80034a0 <HW_TS_Init+0x18c>)
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800335a:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 800335e:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003360:	693a      	ldr	r2, [r7, #16]
 8003362:	fa92 f2a2 	rbit	r2, r2
 8003366:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003368:	68fa      	ldr	r2, [r7, #12]
 800336a:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800336c:	697a      	ldr	r2, [r7, #20]
 800336e:	2a00      	cmp	r2, #0
 8003370:	d101      	bne.n	8003376 <HW_TS_Init+0x62>
  {
    return 32U;
 8003372:	2220      	movs	r2, #32
 8003374:	e003      	b.n	800337e <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8003376:	697a      	ldr	r2, [r7, #20]
 8003378:	fab2 f282 	clz	r2, r2
 800337c:	b2d2      	uxtb	r2, r2
 800337e:	40d3      	lsrs	r3, r2
 8003380:	b2db      	uxtb	r3, r3
 8003382:	3301      	adds	r3, #1
 8003384:	b2da      	uxtb	r2, r3
 8003386:	4b48      	ldr	r3, [pc, #288]	@ (80034a8 <HW_TS_Init+0x194>)
 8003388:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 800338a:	4b45      	ldr	r3, [pc, #276]	@ (80034a0 <HW_TS_Init+0x18c>)
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	b29b      	uxth	r3, r3
 8003390:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003394:	b29b      	uxth	r3, r3
 8003396:	3301      	adds	r3, #1
 8003398:	b29a      	uxth	r2, r3
 800339a:	4b44      	ldr	r3, [pc, #272]	@ (80034ac <HW_TS_Init+0x198>)
 800339c:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 800339e:	4b43      	ldr	r3, [pc, #268]	@ (80034ac <HW_TS_Init+0x198>)
 80033a0:	881b      	ldrh	r3, [r3, #0]
 80033a2:	3b01      	subs	r3, #1
 80033a4:	4a40      	ldr	r2, [pc, #256]	@ (80034a8 <HW_TS_Init+0x194>)
 80033a6:	7812      	ldrb	r2, [r2, #0]
 80033a8:	fb02 f303 	mul.w	r3, r2, r3
 80033ac:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80033b0:	4a3c      	ldr	r2, [pc, #240]	@ (80034a4 <HW_TS_Init+0x190>)
 80033b2:	7812      	ldrb	r2, [r2, #0]
 80033b4:	40d3      	lsrs	r3, r2
 80033b6:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80033be:	4293      	cmp	r3, r2
 80033c0:	d904      	bls.n	80033cc <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80033c2:	4b3b      	ldr	r3, [pc, #236]	@ (80034b0 <HW_TS_Init+0x19c>)
 80033c4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80033c8:	801a      	strh	r2, [r3, #0]
 80033ca:	e003      	b.n	80033d4 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	b29a      	uxth	r2, r3
 80033d0:	4b37      	ldr	r3, [pc, #220]	@ (80034b0 <HW_TS_Init+0x19c>)
 80033d2:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80033d4:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80033d8:	f7ff fb9c 	bl	8002b14 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80033dc:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80033e0:	f7ff fb84 	bl	8002aec <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 80033e4:	79fb      	ldrb	r3, [r7, #7]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d13d      	bne.n	8003466 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80033ea:	4b32      	ldr	r3, [pc, #200]	@ (80034b4 <HW_TS_Init+0x1a0>)
 80033ec:	2201      	movs	r2, #1
 80033ee:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80033f0:	4b31      	ldr	r3, [pc, #196]	@ (80034b8 <HW_TS_Init+0x1a4>)
 80033f2:	f04f 32ff 	mov.w	r2, #4294967295
 80033f6:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80033f8:	2300      	movs	r3, #0
 80033fa:	77fb      	strb	r3, [r7, #31]
 80033fc:	e00c      	b.n	8003418 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 80033fe:	7ffa      	ldrb	r2, [r7, #31]
 8003400:	492e      	ldr	r1, [pc, #184]	@ (80034bc <HW_TS_Init+0x1a8>)
 8003402:	4613      	mov	r3, r2
 8003404:	005b      	lsls	r3, r3, #1
 8003406:	4413      	add	r3, r2
 8003408:	00db      	lsls	r3, r3, #3
 800340a:	440b      	add	r3, r1
 800340c:	330c      	adds	r3, #12
 800340e:	2200      	movs	r2, #0
 8003410:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8003412:	7ffb      	ldrb	r3, [r7, #31]
 8003414:	3301      	adds	r3, #1
 8003416:	77fb      	strb	r3, [r7, #31]
 8003418:	7ffb      	ldrb	r3, [r7, #31]
 800341a:	2b05      	cmp	r3, #5
 800341c:	d9ef      	bls.n	80033fe <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800341e:	4b28      	ldr	r3, [pc, #160]	@ (80034c0 <HW_TS_Init+0x1ac>)
 8003420:	2206      	movs	r2, #6
 8003422:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8003424:	4b1d      	ldr	r3, [pc, #116]	@ (800349c <HW_TS_Init+0x188>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	689a      	ldr	r2, [r3, #8]
 800342a:	4b1c      	ldr	r3, [pc, #112]	@ (800349c <HW_TS_Init+0x188>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003432:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8003434:	4b19      	ldr	r3, [pc, #100]	@ (800349c <HW_TS_Init+0x188>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	b2da      	uxtb	r2, r3
 800343c:	4b17      	ldr	r3, [pc, #92]	@ (800349c <HW_TS_Init+0x188>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8003444:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8003446:	4b1f      	ldr	r3, [pc, #124]	@ (80034c4 <HW_TS_Init+0x1b0>)
 8003448:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800344c:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 800344e:	2003      	movs	r0, #3
 8003450:	f001 f99d 	bl	800478e <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8003454:	4b11      	ldr	r3, [pc, #68]	@ (800349c <HW_TS_Init+0x188>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	689a      	ldr	r2, [r3, #8]
 800345a:	4b10      	ldr	r3, [pc, #64]	@ (800349c <HW_TS_Init+0x188>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003462:	609a      	str	r2, [r3, #8]
 8003464:	e009      	b.n	800347a <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8003466:	4b0d      	ldr	r3, [pc, #52]	@ (800349c <HW_TS_Init+0x188>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003470:	2b00      	cmp	r3, #0
 8003472:	d002      	beq.n	800347a <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8003474:	2003      	movs	r0, #3
 8003476:	f001 f97c 	bl	8004772 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800347a:	4b08      	ldr	r3, [pc, #32]	@ (800349c <HW_TS_Init+0x188>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	22ff      	movs	r2, #255	@ 0xff
 8003480:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8003482:	2200      	movs	r2, #0
 8003484:	2103      	movs	r1, #3
 8003486:	2003      	movs	r0, #3
 8003488:	f001 f931 	bl	80046ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800348c:	2003      	movs	r0, #3
 800348e:	f001 f948 	bl	8004722 <HAL_NVIC_EnableIRQ>

  return;
 8003492:	bf00      	nop
}
 8003494:	3720      	adds	r7, #32
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	20002abc 	.word	0x20002abc
 80034a0:	40002800 	.word	0x40002800
 80034a4:	20002a11 	.word	0x20002a11
 80034a8:	20002a12 	.word	0x20002a12
 80034ac:	20002a14 	.word	0x20002a14
 80034b0:	20002a16 	.word	0x20002a16
 80034b4:	20002a10 	.word	0x20002a10
 80034b8:	20002a0c 	.word	0x20002a0c
 80034bc:	20002978 	.word	0x20002978
 80034c0:	20002a08 	.word	0x20002a08
 80034c4:	58000800 	.word	0x58000800

080034c8 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b086      	sub	sp, #24
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	4603      	mov	r3, r0
 80034d0:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034d2:	f3ef 8310 	mrs	r3, PRIMASK
 80034d6:	60fb      	str	r3, [r7, #12]
  return(result);
 80034d8:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80034da:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80034dc:	b672      	cpsid	i
}
 80034de:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80034e0:	2003      	movs	r0, #3
 80034e2:	f001 f92c 	bl	800473e <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80034e6:	4b34      	ldr	r3, [pc, #208]	@ (80035b8 <HW_TS_Stop+0xf0>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	22ca      	movs	r2, #202	@ 0xca
 80034ec:	625a      	str	r2, [r3, #36]	@ 0x24
 80034ee:	4b32      	ldr	r3, [pc, #200]	@ (80035b8 <HW_TS_Stop+0xf0>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2253      	movs	r2, #83	@ 0x53
 80034f4:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80034f6:	79fa      	ldrb	r2, [r7, #7]
 80034f8:	4930      	ldr	r1, [pc, #192]	@ (80035bc <HW_TS_Stop+0xf4>)
 80034fa:	4613      	mov	r3, r2
 80034fc:	005b      	lsls	r3, r3, #1
 80034fe:	4413      	add	r3, r2
 8003500:	00db      	lsls	r3, r3, #3
 8003502:	440b      	add	r3, r1
 8003504:	330c      	adds	r3, #12
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	b2db      	uxtb	r3, r3
 800350a:	2b02      	cmp	r3, #2
 800350c:	d142      	bne.n	8003594 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 800350e:	79fb      	ldrb	r3, [r7, #7]
 8003510:	2100      	movs	r1, #0
 8003512:	4618      	mov	r0, r3
 8003514:	f7ff fc80 	bl	8002e18 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8003518:	4b29      	ldr	r3, [pc, #164]	@ (80035c0 <HW_TS_Stop+0xf8>)
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800351e:	7cfb      	ldrb	r3, [r7, #19]
 8003520:	2b06      	cmp	r3, #6
 8003522:	d12f      	bne.n	8003584 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8003524:	4b27      	ldr	r3, [pc, #156]	@ (80035c4 <HW_TS_Stop+0xfc>)
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800352c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003530:	d107      	bne.n	8003542 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8003532:	bf00      	nop
 8003534:	4b20      	ldr	r3, [pc, #128]	@ (80035b8 <HW_TS_Stop+0xf0>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	f003 0304 	and.w	r3, r3, #4
 800353e:	2b00      	cmp	r3, #0
 8003540:	d1f8      	bne.n	8003534 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8003542:	4b1d      	ldr	r3, [pc, #116]	@ (80035b8 <HW_TS_Stop+0xf0>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	4b1b      	ldr	r3, [pc, #108]	@ (80035b8 <HW_TS_Stop+0xf0>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003550:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8003552:	bf00      	nop
 8003554:	4b18      	ldr	r3, [pc, #96]	@ (80035b8 <HW_TS_Stop+0xf0>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	f003 0304 	and.w	r3, r3, #4
 800355e:	2b00      	cmp	r3, #0
 8003560:	d0f8      	beq.n	8003554 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8003562:	4b15      	ldr	r3, [pc, #84]	@ (80035b8 <HW_TS_Stop+0xf0>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	b2da      	uxtb	r2, r3
 800356a:	4b13      	ldr	r3, [pc, #76]	@ (80035b8 <HW_TS_Stop+0xf0>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8003572:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8003574:	4b14      	ldr	r3, [pc, #80]	@ (80035c8 <HW_TS_Stop+0x100>)
 8003576:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800357a:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800357c:	2003      	movs	r0, #3
 800357e:	f001 f906 	bl	800478e <HAL_NVIC_ClearPendingIRQ>
 8003582:	e007      	b.n	8003594 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8003584:	4b11      	ldr	r3, [pc, #68]	@ (80035cc <HW_TS_Stop+0x104>)
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	b2db      	uxtb	r3, r3
 800358a:	7cfa      	ldrb	r2, [r7, #19]
 800358c:	429a      	cmp	r2, r3
 800358e:	d001      	beq.n	8003594 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8003590:	f7ff fd5e 	bl	8003050 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8003594:	4b08      	ldr	r3, [pc, #32]	@ (80035b8 <HW_TS_Stop+0xf0>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	22ff      	movs	r2, #255	@ 0xff
 800359a:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800359c:	2003      	movs	r0, #3
 800359e:	f001 f8c0 	bl	8004722 <HAL_NVIC_EnableIRQ>
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	f383 8810 	msr	PRIMASK, r3
}
 80035ac:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80035ae:	bf00      	nop
}
 80035b0:	3718      	adds	r7, #24
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	20002abc 	.word	0x20002abc
 80035bc:	20002978 	.word	0x20002978
 80035c0:	20002a08 	.word	0x20002a08
 80035c4:	40002800 	.word	0x40002800
 80035c8:	58000800 	.word	0x58000800
 80035cc:	20002a09 	.word	0x20002a09

080035d0 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b086      	sub	sp, #24
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	4603      	mov	r3, r0
 80035d8:	6039      	str	r1, [r7, #0]
 80035da:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80035dc:	79fa      	ldrb	r2, [r7, #7]
 80035de:	493b      	ldr	r1, [pc, #236]	@ (80036cc <HW_TS_Start+0xfc>)
 80035e0:	4613      	mov	r3, r2
 80035e2:	005b      	lsls	r3, r3, #1
 80035e4:	4413      	add	r3, r2
 80035e6:	00db      	lsls	r3, r3, #3
 80035e8:	440b      	add	r3, r1
 80035ea:	330c      	adds	r3, #12
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d103      	bne.n	80035fc <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 80035f4:	79fb      	ldrb	r3, [r7, #7]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7ff ff66 	bl	80034c8 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035fc:	f3ef 8310 	mrs	r3, PRIMASK
 8003600:	60fb      	str	r3, [r7, #12]
  return(result);
 8003602:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003604:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003606:	b672      	cpsid	i
}
 8003608:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800360a:	2003      	movs	r0, #3
 800360c:	f001 f897 	bl	800473e <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8003610:	4b2f      	ldr	r3, [pc, #188]	@ (80036d0 <HW_TS_Start+0x100>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	22ca      	movs	r2, #202	@ 0xca
 8003616:	625a      	str	r2, [r3, #36]	@ 0x24
 8003618:	4b2d      	ldr	r3, [pc, #180]	@ (80036d0 <HW_TS_Start+0x100>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2253      	movs	r2, #83	@ 0x53
 800361e:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8003620:	79fa      	ldrb	r2, [r7, #7]
 8003622:	492a      	ldr	r1, [pc, #168]	@ (80036cc <HW_TS_Start+0xfc>)
 8003624:	4613      	mov	r3, r2
 8003626:	005b      	lsls	r3, r3, #1
 8003628:	4413      	add	r3, r2
 800362a:	00db      	lsls	r3, r3, #3
 800362c:	440b      	add	r3, r1
 800362e:	330c      	adds	r3, #12
 8003630:	2202      	movs	r2, #2
 8003632:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8003634:	79fa      	ldrb	r2, [r7, #7]
 8003636:	4925      	ldr	r1, [pc, #148]	@ (80036cc <HW_TS_Start+0xfc>)
 8003638:	4613      	mov	r3, r2
 800363a:	005b      	lsls	r3, r3, #1
 800363c:	4413      	add	r3, r2
 800363e:	00db      	lsls	r3, r3, #3
 8003640:	440b      	add	r3, r1
 8003642:	3308      	adds	r3, #8
 8003644:	683a      	ldr	r2, [r7, #0]
 8003646:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8003648:	79fa      	ldrb	r2, [r7, #7]
 800364a:	4920      	ldr	r1, [pc, #128]	@ (80036cc <HW_TS_Start+0xfc>)
 800364c:	4613      	mov	r3, r2
 800364e:	005b      	lsls	r3, r3, #1
 8003650:	4413      	add	r3, r2
 8003652:	00db      	lsls	r3, r3, #3
 8003654:	440b      	add	r3, r1
 8003656:	3304      	adds	r3, #4
 8003658:	683a      	ldr	r2, [r7, #0]
 800365a:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 800365c:	79fb      	ldrb	r3, [r7, #7]
 800365e:	4618      	mov	r0, r3
 8003660:	f7ff fb30 	bl	8002cc4 <linkTimer>
 8003664:	4603      	mov	r3, r0
 8003666:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8003668:	4b1a      	ldr	r3, [pc, #104]	@ (80036d4 <HW_TS_Start+0x104>)
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800366e:	4b1a      	ldr	r3, [pc, #104]	@ (80036d8 <HW_TS_Start+0x108>)
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	b2db      	uxtb	r3, r3
 8003674:	7c7a      	ldrb	r2, [r7, #17]
 8003676:	429a      	cmp	r2, r3
 8003678:	d002      	beq.n	8003680 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 800367a:	f7ff fce9 	bl	8003050 <RescheduleTimerList>
 800367e:	e013      	b.n	80036a8 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8003680:	79fa      	ldrb	r2, [r7, #7]
 8003682:	4912      	ldr	r1, [pc, #72]	@ (80036cc <HW_TS_Start+0xfc>)
 8003684:	4613      	mov	r3, r2
 8003686:	005b      	lsls	r3, r3, #1
 8003688:	4413      	add	r3, r2
 800368a:	00db      	lsls	r3, r3, #3
 800368c:	440b      	add	r3, r1
 800368e:	3308      	adds	r3, #8
 8003690:	6819      	ldr	r1, [r3, #0]
 8003692:	8a7b      	ldrh	r3, [r7, #18]
 8003694:	79fa      	ldrb	r2, [r7, #7]
 8003696:	1ac9      	subs	r1, r1, r3
 8003698:	480c      	ldr	r0, [pc, #48]	@ (80036cc <HW_TS_Start+0xfc>)
 800369a:	4613      	mov	r3, r2
 800369c:	005b      	lsls	r3, r3, #1
 800369e:	4413      	add	r3, r2
 80036a0:	00db      	lsls	r3, r3, #3
 80036a2:	4403      	add	r3, r0
 80036a4:	3308      	adds	r3, #8
 80036a6:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80036a8:	4b09      	ldr	r3, [pc, #36]	@ (80036d0 <HW_TS_Start+0x100>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	22ff      	movs	r2, #255	@ 0xff
 80036ae:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80036b0:	2003      	movs	r0, #3
 80036b2:	f001 f836 	bl	8004722 <HAL_NVIC_EnableIRQ>
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	f383 8810 	msr	PRIMASK, r3
}
 80036c0:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80036c2:	bf00      	nop
}
 80036c4:	3718      	adds	r7, #24
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	20002978 	.word	0x20002978
 80036d0:	20002abc 	.word	0x20002abc
 80036d4:	20002a08 	.word	0x20002a08
 80036d8:	20002a09 	.word	0x20002a09

080036dc <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	460b      	mov	r3, r1
 80036e6:	607a      	str	r2, [r7, #4]
 80036e8:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4798      	blx	r3

  return;
 80036ee:	bf00      	nop
}
 80036f0:	3710      	adds	r7, #16
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
	...

080036f8 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60b9      	str	r1, [r7, #8]
 8003700:	607b      	str	r3, [r7, #4]
 8003702:	4603      	mov	r3, r0
 8003704:	73fb      	strb	r3, [r7, #15]
 8003706:	4613      	mov	r3, r2
 8003708:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 800370a:	2300      	movs	r3, #0
 800370c:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 800370e:	2300      	movs	r3, #0
 8003710:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 8003712:	7bfb      	ldrb	r3, [r7, #15]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d10e      	bne.n	8003736 <HW_UART_Transmit_DMA+0x3e>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_huart1TxCb = cb;
 8003718:	4a17      	ldr	r2, [pc, #92]	@ (8003778 <HW_UART_Transmit_DMA+0x80>)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 800371e:	4b17      	ldr	r3, [pc, #92]	@ (800377c <HW_UART_Transmit_DMA+0x84>)
 8003720:	4a17      	ldr	r2, [pc, #92]	@ (8003780 <HW_UART_Transmit_DMA+0x88>)
 8003722:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8003724:	89bb      	ldrh	r3, [r7, #12]
 8003726:	461a      	mov	r2, r3
 8003728:	68b9      	ldr	r1, [r7, #8]
 800372a:	4814      	ldr	r0, [pc, #80]	@ (800377c <HW_UART_Transmit_DMA+0x84>)
 800372c:	f004 fd68 	bl	8008200 <HAL_UART_Transmit_DMA>
 8003730:	4603      	mov	r3, r0
 8003732:	75fb      	strb	r3, [r7, #23]
            break;
 8003734:	e000      	b.n	8003738 <HW_UART_Transmit_DMA+0x40>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 8003736:	bf00      	nop
    }

    switch (hal_status)
 8003738:	7dfb      	ldrb	r3, [r7, #23]
 800373a:	2b03      	cmp	r3, #3
 800373c:	d816      	bhi.n	800376c <HW_UART_Transmit_DMA+0x74>
 800373e:	a201      	add	r2, pc, #4	@ (adr r2, 8003744 <HW_UART_Transmit_DMA+0x4c>)
 8003740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003744:	08003755 	.word	0x08003755
 8003748:	0800375b 	.word	0x0800375b
 800374c:	08003761 	.word	0x08003761
 8003750:	08003767 	.word	0x08003767
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 8003754:	2300      	movs	r3, #0
 8003756:	75bb      	strb	r3, [r7, #22]
            break;
 8003758:	e009      	b.n	800376e <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 800375a:	2301      	movs	r3, #1
 800375c:	75bb      	strb	r3, [r7, #22]
            break;
 800375e:	e006      	b.n	800376e <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 8003760:	2302      	movs	r3, #2
 8003762:	75bb      	strb	r3, [r7, #22]
            break;
 8003764:	e003      	b.n	800376e <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 8003766:	2303      	movs	r3, #3
 8003768:	75bb      	strb	r3, [r7, #22]
            break;
 800376a:	e000      	b.n	800376e <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 800376c:	bf00      	nop
    }

    return hw_status;
 800376e:	7dbb      	ldrb	r3, [r7, #22]
}
 8003770:	4618      	mov	r0, r3
 8003772:	3718      	adds	r7, #24
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	20002a18 	.word	0x20002a18
 800377c:	20002ae4 	.word	0x20002ae4
 8003780:	40013800 	.word	0x40013800

08003784 <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	461a      	mov	r2, r3
 8003792:	4b09      	ldr	r3, [pc, #36]	@ (80037b8 <HAL_UART_TxCpltCallback+0x34>)
 8003794:	429a      	cmp	r2, r3
 8003796:	d107      	bne.n	80037a8 <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 8003798:	4b08      	ldr	r3, [pc, #32]	@ (80037bc <HAL_UART_TxCpltCallback+0x38>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d005      	beq.n	80037ac <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 80037a0:	4b06      	ldr	r3, [pc, #24]	@ (80037bc <HAL_UART_TxCpltCallback+0x38>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4798      	blx	r3
            }
            break;
 80037a6:	e001      	b.n	80037ac <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 80037a8:	bf00      	nop
 80037aa:	e000      	b.n	80037ae <HAL_UART_TxCpltCallback+0x2a>
            break;
 80037ac:	bf00      	nop
    }

    return;
 80037ae:	bf00      	nop
}
 80037b0:	3708      	adds	r7, #8
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	40013800 	.word	0x40013800
 80037bc:	20002a18 	.word	0x20002a18

080037c0 <LL_AHB2_GRP1_EnableClock>:
{
 80037c0:	b480      	push	{r7}
 80037c2:	b085      	sub	sp, #20
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80037c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037cc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80037ce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80037d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037dc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4013      	ands	r3, r2
 80037e2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80037e4:	68fb      	ldr	r3, [r7, #12]
}
 80037e6:	bf00      	nop
 80037e8:	3714      	adds	r7, #20
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr

080037f2 <LL_APB1_GRP1_EnableClock>:
{
 80037f2:	b480      	push	{r7}
 80037f4:	b085      	sub	sp, #20
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80037fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037fe:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003800:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	4313      	orrs	r3, r2
 8003808:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800380a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800380e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4013      	ands	r3, r2
 8003814:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003816:	68fb      	ldr	r3, [r7, #12]
}
 8003818:	bf00      	nop
 800381a:	3714      	adds	r7, #20
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003828:	4b1b      	ldr	r3, [pc, #108]	@ (8003898 <MX_I2C1_Init+0x74>)
 800382a:	4a1c      	ldr	r2, [pc, #112]	@ (800389c <MX_I2C1_Init+0x78>)
 800382c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B07CB4;
 800382e:	4b1a      	ldr	r3, [pc, #104]	@ (8003898 <MX_I2C1_Init+0x74>)
 8003830:	4a1b      	ldr	r2, [pc, #108]	@ (80038a0 <MX_I2C1_Init+0x7c>)
 8003832:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003834:	4b18      	ldr	r3, [pc, #96]	@ (8003898 <MX_I2C1_Init+0x74>)
 8003836:	2200      	movs	r2, #0
 8003838:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800383a:	4b17      	ldr	r3, [pc, #92]	@ (8003898 <MX_I2C1_Init+0x74>)
 800383c:	2201      	movs	r2, #1
 800383e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003840:	4b15      	ldr	r3, [pc, #84]	@ (8003898 <MX_I2C1_Init+0x74>)
 8003842:	2200      	movs	r2, #0
 8003844:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003846:	4b14      	ldr	r3, [pc, #80]	@ (8003898 <MX_I2C1_Init+0x74>)
 8003848:	2200      	movs	r2, #0
 800384a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800384c:	4b12      	ldr	r3, [pc, #72]	@ (8003898 <MX_I2C1_Init+0x74>)
 800384e:	2200      	movs	r2, #0
 8003850:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003852:	4b11      	ldr	r3, [pc, #68]	@ (8003898 <MX_I2C1_Init+0x74>)
 8003854:	2200      	movs	r2, #0
 8003856:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003858:	4b0f      	ldr	r3, [pc, #60]	@ (8003898 <MX_I2C1_Init+0x74>)
 800385a:	2200      	movs	r2, #0
 800385c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800385e:	480e      	ldr	r0, [pc, #56]	@ (8003898 <MX_I2C1_Init+0x74>)
 8003860:	f001 fc9a 	bl	8005198 <HAL_I2C_Init>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d001      	beq.n	800386e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800386a:	f000 f98f 	bl	8003b8c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800386e:	2100      	movs	r1, #0
 8003870:	4809      	ldr	r0, [pc, #36]	@ (8003898 <MX_I2C1_Init+0x74>)
 8003872:	f002 fa1d 	bl	8005cb0 <HAL_I2CEx_ConfigAnalogFilter>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d001      	beq.n	8003880 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800387c:	f000 f986 	bl	8003b8c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003880:	2100      	movs	r1, #0
 8003882:	4805      	ldr	r0, [pc, #20]	@ (8003898 <MX_I2C1_Init+0x74>)
 8003884:	f002 fa5f 	bl	8005d46 <HAL_I2CEx_ConfigDigitalFilter>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d001      	beq.n	8003892 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800388e:	f000 f97d 	bl	8003b8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003892:	bf00      	nop
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	20002a1c 	.word	0x20002a1c
 800389c:	40005400 	.word	0x40005400
 80038a0:	00b07cb4 	.word	0x00b07cb4

080038a4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b09c      	sub	sp, #112	@ 0x70
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038ac:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80038b0:	2200      	movs	r2, #0
 80038b2:	601a      	str	r2, [r3, #0]
 80038b4:	605a      	str	r2, [r3, #4]
 80038b6:	609a      	str	r2, [r3, #8]
 80038b8:	60da      	str	r2, [r3, #12]
 80038ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80038bc:	f107 030c 	add.w	r3, r7, #12
 80038c0:	2250      	movs	r2, #80	@ 0x50
 80038c2:	2100      	movs	r1, #0
 80038c4:	4618      	mov	r0, r3
 80038c6:	f00b fc23 	bl	800f110 <memset>
  if(i2cHandle->Instance==I2C1)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a17      	ldr	r2, [pc, #92]	@ (800392c <HAL_I2C_MspInit+0x88>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d126      	bne.n	8003922 <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80038d4:	2304      	movs	r3, #4
 80038d6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80038d8:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80038dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80038de:	f107 030c 	add.w	r3, r7, #12
 80038e2:	4618      	mov	r0, r3
 80038e4:	f003 fe47 	bl	8007576 <HAL_RCCEx_PeriphCLKConfig>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d001      	beq.n	80038f2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80038ee:	f000 f94d 	bl	8003b8c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038f2:	2002      	movs	r0, #2
 80038f4:	f7ff ff64 	bl	80037c0 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80038f8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80038fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80038fe:	2312      	movs	r3, #18
 8003900:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003902:	2300      	movs	r3, #0
 8003904:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003906:	2300      	movs	r3, #0
 8003908:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800390a:	2304      	movs	r3, #4
 800390c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800390e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003912:	4619      	mov	r1, r3
 8003914:	4806      	ldr	r0, [pc, #24]	@ (8003930 <HAL_I2C_MspInit+0x8c>)
 8003916:	f001 fa7b 	bl	8004e10 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800391a:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800391e:	f7ff ff68 	bl	80037f2 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003922:	bf00      	nop
 8003924:	3770      	adds	r7, #112	@ 0x70
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	40005400 	.word	0x40005400
 8003930:	48000400 	.word	0x48000400

08003934 <LL_AHB3_GRP1_EnableClock>:
{
 8003934:	b480      	push	{r7}
 8003936:	b085      	sub	sp, #20
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800393c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003940:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003942:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4313      	orrs	r3, r2
 800394a:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800394c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003950:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4013      	ands	r3, r2
 8003956:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003958:	68fb      	ldr	r3, [r7, #12]
}
 800395a:	bf00      	nop
 800395c:	3714      	adds	r7, #20
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
	...

08003968 <MX_IPCC_Init>:

IPCC_HandleTypeDef hipcc;

/* IPCC init function */
void MX_IPCC_Init(void)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 800396c:	4b06      	ldr	r3, [pc, #24]	@ (8003988 <MX_IPCC_Init+0x20>)
 800396e:	4a07      	ldr	r2, [pc, #28]	@ (800398c <MX_IPCC_Init+0x24>)
 8003970:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8003972:	4805      	ldr	r0, [pc, #20]	@ (8003988 <MX_IPCC_Init+0x20>)
 8003974:	f002 fa34 	bl	8005de0 <HAL_IPCC_Init>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d001      	beq.n	8003982 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 800397e:	f000 f905 	bl	8003b8c <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8003982:	bf00      	nop
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	20002a70 	.word	0x20002a70
 800398c:	58000c00 	.word	0x58000c00

08003990 <HAL_IPCC_MspInit>:

void HAL_IPCC_MspInit(IPCC_HandleTypeDef* ipccHandle)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]

  if(ipccHandle->Instance==IPCC)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a0d      	ldr	r2, [pc, #52]	@ (80039d4 <HAL_IPCC_MspInit+0x44>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d113      	bne.n	80039ca <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* IPCC clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 80039a2:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80039a6:	f7ff ffc5 	bl	8003934 <LL_AHB3_GRP1_EnableClock>

    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 80039aa:	2200      	movs	r2, #0
 80039ac:	2100      	movs	r1, #0
 80039ae:	202c      	movs	r0, #44	@ 0x2c
 80039b0:	f000 fe9d 	bl	80046ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80039b4:	202c      	movs	r0, #44	@ 0x2c
 80039b6:	f000 feb4 	bl	8004722 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 80039ba:	2200      	movs	r2, #0
 80039bc:	2100      	movs	r1, #0
 80039be:	202d      	movs	r0, #45	@ 0x2d
 80039c0:	f000 fe95 	bl	80046ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80039c4:	202d      	movs	r0, #45	@ 0x2d
 80039c6:	f000 feac 	bl	8004722 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }
}
 80039ca:	bf00      	nop
 80039cc:	3708      	adds	r7, #8
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	58000c00 	.word	0x58000c00

080039d8 <LL_RCC_LSE_SetDriveCapability>:
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80039e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039e8:	f023 0218 	bic.w	r2, r3, #24
 80039ec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80039f8:	bf00      	nop
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003a08:	f000 fca4 	bl	8004354 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8003a0c:	f7fe fd08 	bl	8002420 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003a10:	f000 f840 	bl	8003a94 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8003a14:	f000 f89a 	bl	8003b4c <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8003a18:	f7ff ffa6 	bl	8003968 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_RF_Init();
 8003a1c:	f000 f8bc 	bl	8003b98 <MX_RF_Init>
  MX_GPIO_Init();
 8003a20:	f7ff f820 	bl	8002a64 <MX_GPIO_Init>
  MX_DMA_Init();
 8003a24:	f7fe ffeb 	bl	80029fe <MX_DMA_Init>
  MX_RTC_Init();
 8003a28:	f000 f8e8 	bl	8003bfc <MX_RTC_Init>
  MX_USART1_UART_Init();
 8003a2c:	f000 fb40 	bl	80040b0 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8003a30:	f7ff fef8 	bl	8003824 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  APPD_Init();
 8003a34:	f7fe fb5d 	bl	80020f2 <APPD_Init>

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8003a38:	f7fe fd00 	bl	800243c <MX_APPE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  max30102_Init();
 8003a3c:	f7fd fb5c 	bl	80010f8 <max30102_Init>
  max30102_Safety();
 8003a40:	f7fd fb8e 	bl	8001160 <max30102_Safety>
  while (1)
  {


    /* USER CODE END WHILE */
    MX_APPE_Process();
 8003a44:	f7fe ff84 	bl	8002950 <MX_APPE_Process>

    /* USER CODE BEGIN 3 */
    max30102_Calculate_HR_BO_Value(&HR_Value,&HR_Valid, &BO_Value, &BO_Valid);
 8003a48:	4b0c      	ldr	r3, [pc, #48]	@ (8003a7c <main+0x78>)
 8003a4a:	4a0d      	ldr	r2, [pc, #52]	@ (8003a80 <main+0x7c>)
 8003a4c:	490d      	ldr	r1, [pc, #52]	@ (8003a84 <main+0x80>)
 8003a4e:	480e      	ldr	r0, [pc, #56]	@ (8003a88 <main+0x84>)
 8003a50:	f7fd fbca 	bl	80011e8 <max30102_Calculate_HR_BO_Value>
    printf("心率：%ld,有效值：%d\n",HR_Value,HR_Valid );
 8003a54:	4b0c      	ldr	r3, [pc, #48]	@ (8003a88 <main+0x84>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a0a      	ldr	r2, [pc, #40]	@ (8003a84 <main+0x80>)
 8003a5a:	f992 2000 	ldrsb.w	r2, [r2]
 8003a5e:	4619      	mov	r1, r3
 8003a60:	480a      	ldr	r0, [pc, #40]	@ (8003a8c <main+0x88>)
 8003a62:	f00b f9e5 	bl	800ee30 <iprintf>
    printf("血氧浓度值：%ld, 有效值=%d\n",BO_Value, BO_Valid);
 8003a66:	4b06      	ldr	r3, [pc, #24]	@ (8003a80 <main+0x7c>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a04      	ldr	r2, [pc, #16]	@ (8003a7c <main+0x78>)
 8003a6c:	f992 2000 	ldrsb.w	r2, [r2]
 8003a70:	4619      	mov	r1, r3
 8003a72:	4807      	ldr	r0, [pc, #28]	@ (8003a90 <main+0x8c>)
 8003a74:	f00b f9dc 	bl	800ee30 <iprintf>
    MX_APPE_Process();
 8003a78:	bf00      	nop
 8003a7a:	e7e3      	b.n	8003a44 <main+0x40>
 8003a7c:	20002ab8 	.word	0x20002ab8
 8003a80:	20002ab4 	.word	0x20002ab4
 8003a84:	20002ab0 	.word	0x20002ab0
 8003a88:	20002aac 	.word	0x20002aac
 8003a8c:	08012bf0 	.word	0x08012bf0
 8003a90:	08012c10 	.word	0x08012c10

08003a94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b09a      	sub	sp, #104	@ 0x68
 8003a98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003a9a:	f107 0320 	add.w	r3, r7, #32
 8003a9e:	2248      	movs	r2, #72	@ 0x48
 8003aa0:	2100      	movs	r1, #0
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f00b fb34 	bl	800f110 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003aa8:	1d3b      	adds	r3, r7, #4
 8003aaa:	2200      	movs	r2, #0
 8003aac:	601a      	str	r2, [r3, #0]
 8003aae:	605a      	str	r2, [r3, #4]
 8003ab0:	609a      	str	r2, [r3, #8]
 8003ab2:	60da      	str	r2, [r3, #12]
 8003ab4:	611a      	str	r2, [r3, #16]
 8003ab6:	615a      	str	r2, [r3, #20]
 8003ab8:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003aba:	f002 fa17 	bl	8005eec <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8003abe:	2010      	movs	r0, #16
 8003ac0:	f7ff ff8a 	bl	80039d8 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ac4:	4b20      	ldr	r3, [pc, #128]	@ (8003b48 <SystemClock_Config+0xb4>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003acc:	4a1e      	ldr	r2, [pc, #120]	@ (8003b48 <SystemClock_Config+0xb4>)
 8003ace:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003ad2:	6013      	str	r3, [r2, #0]
 8003ad4:	4b1c      	ldr	r3, [pc, #112]	@ (8003b48 <SystemClock_Config+0xb4>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003adc:	603b      	str	r3, [r7, #0]
 8003ade:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8003ae0:	2307      	movs	r3, #7
 8003ae2:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003ae4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003ae8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003aea:	2301      	movs	r3, #1
 8003aec:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003aee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003af2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003af4:	2340      	movs	r3, #64	@ 0x40
 8003af6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003af8:	2300      	movs	r3, #0
 8003afa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003afc:	f107 0320 	add.w	r3, r7, #32
 8003b00:	4618      	mov	r0, r3
 8003b02:	f002 fd87 	bl	8006614 <HAL_RCC_OscConfig>
 8003b06:	4603      	mov	r3, r0
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d001      	beq.n	8003b10 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8003b0c:	f000 f83e 	bl	8003b8c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8003b10:	236f      	movs	r3, #111	@ 0x6f
 8003b12:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8003b14:	2302      	movs	r3, #2
 8003b16:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003b20:	2300      	movs	r3, #0
 8003b22:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8003b24:	2300      	movs	r3, #0
 8003b26:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003b2c:	1d3b      	adds	r3, r7, #4
 8003b2e:	2101      	movs	r1, #1
 8003b30:	4618      	mov	r0, r3
 8003b32:	f003 f8e3 	bl	8006cfc <HAL_RCC_ClockConfig>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d001      	beq.n	8003b40 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8003b3c:	f000 f826 	bl	8003b8c <Error_Handler>
  }
}
 8003b40:	bf00      	nop
 8003b42:	3768      	adds	r7, #104	@ 0x68
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	58000400 	.word	0x58000400

08003b4c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b094      	sub	sp, #80	@ 0x50
 8003b50:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003b52:	463b      	mov	r3, r7
 8003b54:	2250      	movs	r2, #80	@ 0x50
 8003b56:	2100      	movs	r1, #0
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f00b fad9 	bl	800f110 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8003b5e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8003b62:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8003b64:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003b68:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8003b6e:	2310      	movs	r3, #16
 8003b70:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003b72:	463b      	mov	r3, r7
 8003b74:	4618      	mov	r0, r3
 8003b76:	f003 fcfe 	bl	8007576 <HAL_RCCEx_PeriphCLKConfig>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d001      	beq.n	8003b84 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8003b80:	f000 f804 	bl	8003b8c <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8003b84:	bf00      	nop
 8003b86:	3750      	adds	r7, #80	@ 0x50
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}

08003b8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003b90:	b672      	cpsid	i
}
 8003b92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003b94:	bf00      	nop
 8003b96:	e7fd      	b.n	8003b94 <Error_Handler+0x8>

08003b98 <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8003b9c:	bf00      	nop
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr

08003ba6 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8003ba6:	b480      	push	{r7}
 8003ba8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8003baa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bb2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003bb6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003bba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003bbe:	bf00      	nop
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <LL_APB1_GRP1_EnableClock>:
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b085      	sub	sp, #20
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003bd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bd4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003bd6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003be0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003be4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4013      	ands	r3, r2
 8003bea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003bec:	68fb      	ldr	r3, [r7, #12]
}
 8003bee:	bf00      	nop
 8003bf0:	3714      	adds	r7, #20
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr
	...

08003bfc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b086      	sub	sp, #24
 8003c00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003c02:	1d3b      	adds	r3, r7, #4
 8003c04:	2200      	movs	r2, #0
 8003c06:	601a      	str	r2, [r3, #0]
 8003c08:	605a      	str	r2, [r3, #4]
 8003c0a:	609a      	str	r2, [r3, #8]
 8003c0c:	60da      	str	r2, [r3, #12]
 8003c0e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003c10:	2300      	movs	r3, #0
 8003c12:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003c14:	4b2c      	ldr	r3, [pc, #176]	@ (8003cc8 <MX_RTC_Init+0xcc>)
 8003c16:	4a2d      	ldr	r2, [pc, #180]	@ (8003ccc <MX_RTC_Init+0xd0>)
 8003c18:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003c1a:	4b2b      	ldr	r3, [pc, #172]	@ (8003cc8 <MX_RTC_Init+0xcc>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8003c20:	4b29      	ldr	r3, [pc, #164]	@ (8003cc8 <MX_RTC_Init+0xcc>)
 8003c22:	220f      	movs	r2, #15
 8003c24:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8003c26:	4b28      	ldr	r3, [pc, #160]	@ (8003cc8 <MX_RTC_Init+0xcc>)
 8003c28:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8003c2c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003c2e:	4b26      	ldr	r3, [pc, #152]	@ (8003cc8 <MX_RTC_Init+0xcc>)
 8003c30:	2200      	movs	r2, #0
 8003c32:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003c34:	4b24      	ldr	r3, [pc, #144]	@ (8003cc8 <MX_RTC_Init+0xcc>)
 8003c36:	2200      	movs	r2, #0
 8003c38:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003c3a:	4b23      	ldr	r3, [pc, #140]	@ (8003cc8 <MX_RTC_Init+0xcc>)
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003c40:	4b21      	ldr	r3, [pc, #132]	@ (8003cc8 <MX_RTC_Init+0xcc>)
 8003c42:	2200      	movs	r2, #0
 8003c44:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003c46:	4820      	ldr	r0, [pc, #128]	@ (8003cc8 <MX_RTC_Init+0xcc>)
 8003c48:	f003 ff1c 	bl	8007a84 <HAL_RTC_Init>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d001      	beq.n	8003c56 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8003c52:	f7ff ff9b 	bl	8003b8c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8003c56:	2300      	movs	r3, #0
 8003c58:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	71bb      	strb	r3, [r7, #6]
  sTime.SubSeconds = 0x0;
 8003c62:	2300      	movs	r3, #0
 8003c64:	60bb      	str	r3, [r7, #8]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003c66:	2300      	movs	r3, #0
 8003c68:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003c6e:	1d3b      	adds	r3, r7, #4
 8003c70:	2201      	movs	r2, #1
 8003c72:	4619      	mov	r1, r3
 8003c74:	4814      	ldr	r0, [pc, #80]	@ (8003cc8 <MX_RTC_Init+0xcc>)
 8003c76:	f003 ffb5 	bl	8007be4 <HAL_RTC_SetTime>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d001      	beq.n	8003c84 <MX_RTC_Init+0x88>
  {
    Error_Handler();
 8003c80:	f7ff ff84 	bl	8003b8c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003c84:	2301      	movs	r3, #1
 8003c86:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8003c90:	2300      	movs	r3, #0
 8003c92:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003c94:	463b      	mov	r3, r7
 8003c96:	2201      	movs	r2, #1
 8003c98:	4619      	mov	r1, r3
 8003c9a:	480b      	ldr	r0, [pc, #44]	@ (8003cc8 <MX_RTC_Init+0xcc>)
 8003c9c:	f004 f866 	bl	8007d6c <HAL_RTC_SetDate>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d001      	beq.n	8003caa <MX_RTC_Init+0xae>
  {
    Error_Handler();
 8003ca6:	f7ff ff71 	bl	8003b8c <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8003caa:	2200      	movs	r2, #0
 8003cac:	2100      	movs	r1, #0
 8003cae:	4806      	ldr	r0, [pc, #24]	@ (8003cc8 <MX_RTC_Init+0xcc>)
 8003cb0:	f004 f97a 	bl	8007fa8 <HAL_RTCEx_SetWakeUpTimer_IT>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d001      	beq.n	8003cbe <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8003cba:	f7ff ff67 	bl	8003b8c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003cbe:	bf00      	nop
 8003cc0:	3718      	adds	r7, #24
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	20002abc 	.word	0x20002abc
 8003ccc:	40002800 	.word	0x40002800

08003cd0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b096      	sub	sp, #88	@ 0x58
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003cd8:	f107 0308 	add.w	r3, r7, #8
 8003cdc:	2250      	movs	r2, #80	@ 0x50
 8003cde:	2100      	movs	r1, #0
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f00b fa15 	bl	800f110 <memset>
  if(rtcHandle->Instance==RTC)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a12      	ldr	r2, [pc, #72]	@ (8003d34 <HAL_RTC_MspInit+0x64>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d11d      	bne.n	8003d2c <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003cf0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003cf4:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003cf6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003cfa:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003cfc:	f107 0308 	add.w	r3, r7, #8
 8003d00:	4618      	mov	r0, r3
 8003d02:	f003 fc38 	bl	8007576 <HAL_RCCEx_PeriphCLKConfig>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d001      	beq.n	8003d10 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8003d0c:	f7ff ff3e 	bl	8003b8c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003d10:	f7ff ff49 	bl	8003ba6 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8003d14:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8003d18:	f7ff ff56 	bl	8003bc8 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	2100      	movs	r1, #0
 8003d20:	2003      	movs	r0, #3
 8003d22:	f000 fce4 	bl	80046ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8003d26:	2003      	movs	r0, #3
 8003d28:	f000 fcfb 	bl	8004722 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003d2c:	bf00      	nop
 8003d2e:	3758      	adds	r7, #88	@ 0x58
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	40002800 	.word	0x40002800

08003d38 <LL_AHB3_GRP1_EnableClock>:
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b085      	sub	sp, #20
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8003d40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d44:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003d46:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8003d50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d54:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4013      	ands	r3, r2
 8003d5a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
}
 8003d5e:	bf00      	nop
 8003d60:	3714      	adds	r7, #20
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr

08003d6a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8003d6e:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003d72:	f7ff ffe1 	bl	8003d38 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8003d76:	2200      	movs	r2, #0
 8003d78:	2100      	movs	r1, #0
 8003d7a:	202e      	movs	r0, #46	@ 0x2e
 8003d7c:	f000 fcb7 	bl	80046ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8003d80:	202e      	movs	r0, #46	@ 0x2e
 8003d82:	f000 fcce 	bl	8004722 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d86:	bf00      	nop
 8003d88:	bd80      	pop	{r7, pc}

08003d8a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d8a:	b480      	push	{r7}
 8003d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003d8e:	bf00      	nop
 8003d90:	e7fd      	b.n	8003d8e <NMI_Handler+0x4>

08003d92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d92:	b480      	push	{r7}
 8003d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d96:	bf00      	nop
 8003d98:	e7fd      	b.n	8003d96 <HardFault_Handler+0x4>

08003d9a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d9a:	b480      	push	{r7}
 8003d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d9e:	bf00      	nop
 8003da0:	e7fd      	b.n	8003d9e <MemManage_Handler+0x4>

08003da2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003da2:	b480      	push	{r7}
 8003da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003da6:	bf00      	nop
 8003da8:	e7fd      	b.n	8003da6 <BusFault_Handler+0x4>

08003daa <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003daa:	b480      	push	{r7}
 8003dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003dae:	bf00      	nop
 8003db0:	e7fd      	b.n	8003dae <UsageFault_Handler+0x4>

08003db2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003db2:	b480      	push	{r7}
 8003db4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003db6:	bf00      	nop
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003dc4:	bf00      	nop
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr

08003dce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003dce:	b480      	push	{r7}
 8003dd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003dd2:	bf00      	nop
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003de0:	f000 fb12 	bl	8004408 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003de4:	bf00      	nop
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8003dec:	f7ff f9ca 	bl	8003184 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8003df0:	bf00      	nop
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003df8:	4802      	ldr	r0, [pc, #8]	@ (8003e04 <DMA1_Channel1_IRQHandler+0x10>)
 8003dfa:	f000 feb8 	bl	8004b6e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003dfe:	bf00      	nop
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	20002b78 	.word	0x20002b78

08003e08 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003e0c:	4802      	ldr	r0, [pc, #8]	@ (8003e18 <DMA1_Channel2_IRQHandler+0x10>)
 8003e0e:	f000 feae 	bl	8004b6e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003e12:	bf00      	nop
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	20002bd8 	.word	0x20002bd8

08003e1c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003e20:	4802      	ldr	r0, [pc, #8]	@ (8003e2c <USART1_IRQHandler+0x10>)
 8003e22:	f004 fa6d 	bl	8008300 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003e26:	bf00      	nop
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	20002ae4 	.word	0x20002ae4

08003e30 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8003e34:	f009 fd34 	bl	800d8a0 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8003e38:	bf00      	nop
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8003e40:	f009 fd64 	bl	800d90c <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8003e44:	bf00      	nop
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8003e4c:	f001 f980 	bl	8005150 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8003e50:	bf00      	nop
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003e54:	b480      	push	{r7}
 8003e56:	af00      	add	r7, sp, #0
  return 1;
 8003e58:	2301      	movs	r3, #1
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <_kill>:

int _kill(int pid, int sig)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003e6e:	f00b f9b7 	bl	800f1e0 <__errno>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2216      	movs	r2, #22
 8003e76:	601a      	str	r2, [r3, #0]
  return -1;
 8003e78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3708      	adds	r7, #8
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <_exit>:

void _exit (int status)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b082      	sub	sp, #8
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003e8c:	f04f 31ff 	mov.w	r1, #4294967295
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f7ff ffe7 	bl	8003e64 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003e96:	bf00      	nop
 8003e98:	e7fd      	b.n	8003e96 <_exit+0x12>

08003e9a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003e9a:	b580      	push	{r7, lr}
 8003e9c:	b086      	sub	sp, #24
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	60f8      	str	r0, [r7, #12]
 8003ea2:	60b9      	str	r1, [r7, #8]
 8003ea4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	617b      	str	r3, [r7, #20]
 8003eaa:	e00a      	b.n	8003ec2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003eac:	f3af 8000 	nop.w
 8003eb0:	4601      	mov	r1, r0
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	1c5a      	adds	r2, r3, #1
 8003eb6:	60ba      	str	r2, [r7, #8]
 8003eb8:	b2ca      	uxtb	r2, r1
 8003eba:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	617b      	str	r3, [r7, #20]
 8003ec2:	697a      	ldr	r2, [r7, #20]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	dbf0      	blt.n	8003eac <_read+0x12>
  }

  return len;
 8003eca:	687b      	ldr	r3, [r7, #4]
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3718      	adds	r7, #24
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003edc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	370c      	adds	r7, #12
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003efc:	605a      	str	r2, [r3, #4]
  return 0;
 8003efe:	2300      	movs	r3, #0
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	370c      	adds	r7, #12
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <_isatty>:

int _isatty(int file)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003f14:	2301      	movs	r3, #1
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	370c      	adds	r7, #12
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr

08003f22 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003f22:	b480      	push	{r7}
 8003f24:	b085      	sub	sp, #20
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	60f8      	str	r0, [r7, #12]
 8003f2a:	60b9      	str	r1, [r7, #8]
 8003f2c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003f2e:	2300      	movs	r3, #0
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3714      	adds	r7, #20
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr

08003f3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b086      	sub	sp, #24
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003f44:	4a14      	ldr	r2, [pc, #80]	@ (8003f98 <_sbrk+0x5c>)
 8003f46:	4b15      	ldr	r3, [pc, #84]	@ (8003f9c <_sbrk+0x60>)
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003f50:	4b13      	ldr	r3, [pc, #76]	@ (8003fa0 <_sbrk+0x64>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d102      	bne.n	8003f5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003f58:	4b11      	ldr	r3, [pc, #68]	@ (8003fa0 <_sbrk+0x64>)
 8003f5a:	4a12      	ldr	r2, [pc, #72]	@ (8003fa4 <_sbrk+0x68>)
 8003f5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003f5e:	4b10      	ldr	r3, [pc, #64]	@ (8003fa0 <_sbrk+0x64>)
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4413      	add	r3, r2
 8003f66:	693a      	ldr	r2, [r7, #16]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d207      	bcs.n	8003f7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003f6c:	f00b f938 	bl	800f1e0 <__errno>
 8003f70:	4603      	mov	r3, r0
 8003f72:	220c      	movs	r2, #12
 8003f74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003f76:	f04f 33ff 	mov.w	r3, #4294967295
 8003f7a:	e009      	b.n	8003f90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003f7c:	4b08      	ldr	r3, [pc, #32]	@ (8003fa0 <_sbrk+0x64>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003f82:	4b07      	ldr	r3, [pc, #28]	@ (8003fa0 <_sbrk+0x64>)
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4413      	add	r3, r2
 8003f8a:	4a05      	ldr	r2, [pc, #20]	@ (8003fa0 <_sbrk+0x64>)
 8003f8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3718      	adds	r7, #24
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	20030000 	.word	0x20030000
 8003f9c:	00000400 	.word	0x00000400
 8003fa0:	20002ae0 	.word	0x20002ae0
 8003fa4:	20003f58 	.word	0x20003f58

08003fa8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8003fac:	4b24      	ldr	r3, [pc, #144]	@ (8004040 <SystemInit+0x98>)
 8003fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fb2:	4a23      	ldr	r2, [pc, #140]	@ (8004040 <SystemInit+0x98>)
 8003fb4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003fb8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003fbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003fc6:	f043 0301 	orr.w	r3, r3, #1
 8003fca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8003fcc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fd0:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8003fd4:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8003fd6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003fe0:	4b18      	ldr	r3, [pc, #96]	@ (8004044 <SystemInit+0x9c>)
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8003fe6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003ff2:	f023 0305 	bic.w	r3, r3, #5
 8003ff6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003ffa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ffe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004002:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004006:	f023 0301 	bic.w	r3, r3, #1
 800400a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800400e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004012:	4a0d      	ldr	r2, [pc, #52]	@ (8004048 <SystemInit+0xa0>)
 8004014:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8004016:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800401a:	4a0b      	ldr	r2, [pc, #44]	@ (8004048 <SystemInit+0xa0>)
 800401c:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800401e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004028:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800402c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800402e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004032:	2200      	movs	r2, #0
 8004034:	619a      	str	r2, [r3, #24]
}
 8004036:	bf00      	nop
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr
 8004040:	e000ed00 	.word	0xe000ed00
 8004044:	faf6fefb 	.word	0xfaf6fefb
 8004048:	22041000 	.word	0x22041000

0800404c <LL_AHB2_GRP1_EnableClock>:
{
 800404c:	b480      	push	{r7}
 800404e:	b085      	sub	sp, #20
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004054:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004058:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800405a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4313      	orrs	r3, r2
 8004062:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004064:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004068:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4013      	ands	r3, r2
 800406e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004070:	68fb      	ldr	r3, [r7, #12]
}
 8004072:	bf00      	nop
 8004074:	3714      	adds	r7, #20
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr

0800407e <LL_APB2_GRP1_EnableClock>:
{
 800407e:	b480      	push	{r7}
 8004080:	b085      	sub	sp, #20
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8004086:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800408a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800408c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4313      	orrs	r3, r2
 8004094:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8004096:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800409a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4013      	ands	r3, r2
 80040a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80040a2:	68fb      	ldr	r3, [r7, #12]
}
 80040a4:	bf00      	nop
 80040a6:	3714      	adds	r7, #20
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr

080040b0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80040b4:	4b23      	ldr	r3, [pc, #140]	@ (8004144 <MX_USART1_UART_Init+0x94>)
 80040b6:	4a24      	ldr	r2, [pc, #144]	@ (8004148 <MX_USART1_UART_Init+0x98>)
 80040b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80040ba:	4b22      	ldr	r3, [pc, #136]	@ (8004144 <MX_USART1_UART_Init+0x94>)
 80040bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80040c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80040c2:	4b20      	ldr	r3, [pc, #128]	@ (8004144 <MX_USART1_UART_Init+0x94>)
 80040c4:	2200      	movs	r2, #0
 80040c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80040c8:	4b1e      	ldr	r3, [pc, #120]	@ (8004144 <MX_USART1_UART_Init+0x94>)
 80040ca:	2200      	movs	r2, #0
 80040cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80040ce:	4b1d      	ldr	r3, [pc, #116]	@ (8004144 <MX_USART1_UART_Init+0x94>)
 80040d0:	2200      	movs	r2, #0
 80040d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80040d4:	4b1b      	ldr	r3, [pc, #108]	@ (8004144 <MX_USART1_UART_Init+0x94>)
 80040d6:	220c      	movs	r2, #12
 80040d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80040da:	4b1a      	ldr	r3, [pc, #104]	@ (8004144 <MX_USART1_UART_Init+0x94>)
 80040dc:	2200      	movs	r2, #0
 80040de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 80040e0:	4b18      	ldr	r3, [pc, #96]	@ (8004144 <MX_USART1_UART_Init+0x94>)
 80040e2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80040e6:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80040e8:	4b16      	ldr	r3, [pc, #88]	@ (8004144 <MX_USART1_UART_Init+0x94>)
 80040ea:	2200      	movs	r2, #0
 80040ec:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80040ee:	4b15      	ldr	r3, [pc, #84]	@ (8004144 <MX_USART1_UART_Init+0x94>)
 80040f0:	2200      	movs	r2, #0
 80040f2:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80040f4:	4b13      	ldr	r3, [pc, #76]	@ (8004144 <MX_USART1_UART_Init+0x94>)
 80040f6:	2200      	movs	r2, #0
 80040f8:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80040fa:	4812      	ldr	r0, [pc, #72]	@ (8004144 <MX_USART1_UART_Init+0x94>)
 80040fc:	f004 f830 	bl	8008160 <HAL_UART_Init>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d001      	beq.n	800410a <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8004106:	f7ff fd41 	bl	8003b8c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800410a:	2100      	movs	r1, #0
 800410c:	480d      	ldr	r0, [pc, #52]	@ (8004144 <MX_USART1_UART_Init+0x94>)
 800410e:	f005 fa10 	bl	8009532 <HAL_UARTEx_SetTxFifoThreshold>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d001      	beq.n	800411c <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8004118:	f7ff fd38 	bl	8003b8c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800411c:	2100      	movs	r1, #0
 800411e:	4809      	ldr	r0, [pc, #36]	@ (8004144 <MX_USART1_UART_Init+0x94>)
 8004120:	f005 fa45 	bl	80095ae <HAL_UARTEx_SetRxFifoThreshold>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d001      	beq.n	800412e <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 800412a:	f7ff fd2f 	bl	8003b8c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800412e:	4805      	ldr	r0, [pc, #20]	@ (8004144 <MX_USART1_UART_Init+0x94>)
 8004130:	f005 f9c6 	bl	80094c0 <HAL_UARTEx_DisableFifoMode>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d001      	beq.n	800413e <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 800413a:	f7ff fd27 	bl	8003b8c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800413e:	bf00      	nop
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	20002ae4 	.word	0x20002ae4
 8004148:	40013800 	.word	0x40013800

0800414c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b09c      	sub	sp, #112	@ 0x70
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004154:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8004158:	2200      	movs	r2, #0
 800415a:	601a      	str	r2, [r3, #0]
 800415c:	605a      	str	r2, [r3, #4]
 800415e:	609a      	str	r2, [r3, #8]
 8004160:	60da      	str	r2, [r3, #12]
 8004162:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004164:	f107 030c 	add.w	r3, r7, #12
 8004168:	2250      	movs	r2, #80	@ 0x50
 800416a:	2100      	movs	r1, #0
 800416c:	4618      	mov	r0, r3
 800416e:	f00a ffcf 	bl	800f110 <memset>
  if(uartHandle->Instance==USART1)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a45      	ldr	r2, [pc, #276]	@ (800428c <HAL_UART_MspInit+0x140>)
 8004178:	4293      	cmp	r3, r2
 800417a:	f040 8082 	bne.w	8004282 <HAL_UART_MspInit+0x136>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800417e:	2301      	movs	r3, #1
 8004180:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004182:	2300      	movs	r3, #0
 8004184:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004186:	f107 030c 	add.w	r3, r7, #12
 800418a:	4618      	mov	r0, r3
 800418c:	f003 f9f3 	bl	8007576 <HAL_RCCEx_PeriphCLKConfig>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d001      	beq.n	800419a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004196:	f7ff fcf9 	bl	8003b8c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800419a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800419e:	f7ff ff6e 	bl	800407e <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041a2:	2001      	movs	r0, #1
 80041a4:	f7ff ff52 	bl	800404c <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80041a8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80041ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041ae:	2302      	movs	r3, #2
 80041b0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041b2:	2300      	movs	r3, #0
 80041b4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041b6:	2300      	movs	r3, #0
 80041b8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80041ba:	2307      	movs	r3, #7
 80041bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041be:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80041c2:	4619      	mov	r1, r3
 80041c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80041c8:	f000 fe22 	bl	8004e10 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 80041cc:	4b30      	ldr	r3, [pc, #192]	@ (8004290 <HAL_UART_MspInit+0x144>)
 80041ce:	4a31      	ldr	r2, [pc, #196]	@ (8004294 <HAL_UART_MspInit+0x148>)
 80041d0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80041d2:	4b2f      	ldr	r3, [pc, #188]	@ (8004290 <HAL_UART_MspInit+0x144>)
 80041d4:	220e      	movs	r2, #14
 80041d6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80041d8:	4b2d      	ldr	r3, [pc, #180]	@ (8004290 <HAL_UART_MspInit+0x144>)
 80041da:	2200      	movs	r2, #0
 80041dc:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80041de:	4b2c      	ldr	r3, [pc, #176]	@ (8004290 <HAL_UART_MspInit+0x144>)
 80041e0:	2200      	movs	r2, #0
 80041e2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80041e4:	4b2a      	ldr	r3, [pc, #168]	@ (8004290 <HAL_UART_MspInit+0x144>)
 80041e6:	2280      	movs	r2, #128	@ 0x80
 80041e8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80041ea:	4b29      	ldr	r3, [pc, #164]	@ (8004290 <HAL_UART_MspInit+0x144>)
 80041ec:	2200      	movs	r2, #0
 80041ee:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80041f0:	4b27      	ldr	r3, [pc, #156]	@ (8004290 <HAL_UART_MspInit+0x144>)
 80041f2:	2200      	movs	r2, #0
 80041f4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80041f6:	4b26      	ldr	r3, [pc, #152]	@ (8004290 <HAL_UART_MspInit+0x144>)
 80041f8:	2200      	movs	r2, #0
 80041fa:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80041fc:	4b24      	ldr	r3, [pc, #144]	@ (8004290 <HAL_UART_MspInit+0x144>)
 80041fe:	2200      	movs	r2, #0
 8004200:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004202:	4823      	ldr	r0, [pc, #140]	@ (8004290 <HAL_UART_MspInit+0x144>)
 8004204:	f000 fad2 	bl	80047ac <HAL_DMA_Init>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d001      	beq.n	8004212 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 800420e:	f7ff fcbd 	bl	8003b8c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a1e      	ldr	r2, [pc, #120]	@ (8004290 <HAL_UART_MspInit+0x144>)
 8004216:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800421a:	4a1d      	ldr	r2, [pc, #116]	@ (8004290 <HAL_UART_MspInit+0x144>)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8004220:	4b1d      	ldr	r3, [pc, #116]	@ (8004298 <HAL_UART_MspInit+0x14c>)
 8004222:	4a1e      	ldr	r2, [pc, #120]	@ (800429c <HAL_UART_MspInit+0x150>)
 8004224:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8004226:	4b1c      	ldr	r3, [pc, #112]	@ (8004298 <HAL_UART_MspInit+0x14c>)
 8004228:	220f      	movs	r2, #15
 800422a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800422c:	4b1a      	ldr	r3, [pc, #104]	@ (8004298 <HAL_UART_MspInit+0x14c>)
 800422e:	2210      	movs	r2, #16
 8004230:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004232:	4b19      	ldr	r3, [pc, #100]	@ (8004298 <HAL_UART_MspInit+0x14c>)
 8004234:	2200      	movs	r2, #0
 8004236:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004238:	4b17      	ldr	r3, [pc, #92]	@ (8004298 <HAL_UART_MspInit+0x14c>)
 800423a:	2280      	movs	r2, #128	@ 0x80
 800423c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800423e:	4b16      	ldr	r3, [pc, #88]	@ (8004298 <HAL_UART_MspInit+0x14c>)
 8004240:	2200      	movs	r2, #0
 8004242:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004244:	4b14      	ldr	r3, [pc, #80]	@ (8004298 <HAL_UART_MspInit+0x14c>)
 8004246:	2200      	movs	r2, #0
 8004248:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800424a:	4b13      	ldr	r3, [pc, #76]	@ (8004298 <HAL_UART_MspInit+0x14c>)
 800424c:	2200      	movs	r2, #0
 800424e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004250:	4b11      	ldr	r3, [pc, #68]	@ (8004298 <HAL_UART_MspInit+0x14c>)
 8004252:	2200      	movs	r2, #0
 8004254:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004256:	4810      	ldr	r0, [pc, #64]	@ (8004298 <HAL_UART_MspInit+0x14c>)
 8004258:	f000 faa8 	bl	80047ac <HAL_DMA_Init>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d001      	beq.n	8004266 <HAL_UART_MspInit+0x11a>
    {
      Error_Handler();
 8004262:	f7ff fc93 	bl	8003b8c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a0b      	ldr	r2, [pc, #44]	@ (8004298 <HAL_UART_MspInit+0x14c>)
 800426a:	67da      	str	r2, [r3, #124]	@ 0x7c
 800426c:	4a0a      	ldr	r2, [pc, #40]	@ (8004298 <HAL_UART_MspInit+0x14c>)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004272:	2200      	movs	r2, #0
 8004274:	2100      	movs	r1, #0
 8004276:	2024      	movs	r0, #36	@ 0x24
 8004278:	f000 fa39 	bl	80046ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800427c:	2024      	movs	r0, #36	@ 0x24
 800427e:	f000 fa50 	bl	8004722 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004282:	bf00      	nop
 8004284:	3770      	adds	r7, #112	@ 0x70
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	40013800 	.word	0x40013800
 8004290:	20002b78 	.word	0x20002b78
 8004294:	40020008 	.word	0x40020008
 8004298:	20002bd8 	.word	0x20002bd8
 800429c:	4002001c 	.word	0x4002001c

080042a0 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80042a0:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80042a2:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80042a4:	3304      	adds	r3, #4

080042a6 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80042a6:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80042a8:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80042aa:	d3f9      	bcc.n	80042a0 <CopyDataInit>
  bx lr
 80042ac:	4770      	bx	lr

080042ae <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80042ae:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80042b0:	3004      	adds	r0, #4

080042b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80042b2:	4288      	cmp	r0, r1
  bcc FillZerobss
 80042b4:	d3fb      	bcc.n	80042ae <FillZerobss>
  bx lr
 80042b6:	4770      	bx	lr

080042b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80042b8:	480c      	ldr	r0, [pc, #48]	@ (80042ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80042ba:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80042bc:	f7ff fe74 	bl	8003fa8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80042c0:	480b      	ldr	r0, [pc, #44]	@ (80042f0 <LoopForever+0x6>)
 80042c2:	490c      	ldr	r1, [pc, #48]	@ (80042f4 <LoopForever+0xa>)
 80042c4:	4a0c      	ldr	r2, [pc, #48]	@ (80042f8 <LoopForever+0xe>)
 80042c6:	2300      	movs	r3, #0
 80042c8:	f7ff ffed 	bl	80042a6 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80042cc:	480b      	ldr	r0, [pc, #44]	@ (80042fc <LoopForever+0x12>)
 80042ce:	490c      	ldr	r1, [pc, #48]	@ (8004300 <LoopForever+0x16>)
 80042d0:	4a0c      	ldr	r2, [pc, #48]	@ (8004304 <LoopForever+0x1a>)
 80042d2:	2300      	movs	r3, #0
 80042d4:	f7ff ffe7 	bl	80042a6 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80042d8:	480b      	ldr	r0, [pc, #44]	@ (8004308 <LoopForever+0x1e>)
 80042da:	490c      	ldr	r1, [pc, #48]	@ (800430c <LoopForever+0x22>)
 80042dc:	2300      	movs	r3, #0
 80042de:	f7ff ffe8 	bl	80042b2 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80042e2:	f00a ff83 	bl	800f1ec <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80042e6:	f7ff fb8d 	bl	8003a04 <main>

080042ea <LoopForever>:

LoopForever:
  b LoopForever
 80042ea:	e7fe      	b.n	80042ea <LoopForever>
  ldr   r0, =_estack
 80042ec:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80042f0:	20000008 	.word	0x20000008
 80042f4:	200001fc 	.word	0x200001fc
 80042f8:	080144e8 	.word	0x080144e8
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80042fc:	200301e4 	.word	0x200301e4
 8004300:	20030a67 	.word	0x20030a67
 8004304:	08014722 	.word	0x08014722
  INIT_BSS _sbss, _ebss
 8004308:	20000248 	.word	0x20000248
 800430c:	20003f54 	.word	0x20003f54

08004310 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004310:	e7fe      	b.n	8004310 <ADC1_IRQHandler>
	...

08004314 <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 8004314:	b480      	push	{r7}
 8004316:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8004318:	4b05      	ldr	r3, [pc, #20]	@ (8004330 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	4a04      	ldr	r2, [pc, #16]	@ (8004330 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 800431e:	f043 0301 	orr.w	r3, r3, #1
 8004322:	6053      	str	r3, [r2, #4]
}
 8004324:	bf00      	nop
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr
 800432e:	bf00      	nop
 8004330:	e0042000 	.word	0xe0042000

08004334 <LL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enable the Debug Module during STOP mode
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_EnableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStopMode(void)
{
 8004334:	b480      	push	{r7}
 8004336:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8004338:	4b05      	ldr	r3, [pc, #20]	@ (8004350 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	4a04      	ldr	r2, [pc, #16]	@ (8004350 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 800433e:	f043 0302 	orr.w	r3, r3, #2
 8004342:	6053      	str	r3, [r2, #4]
}
 8004344:	bf00      	nop
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr
 800434e:	bf00      	nop
 8004350:	e0042000 	.word	0xe0042000

08004354 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b082      	sub	sp, #8
 8004358:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800435a:	2300      	movs	r3, #0
 800435c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800435e:	4b0c      	ldr	r3, [pc, #48]	@ (8004390 <HAL_Init+0x3c>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a0b      	ldr	r2, [pc, #44]	@ (8004390 <HAL_Init+0x3c>)
 8004364:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004368:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800436a:	2003      	movs	r0, #3
 800436c:	f000 f9b4 	bl	80046d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004370:	200f      	movs	r0, #15
 8004372:	f000 f80f 	bl	8004394 <HAL_InitTick>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d002      	beq.n	8004382 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	71fb      	strb	r3, [r7, #7]
 8004380:	e001      	b.n	8004386 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004382:	f7ff fcf2 	bl	8003d6a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004386:	79fb      	ldrb	r3, [r7, #7]
}
 8004388:	4618      	mov	r0, r3
 800438a:	3708      	adds	r7, #8
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}
 8004390:	58004000 	.word	0x58004000

08004394 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800439c:	2300      	movs	r3, #0
 800439e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80043a0:	4b17      	ldr	r3, [pc, #92]	@ (8004400 <HAL_InitTick+0x6c>)
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d024      	beq.n	80043f2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80043a8:	f002 fe54 	bl	8007054 <HAL_RCC_GetHCLKFreq>
 80043ac:	4602      	mov	r2, r0
 80043ae:	4b14      	ldr	r3, [pc, #80]	@ (8004400 <HAL_InitTick+0x6c>)
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	4619      	mov	r1, r3
 80043b4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80043b8:	fbb3 f3f1 	udiv	r3, r3, r1
 80043bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c0:	4618      	mov	r0, r3
 80043c2:	f000 f9ca 	bl	800475a <HAL_SYSTICK_Config>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d10f      	bne.n	80043ec <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2b0f      	cmp	r3, #15
 80043d0:	d809      	bhi.n	80043e6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80043d2:	2200      	movs	r2, #0
 80043d4:	6879      	ldr	r1, [r7, #4]
 80043d6:	f04f 30ff 	mov.w	r0, #4294967295
 80043da:	f000 f988 	bl	80046ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80043de:	4a09      	ldr	r2, [pc, #36]	@ (8004404 <HAL_InitTick+0x70>)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6013      	str	r3, [r2, #0]
 80043e4:	e007      	b.n	80043f6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	73fb      	strb	r3, [r7, #15]
 80043ea:	e004      	b.n	80043f6 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	73fb      	strb	r3, [r7, #15]
 80043f0:	e001      	b.n	80043f6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80043f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3710      	adds	r7, #16
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	20000018 	.word	0x20000018
 8004404:	20000014 	.word	0x20000014

08004408 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004408:	b480      	push	{r7}
 800440a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800440c:	4b06      	ldr	r3, [pc, #24]	@ (8004428 <HAL_IncTick+0x20>)
 800440e:	781b      	ldrb	r3, [r3, #0]
 8004410:	461a      	mov	r2, r3
 8004412:	4b06      	ldr	r3, [pc, #24]	@ (800442c <HAL_IncTick+0x24>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4413      	add	r3, r2
 8004418:	4a04      	ldr	r2, [pc, #16]	@ (800442c <HAL_IncTick+0x24>)
 800441a:	6013      	str	r3, [r2, #0]
}
 800441c:	bf00      	nop
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop
 8004428:	20000018 	.word	0x20000018
 800442c:	20002c38 	.word	0x20002c38

08004430 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004430:	b480      	push	{r7}
 8004432:	af00      	add	r7, sp, #0
  return uwTick;
 8004434:	4b03      	ldr	r3, [pc, #12]	@ (8004444 <HAL_GetTick+0x14>)
 8004436:	681b      	ldr	r3, [r3, #0]
}
 8004438:	4618      	mov	r0, r3
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr
 8004442:	bf00      	nop
 8004444:	20002c38 	.word	0x20002c38

08004448 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8004448:	b480      	push	{r7}
 800444a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800444c:	4b03      	ldr	r3, [pc, #12]	@ (800445c <HAL_GetTickPrio+0x14>)
 800444e:	681b      	ldr	r3, [r3, #0]
}
 8004450:	4618      	mov	r0, r3
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	20000014 	.word	0x20000014

08004460 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8004464:	f7ff ff56 	bl	8004314 <LL_DBGMCU_EnableDBGSleepMode>
}
 8004468:	bf00      	nop
 800446a:	bd80      	pop	{r7, pc}

0800446c <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8004470:	f7ff ff60 	bl	8004334 <LL_DBGMCU_EnableDBGStopMode>
}
 8004474:	bf00      	nop
 8004476:	bd80      	pop	{r7, pc}

08004478 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004478:	b480      	push	{r7}
 800447a:	b085      	sub	sp, #20
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f003 0307 	and.w	r3, r3, #7
 8004486:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004488:	4b0c      	ldr	r3, [pc, #48]	@ (80044bc <__NVIC_SetPriorityGrouping+0x44>)
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800448e:	68ba      	ldr	r2, [r7, #8]
 8004490:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004494:	4013      	ands	r3, r2
 8004496:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80044a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044aa:	4a04      	ldr	r2, [pc, #16]	@ (80044bc <__NVIC_SetPriorityGrouping+0x44>)
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	60d3      	str	r3, [r2, #12]
}
 80044b0:	bf00      	nop
 80044b2:	3714      	adds	r7, #20
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr
 80044bc:	e000ed00 	.word	0xe000ed00

080044c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044c0:	b480      	push	{r7}
 80044c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044c4:	4b04      	ldr	r3, [pc, #16]	@ (80044d8 <__NVIC_GetPriorityGrouping+0x18>)
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	0a1b      	lsrs	r3, r3, #8
 80044ca:	f003 0307 	and.w	r3, r3, #7
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr
 80044d8:	e000ed00 	.word	0xe000ed00

080044dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	4603      	mov	r3, r0
 80044e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	db0b      	blt.n	8004506 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044ee:	79fb      	ldrb	r3, [r7, #7]
 80044f0:	f003 021f 	and.w	r2, r3, #31
 80044f4:	4907      	ldr	r1, [pc, #28]	@ (8004514 <__NVIC_EnableIRQ+0x38>)
 80044f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044fa:	095b      	lsrs	r3, r3, #5
 80044fc:	2001      	movs	r0, #1
 80044fe:	fa00 f202 	lsl.w	r2, r0, r2
 8004502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004506:	bf00      	nop
 8004508:	370c      	adds	r7, #12
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr
 8004512:	bf00      	nop
 8004514:	e000e100 	.word	0xe000e100

08004518 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	4603      	mov	r3, r0
 8004520:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004526:	2b00      	cmp	r3, #0
 8004528:	db12      	blt.n	8004550 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800452a:	79fb      	ldrb	r3, [r7, #7]
 800452c:	f003 021f 	and.w	r2, r3, #31
 8004530:	490a      	ldr	r1, [pc, #40]	@ (800455c <__NVIC_DisableIRQ+0x44>)
 8004532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004536:	095b      	lsrs	r3, r3, #5
 8004538:	2001      	movs	r0, #1
 800453a:	fa00 f202 	lsl.w	r2, r0, r2
 800453e:	3320      	adds	r3, #32
 8004540:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004544:	f3bf 8f4f 	dsb	sy
}
 8004548:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800454a:	f3bf 8f6f 	isb	sy
}
 800454e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004550:	bf00      	nop
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr
 800455c:	e000e100 	.word	0xe000e100

08004560 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	4603      	mov	r3, r0
 8004568:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800456a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800456e:	2b00      	cmp	r3, #0
 8004570:	db0c      	blt.n	800458c <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004572:	79fb      	ldrb	r3, [r7, #7]
 8004574:	f003 021f 	and.w	r2, r3, #31
 8004578:	4907      	ldr	r1, [pc, #28]	@ (8004598 <__NVIC_SetPendingIRQ+0x38>)
 800457a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800457e:	095b      	lsrs	r3, r3, #5
 8004580:	2001      	movs	r0, #1
 8004582:	fa00 f202 	lsl.w	r2, r0, r2
 8004586:	3340      	adds	r3, #64	@ 0x40
 8004588:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800458c:	bf00      	nop
 800458e:	370c      	adds	r7, #12
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr
 8004598:	e000e100 	.word	0xe000e100

0800459c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	4603      	mov	r3, r0
 80045a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	db0c      	blt.n	80045c8 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045ae:	79fb      	ldrb	r3, [r7, #7]
 80045b0:	f003 021f 	and.w	r2, r3, #31
 80045b4:	4907      	ldr	r1, [pc, #28]	@ (80045d4 <__NVIC_ClearPendingIRQ+0x38>)
 80045b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045ba:	095b      	lsrs	r3, r3, #5
 80045bc:	2001      	movs	r0, #1
 80045be:	fa00 f202 	lsl.w	r2, r0, r2
 80045c2:	3360      	adds	r3, #96	@ 0x60
 80045c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80045c8:	bf00      	nop
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr
 80045d4:	e000e100 	.word	0xe000e100

080045d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	4603      	mov	r3, r0
 80045e0:	6039      	str	r1, [r7, #0]
 80045e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	db0a      	blt.n	8004602 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	b2da      	uxtb	r2, r3
 80045f0:	490c      	ldr	r1, [pc, #48]	@ (8004624 <__NVIC_SetPriority+0x4c>)
 80045f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045f6:	0112      	lsls	r2, r2, #4
 80045f8:	b2d2      	uxtb	r2, r2
 80045fa:	440b      	add	r3, r1
 80045fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004600:	e00a      	b.n	8004618 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	b2da      	uxtb	r2, r3
 8004606:	4908      	ldr	r1, [pc, #32]	@ (8004628 <__NVIC_SetPriority+0x50>)
 8004608:	79fb      	ldrb	r3, [r7, #7]
 800460a:	f003 030f 	and.w	r3, r3, #15
 800460e:	3b04      	subs	r3, #4
 8004610:	0112      	lsls	r2, r2, #4
 8004612:	b2d2      	uxtb	r2, r2
 8004614:	440b      	add	r3, r1
 8004616:	761a      	strb	r2, [r3, #24]
}
 8004618:	bf00      	nop
 800461a:	370c      	adds	r7, #12
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr
 8004624:	e000e100 	.word	0xe000e100
 8004628:	e000ed00 	.word	0xe000ed00

0800462c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800462c:	b480      	push	{r7}
 800462e:	b089      	sub	sp, #36	@ 0x24
 8004630:	af00      	add	r7, sp, #0
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	60b9      	str	r1, [r7, #8]
 8004636:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f003 0307 	and.w	r3, r3, #7
 800463e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	f1c3 0307 	rsb	r3, r3, #7
 8004646:	2b04      	cmp	r3, #4
 8004648:	bf28      	it	cs
 800464a:	2304      	movcs	r3, #4
 800464c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	3304      	adds	r3, #4
 8004652:	2b06      	cmp	r3, #6
 8004654:	d902      	bls.n	800465c <NVIC_EncodePriority+0x30>
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	3b03      	subs	r3, #3
 800465a:	e000      	b.n	800465e <NVIC_EncodePriority+0x32>
 800465c:	2300      	movs	r3, #0
 800465e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004660:	f04f 32ff 	mov.w	r2, #4294967295
 8004664:	69bb      	ldr	r3, [r7, #24]
 8004666:	fa02 f303 	lsl.w	r3, r2, r3
 800466a:	43da      	mvns	r2, r3
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	401a      	ands	r2, r3
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004674:	f04f 31ff 	mov.w	r1, #4294967295
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	fa01 f303 	lsl.w	r3, r1, r3
 800467e:	43d9      	mvns	r1, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004684:	4313      	orrs	r3, r2
         );
}
 8004686:	4618      	mov	r0, r3
 8004688:	3724      	adds	r7, #36	@ 0x24
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr
	...

08004694 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b082      	sub	sp, #8
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	3b01      	subs	r3, #1
 80046a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80046a4:	d301      	bcc.n	80046aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80046a6:	2301      	movs	r3, #1
 80046a8:	e00f      	b.n	80046ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80046aa:	4a0a      	ldr	r2, [pc, #40]	@ (80046d4 <SysTick_Config+0x40>)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	3b01      	subs	r3, #1
 80046b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80046b2:	210f      	movs	r1, #15
 80046b4:	f04f 30ff 	mov.w	r0, #4294967295
 80046b8:	f7ff ff8e 	bl	80045d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80046bc:	4b05      	ldr	r3, [pc, #20]	@ (80046d4 <SysTick_Config+0x40>)
 80046be:	2200      	movs	r2, #0
 80046c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80046c2:	4b04      	ldr	r3, [pc, #16]	@ (80046d4 <SysTick_Config+0x40>)
 80046c4:	2207      	movs	r2, #7
 80046c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3708      	adds	r7, #8
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	e000e010 	.word	0xe000e010

080046d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b082      	sub	sp, #8
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f7ff fec9 	bl	8004478 <__NVIC_SetPriorityGrouping>
}
 80046e6:	bf00      	nop
 80046e8:	3708      	adds	r7, #8
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}

080046ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046ee:	b580      	push	{r7, lr}
 80046f0:	b086      	sub	sp, #24
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	4603      	mov	r3, r0
 80046f6:	60b9      	str	r1, [r7, #8]
 80046f8:	607a      	str	r2, [r7, #4]
 80046fa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80046fc:	f7ff fee0 	bl	80044c0 <__NVIC_GetPriorityGrouping>
 8004700:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	68b9      	ldr	r1, [r7, #8]
 8004706:	6978      	ldr	r0, [r7, #20]
 8004708:	f7ff ff90 	bl	800462c <NVIC_EncodePriority>
 800470c:	4602      	mov	r2, r0
 800470e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004712:	4611      	mov	r1, r2
 8004714:	4618      	mov	r0, r3
 8004716:	f7ff ff5f 	bl	80045d8 <__NVIC_SetPriority>
}
 800471a:	bf00      	nop
 800471c:	3718      	adds	r7, #24
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}

08004722 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004722:	b580      	push	{r7, lr}
 8004724:	b082      	sub	sp, #8
 8004726:	af00      	add	r7, sp, #0
 8004728:	4603      	mov	r3, r0
 800472a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800472c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004730:	4618      	mov	r0, r3
 8004732:	f7ff fed3 	bl	80044dc <__NVIC_EnableIRQ>
}
 8004736:	bf00      	nop
 8004738:	3708      	adds	r7, #8
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}

0800473e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800473e:	b580      	push	{r7, lr}
 8004740:	b082      	sub	sp, #8
 8004742:	af00      	add	r7, sp, #0
 8004744:	4603      	mov	r3, r0
 8004746:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800474c:	4618      	mov	r0, r3
 800474e:	f7ff fee3 	bl	8004518 <__NVIC_DisableIRQ>
}
 8004752:	bf00      	nop
 8004754:	3708      	adds	r7, #8
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}

0800475a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800475a:	b580      	push	{r7, lr}
 800475c:	b082      	sub	sp, #8
 800475e:	af00      	add	r7, sp, #0
 8004760:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f7ff ff96 	bl	8004694 <SysTick_Config>
 8004768:	4603      	mov	r3, r0
}
 800476a:	4618      	mov	r0, r3
 800476c:	3708      	adds	r7, #8
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}

08004772 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8004772:	b580      	push	{r7, lr}
 8004774:	b082      	sub	sp, #8
 8004776:	af00      	add	r7, sp, #0
 8004778:	4603      	mov	r3, r0
 800477a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 800477c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004780:	4618      	mov	r0, r3
 8004782:	f7ff feed 	bl	8004560 <__NVIC_SetPendingIRQ>
}
 8004786:	bf00      	nop
 8004788:	3708      	adds	r7, #8
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}

0800478e <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800478e:	b580      	push	{r7, lr}
 8004790:	b082      	sub	sp, #8
 8004792:	af00      	add	r7, sp, #0
 8004794:	4603      	mov	r3, r0
 8004796:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8004798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800479c:	4618      	mov	r0, r3
 800479e:	f7ff fefd 	bl	800459c <__NVIC_ClearPendingIRQ>
}
 80047a2:	bf00      	nop
 80047a4:	3708      	adds	r7, #8
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
	...

080047ac <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d101      	bne.n	80047be <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e08e      	b.n	80048dc <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	461a      	mov	r2, r3
 80047c4:	4b47      	ldr	r3, [pc, #284]	@ (80048e4 <HAL_DMA_Init+0x138>)
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d80f      	bhi.n	80047ea <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	461a      	mov	r2, r3
 80047d0:	4b45      	ldr	r3, [pc, #276]	@ (80048e8 <HAL_DMA_Init+0x13c>)
 80047d2:	4413      	add	r3, r2
 80047d4:	4a45      	ldr	r2, [pc, #276]	@ (80048ec <HAL_DMA_Init+0x140>)
 80047d6:	fba2 2303 	umull	r2, r3, r2, r3
 80047da:	091b      	lsrs	r3, r3, #4
 80047dc:	009a      	lsls	r2, r3, #2
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a42      	ldr	r2, [pc, #264]	@ (80048f0 <HAL_DMA_Init+0x144>)
 80047e6:	641a      	str	r2, [r3, #64]	@ 0x40
 80047e8:	e00e      	b.n	8004808 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	461a      	mov	r2, r3
 80047f0:	4b40      	ldr	r3, [pc, #256]	@ (80048f4 <HAL_DMA_Init+0x148>)
 80047f2:	4413      	add	r3, r2
 80047f4:	4a3d      	ldr	r2, [pc, #244]	@ (80048ec <HAL_DMA_Init+0x140>)
 80047f6:	fba2 2303 	umull	r2, r3, r2, r3
 80047fa:	091b      	lsrs	r3, r3, #4
 80047fc:	009a      	lsls	r2, r3, #2
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a3c      	ldr	r2, [pc, #240]	@ (80048f8 <HAL_DMA_Init+0x14c>)
 8004806:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2202      	movs	r2, #2
 800480c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800481e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004822:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800482c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004838:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	699b      	ldr	r3, [r3, #24]
 800483e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004844:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a1b      	ldr	r3, [r3, #32]
 800484a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800484c:	68fa      	ldr	r2, [r7, #12]
 800484e:	4313      	orrs	r3, r2
 8004850:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	68fa      	ldr	r2, [r7, #12]
 8004858:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f000 fa74 	bl	8004d48 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004868:	d102      	bne.n	8004870 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	685a      	ldr	r2, [r3, #4]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004878:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800487c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004886:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d010      	beq.n	80048b2 <HAL_DMA_Init+0x106>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	2b04      	cmp	r3, #4
 8004896:	d80c      	bhi.n	80048b2 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f000 fa93 	bl	8004dc4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048a2:	2200      	movs	r2, #0
 80048a4:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80048ae:	605a      	str	r2, [r3, #4]
 80048b0:	e008      	b.n	80048c4 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2201      	movs	r2, #1
 80048ce:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80048da:	2300      	movs	r3, #0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3710      	adds	r7, #16
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	40020407 	.word	0x40020407
 80048e8:	bffdfff8 	.word	0xbffdfff8
 80048ec:	cccccccd 	.word	0xcccccccd
 80048f0:	40020000 	.word	0x40020000
 80048f4:	bffdfbf8 	.word	0xbffdfbf8
 80048f8:	40020400 	.word	0x40020400

080048fc <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b086      	sub	sp, #24
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	607a      	str	r2, [r7, #4]
 8004908:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800490a:	2300      	movs	r3, #0
 800490c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004914:	2b01      	cmp	r3, #1
 8004916:	d101      	bne.n	800491c <HAL_DMA_Start_IT+0x20>
 8004918:	2302      	movs	r3, #2
 800491a:	e066      	b.n	80049ea <HAL_DMA_Start_IT+0xee>
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800492a:	b2db      	uxtb	r3, r3
 800492c:	2b01      	cmp	r3, #1
 800492e:	d155      	bne.n	80049dc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2202      	movs	r2, #2
 8004934:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2200      	movs	r2, #0
 800493c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f022 0201 	bic.w	r2, r2, #1
 800494c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	68b9      	ldr	r1, [r7, #8]
 8004954:	68f8      	ldr	r0, [r7, #12]
 8004956:	f000 f9b9 	bl	8004ccc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800495e:	2b00      	cmp	r3, #0
 8004960:	d008      	beq.n	8004974 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f042 020e 	orr.w	r2, r2, #14
 8004970:	601a      	str	r2, [r3, #0]
 8004972:	e00f      	b.n	8004994 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f022 0204 	bic.w	r2, r2, #4
 8004982:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f042 020a 	orr.w	r2, r2, #10
 8004992:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d007      	beq.n	80049b2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049b0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d007      	beq.n	80049ca <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049c8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f042 0201 	orr.w	r2, r2, #1
 80049d8:	601a      	str	r2, [r3, #0]
 80049da:	e005      	b.n	80049e8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2200      	movs	r2, #0
 80049e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80049e4:	2302      	movs	r3, #2
 80049e6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80049e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3718      	adds	r7, #24
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}

080049f2 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80049f2:	b480      	push	{r7}
 80049f4:	b083      	sub	sp, #12
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d101      	bne.n	8004a04 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e04f      	b.n	8004aa4 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	2b02      	cmp	r3, #2
 8004a0e:	d008      	beq.n	8004a22 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2204      	movs	r2, #4
 8004a14:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e040      	b.n	8004aa4 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f022 020e 	bic.w	r2, r2, #14
 8004a30:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a3c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004a40:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f022 0201 	bic.w	r2, r2, #1
 8004a50:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a56:	f003 021c 	and.w	r2, r3, #28
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a5e:	2101      	movs	r1, #1
 8004a60:	fa01 f202 	lsl.w	r2, r1, r2
 8004a64:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004a6e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d00c      	beq.n	8004a92 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a82:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004a86:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004a90:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2201      	movs	r2, #1
 8004a96:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8004aa2:	2300      	movs	r3, #0
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	370c      	adds	r7, #12
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	2b02      	cmp	r3, #2
 8004ac6:	d005      	beq.n	8004ad4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2204      	movs	r2, #4
 8004acc:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	73fb      	strb	r3, [r7, #15]
 8004ad2:	e047      	b.n	8004b64 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f022 020e 	bic.w	r2, r2, #14
 8004ae2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f022 0201 	bic.w	r2, r2, #1
 8004af2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004afe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004b02:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b08:	f003 021c 	and.w	r2, r3, #28
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b10:	2101      	movs	r1, #1
 8004b12:	fa01 f202 	lsl.w	r2, r1, r2
 8004b16:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004b20:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d00c      	beq.n	8004b44 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b34:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004b38:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004b42:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d003      	beq.n	8004b64 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	4798      	blx	r3
    }
  }
  return status;
 8004b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3710      	adds	r7, #16
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}

08004b6e <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004b6e:	b580      	push	{r7, lr}
 8004b70:	b084      	sub	sp, #16
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b8a:	f003 031c 	and.w	r3, r3, #28
 8004b8e:	2204      	movs	r2, #4
 8004b90:	409a      	lsls	r2, r3
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	4013      	ands	r3, r2
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d026      	beq.n	8004be8 <HAL_DMA_IRQHandler+0x7a>
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	f003 0304 	and.w	r3, r3, #4
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d021      	beq.n	8004be8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0320 	and.w	r3, r3, #32
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d107      	bne.n	8004bc2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f022 0204 	bic.w	r2, r2, #4
 8004bc0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bc6:	f003 021c 	and.w	r2, r3, #28
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bce:	2104      	movs	r1, #4
 8004bd0:	fa01 f202 	lsl.w	r2, r1, r2
 8004bd4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d071      	beq.n	8004cc2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004be6:	e06c      	b.n	8004cc2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bec:	f003 031c 	and.w	r3, r3, #28
 8004bf0:	2202      	movs	r2, #2
 8004bf2:	409a      	lsls	r2, r3
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d02e      	beq.n	8004c5a <HAL_DMA_IRQHandler+0xec>
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	f003 0302 	and.w	r3, r3, #2
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d029      	beq.n	8004c5a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0320 	and.w	r3, r3, #32
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d10b      	bne.n	8004c2c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f022 020a 	bic.w	r2, r2, #10
 8004c22:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c30:	f003 021c 	and.w	r2, r3, #28
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c38:	2102      	movs	r1, #2
 8004c3a:	fa01 f202 	lsl.w	r2, r1, r2
 8004c3e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d038      	beq.n	8004cc2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004c58:	e033      	b.n	8004cc2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c5e:	f003 031c 	and.w	r3, r3, #28
 8004c62:	2208      	movs	r2, #8
 8004c64:	409a      	lsls	r2, r3
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	4013      	ands	r3, r2
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d02a      	beq.n	8004cc4 <HAL_DMA_IRQHandler+0x156>
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	f003 0308 	and.w	r3, r3, #8
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d025      	beq.n	8004cc4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f022 020e 	bic.w	r2, r2, #14
 8004c86:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c8c:	f003 021c 	and.w	r2, r3, #28
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c94:	2101      	movs	r1, #1
 8004c96:	fa01 f202 	lsl.w	r2, r1, r2
 8004c9a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d004      	beq.n	8004cc4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004cc2:	bf00      	nop
 8004cc4:	bf00      	nop
}
 8004cc6:	3710      	adds	r7, #16
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b085      	sub	sp, #20
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	607a      	str	r2, [r7, #4]
 8004cd8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cde:	68fa      	ldr	r2, [r7, #12]
 8004ce0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004ce2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d004      	beq.n	8004cf6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cf0:	68fa      	ldr	r2, [r7, #12]
 8004cf2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004cf4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cfa:	f003 021c 	and.w	r2, r3, #28
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d02:	2101      	movs	r1, #1
 8004d04:	fa01 f202 	lsl.w	r2, r1, r2
 8004d08:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	683a      	ldr	r2, [r7, #0]
 8004d10:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	2b10      	cmp	r3, #16
 8004d18:	d108      	bne.n	8004d2c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	68ba      	ldr	r2, [r7, #8]
 8004d28:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004d2a:	e007      	b.n	8004d3c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	68ba      	ldr	r2, [r7, #8]
 8004d32:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	60da      	str	r2, [r3, #12]
}
 8004d3c:	bf00      	nop
 8004d3e:	3714      	adds	r7, #20
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b085      	sub	sp, #20
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	461a      	mov	r2, r3
 8004d56:	4b17      	ldr	r3, [pc, #92]	@ (8004db4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d80a      	bhi.n	8004d72 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d60:	089b      	lsrs	r3, r3, #2
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004d68:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	6493      	str	r3, [r2, #72]	@ 0x48
 8004d70:	e007      	b.n	8004d82 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d76:	089b      	lsrs	r3, r3, #2
 8004d78:	009a      	lsls	r2, r3, #2
 8004d7a:	4b0f      	ldr	r3, [pc, #60]	@ (8004db8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004d7c:	4413      	add	r3, r2
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	3b08      	subs	r3, #8
 8004d8a:	4a0c      	ldr	r2, [pc, #48]	@ (8004dbc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d90:	091b      	lsrs	r3, r3, #4
 8004d92:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4a0a      	ldr	r2, [pc, #40]	@ (8004dc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004d98:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f003 031f 	and.w	r3, r3, #31
 8004da0:	2201      	movs	r2, #1
 8004da2:	409a      	lsls	r2, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004da8:	bf00      	nop
 8004daa:	3714      	adds	r7, #20
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr
 8004db4:	40020407 	.word	0x40020407
 8004db8:	4002081c 	.word	0x4002081c
 8004dbc:	cccccccd 	.word	0xcccccccd
 8004dc0:	40020880 	.word	0x40020880

08004dc4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b085      	sub	sp, #20
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004dd4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004dd6:	68fa      	ldr	r2, [r7, #12]
 8004dd8:	4b0b      	ldr	r3, [pc, #44]	@ (8004e08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004dda:	4413      	add	r3, r2
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	461a      	mov	r2, r3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a09      	ldr	r2, [pc, #36]	@ (8004e0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8004de8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	3b01      	subs	r3, #1
 8004dee:	f003 0303 	and.w	r3, r3, #3
 8004df2:	2201      	movs	r2, #1
 8004df4:	409a      	lsls	r2, r3
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004dfa:	bf00      	nop
 8004dfc:	3714      	adds	r7, #20
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop
 8004e08:	1000823f 	.word	0x1000823f
 8004e0c:	40020940 	.word	0x40020940

08004e10 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b087      	sub	sp, #28
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004e1e:	e14c      	b.n	80050ba <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	2101      	movs	r1, #1
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	fa01 f303 	lsl.w	r3, r1, r3
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	f000 813e 	beq.w	80050b4 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	f003 0303 	and.w	r3, r3, #3
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d005      	beq.n	8004e50 <HAL_GPIO_Init+0x40>
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	f003 0303 	and.w	r3, r3, #3
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	d130      	bne.n	8004eb2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	005b      	lsls	r3, r3, #1
 8004e5a:	2203      	movs	r2, #3
 8004e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e60:	43db      	mvns	r3, r3
 8004e62:	693a      	ldr	r2, [r7, #16]
 8004e64:	4013      	ands	r3, r2
 8004e66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	68da      	ldr	r2, [r3, #12]
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	005b      	lsls	r3, r3, #1
 8004e70:	fa02 f303 	lsl.w	r3, r2, r3
 8004e74:	693a      	ldr	r2, [r7, #16]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	693a      	ldr	r2, [r7, #16]
 8004e7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004e86:	2201      	movs	r2, #1
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e8e:	43db      	mvns	r3, r3
 8004e90:	693a      	ldr	r2, [r7, #16]
 8004e92:	4013      	ands	r3, r2
 8004e94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	091b      	lsrs	r3, r3, #4
 8004e9c:	f003 0201 	and.w	r2, r3, #1
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea6:	693a      	ldr	r2, [r7, #16]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	693a      	ldr	r2, [r7, #16]
 8004eb0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	f003 0303 	and.w	r3, r3, #3
 8004eba:	2b03      	cmp	r3, #3
 8004ebc:	d017      	beq.n	8004eee <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	005b      	lsls	r3, r3, #1
 8004ec8:	2203      	movs	r2, #3
 8004eca:	fa02 f303 	lsl.w	r3, r2, r3
 8004ece:	43db      	mvns	r3, r3
 8004ed0:	693a      	ldr	r2, [r7, #16]
 8004ed2:	4013      	ands	r3, r2
 8004ed4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	689a      	ldr	r2, [r3, #8]
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	005b      	lsls	r3, r3, #1
 8004ede:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee2:	693a      	ldr	r2, [r7, #16]
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	693a      	ldr	r2, [r7, #16]
 8004eec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	f003 0303 	and.w	r3, r3, #3
 8004ef6:	2b02      	cmp	r3, #2
 8004ef8:	d123      	bne.n	8004f42 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	08da      	lsrs	r2, r3, #3
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	3208      	adds	r2, #8
 8004f02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f06:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	f003 0307 	and.w	r3, r3, #7
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	220f      	movs	r2, #15
 8004f12:	fa02 f303 	lsl.w	r3, r2, r3
 8004f16:	43db      	mvns	r3, r3
 8004f18:	693a      	ldr	r2, [r7, #16]
 8004f1a:	4013      	ands	r3, r2
 8004f1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	691a      	ldr	r2, [r3, #16]
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	f003 0307 	and.w	r3, r3, #7
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2e:	693a      	ldr	r2, [r7, #16]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	08da      	lsrs	r2, r3, #3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	3208      	adds	r2, #8
 8004f3c:	6939      	ldr	r1, [r7, #16]
 8004f3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	005b      	lsls	r3, r3, #1
 8004f4c:	2203      	movs	r2, #3
 8004f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f52:	43db      	mvns	r3, r3
 8004f54:	693a      	ldr	r2, [r7, #16]
 8004f56:	4013      	ands	r3, r2
 8004f58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	f003 0203 	and.w	r2, r3, #3
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	005b      	lsls	r3, r3, #1
 8004f66:	fa02 f303 	lsl.w	r3, r2, r3
 8004f6a:	693a      	ldr	r2, [r7, #16]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	693a      	ldr	r2, [r7, #16]
 8004f74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	f000 8098 	beq.w	80050b4 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004f84:	4a54      	ldr	r2, [pc, #336]	@ (80050d8 <HAL_GPIO_Init+0x2c8>)
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	089b      	lsrs	r3, r3, #2
 8004f8a:	3302      	adds	r3, #2
 8004f8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f90:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	f003 0303 	and.w	r3, r3, #3
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	220f      	movs	r2, #15
 8004f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa0:	43db      	mvns	r3, r3
 8004fa2:	693a      	ldr	r2, [r7, #16]
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004fae:	d019      	beq.n	8004fe4 <HAL_GPIO_Init+0x1d4>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4a4a      	ldr	r2, [pc, #296]	@ (80050dc <HAL_GPIO_Init+0x2cc>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d013      	beq.n	8004fe0 <HAL_GPIO_Init+0x1d0>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a49      	ldr	r2, [pc, #292]	@ (80050e0 <HAL_GPIO_Init+0x2d0>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d00d      	beq.n	8004fdc <HAL_GPIO_Init+0x1cc>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	4a48      	ldr	r2, [pc, #288]	@ (80050e4 <HAL_GPIO_Init+0x2d4>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d007      	beq.n	8004fd8 <HAL_GPIO_Init+0x1c8>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a47      	ldr	r2, [pc, #284]	@ (80050e8 <HAL_GPIO_Init+0x2d8>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d101      	bne.n	8004fd4 <HAL_GPIO_Init+0x1c4>
 8004fd0:	2304      	movs	r3, #4
 8004fd2:	e008      	b.n	8004fe6 <HAL_GPIO_Init+0x1d6>
 8004fd4:	2307      	movs	r3, #7
 8004fd6:	e006      	b.n	8004fe6 <HAL_GPIO_Init+0x1d6>
 8004fd8:	2303      	movs	r3, #3
 8004fda:	e004      	b.n	8004fe6 <HAL_GPIO_Init+0x1d6>
 8004fdc:	2302      	movs	r3, #2
 8004fde:	e002      	b.n	8004fe6 <HAL_GPIO_Init+0x1d6>
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e000      	b.n	8004fe6 <HAL_GPIO_Init+0x1d6>
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	697a      	ldr	r2, [r7, #20]
 8004fe8:	f002 0203 	and.w	r2, r2, #3
 8004fec:	0092      	lsls	r2, r2, #2
 8004fee:	4093      	lsls	r3, r2
 8004ff0:	693a      	ldr	r2, [r7, #16]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004ff6:	4938      	ldr	r1, [pc, #224]	@ (80050d8 <HAL_GPIO_Init+0x2c8>)
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	089b      	lsrs	r3, r3, #2
 8004ffc:	3302      	adds	r3, #2
 8004ffe:	693a      	ldr	r2, [r7, #16]
 8005000:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005004:	4b39      	ldr	r3, [pc, #228]	@ (80050ec <HAL_GPIO_Init+0x2dc>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	43db      	mvns	r3, r3
 800500e:	693a      	ldr	r2, [r7, #16]
 8005010:	4013      	ands	r3, r2
 8005012:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800501c:	2b00      	cmp	r3, #0
 800501e:	d003      	beq.n	8005028 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8005020:	693a      	ldr	r2, [r7, #16]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	4313      	orrs	r3, r2
 8005026:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005028:	4a30      	ldr	r2, [pc, #192]	@ (80050ec <HAL_GPIO_Init+0x2dc>)
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800502e:	4b2f      	ldr	r3, [pc, #188]	@ (80050ec <HAL_GPIO_Init+0x2dc>)
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	43db      	mvns	r3, r3
 8005038:	693a      	ldr	r2, [r7, #16]
 800503a:	4013      	ands	r3, r2
 800503c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005046:	2b00      	cmp	r3, #0
 8005048:	d003      	beq.n	8005052 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800504a:	693a      	ldr	r2, [r7, #16]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	4313      	orrs	r3, r2
 8005050:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005052:	4a26      	ldr	r2, [pc, #152]	@ (80050ec <HAL_GPIO_Init+0x2dc>)
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005058:	4b24      	ldr	r3, [pc, #144]	@ (80050ec <HAL_GPIO_Init+0x2dc>)
 800505a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800505e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	43db      	mvns	r3, r3
 8005064:	693a      	ldr	r2, [r7, #16]
 8005066:	4013      	ands	r3, r2
 8005068:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005072:	2b00      	cmp	r3, #0
 8005074:	d003      	beq.n	800507e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8005076:	693a      	ldr	r2, [r7, #16]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	4313      	orrs	r3, r2
 800507c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800507e:	4a1b      	ldr	r2, [pc, #108]	@ (80050ec <HAL_GPIO_Init+0x2dc>)
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8005086:	4b19      	ldr	r3, [pc, #100]	@ (80050ec <HAL_GPIO_Init+0x2dc>)
 8005088:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800508c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	43db      	mvns	r3, r3
 8005092:	693a      	ldr	r2, [r7, #16]
 8005094:	4013      	ands	r3, r2
 8005096:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d003      	beq.n	80050ac <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80050a4:	693a      	ldr	r2, [r7, #16]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	4313      	orrs	r3, r2
 80050aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80050ac:	4a0f      	ldr	r2, [pc, #60]	@ (80050ec <HAL_GPIO_Init+0x2dc>)
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	3301      	adds	r3, #1
 80050b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	fa22 f303 	lsr.w	r3, r2, r3
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	f47f aeab 	bne.w	8004e20 <HAL_GPIO_Init+0x10>
  }
}
 80050ca:	bf00      	nop
 80050cc:	bf00      	nop
 80050ce:	371c      	adds	r7, #28
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr
 80050d8:	40010000 	.word	0x40010000
 80050dc:	48000400 	.word	0x48000400
 80050e0:	48000800 	.word	0x48000800
 80050e4:	48000c00 	.word	0x48000c00
 80050e8:	48001000 	.word	0x48001000
 80050ec:	58000800 	.word	0x58000800

080050f0 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b085      	sub	sp, #20
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	460b      	mov	r3, r1
 80050fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	691a      	ldr	r2, [r3, #16]
 8005100:	887b      	ldrh	r3, [r7, #2]
 8005102:	4013      	ands	r3, r2
 8005104:	2b00      	cmp	r3, #0
 8005106:	d002      	beq.n	800510e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005108:	2301      	movs	r3, #1
 800510a:	73fb      	strb	r3, [r7, #15]
 800510c:	e001      	b.n	8005112 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800510e:	2300      	movs	r3, #0
 8005110:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005112:	7bfb      	ldrb	r3, [r7, #15]
}
 8005114:	4618      	mov	r0, r3
 8005116:	3714      	adds	r7, #20
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005120:	b480      	push	{r7}
 8005122:	b083      	sub	sp, #12
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	460b      	mov	r3, r1
 800512a:	807b      	strh	r3, [r7, #2]
 800512c:	4613      	mov	r3, r2
 800512e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005130:	787b      	ldrb	r3, [r7, #1]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d003      	beq.n	800513e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005136:	887a      	ldrh	r2, [r7, #2]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800513c:	e002      	b.n	8005144 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800513e:	887a      	ldrh	r2, [r7, #2]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005144:	bf00      	nop
 8005146:	370c      	adds	r7, #12
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b082      	sub	sp, #8
 8005154:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8005156:	4b0a      	ldr	r3, [pc, #40]	@ (8005180 <HAL_HSEM_IRQHandler+0x30>)
 8005158:	68db      	ldr	r3, [r3, #12]
 800515a:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 800515c:	4b08      	ldr	r3, [pc, #32]	@ (8005180 <HAL_HSEM_IRQHandler+0x30>)
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	43db      	mvns	r3, r3
 8005164:	4906      	ldr	r1, [pc, #24]	@ (8005180 <HAL_HSEM_IRQHandler+0x30>)
 8005166:	4013      	ands	r3, r2
 8005168:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800516a:	4a05      	ldr	r2, [pc, #20]	@ (8005180 <HAL_HSEM_IRQHandler+0x30>)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f000 f807 	bl	8005184 <HAL_HSEM_FreeCallback>
}
 8005176:	bf00      	nop
 8005178:	3708      	adds	r7, #8
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	58001500 	.word	0x58001500

08005184 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8005184:	b480      	push	{r7}
 8005186:	b083      	sub	sp, #12
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 800518c:	bf00      	nop
 800518e:	370c      	adds	r7, #12
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr

08005198 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d101      	bne.n	80051aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e08d      	b.n	80052c6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d106      	bne.n	80051c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f7fe fb70 	bl	80038a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2224      	movs	r2, #36	@ 0x24
 80051c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f022 0201 	bic.w	r2, r2, #1
 80051da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	685a      	ldr	r2, [r3, #4]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80051e8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	689a      	ldr	r2, [r3, #8]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80051f8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d107      	bne.n	8005212 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	689a      	ldr	r2, [r3, #8]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800520e:	609a      	str	r2, [r3, #8]
 8005210:	e006      	b.n	8005220 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	689a      	ldr	r2, [r3, #8]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800521e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	2b02      	cmp	r3, #2
 8005226:	d108      	bne.n	800523a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	685a      	ldr	r2, [r3, #4]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005236:	605a      	str	r2, [r3, #4]
 8005238:	e007      	b.n	800524a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	685a      	ldr	r2, [r3, #4]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005248:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	6812      	ldr	r2, [r2, #0]
 8005254:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005258:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800525c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	68da      	ldr	r2, [r3, #12]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800526c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	691a      	ldr	r2, [r3, #16]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	695b      	ldr	r3, [r3, #20]
 8005276:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	699b      	ldr	r3, [r3, #24]
 800527e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	430a      	orrs	r2, r1
 8005286:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	69d9      	ldr	r1, [r3, #28]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6a1a      	ldr	r2, [r3, #32]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	430a      	orrs	r2, r1
 8005296:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f042 0201 	orr.w	r2, r2, #1
 80052a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2220      	movs	r2, #32
 80052b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80052c4:	2300      	movs	r3, #0
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3708      	adds	r7, #8
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
	...

080052d0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b088      	sub	sp, #32
 80052d4:	af02      	add	r7, sp, #8
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	4608      	mov	r0, r1
 80052da:	4611      	mov	r1, r2
 80052dc:	461a      	mov	r2, r3
 80052de:	4603      	mov	r3, r0
 80052e0:	817b      	strh	r3, [r7, #10]
 80052e2:	460b      	mov	r3, r1
 80052e4:	813b      	strh	r3, [r7, #8]
 80052e6:	4613      	mov	r3, r2
 80052e8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	2b20      	cmp	r3, #32
 80052f4:	f040 80f9 	bne.w	80054ea <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80052f8:	6a3b      	ldr	r3, [r7, #32]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d002      	beq.n	8005304 <HAL_I2C_Mem_Write+0x34>
 80052fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005300:	2b00      	cmp	r3, #0
 8005302:	d105      	bne.n	8005310 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800530a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	e0ed      	b.n	80054ec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005316:	2b01      	cmp	r3, #1
 8005318:	d101      	bne.n	800531e <HAL_I2C_Mem_Write+0x4e>
 800531a:	2302      	movs	r3, #2
 800531c:	e0e6      	b.n	80054ec <HAL_I2C_Mem_Write+0x21c>
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2201      	movs	r2, #1
 8005322:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005326:	f7ff f883 	bl	8004430 <HAL_GetTick>
 800532a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	9300      	str	r3, [sp, #0]
 8005330:	2319      	movs	r3, #25
 8005332:	2201      	movs	r2, #1
 8005334:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005338:	68f8      	ldr	r0, [r7, #12]
 800533a:	f000 fac3 	bl	80058c4 <I2C_WaitOnFlagUntilTimeout>
 800533e:	4603      	mov	r3, r0
 8005340:	2b00      	cmp	r3, #0
 8005342:	d001      	beq.n	8005348 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	e0d1      	b.n	80054ec <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2221      	movs	r2, #33	@ 0x21
 800534c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2240      	movs	r2, #64	@ 0x40
 8005354:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2200      	movs	r2, #0
 800535c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6a3a      	ldr	r2, [r7, #32]
 8005362:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005368:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2200      	movs	r2, #0
 800536e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005370:	88f8      	ldrh	r0, [r7, #6]
 8005372:	893a      	ldrh	r2, [r7, #8]
 8005374:	8979      	ldrh	r1, [r7, #10]
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	9301      	str	r3, [sp, #4]
 800537a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800537c:	9300      	str	r3, [sp, #0]
 800537e:	4603      	mov	r3, r0
 8005380:	68f8      	ldr	r0, [r7, #12]
 8005382:	f000 f9d3 	bl	800572c <I2C_RequestMemoryWrite>
 8005386:	4603      	mov	r3, r0
 8005388:	2b00      	cmp	r3, #0
 800538a:	d005      	beq.n	8005398 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2200      	movs	r2, #0
 8005390:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	e0a9      	b.n	80054ec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800539c:	b29b      	uxth	r3, r3
 800539e:	2bff      	cmp	r3, #255	@ 0xff
 80053a0:	d90e      	bls.n	80053c0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	22ff      	movs	r2, #255	@ 0xff
 80053a6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053ac:	b2da      	uxtb	r2, r3
 80053ae:	8979      	ldrh	r1, [r7, #10]
 80053b0:	2300      	movs	r3, #0
 80053b2:	9300      	str	r3, [sp, #0]
 80053b4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80053b8:	68f8      	ldr	r0, [r7, #12]
 80053ba:	f000 fc47 	bl	8005c4c <I2C_TransferConfig>
 80053be:	e00f      	b.n	80053e0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053c4:	b29a      	uxth	r2, r3
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053ce:	b2da      	uxtb	r2, r3
 80053d0:	8979      	ldrh	r1, [r7, #10]
 80053d2:	2300      	movs	r3, #0
 80053d4:	9300      	str	r3, [sp, #0]
 80053d6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80053da:	68f8      	ldr	r0, [r7, #12]
 80053dc:	f000 fc36 	bl	8005c4c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053e0:	697a      	ldr	r2, [r7, #20]
 80053e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80053e4:	68f8      	ldr	r0, [r7, #12]
 80053e6:	f000 fac6 	bl	8005976 <I2C_WaitOnTXISFlagUntilTimeout>
 80053ea:	4603      	mov	r3, r0
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d001      	beq.n	80053f4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	e07b      	b.n	80054ec <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053f8:	781a      	ldrb	r2, [r3, #0]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005404:	1c5a      	adds	r2, r3, #1
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800540e:	b29b      	uxth	r3, r3
 8005410:	3b01      	subs	r3, #1
 8005412:	b29a      	uxth	r2, r3
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800541c:	3b01      	subs	r3, #1
 800541e:	b29a      	uxth	r2, r3
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005428:	b29b      	uxth	r3, r3
 800542a:	2b00      	cmp	r3, #0
 800542c:	d034      	beq.n	8005498 <HAL_I2C_Mem_Write+0x1c8>
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005432:	2b00      	cmp	r3, #0
 8005434:	d130      	bne.n	8005498 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	9300      	str	r3, [sp, #0]
 800543a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800543c:	2200      	movs	r2, #0
 800543e:	2180      	movs	r1, #128	@ 0x80
 8005440:	68f8      	ldr	r0, [r7, #12]
 8005442:	f000 fa3f 	bl	80058c4 <I2C_WaitOnFlagUntilTimeout>
 8005446:	4603      	mov	r3, r0
 8005448:	2b00      	cmp	r3, #0
 800544a:	d001      	beq.n	8005450 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	e04d      	b.n	80054ec <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005454:	b29b      	uxth	r3, r3
 8005456:	2bff      	cmp	r3, #255	@ 0xff
 8005458:	d90e      	bls.n	8005478 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	22ff      	movs	r2, #255	@ 0xff
 800545e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005464:	b2da      	uxtb	r2, r3
 8005466:	8979      	ldrh	r1, [r7, #10]
 8005468:	2300      	movs	r3, #0
 800546a:	9300      	str	r3, [sp, #0]
 800546c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005470:	68f8      	ldr	r0, [r7, #12]
 8005472:	f000 fbeb 	bl	8005c4c <I2C_TransferConfig>
 8005476:	e00f      	b.n	8005498 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800547c:	b29a      	uxth	r2, r3
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005486:	b2da      	uxtb	r2, r3
 8005488:	8979      	ldrh	r1, [r7, #10]
 800548a:	2300      	movs	r3, #0
 800548c:	9300      	str	r3, [sp, #0]
 800548e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005492:	68f8      	ldr	r0, [r7, #12]
 8005494:	f000 fbda 	bl	8005c4c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800549c:	b29b      	uxth	r3, r3
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d19e      	bne.n	80053e0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054a2:	697a      	ldr	r2, [r7, #20]
 80054a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80054a6:	68f8      	ldr	r0, [r7, #12]
 80054a8:	f000 faac 	bl	8005a04 <I2C_WaitOnSTOPFlagUntilTimeout>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d001      	beq.n	80054b6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e01a      	b.n	80054ec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	2220      	movs	r2, #32
 80054bc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	6859      	ldr	r1, [r3, #4]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	4b0a      	ldr	r3, [pc, #40]	@ (80054f4 <HAL_I2C_Mem_Write+0x224>)
 80054ca:	400b      	ands	r3, r1
 80054cc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2220      	movs	r2, #32
 80054d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2200      	movs	r2, #0
 80054da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2200      	movs	r2, #0
 80054e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80054e6:	2300      	movs	r3, #0
 80054e8:	e000      	b.n	80054ec <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80054ea:	2302      	movs	r3, #2
  }
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3718      	adds	r7, #24
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}
 80054f4:	fe00e800 	.word	0xfe00e800

080054f8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b088      	sub	sp, #32
 80054fc:	af02      	add	r7, sp, #8
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	4608      	mov	r0, r1
 8005502:	4611      	mov	r1, r2
 8005504:	461a      	mov	r2, r3
 8005506:	4603      	mov	r3, r0
 8005508:	817b      	strh	r3, [r7, #10]
 800550a:	460b      	mov	r3, r1
 800550c:	813b      	strh	r3, [r7, #8]
 800550e:	4613      	mov	r3, r2
 8005510:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005518:	b2db      	uxtb	r3, r3
 800551a:	2b20      	cmp	r3, #32
 800551c:	f040 80fd 	bne.w	800571a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005520:	6a3b      	ldr	r3, [r7, #32]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d002      	beq.n	800552c <HAL_I2C_Mem_Read+0x34>
 8005526:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005528:	2b00      	cmp	r3, #0
 800552a:	d105      	bne.n	8005538 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005532:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	e0f1      	b.n	800571c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800553e:	2b01      	cmp	r3, #1
 8005540:	d101      	bne.n	8005546 <HAL_I2C_Mem_Read+0x4e>
 8005542:	2302      	movs	r3, #2
 8005544:	e0ea      	b.n	800571c <HAL_I2C_Mem_Read+0x224>
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2201      	movs	r2, #1
 800554a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800554e:	f7fe ff6f 	bl	8004430 <HAL_GetTick>
 8005552:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	9300      	str	r3, [sp, #0]
 8005558:	2319      	movs	r3, #25
 800555a:	2201      	movs	r2, #1
 800555c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005560:	68f8      	ldr	r0, [r7, #12]
 8005562:	f000 f9af 	bl	80058c4 <I2C_WaitOnFlagUntilTimeout>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d001      	beq.n	8005570 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	e0d5      	b.n	800571c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2222      	movs	r2, #34	@ 0x22
 8005574:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2240      	movs	r2, #64	@ 0x40
 800557c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2200      	movs	r2, #0
 8005584:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6a3a      	ldr	r2, [r7, #32]
 800558a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005590:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2200      	movs	r2, #0
 8005596:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005598:	88f8      	ldrh	r0, [r7, #6]
 800559a:	893a      	ldrh	r2, [r7, #8]
 800559c:	8979      	ldrh	r1, [r7, #10]
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	9301      	str	r3, [sp, #4]
 80055a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055a4:	9300      	str	r3, [sp, #0]
 80055a6:	4603      	mov	r3, r0
 80055a8:	68f8      	ldr	r0, [r7, #12]
 80055aa:	f000 f913 	bl	80057d4 <I2C_RequestMemoryRead>
 80055ae:	4603      	mov	r3, r0
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d005      	beq.n	80055c0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2200      	movs	r2, #0
 80055b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	e0ad      	b.n	800571c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	2bff      	cmp	r3, #255	@ 0xff
 80055c8:	d90e      	bls.n	80055e8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	22ff      	movs	r2, #255	@ 0xff
 80055ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055d4:	b2da      	uxtb	r2, r3
 80055d6:	8979      	ldrh	r1, [r7, #10]
 80055d8:	4b52      	ldr	r3, [pc, #328]	@ (8005724 <HAL_I2C_Mem_Read+0x22c>)
 80055da:	9300      	str	r3, [sp, #0]
 80055dc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80055e0:	68f8      	ldr	r0, [r7, #12]
 80055e2:	f000 fb33 	bl	8005c4c <I2C_TransferConfig>
 80055e6:	e00f      	b.n	8005608 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055ec:	b29a      	uxth	r2, r3
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055f6:	b2da      	uxtb	r2, r3
 80055f8:	8979      	ldrh	r1, [r7, #10]
 80055fa:	4b4a      	ldr	r3, [pc, #296]	@ (8005724 <HAL_I2C_Mem_Read+0x22c>)
 80055fc:	9300      	str	r3, [sp, #0]
 80055fe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005602:	68f8      	ldr	r0, [r7, #12]
 8005604:	f000 fb22 	bl	8005c4c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	9300      	str	r3, [sp, #0]
 800560c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800560e:	2200      	movs	r2, #0
 8005610:	2104      	movs	r1, #4
 8005612:	68f8      	ldr	r0, [r7, #12]
 8005614:	f000 f956 	bl	80058c4 <I2C_WaitOnFlagUntilTimeout>
 8005618:	4603      	mov	r3, r0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d001      	beq.n	8005622 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e07c      	b.n	800571c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800562c:	b2d2      	uxtb	r2, r2
 800562e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005634:	1c5a      	adds	r2, r3, #1
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800563e:	3b01      	subs	r3, #1
 8005640:	b29a      	uxth	r2, r3
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800564a:	b29b      	uxth	r3, r3
 800564c:	3b01      	subs	r3, #1
 800564e:	b29a      	uxth	r2, r3
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005658:	b29b      	uxth	r3, r3
 800565a:	2b00      	cmp	r3, #0
 800565c:	d034      	beq.n	80056c8 <HAL_I2C_Mem_Read+0x1d0>
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005662:	2b00      	cmp	r3, #0
 8005664:	d130      	bne.n	80056c8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	9300      	str	r3, [sp, #0]
 800566a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800566c:	2200      	movs	r2, #0
 800566e:	2180      	movs	r1, #128	@ 0x80
 8005670:	68f8      	ldr	r0, [r7, #12]
 8005672:	f000 f927 	bl	80058c4 <I2C_WaitOnFlagUntilTimeout>
 8005676:	4603      	mov	r3, r0
 8005678:	2b00      	cmp	r3, #0
 800567a:	d001      	beq.n	8005680 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	e04d      	b.n	800571c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005684:	b29b      	uxth	r3, r3
 8005686:	2bff      	cmp	r3, #255	@ 0xff
 8005688:	d90e      	bls.n	80056a8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	22ff      	movs	r2, #255	@ 0xff
 800568e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005694:	b2da      	uxtb	r2, r3
 8005696:	8979      	ldrh	r1, [r7, #10]
 8005698:	2300      	movs	r3, #0
 800569a:	9300      	str	r3, [sp, #0]
 800569c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80056a0:	68f8      	ldr	r0, [r7, #12]
 80056a2:	f000 fad3 	bl	8005c4c <I2C_TransferConfig>
 80056a6:	e00f      	b.n	80056c8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056ac:	b29a      	uxth	r2, r3
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056b6:	b2da      	uxtb	r2, r3
 80056b8:	8979      	ldrh	r1, [r7, #10]
 80056ba:	2300      	movs	r3, #0
 80056bc:	9300      	str	r3, [sp, #0]
 80056be:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80056c2:	68f8      	ldr	r0, [r7, #12]
 80056c4:	f000 fac2 	bl	8005c4c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d19a      	bne.n	8005608 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056d2:	697a      	ldr	r2, [r7, #20]
 80056d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80056d6:	68f8      	ldr	r0, [r7, #12]
 80056d8:	f000 f994 	bl	8005a04 <I2C_WaitOnSTOPFlagUntilTimeout>
 80056dc:	4603      	mov	r3, r0
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d001      	beq.n	80056e6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	e01a      	b.n	800571c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	2220      	movs	r2, #32
 80056ec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	6859      	ldr	r1, [r3, #4]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	4b0b      	ldr	r3, [pc, #44]	@ (8005728 <HAL_I2C_Mem_Read+0x230>)
 80056fa:	400b      	ands	r3, r1
 80056fc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2220      	movs	r2, #32
 8005702:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2200      	movs	r2, #0
 800570a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2200      	movs	r2, #0
 8005712:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005716:	2300      	movs	r3, #0
 8005718:	e000      	b.n	800571c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800571a:	2302      	movs	r3, #2
  }
}
 800571c:	4618      	mov	r0, r3
 800571e:	3718      	adds	r7, #24
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}
 8005724:	80002400 	.word	0x80002400
 8005728:	fe00e800 	.word	0xfe00e800

0800572c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b086      	sub	sp, #24
 8005730:	af02      	add	r7, sp, #8
 8005732:	60f8      	str	r0, [r7, #12]
 8005734:	4608      	mov	r0, r1
 8005736:	4611      	mov	r1, r2
 8005738:	461a      	mov	r2, r3
 800573a:	4603      	mov	r3, r0
 800573c:	817b      	strh	r3, [r7, #10]
 800573e:	460b      	mov	r3, r1
 8005740:	813b      	strh	r3, [r7, #8]
 8005742:	4613      	mov	r3, r2
 8005744:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005746:	88fb      	ldrh	r3, [r7, #6]
 8005748:	b2da      	uxtb	r2, r3
 800574a:	8979      	ldrh	r1, [r7, #10]
 800574c:	4b20      	ldr	r3, [pc, #128]	@ (80057d0 <I2C_RequestMemoryWrite+0xa4>)
 800574e:	9300      	str	r3, [sp, #0]
 8005750:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005754:	68f8      	ldr	r0, [r7, #12]
 8005756:	f000 fa79 	bl	8005c4c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800575a:	69fa      	ldr	r2, [r7, #28]
 800575c:	69b9      	ldr	r1, [r7, #24]
 800575e:	68f8      	ldr	r0, [r7, #12]
 8005760:	f000 f909 	bl	8005976 <I2C_WaitOnTXISFlagUntilTimeout>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d001      	beq.n	800576e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	e02c      	b.n	80057c8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800576e:	88fb      	ldrh	r3, [r7, #6]
 8005770:	2b01      	cmp	r3, #1
 8005772:	d105      	bne.n	8005780 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005774:	893b      	ldrh	r3, [r7, #8]
 8005776:	b2da      	uxtb	r2, r3
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	629a      	str	r2, [r3, #40]	@ 0x28
 800577e:	e015      	b.n	80057ac <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005780:	893b      	ldrh	r3, [r7, #8]
 8005782:	0a1b      	lsrs	r3, r3, #8
 8005784:	b29b      	uxth	r3, r3
 8005786:	b2da      	uxtb	r2, r3
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800578e:	69fa      	ldr	r2, [r7, #28]
 8005790:	69b9      	ldr	r1, [r7, #24]
 8005792:	68f8      	ldr	r0, [r7, #12]
 8005794:	f000 f8ef 	bl	8005976 <I2C_WaitOnTXISFlagUntilTimeout>
 8005798:	4603      	mov	r3, r0
 800579a:	2b00      	cmp	r3, #0
 800579c:	d001      	beq.n	80057a2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	e012      	b.n	80057c8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80057a2:	893b      	ldrh	r3, [r7, #8]
 80057a4:	b2da      	uxtb	r2, r3
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	9300      	str	r3, [sp, #0]
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	2200      	movs	r2, #0
 80057b4:	2180      	movs	r1, #128	@ 0x80
 80057b6:	68f8      	ldr	r0, [r7, #12]
 80057b8:	f000 f884 	bl	80058c4 <I2C_WaitOnFlagUntilTimeout>
 80057bc:	4603      	mov	r3, r0
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d001      	beq.n	80057c6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e000      	b.n	80057c8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80057c6:	2300      	movs	r3, #0
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3710      	adds	r7, #16
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}
 80057d0:	80002000 	.word	0x80002000

080057d4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b086      	sub	sp, #24
 80057d8:	af02      	add	r7, sp, #8
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	4608      	mov	r0, r1
 80057de:	4611      	mov	r1, r2
 80057e0:	461a      	mov	r2, r3
 80057e2:	4603      	mov	r3, r0
 80057e4:	817b      	strh	r3, [r7, #10]
 80057e6:	460b      	mov	r3, r1
 80057e8:	813b      	strh	r3, [r7, #8]
 80057ea:	4613      	mov	r3, r2
 80057ec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80057ee:	88fb      	ldrh	r3, [r7, #6]
 80057f0:	b2da      	uxtb	r2, r3
 80057f2:	8979      	ldrh	r1, [r7, #10]
 80057f4:	4b20      	ldr	r3, [pc, #128]	@ (8005878 <I2C_RequestMemoryRead+0xa4>)
 80057f6:	9300      	str	r3, [sp, #0]
 80057f8:	2300      	movs	r3, #0
 80057fa:	68f8      	ldr	r0, [r7, #12]
 80057fc:	f000 fa26 	bl	8005c4c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005800:	69fa      	ldr	r2, [r7, #28]
 8005802:	69b9      	ldr	r1, [r7, #24]
 8005804:	68f8      	ldr	r0, [r7, #12]
 8005806:	f000 f8b6 	bl	8005976 <I2C_WaitOnTXISFlagUntilTimeout>
 800580a:	4603      	mov	r3, r0
 800580c:	2b00      	cmp	r3, #0
 800580e:	d001      	beq.n	8005814 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	e02c      	b.n	800586e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005814:	88fb      	ldrh	r3, [r7, #6]
 8005816:	2b01      	cmp	r3, #1
 8005818:	d105      	bne.n	8005826 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800581a:	893b      	ldrh	r3, [r7, #8]
 800581c:	b2da      	uxtb	r2, r3
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	629a      	str	r2, [r3, #40]	@ 0x28
 8005824:	e015      	b.n	8005852 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005826:	893b      	ldrh	r3, [r7, #8]
 8005828:	0a1b      	lsrs	r3, r3, #8
 800582a:	b29b      	uxth	r3, r3
 800582c:	b2da      	uxtb	r2, r3
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005834:	69fa      	ldr	r2, [r7, #28]
 8005836:	69b9      	ldr	r1, [r7, #24]
 8005838:	68f8      	ldr	r0, [r7, #12]
 800583a:	f000 f89c 	bl	8005976 <I2C_WaitOnTXISFlagUntilTimeout>
 800583e:	4603      	mov	r3, r0
 8005840:	2b00      	cmp	r3, #0
 8005842:	d001      	beq.n	8005848 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	e012      	b.n	800586e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005848:	893b      	ldrh	r3, [r7, #8]
 800584a:	b2da      	uxtb	r2, r3
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005852:	69fb      	ldr	r3, [r7, #28]
 8005854:	9300      	str	r3, [sp, #0]
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	2200      	movs	r2, #0
 800585a:	2140      	movs	r1, #64	@ 0x40
 800585c:	68f8      	ldr	r0, [r7, #12]
 800585e:	f000 f831 	bl	80058c4 <I2C_WaitOnFlagUntilTimeout>
 8005862:	4603      	mov	r3, r0
 8005864:	2b00      	cmp	r3, #0
 8005866:	d001      	beq.n	800586c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	e000      	b.n	800586e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800586c:	2300      	movs	r3, #0
}
 800586e:	4618      	mov	r0, r3
 8005870:	3710      	adds	r7, #16
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	80002000 	.word	0x80002000

0800587c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	699b      	ldr	r3, [r3, #24]
 800588a:	f003 0302 	and.w	r3, r3, #2
 800588e:	2b02      	cmp	r3, #2
 8005890:	d103      	bne.n	800589a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	2200      	movs	r2, #0
 8005898:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	699b      	ldr	r3, [r3, #24]
 80058a0:	f003 0301 	and.w	r3, r3, #1
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d007      	beq.n	80058b8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	699a      	ldr	r2, [r3, #24]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f042 0201 	orr.w	r2, r2, #1
 80058b6:	619a      	str	r2, [r3, #24]
  }
}
 80058b8:	bf00      	nop
 80058ba:	370c      	adds	r7, #12
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr

080058c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b084      	sub	sp, #16
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	60f8      	str	r0, [r7, #12]
 80058cc:	60b9      	str	r1, [r7, #8]
 80058ce:	603b      	str	r3, [r7, #0]
 80058d0:	4613      	mov	r3, r2
 80058d2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80058d4:	e03b      	b.n	800594e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80058d6:	69ba      	ldr	r2, [r7, #24]
 80058d8:	6839      	ldr	r1, [r7, #0]
 80058da:	68f8      	ldr	r0, [r7, #12]
 80058dc:	f000 f8d6 	bl	8005a8c <I2C_IsErrorOccurred>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d001      	beq.n	80058ea <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e041      	b.n	800596e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058f0:	d02d      	beq.n	800594e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058f2:	f7fe fd9d 	bl	8004430 <HAL_GetTick>
 80058f6:	4602      	mov	r2, r0
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	1ad3      	subs	r3, r2, r3
 80058fc:	683a      	ldr	r2, [r7, #0]
 80058fe:	429a      	cmp	r2, r3
 8005900:	d302      	bcc.n	8005908 <I2C_WaitOnFlagUntilTimeout+0x44>
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d122      	bne.n	800594e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	699a      	ldr	r2, [r3, #24]
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	4013      	ands	r3, r2
 8005912:	68ba      	ldr	r2, [r7, #8]
 8005914:	429a      	cmp	r2, r3
 8005916:	bf0c      	ite	eq
 8005918:	2301      	moveq	r3, #1
 800591a:	2300      	movne	r3, #0
 800591c:	b2db      	uxtb	r3, r3
 800591e:	461a      	mov	r2, r3
 8005920:	79fb      	ldrb	r3, [r7, #7]
 8005922:	429a      	cmp	r2, r3
 8005924:	d113      	bne.n	800594e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800592a:	f043 0220 	orr.w	r2, r3, #32
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2220      	movs	r2, #32
 8005936:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2200      	movs	r2, #0
 800593e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2200      	movs	r2, #0
 8005946:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e00f      	b.n	800596e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	699a      	ldr	r2, [r3, #24]
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	4013      	ands	r3, r2
 8005958:	68ba      	ldr	r2, [r7, #8]
 800595a:	429a      	cmp	r2, r3
 800595c:	bf0c      	ite	eq
 800595e:	2301      	moveq	r3, #1
 8005960:	2300      	movne	r3, #0
 8005962:	b2db      	uxtb	r3, r3
 8005964:	461a      	mov	r2, r3
 8005966:	79fb      	ldrb	r3, [r7, #7]
 8005968:	429a      	cmp	r2, r3
 800596a:	d0b4      	beq.n	80058d6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800596c:	2300      	movs	r3, #0
}
 800596e:	4618      	mov	r0, r3
 8005970:	3710      	adds	r7, #16
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}

08005976 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005976:	b580      	push	{r7, lr}
 8005978:	b084      	sub	sp, #16
 800597a:	af00      	add	r7, sp, #0
 800597c:	60f8      	str	r0, [r7, #12]
 800597e:	60b9      	str	r1, [r7, #8]
 8005980:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005982:	e033      	b.n	80059ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	68b9      	ldr	r1, [r7, #8]
 8005988:	68f8      	ldr	r0, [r7, #12]
 800598a:	f000 f87f 	bl	8005a8c <I2C_IsErrorOccurred>
 800598e:	4603      	mov	r3, r0
 8005990:	2b00      	cmp	r3, #0
 8005992:	d001      	beq.n	8005998 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	e031      	b.n	80059fc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800599e:	d025      	beq.n	80059ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059a0:	f7fe fd46 	bl	8004430 <HAL_GetTick>
 80059a4:	4602      	mov	r2, r0
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	1ad3      	subs	r3, r2, r3
 80059aa:	68ba      	ldr	r2, [r7, #8]
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d302      	bcc.n	80059b6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d11a      	bne.n	80059ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	699b      	ldr	r3, [r3, #24]
 80059bc:	f003 0302 	and.w	r3, r3, #2
 80059c0:	2b02      	cmp	r3, #2
 80059c2:	d013      	beq.n	80059ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059c8:	f043 0220 	orr.w	r2, r3, #32
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2220      	movs	r2, #32
 80059d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2200      	movs	r2, #0
 80059dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2200      	movs	r2, #0
 80059e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	e007      	b.n	80059fc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	699b      	ldr	r3, [r3, #24]
 80059f2:	f003 0302 	and.w	r3, r3, #2
 80059f6:	2b02      	cmp	r3, #2
 80059f8:	d1c4      	bne.n	8005984 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80059fa:	2300      	movs	r3, #0
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3710      	adds	r7, #16
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	60b9      	str	r1, [r7, #8]
 8005a0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a10:	e02f      	b.n	8005a72 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	68b9      	ldr	r1, [r7, #8]
 8005a16:	68f8      	ldr	r0, [r7, #12]
 8005a18:	f000 f838 	bl	8005a8c <I2C_IsErrorOccurred>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d001      	beq.n	8005a26 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e02d      	b.n	8005a82 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a26:	f7fe fd03 	bl	8004430 <HAL_GetTick>
 8005a2a:	4602      	mov	r2, r0
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	1ad3      	subs	r3, r2, r3
 8005a30:	68ba      	ldr	r2, [r7, #8]
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d302      	bcc.n	8005a3c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d11a      	bne.n	8005a72 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	699b      	ldr	r3, [r3, #24]
 8005a42:	f003 0320 	and.w	r3, r3, #32
 8005a46:	2b20      	cmp	r3, #32
 8005a48:	d013      	beq.n	8005a72 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a4e:	f043 0220 	orr.w	r2, r3, #32
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2220      	movs	r2, #32
 8005a5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2200      	movs	r2, #0
 8005a62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e007      	b.n	8005a82 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	699b      	ldr	r3, [r3, #24]
 8005a78:	f003 0320 	and.w	r3, r3, #32
 8005a7c:	2b20      	cmp	r3, #32
 8005a7e:	d1c8      	bne.n	8005a12 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005a80:	2300      	movs	r3, #0
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3710      	adds	r7, #16
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
	...

08005a8c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b08a      	sub	sp, #40	@ 0x28
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	60f8      	str	r0, [r7, #12]
 8005a94:	60b9      	str	r1, [r7, #8]
 8005a96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	699b      	ldr	r3, [r3, #24]
 8005aa4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005aae:	69bb      	ldr	r3, [r7, #24]
 8005ab0:	f003 0310 	and.w	r3, r3, #16
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d068      	beq.n	8005b8a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	2210      	movs	r2, #16
 8005abe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005ac0:	e049      	b.n	8005b56 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ac8:	d045      	beq.n	8005b56 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005aca:	f7fe fcb1 	bl	8004430 <HAL_GetTick>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	69fb      	ldr	r3, [r7, #28]
 8005ad2:	1ad3      	subs	r3, r2, r3
 8005ad4:	68ba      	ldr	r2, [r7, #8]
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d302      	bcc.n	8005ae0 <I2C_IsErrorOccurred+0x54>
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d13a      	bne.n	8005b56 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005aea:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005af2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	699b      	ldr	r3, [r3, #24]
 8005afa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005afe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b02:	d121      	bne.n	8005b48 <I2C_IsErrorOccurred+0xbc>
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b0a:	d01d      	beq.n	8005b48 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005b0c:	7cfb      	ldrb	r3, [r7, #19]
 8005b0e:	2b20      	cmp	r3, #32
 8005b10:	d01a      	beq.n	8005b48 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	685a      	ldr	r2, [r3, #4]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005b20:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005b22:	f7fe fc85 	bl	8004430 <HAL_GetTick>
 8005b26:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b28:	e00e      	b.n	8005b48 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005b2a:	f7fe fc81 	bl	8004430 <HAL_GetTick>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	69fb      	ldr	r3, [r7, #28]
 8005b32:	1ad3      	subs	r3, r2, r3
 8005b34:	2b19      	cmp	r3, #25
 8005b36:	d907      	bls.n	8005b48 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005b38:	6a3b      	ldr	r3, [r7, #32]
 8005b3a:	f043 0320 	orr.w	r3, r3, #32
 8005b3e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005b46:	e006      	b.n	8005b56 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	699b      	ldr	r3, [r3, #24]
 8005b4e:	f003 0320 	and.w	r3, r3, #32
 8005b52:	2b20      	cmp	r3, #32
 8005b54:	d1e9      	bne.n	8005b2a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	699b      	ldr	r3, [r3, #24]
 8005b5c:	f003 0320 	and.w	r3, r3, #32
 8005b60:	2b20      	cmp	r3, #32
 8005b62:	d003      	beq.n	8005b6c <I2C_IsErrorOccurred+0xe0>
 8005b64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d0aa      	beq.n	8005ac2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005b6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d103      	bne.n	8005b7c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	2220      	movs	r2, #32
 8005b7a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005b7c:	6a3b      	ldr	r3, [r7, #32]
 8005b7e:	f043 0304 	orr.w	r3, r3, #4
 8005b82:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	699b      	ldr	r3, [r3, #24]
 8005b90:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d00b      	beq.n	8005bb4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005b9c:	6a3b      	ldr	r3, [r7, #32]
 8005b9e:	f043 0301 	orr.w	r3, r3, #1
 8005ba2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005bac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005bb4:	69bb      	ldr	r3, [r7, #24]
 8005bb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d00b      	beq.n	8005bd6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005bbe:	6a3b      	ldr	r3, [r7, #32]
 8005bc0:	f043 0308 	orr.w	r3, r3, #8
 8005bc4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005bce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d00b      	beq.n	8005bf8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005be0:	6a3b      	ldr	r3, [r7, #32]
 8005be2:	f043 0302 	orr.w	r3, r3, #2
 8005be6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005bf0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005bf8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d01c      	beq.n	8005c3a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005c00:	68f8      	ldr	r0, [r7, #12]
 8005c02:	f7ff fe3b 	bl	800587c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	6859      	ldr	r1, [r3, #4]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	4b0d      	ldr	r3, [pc, #52]	@ (8005c48 <I2C_IsErrorOccurred+0x1bc>)
 8005c12:	400b      	ands	r3, r1
 8005c14:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c1a:	6a3b      	ldr	r3, [r7, #32]
 8005c1c:	431a      	orrs	r2, r3
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2220      	movs	r2, #32
 8005c26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2200      	movs	r2, #0
 8005c36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005c3a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3728      	adds	r7, #40	@ 0x28
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	bf00      	nop
 8005c48:	fe00e800 	.word	0xfe00e800

08005c4c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b087      	sub	sp, #28
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	60f8      	str	r0, [r7, #12]
 8005c54:	607b      	str	r3, [r7, #4]
 8005c56:	460b      	mov	r3, r1
 8005c58:	817b      	strh	r3, [r7, #10]
 8005c5a:	4613      	mov	r3, r2
 8005c5c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005c5e:	897b      	ldrh	r3, [r7, #10]
 8005c60:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005c64:	7a7b      	ldrb	r3, [r7, #9]
 8005c66:	041b      	lsls	r3, r3, #16
 8005c68:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005c6c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005c72:	6a3b      	ldr	r3, [r7, #32]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005c7a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	685a      	ldr	r2, [r3, #4]
 8005c82:	6a3b      	ldr	r3, [r7, #32]
 8005c84:	0d5b      	lsrs	r3, r3, #21
 8005c86:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005c8a:	4b08      	ldr	r3, [pc, #32]	@ (8005cac <I2C_TransferConfig+0x60>)
 8005c8c:	430b      	orrs	r3, r1
 8005c8e:	43db      	mvns	r3, r3
 8005c90:	ea02 0103 	and.w	r1, r2, r3
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	697a      	ldr	r2, [r7, #20]
 8005c9a:	430a      	orrs	r2, r1
 8005c9c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005c9e:	bf00      	nop
 8005ca0:	371c      	adds	r7, #28
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr
 8005caa:	bf00      	nop
 8005cac:	03ff63ff 	.word	0x03ff63ff

08005cb0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b083      	sub	sp, #12
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005cc0:	b2db      	uxtb	r3, r3
 8005cc2:	2b20      	cmp	r3, #32
 8005cc4:	d138      	bne.n	8005d38 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d101      	bne.n	8005cd4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005cd0:	2302      	movs	r3, #2
 8005cd2:	e032      	b.n	8005d3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2224      	movs	r2, #36	@ 0x24
 8005ce0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f022 0201 	bic.w	r2, r2, #1
 8005cf2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005d02:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	6819      	ldr	r1, [r3, #0]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	683a      	ldr	r2, [r7, #0]
 8005d10:	430a      	orrs	r2, r1
 8005d12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f042 0201 	orr.w	r2, r2, #1
 8005d22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2220      	movs	r2, #32
 8005d28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005d34:	2300      	movs	r3, #0
 8005d36:	e000      	b.n	8005d3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005d38:	2302      	movs	r3, #2
  }
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	370c      	adds	r7, #12
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr

08005d46 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005d46:	b480      	push	{r7}
 8005d48:	b085      	sub	sp, #20
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
 8005d4e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	2b20      	cmp	r3, #32
 8005d5a:	d139      	bne.n	8005dd0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d101      	bne.n	8005d6a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005d66:	2302      	movs	r3, #2
 8005d68:	e033      	b.n	8005dd2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2224      	movs	r2, #36	@ 0x24
 8005d76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f022 0201 	bic.w	r2, r2, #1
 8005d88:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005d98:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	021b      	lsls	r3, r3, #8
 8005d9e:	68fa      	ldr	r2, [r7, #12]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	68fa      	ldr	r2, [r7, #12]
 8005daa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f042 0201 	orr.w	r2, r2, #1
 8005dba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2220      	movs	r2, #32
 8005dc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	e000      	b.n	8005dd2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005dd0:	2302      	movs	r3, #2
  }
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3714      	adds	r7, #20
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr
	...

08005de0 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b084      	sub	sp, #16
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8005de8:	2300      	movs	r3, #0
 8005dea:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d01e      	beq.n	8005e30 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8005df2:	4b13      	ldr	r3, [pc, #76]	@ (8005e40 <HAL_IPCC_Init+0x60>)
 8005df4:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d102      	bne.n	8005e08 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f7fd fdc4 	bl	8003990 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8005e08:	68b8      	ldr	r0, [r7, #8]
 8005e0a:	f000 f85b 	bl	8005ec4 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f000 f82c 	bl	8005e78 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2200      	movs	r2, #0
 8005e24:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2201      	movs	r2, #1
 8005e2a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8005e2e:	e001      	b.n	8005e34 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8005e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3710      	adds	r7, #16
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}
 8005e3e:	bf00      	nop
 8005e40:	58000c00 	.word	0x58000c00

08005e44 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b085      	sub	sp, #20
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	60f8      	str	r0, [r7, #12]
 8005e4c:	60b9      	str	r1, [r7, #8]
 8005e4e:	4613      	mov	r3, r2
 8005e50:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8005e52:	bf00      	nop
 8005e54:	3714      	adds	r7, #20
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr

08005e5e <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8005e5e:	b480      	push	{r7}
 8005e60:	b085      	sub	sp, #20
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	60f8      	str	r0, [r7, #12]
 8005e66:	60b9      	str	r1, [r7, #8]
 8005e68:	4613      	mov	r3, r2
 8005e6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8005e6c:	bf00      	nop
 8005e6e:	3714      	adds	r7, #20
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr

08005e78 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b085      	sub	sp, #20
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8005e80:	2300      	movs	r3, #0
 8005e82:	60fb      	str	r3, [r7, #12]
 8005e84:	e00f      	b.n	8005ea6 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	009b      	lsls	r3, r3, #2
 8005e8c:	4413      	add	r3, r2
 8005e8e:	4a0b      	ldr	r2, [pc, #44]	@ (8005ebc <IPCC_SetDefaultCallbacks+0x44>)
 8005e90:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	3306      	adds	r3, #6
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	4413      	add	r3, r2
 8005e9c:	4a08      	ldr	r2, [pc, #32]	@ (8005ec0 <IPCC_SetDefaultCallbacks+0x48>)
 8005e9e:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	3301      	adds	r3, #1
 8005ea4:	60fb      	str	r3, [r7, #12]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2b05      	cmp	r3, #5
 8005eaa:	d9ec      	bls.n	8005e86 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8005eac:	bf00      	nop
 8005eae:	bf00      	nop
 8005eb0:	3714      	adds	r7, #20
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr
 8005eba:	bf00      	nop
 8005ebc:	08005e45 	.word	0x08005e45
 8005ec0:	08005e5f 	.word	0x08005e5f

08005ec4 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b083      	sub	sp, #12
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 8005ed8:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	223f      	movs	r2, #63	@ 0x3f
 8005ede:	609a      	str	r2, [r3, #8]
}
 8005ee0:	bf00      	nop
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005eec:	b480      	push	{r7}
 8005eee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ef0:	4b05      	ldr	r3, [pc, #20]	@ (8005f08 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a04      	ldr	r2, [pc, #16]	@ (8005f08 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005ef6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005efa:	6013      	str	r3, [r2, #0]
}
 8005efc:	bf00      	nop
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr
 8005f06:	bf00      	nop
 8005f08:	58000400 	.word	0x58000400

08005f0c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8005f10:	4b04      	ldr	r3, [pc, #16]	@ (8005f24 <HAL_PWREx_GetVoltageRange+0x18>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr
 8005f22:	bf00      	nop
 8005f24:	58000400 	.word	0x58000400

08005f28 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8005f28:	b480      	push	{r7}
 8005f2a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8005f2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005f36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f3a:	d101      	bne.n	8005f40 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	e000      	b.n	8005f42 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8005f40:	2300      	movs	r3, #0
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr

08005f4c <LL_RCC_HSE_Enable>:
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005f50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005f5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f5e:	6013      	str	r3, [r2, #0]
}
 8005f60:	bf00      	nop
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr

08005f6a <LL_RCC_HSE_Disable>:
{
 8005f6a:	b480      	push	{r7}
 8005f6c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8005f6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005f78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f7c:	6013      	str	r3, [r2, #0]
}
 8005f7e:	bf00      	nop
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr

08005f88 <LL_RCC_HSE_IsReady>:
{
 8005f88:	b480      	push	{r7}
 8005f8a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005f8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f96:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f9a:	d101      	bne.n	8005fa0 <LL_RCC_HSE_IsReady+0x18>
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	e000      	b.n	8005fa2 <LL_RCC_HSE_IsReady+0x1a>
 8005fa0:	2300      	movs	r3, #0
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr

08005fac <LL_RCC_HSI_Enable>:
{
 8005fac:	b480      	push	{r7}
 8005fae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005fb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005fba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005fbe:	6013      	str	r3, [r2, #0]
}
 8005fc0:	bf00      	nop
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr

08005fca <LL_RCC_HSI_Disable>:
{
 8005fca:	b480      	push	{r7}
 8005fcc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005fce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005fd8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005fdc:	6013      	str	r3, [r2, #0]
}
 8005fde:	bf00      	nop
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <LL_RCC_HSI_IsReady>:
{
 8005fe8:	b480      	push	{r7}
 8005fea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005fec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ff6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ffa:	d101      	bne.n	8006000 <LL_RCC_HSI_IsReady+0x18>
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e000      	b.n	8006002 <LL_RCC_HSI_IsReady+0x1a>
 8006000:	2300      	movs	r3, #0
}
 8006002:	4618      	mov	r0, r3
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr

0800600c <LL_RCC_HSI_SetCalibTrimming>:
{
 800600c:	b480      	push	{r7}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8006014:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	061b      	lsls	r3, r3, #24
 8006022:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006026:	4313      	orrs	r3, r2
 8006028:	604b      	str	r3, [r1, #4]
}
 800602a:	bf00      	nop
 800602c:	370c      	adds	r7, #12
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr

08006036 <LL_RCC_HSI48_Enable>:
{
 8006036:	b480      	push	{r7}
 8006038:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800603a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800603e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006042:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006046:	f043 0301 	orr.w	r3, r3, #1
 800604a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800604e:	bf00      	nop
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr

08006058 <LL_RCC_HSI48_Disable>:
{
 8006058:	b480      	push	{r7}
 800605a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800605c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006060:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006064:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006068:	f023 0301 	bic.w	r3, r3, #1
 800606c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8006070:	bf00      	nop
 8006072:	46bd      	mov	sp, r7
 8006074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006078:	4770      	bx	lr

0800607a <LL_RCC_HSI48_IsReady>:
{
 800607a:	b480      	push	{r7}
 800607c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800607e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006082:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006086:	f003 0302 	and.w	r3, r3, #2
 800608a:	2b02      	cmp	r3, #2
 800608c:	d101      	bne.n	8006092 <LL_RCC_HSI48_IsReady+0x18>
 800608e:	2301      	movs	r3, #1
 8006090:	e000      	b.n	8006094 <LL_RCC_HSI48_IsReady+0x1a>
 8006092:	2300      	movs	r3, #0
}
 8006094:	4618      	mov	r0, r3
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr

0800609e <LL_RCC_LSE_Enable>:
{
 800609e:	b480      	push	{r7}
 80060a0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80060a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80060a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060aa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80060ae:	f043 0301 	orr.w	r3, r3, #1
 80060b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80060b6:	bf00      	nop
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr

080060c0 <LL_RCC_LSE_Disable>:
{
 80060c0:	b480      	push	{r7}
 80060c2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80060c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80060c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060cc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80060d0:	f023 0301 	bic.w	r3, r3, #1
 80060d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80060d8:	bf00      	nop
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr

080060e2 <LL_RCC_LSE_EnableBypass>:
{
 80060e2:	b480      	push	{r7}
 80060e4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80060e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80060ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80060f2:	f043 0304 	orr.w	r3, r3, #4
 80060f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80060fa:	bf00      	nop
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr

08006104 <LL_RCC_LSE_DisableBypass>:
{
 8006104:	b480      	push	{r7}
 8006106:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006108:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800610c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006110:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006114:	f023 0304 	bic.w	r3, r3, #4
 8006118:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800611c:	bf00      	nop
 800611e:	46bd      	mov	sp, r7
 8006120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006124:	4770      	bx	lr

08006126 <LL_RCC_LSE_IsReady>:
{
 8006126:	b480      	push	{r7}
 8006128:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800612a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800612e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006132:	f003 0302 	and.w	r3, r3, #2
 8006136:	2b02      	cmp	r3, #2
 8006138:	d101      	bne.n	800613e <LL_RCC_LSE_IsReady+0x18>
 800613a:	2301      	movs	r3, #1
 800613c:	e000      	b.n	8006140 <LL_RCC_LSE_IsReady+0x1a>
 800613e:	2300      	movs	r3, #0
}
 8006140:	4618      	mov	r0, r3
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr

0800614a <LL_RCC_LSI1_Enable>:
{
 800614a:	b480      	push	{r7}
 800614c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800614e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006152:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006156:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800615a:	f043 0301 	orr.w	r3, r3, #1
 800615e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8006162:	bf00      	nop
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr

0800616c <LL_RCC_LSI1_Disable>:
{
 800616c:	b480      	push	{r7}
 800616e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8006170:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006174:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006178:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800617c:	f023 0301 	bic.w	r3, r3, #1
 8006180:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8006184:	bf00      	nop
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr

0800618e <LL_RCC_LSI1_IsReady>:
{
 800618e:	b480      	push	{r7}
 8006190:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8006192:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006196:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800619a:	f003 0302 	and.w	r3, r3, #2
 800619e:	2b02      	cmp	r3, #2
 80061a0:	d101      	bne.n	80061a6 <LL_RCC_LSI1_IsReady+0x18>
 80061a2:	2301      	movs	r3, #1
 80061a4:	e000      	b.n	80061a8 <LL_RCC_LSI1_IsReady+0x1a>
 80061a6:	2300      	movs	r3, #0
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr

080061b2 <LL_RCC_LSI2_Enable>:
{
 80061b2:	b480      	push	{r7}
 80061b4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80061b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80061be:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80061c2:	f043 0304 	orr.w	r3, r3, #4
 80061c6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80061ca:	bf00      	nop
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <LL_RCC_LSI2_Disable>:
{
 80061d4:	b480      	push	{r7}
 80061d6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80061d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80061e0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80061e4:	f023 0304 	bic.w	r3, r3, #4
 80061e8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80061ec:	bf00      	nop
 80061ee:	46bd      	mov	sp, r7
 80061f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f4:	4770      	bx	lr

080061f6 <LL_RCC_LSI2_IsReady>:
{
 80061f6:	b480      	push	{r7}
 80061f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80061fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006202:	f003 0308 	and.w	r3, r3, #8
 8006206:	2b08      	cmp	r3, #8
 8006208:	d101      	bne.n	800620e <LL_RCC_LSI2_IsReady+0x18>
 800620a:	2301      	movs	r3, #1
 800620c:	e000      	b.n	8006210 <LL_RCC_LSI2_IsReady+0x1a>
 800620e:	2300      	movs	r3, #0
}
 8006210:	4618      	mov	r0, r3
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr

0800621a <LL_RCC_LSI2_SetTrimming>:
{
 800621a:	b480      	push	{r7}
 800621c:	b083      	sub	sp, #12
 800621e:	af00      	add	r7, sp, #0
 8006220:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8006222:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006226:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800622a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	021b      	lsls	r3, r3, #8
 8006232:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006236:	4313      	orrs	r3, r2
 8006238:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800623c:	bf00      	nop
 800623e:	370c      	adds	r7, #12
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr

08006248 <LL_RCC_MSI_Enable>:
{
 8006248:	b480      	push	{r7}
 800624a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800624c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006256:	f043 0301 	orr.w	r3, r3, #1
 800625a:	6013      	str	r3, [r2, #0]
}
 800625c:	bf00      	nop
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr

08006266 <LL_RCC_MSI_Disable>:
{
 8006266:	b480      	push	{r7}
 8006268:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800626a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006274:	f023 0301 	bic.w	r3, r3, #1
 8006278:	6013      	str	r3, [r2, #0]
}
 800627a:	bf00      	nop
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr

08006284 <LL_RCC_MSI_IsReady>:
{
 8006284:	b480      	push	{r7}
 8006286:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8006288:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f003 0302 	and.w	r3, r3, #2
 8006292:	2b02      	cmp	r3, #2
 8006294:	d101      	bne.n	800629a <LL_RCC_MSI_IsReady+0x16>
 8006296:	2301      	movs	r3, #1
 8006298:	e000      	b.n	800629c <LL_RCC_MSI_IsReady+0x18>
 800629a:	2300      	movs	r3, #0
}
 800629c:	4618      	mov	r0, r3
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr

080062a6 <LL_RCC_MSI_SetRange>:
{
 80062a6:	b480      	push	{r7}
 80062a8:	b083      	sub	sp, #12
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80062ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80062b8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	4313      	orrs	r3, r2
 80062c0:	600b      	str	r3, [r1, #0]
}
 80062c2:	bf00      	nop
 80062c4:	370c      	adds	r7, #12
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr

080062ce <LL_RCC_MSI_GetRange>:
{
 80062ce:	b480      	push	{r7}
 80062d0:	b083      	sub	sp, #12
 80062d2:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80062d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80062de:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2bb0      	cmp	r3, #176	@ 0xb0
 80062e4:	d901      	bls.n	80062ea <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 80062e6:	23b0      	movs	r3, #176	@ 0xb0
 80062e8:	607b      	str	r3, [r7, #4]
  return msiRange;
 80062ea:	687b      	ldr	r3, [r7, #4]
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	370c      	adds	r7, #12
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr

080062f8 <LL_RCC_MSI_SetCalibTrimming>:
{
 80062f8:	b480      	push	{r7}
 80062fa:	b083      	sub	sp, #12
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8006300:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	021b      	lsls	r3, r3, #8
 800630e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006312:	4313      	orrs	r3, r2
 8006314:	604b      	str	r3, [r1, #4]
}
 8006316:	bf00      	nop
 8006318:	370c      	adds	r7, #12
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr

08006322 <LL_RCC_SetSysClkSource>:
{
 8006322:	b480      	push	{r7}
 8006324:	b083      	sub	sp, #12
 8006326:	af00      	add	r7, sp, #0
 8006328:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800632a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	f023 0203 	bic.w	r2, r3, #3
 8006334:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	4313      	orrs	r3, r2
 800633c:	608b      	str	r3, [r1, #8]
}
 800633e:	bf00      	nop
 8006340:	370c      	adds	r7, #12
 8006342:	46bd      	mov	sp, r7
 8006344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006348:	4770      	bx	lr

0800634a <LL_RCC_GetSysClkSource>:
{
 800634a:	b480      	push	{r7}
 800634c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800634e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	f003 030c 	and.w	r3, r3, #12
}
 8006358:	4618      	mov	r0, r3
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr

08006362 <LL_RCC_SetAHBPrescaler>:
{
 8006362:	b480      	push	{r7}
 8006364:	b083      	sub	sp, #12
 8006366:	af00      	add	r7, sp, #0
 8006368:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800636a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006374:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	4313      	orrs	r3, r2
 800637c:	608b      	str	r3, [r1, #8]
}
 800637e:	bf00      	nop
 8006380:	370c      	adds	r7, #12
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr

0800638a <LL_C2_RCC_SetAHBPrescaler>:
{
 800638a:	b480      	push	{r7}
 800638c:	b083      	sub	sp, #12
 800638e:	af00      	add	r7, sp, #0
 8006390:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8006392:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006396:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800639a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800639e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	4313      	orrs	r3, r2
 80063a6:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80063aa:	bf00      	nop
 80063ac:	370c      	adds	r7, #12
 80063ae:	46bd      	mov	sp, r7
 80063b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b4:	4770      	bx	lr

080063b6 <LL_RCC_SetAHB4Prescaler>:
{
 80063b6:	b480      	push	{r7}
 80063b8:	b083      	sub	sp, #12
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80063be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063c2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80063c6:	f023 020f 	bic.w	r2, r3, #15
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	091b      	lsrs	r3, r3, #4
 80063ce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80063d2:	4313      	orrs	r3, r2
 80063d4:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80063d8:	bf00      	nop
 80063da:	370c      	adds	r7, #12
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr

080063e4 <LL_RCC_SetAPB1Prescaler>:
{
 80063e4:	b480      	push	{r7}
 80063e6:	b083      	sub	sp, #12
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80063ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063f0:	689b      	ldr	r3, [r3, #8]
 80063f2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80063f6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4313      	orrs	r3, r2
 80063fe:	608b      	str	r3, [r1, #8]
}
 8006400:	bf00      	nop
 8006402:	370c      	adds	r7, #12
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr

0800640c <LL_RCC_SetAPB2Prescaler>:
{
 800640c:	b480      	push	{r7}
 800640e:	b083      	sub	sp, #12
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8006414:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800641e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	4313      	orrs	r3, r2
 8006426:	608b      	str	r3, [r1, #8]
}
 8006428:	bf00      	nop
 800642a:	370c      	adds	r7, #12
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <LL_RCC_GetAHBPrescaler>:
{
 8006434:	b480      	push	{r7}
 8006436:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8006438:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8006442:	4618      	mov	r0, r3
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr

0800644c <LL_RCC_GetAHB4Prescaler>:
{
 800644c:	b480      	push	{r7}
 800644e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8006450:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006454:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006458:	011b      	lsls	r3, r3, #4
 800645a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800645e:	4618      	mov	r0, r3
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr

08006468 <LL_RCC_GetAPB1Prescaler>:
{
 8006468:	b480      	push	{r7}
 800646a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800646c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8006476:	4618      	mov	r0, r3
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr

08006480 <LL_RCC_GetAPB2Prescaler>:
{
 8006480:	b480      	push	{r7}
 8006482:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8006484:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800648e:	4618      	mov	r0, r3
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr

08006498 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8006498:	b480      	push	{r7}
 800649a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800649c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80064a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80064aa:	6013      	str	r3, [r2, #0]
}
 80064ac:	bf00      	nop
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr

080064b6 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80064b6:	b480      	push	{r7}
 80064b8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80064ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80064c4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80064c8:	6013      	str	r3, [r2, #0]
}
 80064ca:	bf00      	nop
 80064cc:	46bd      	mov	sp, r7
 80064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d2:	4770      	bx	lr

080064d4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80064d4:	b480      	push	{r7}
 80064d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80064d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064e2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80064e6:	d101      	bne.n	80064ec <LL_RCC_PLL_IsReady+0x18>
 80064e8:	2301      	movs	r3, #1
 80064ea:	e000      	b.n	80064ee <LL_RCC_PLL_IsReady+0x1a>
 80064ec:	2300      	movs	r3, #0
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr

080064f8 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80064f8:	b480      	push	{r7}
 80064fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80064fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006500:	68db      	ldr	r3, [r3, #12]
 8006502:	0a1b      	lsrs	r3, r3, #8
 8006504:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8006508:	4618      	mov	r0, r3
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr

08006512 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8006512:	b480      	push	{r7}
 8006514:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8006516:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800651a:	68db      	ldr	r3, [r3, #12]
 800651c:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8006520:	4618      	mov	r0, r3
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr

0800652a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800652a:	b480      	push	{r7}
 800652c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800652e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8006538:	4618      	mov	r0, r3
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr

08006542 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8006542:	b480      	push	{r7}
 8006544:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8006546:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800654a:	68db      	ldr	r3, [r3, #12]
 800654c:	f003 0303 	and.w	r3, r3, #3
}
 8006550:	4618      	mov	r0, r3
 8006552:	46bd      	mov	sp, r7
 8006554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006558:	4770      	bx	lr

0800655a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800655a:	b480      	push	{r7}
 800655c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800655e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006568:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800656c:	d101      	bne.n	8006572 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800656e:	2301      	movs	r3, #1
 8006570:	e000      	b.n	8006574 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8006572:	2300      	movs	r3, #0
}
 8006574:	4618      	mov	r0, r3
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr

0800657e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800657e:	b480      	push	{r7}
 8006580:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8006582:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006586:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800658a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800658e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006592:	d101      	bne.n	8006598 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8006594:	2301      	movs	r3, #1
 8006596:	e000      	b.n	800659a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8006598:	2300      	movs	r3, #0
}
 800659a:	4618      	mov	r0, r3
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr

080065a4 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80065a4:	b480      	push	{r7}
 80065a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80065a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065ac:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80065b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80065b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065b8:	d101      	bne.n	80065be <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80065ba:	2301      	movs	r3, #1
 80065bc:	e000      	b.n	80065c0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80065be:	2300      	movs	r3, #0
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr

080065ca <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80065ca:	b480      	push	{r7}
 80065cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80065ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80065dc:	d101      	bne.n	80065e2 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80065de:	2301      	movs	r3, #1
 80065e0:	e000      	b.n	80065e4 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80065e2:	2300      	movs	r3, #0
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	46bd      	mov	sp, r7
 80065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ec:	4770      	bx	lr

080065ee <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80065ee:	b480      	push	{r7}
 80065f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80065f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80065fc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006600:	d101      	bne.n	8006606 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8006602:	2301      	movs	r3, #1
 8006604:	e000      	b.n	8006608 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8006606:	2300      	movs	r3, #0
}
 8006608:	4618      	mov	r0, r3
 800660a:	46bd      	mov	sp, r7
 800660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006610:	4770      	bx	lr
	...

08006614 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006614:	b590      	push	{r4, r7, lr}
 8006616:	b08d      	sub	sp, #52	@ 0x34
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d101      	bne.n	8006626 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	e363      	b.n	8006cee <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f003 0320 	and.w	r3, r3, #32
 800662e:	2b00      	cmp	r3, #0
 8006630:	f000 808d 	beq.w	800674e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006634:	f7ff fe89 	bl	800634a <LL_RCC_GetSysClkSource>
 8006638:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800663a:	f7ff ff82 	bl	8006542 <LL_RCC_PLL_GetMainSource>
 800663e:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006640:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006642:	2b00      	cmp	r3, #0
 8006644:	d005      	beq.n	8006652 <HAL_RCC_OscConfig+0x3e>
 8006646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006648:	2b0c      	cmp	r3, #12
 800664a:	d147      	bne.n	80066dc <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800664c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800664e:	2b01      	cmp	r3, #1
 8006650:	d144      	bne.n	80066dc <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	69db      	ldr	r3, [r3, #28]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d101      	bne.n	800665e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	e347      	b.n	8006cee <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8006662:	f7ff fe34 	bl	80062ce <LL_RCC_MSI_GetRange>
 8006666:	4603      	mov	r3, r0
 8006668:	429c      	cmp	r4, r3
 800666a:	d914      	bls.n	8006696 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006670:	4618      	mov	r0, r3
 8006672:	f000 fd2f 	bl	80070d4 <RCC_SetFlashLatencyFromMSIRange>
 8006676:	4603      	mov	r3, r0
 8006678:	2b00      	cmp	r3, #0
 800667a:	d001      	beq.n	8006680 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	e336      	b.n	8006cee <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006684:	4618      	mov	r0, r3
 8006686:	f7ff fe0e 	bl	80062a6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6a1b      	ldr	r3, [r3, #32]
 800668e:	4618      	mov	r0, r3
 8006690:	f7ff fe32 	bl	80062f8 <LL_RCC_MSI_SetCalibTrimming>
 8006694:	e013      	b.n	80066be <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800669a:	4618      	mov	r0, r3
 800669c:	f7ff fe03 	bl	80062a6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6a1b      	ldr	r3, [r3, #32]
 80066a4:	4618      	mov	r0, r3
 80066a6:	f7ff fe27 	bl	80062f8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066ae:	4618      	mov	r0, r3
 80066b0:	f000 fd10 	bl	80070d4 <RCC_SetFlashLatencyFromMSIRange>
 80066b4:	4603      	mov	r3, r0
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d001      	beq.n	80066be <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	e317      	b.n	8006cee <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80066be:	f000 fcc9 	bl	8007054 <HAL_RCC_GetHCLKFreq>
 80066c2:	4603      	mov	r3, r0
 80066c4:	4aa4      	ldr	r2, [pc, #656]	@ (8006958 <HAL_RCC_OscConfig+0x344>)
 80066c6:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80066c8:	4ba4      	ldr	r3, [pc, #656]	@ (800695c <HAL_RCC_OscConfig+0x348>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4618      	mov	r0, r3
 80066ce:	f7fd fe61 	bl	8004394 <HAL_InitTick>
 80066d2:	4603      	mov	r3, r0
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d039      	beq.n	800674c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80066d8:	2301      	movs	r3, #1
 80066da:	e308      	b.n	8006cee <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	69db      	ldr	r3, [r3, #28]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d01e      	beq.n	8006722 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80066e4:	f7ff fdb0 	bl	8006248 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80066e8:	f7fd fea2 	bl	8004430 <HAL_GetTick>
 80066ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80066ee:	e008      	b.n	8006702 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80066f0:	f7fd fe9e 	bl	8004430 <HAL_GetTick>
 80066f4:	4602      	mov	r2, r0
 80066f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066f8:	1ad3      	subs	r3, r2, r3
 80066fa:	2b02      	cmp	r3, #2
 80066fc:	d901      	bls.n	8006702 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80066fe:	2303      	movs	r3, #3
 8006700:	e2f5      	b.n	8006cee <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8006702:	f7ff fdbf 	bl	8006284 <LL_RCC_MSI_IsReady>
 8006706:	4603      	mov	r3, r0
 8006708:	2b00      	cmp	r3, #0
 800670a:	d0f1      	beq.n	80066f0 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006710:	4618      	mov	r0, r3
 8006712:	f7ff fdc8 	bl	80062a6 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6a1b      	ldr	r3, [r3, #32]
 800671a:	4618      	mov	r0, r3
 800671c:	f7ff fdec 	bl	80062f8 <LL_RCC_MSI_SetCalibTrimming>
 8006720:	e015      	b.n	800674e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006722:	f7ff fda0 	bl	8006266 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006726:	f7fd fe83 	bl	8004430 <HAL_GetTick>
 800672a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800672c:	e008      	b.n	8006740 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800672e:	f7fd fe7f 	bl	8004430 <HAL_GetTick>
 8006732:	4602      	mov	r2, r0
 8006734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006736:	1ad3      	subs	r3, r2, r3
 8006738:	2b02      	cmp	r3, #2
 800673a:	d901      	bls.n	8006740 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800673c:	2303      	movs	r3, #3
 800673e:	e2d6      	b.n	8006cee <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8006740:	f7ff fda0 	bl	8006284 <LL_RCC_MSI_IsReady>
 8006744:	4603      	mov	r3, r0
 8006746:	2b00      	cmp	r3, #0
 8006748:	d1f1      	bne.n	800672e <HAL_RCC_OscConfig+0x11a>
 800674a:	e000      	b.n	800674e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800674c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f003 0301 	and.w	r3, r3, #1
 8006756:	2b00      	cmp	r3, #0
 8006758:	d047      	beq.n	80067ea <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800675a:	f7ff fdf6 	bl	800634a <LL_RCC_GetSysClkSource>
 800675e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006760:	f7ff feef 	bl	8006542 <LL_RCC_PLL_GetMainSource>
 8006764:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8006766:	6a3b      	ldr	r3, [r7, #32]
 8006768:	2b08      	cmp	r3, #8
 800676a:	d005      	beq.n	8006778 <HAL_RCC_OscConfig+0x164>
 800676c:	6a3b      	ldr	r3, [r7, #32]
 800676e:	2b0c      	cmp	r3, #12
 8006770:	d108      	bne.n	8006784 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8006772:	69fb      	ldr	r3, [r7, #28]
 8006774:	2b03      	cmp	r3, #3
 8006776:	d105      	bne.n	8006784 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d134      	bne.n	80067ea <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8006780:	2301      	movs	r3, #1
 8006782:	e2b4      	b.n	8006cee <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800678c:	d102      	bne.n	8006794 <HAL_RCC_OscConfig+0x180>
 800678e:	f7ff fbdd 	bl	8005f4c <LL_RCC_HSE_Enable>
 8006792:	e001      	b.n	8006798 <HAL_RCC_OscConfig+0x184>
 8006794:	f7ff fbe9 	bl	8005f6a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d012      	beq.n	80067c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067a0:	f7fd fe46 	bl	8004430 <HAL_GetTick>
 80067a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80067a6:	e008      	b.n	80067ba <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80067a8:	f7fd fe42 	bl	8004430 <HAL_GetTick>
 80067ac:	4602      	mov	r2, r0
 80067ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067b0:	1ad3      	subs	r3, r2, r3
 80067b2:	2b64      	cmp	r3, #100	@ 0x64
 80067b4:	d901      	bls.n	80067ba <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80067b6:	2303      	movs	r3, #3
 80067b8:	e299      	b.n	8006cee <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80067ba:	f7ff fbe5 	bl	8005f88 <LL_RCC_HSE_IsReady>
 80067be:	4603      	mov	r3, r0
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d0f1      	beq.n	80067a8 <HAL_RCC_OscConfig+0x194>
 80067c4:	e011      	b.n	80067ea <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067c6:	f7fd fe33 	bl	8004430 <HAL_GetTick>
 80067ca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80067cc:	e008      	b.n	80067e0 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80067ce:	f7fd fe2f 	bl	8004430 <HAL_GetTick>
 80067d2:	4602      	mov	r2, r0
 80067d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067d6:	1ad3      	subs	r3, r2, r3
 80067d8:	2b64      	cmp	r3, #100	@ 0x64
 80067da:	d901      	bls.n	80067e0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80067dc:	2303      	movs	r3, #3
 80067de:	e286      	b.n	8006cee <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80067e0:	f7ff fbd2 	bl	8005f88 <LL_RCC_HSE_IsReady>
 80067e4:	4603      	mov	r3, r0
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d1f1      	bne.n	80067ce <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f003 0302 	and.w	r3, r3, #2
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d04c      	beq.n	8006890 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80067f6:	f7ff fda8 	bl	800634a <LL_RCC_GetSysClkSource>
 80067fa:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80067fc:	f7ff fea1 	bl	8006542 <LL_RCC_PLL_GetMainSource>
 8006800:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8006802:	69bb      	ldr	r3, [r7, #24]
 8006804:	2b04      	cmp	r3, #4
 8006806:	d005      	beq.n	8006814 <HAL_RCC_OscConfig+0x200>
 8006808:	69bb      	ldr	r3, [r7, #24]
 800680a:	2b0c      	cmp	r3, #12
 800680c:	d10e      	bne.n	800682c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	2b02      	cmp	r3, #2
 8006812:	d10b      	bne.n	800682c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	68db      	ldr	r3, [r3, #12]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d101      	bne.n	8006820 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800681c:	2301      	movs	r3, #1
 800681e:	e266      	b.n	8006cee <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	691b      	ldr	r3, [r3, #16]
 8006824:	4618      	mov	r0, r3
 8006826:	f7ff fbf1 	bl	800600c <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800682a:	e031      	b.n	8006890 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	68db      	ldr	r3, [r3, #12]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d019      	beq.n	8006868 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006834:	f7ff fbba 	bl	8005fac <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006838:	f7fd fdfa 	bl	8004430 <HAL_GetTick>
 800683c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800683e:	e008      	b.n	8006852 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006840:	f7fd fdf6 	bl	8004430 <HAL_GetTick>
 8006844:	4602      	mov	r2, r0
 8006846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006848:	1ad3      	subs	r3, r2, r3
 800684a:	2b02      	cmp	r3, #2
 800684c:	d901      	bls.n	8006852 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800684e:	2303      	movs	r3, #3
 8006850:	e24d      	b.n	8006cee <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8006852:	f7ff fbc9 	bl	8005fe8 <LL_RCC_HSI_IsReady>
 8006856:	4603      	mov	r3, r0
 8006858:	2b00      	cmp	r3, #0
 800685a:	d0f1      	beq.n	8006840 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	691b      	ldr	r3, [r3, #16]
 8006860:	4618      	mov	r0, r3
 8006862:	f7ff fbd3 	bl	800600c <LL_RCC_HSI_SetCalibTrimming>
 8006866:	e013      	b.n	8006890 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006868:	f7ff fbaf 	bl	8005fca <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800686c:	f7fd fde0 	bl	8004430 <HAL_GetTick>
 8006870:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8006872:	e008      	b.n	8006886 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006874:	f7fd fddc 	bl	8004430 <HAL_GetTick>
 8006878:	4602      	mov	r2, r0
 800687a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800687c:	1ad3      	subs	r3, r2, r3
 800687e:	2b02      	cmp	r3, #2
 8006880:	d901      	bls.n	8006886 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8006882:	2303      	movs	r3, #3
 8006884:	e233      	b.n	8006cee <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8006886:	f7ff fbaf 	bl	8005fe8 <LL_RCC_HSI_IsReady>
 800688a:	4603      	mov	r3, r0
 800688c:	2b00      	cmp	r3, #0
 800688e:	d1f1      	bne.n	8006874 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f003 0308 	and.w	r3, r3, #8
 8006898:	2b00      	cmp	r3, #0
 800689a:	d106      	bne.n	80068aa <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	f000 80a3 	beq.w	80069f0 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	695b      	ldr	r3, [r3, #20]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d076      	beq.n	80069a0 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f003 0310 	and.w	r3, r3, #16
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d046      	beq.n	800694c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80068be:	f7ff fc66 	bl	800618e <LL_RCC_LSI1_IsReady>
 80068c2:	4603      	mov	r3, r0
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d113      	bne.n	80068f0 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80068c8:	f7ff fc3f 	bl	800614a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80068cc:	f7fd fdb0 	bl	8004430 <HAL_GetTick>
 80068d0:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80068d2:	e008      	b.n	80068e6 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80068d4:	f7fd fdac 	bl	8004430 <HAL_GetTick>
 80068d8:	4602      	mov	r2, r0
 80068da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068dc:	1ad3      	subs	r3, r2, r3
 80068de:	2b02      	cmp	r3, #2
 80068e0:	d901      	bls.n	80068e6 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80068e2:	2303      	movs	r3, #3
 80068e4:	e203      	b.n	8006cee <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80068e6:	f7ff fc52 	bl	800618e <LL_RCC_LSI1_IsReady>
 80068ea:	4603      	mov	r3, r0
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d0f1      	beq.n	80068d4 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80068f0:	f7ff fc5f 	bl	80061b2 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068f4:	f7fd fd9c 	bl	8004430 <HAL_GetTick>
 80068f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80068fa:	e008      	b.n	800690e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80068fc:	f7fd fd98 	bl	8004430 <HAL_GetTick>
 8006900:	4602      	mov	r2, r0
 8006902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006904:	1ad3      	subs	r3, r2, r3
 8006906:	2b03      	cmp	r3, #3
 8006908:	d901      	bls.n	800690e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800690a:	2303      	movs	r3, #3
 800690c:	e1ef      	b.n	8006cee <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800690e:	f7ff fc72 	bl	80061f6 <LL_RCC_LSI2_IsReady>
 8006912:	4603      	mov	r3, r0
 8006914:	2b00      	cmp	r3, #0
 8006916:	d0f1      	beq.n	80068fc <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	699b      	ldr	r3, [r3, #24]
 800691c:	4618      	mov	r0, r3
 800691e:	f7ff fc7c 	bl	800621a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8006922:	f7ff fc23 	bl	800616c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006926:	f7fd fd83 	bl	8004430 <HAL_GetTick>
 800692a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800692c:	e008      	b.n	8006940 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800692e:	f7fd fd7f 	bl	8004430 <HAL_GetTick>
 8006932:	4602      	mov	r2, r0
 8006934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006936:	1ad3      	subs	r3, r2, r3
 8006938:	2b02      	cmp	r3, #2
 800693a:	d901      	bls.n	8006940 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800693c:	2303      	movs	r3, #3
 800693e:	e1d6      	b.n	8006cee <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8006940:	f7ff fc25 	bl	800618e <LL_RCC_LSI1_IsReady>
 8006944:	4603      	mov	r3, r0
 8006946:	2b00      	cmp	r3, #0
 8006948:	d1f1      	bne.n	800692e <HAL_RCC_OscConfig+0x31a>
 800694a:	e051      	b.n	80069f0 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800694c:	f7ff fbfd 	bl	800614a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006950:	f7fd fd6e 	bl	8004430 <HAL_GetTick>
 8006954:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8006956:	e00c      	b.n	8006972 <HAL_RCC_OscConfig+0x35e>
 8006958:	20000010 	.word	0x20000010
 800695c:	20000014 	.word	0x20000014
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006960:	f7fd fd66 	bl	8004430 <HAL_GetTick>
 8006964:	4602      	mov	r2, r0
 8006966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006968:	1ad3      	subs	r3, r2, r3
 800696a:	2b02      	cmp	r3, #2
 800696c:	d901      	bls.n	8006972 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800696e:	2303      	movs	r3, #3
 8006970:	e1bd      	b.n	8006cee <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8006972:	f7ff fc0c 	bl	800618e <LL_RCC_LSI1_IsReady>
 8006976:	4603      	mov	r3, r0
 8006978:	2b00      	cmp	r3, #0
 800697a:	d0f1      	beq.n	8006960 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800697c:	f7ff fc2a 	bl	80061d4 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8006980:	e008      	b.n	8006994 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006982:	f7fd fd55 	bl	8004430 <HAL_GetTick>
 8006986:	4602      	mov	r2, r0
 8006988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800698a:	1ad3      	subs	r3, r2, r3
 800698c:	2b03      	cmp	r3, #3
 800698e:	d901      	bls.n	8006994 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8006990:	2303      	movs	r3, #3
 8006992:	e1ac      	b.n	8006cee <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8006994:	f7ff fc2f 	bl	80061f6 <LL_RCC_LSI2_IsReady>
 8006998:	4603      	mov	r3, r0
 800699a:	2b00      	cmp	r3, #0
 800699c:	d1f1      	bne.n	8006982 <HAL_RCC_OscConfig+0x36e>
 800699e:	e027      	b.n	80069f0 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80069a0:	f7ff fc18 	bl	80061d4 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069a4:	f7fd fd44 	bl	8004430 <HAL_GetTick>
 80069a8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80069aa:	e008      	b.n	80069be <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80069ac:	f7fd fd40 	bl	8004430 <HAL_GetTick>
 80069b0:	4602      	mov	r2, r0
 80069b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069b4:	1ad3      	subs	r3, r2, r3
 80069b6:	2b03      	cmp	r3, #3
 80069b8:	d901      	bls.n	80069be <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80069ba:	2303      	movs	r3, #3
 80069bc:	e197      	b.n	8006cee <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80069be:	f7ff fc1a 	bl	80061f6 <LL_RCC_LSI2_IsReady>
 80069c2:	4603      	mov	r3, r0
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d1f1      	bne.n	80069ac <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80069c8:	f7ff fbd0 	bl	800616c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069cc:	f7fd fd30 	bl	8004430 <HAL_GetTick>
 80069d0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80069d2:	e008      	b.n	80069e6 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80069d4:	f7fd fd2c 	bl	8004430 <HAL_GetTick>
 80069d8:	4602      	mov	r2, r0
 80069da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069dc:	1ad3      	subs	r3, r2, r3
 80069de:	2b02      	cmp	r3, #2
 80069e0:	d901      	bls.n	80069e6 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80069e2:	2303      	movs	r3, #3
 80069e4:	e183      	b.n	8006cee <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80069e6:	f7ff fbd2 	bl	800618e <LL_RCC_LSI1_IsReady>
 80069ea:	4603      	mov	r3, r0
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d1f1      	bne.n	80069d4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f003 0304 	and.w	r3, r3, #4
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d05b      	beq.n	8006ab4 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80069fc:	4ba7      	ldr	r3, [pc, #668]	@ (8006c9c <HAL_RCC_OscConfig+0x688>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d114      	bne.n	8006a32 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006a08:	f7ff fa70 	bl	8005eec <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a0c:	f7fd fd10 	bl	8004430 <HAL_GetTick>
 8006a10:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a12:	e008      	b.n	8006a26 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a14:	f7fd fd0c 	bl	8004430 <HAL_GetTick>
 8006a18:	4602      	mov	r2, r0
 8006a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a1c:	1ad3      	subs	r3, r2, r3
 8006a1e:	2b02      	cmp	r3, #2
 8006a20:	d901      	bls.n	8006a26 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8006a22:	2303      	movs	r3, #3
 8006a24:	e163      	b.n	8006cee <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a26:	4b9d      	ldr	r3, [pc, #628]	@ (8006c9c <HAL_RCC_OscConfig+0x688>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d0f0      	beq.n	8006a14 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	2b01      	cmp	r3, #1
 8006a38:	d102      	bne.n	8006a40 <HAL_RCC_OscConfig+0x42c>
 8006a3a:	f7ff fb30 	bl	800609e <LL_RCC_LSE_Enable>
 8006a3e:	e00c      	b.n	8006a5a <HAL_RCC_OscConfig+0x446>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	2b05      	cmp	r3, #5
 8006a46:	d104      	bne.n	8006a52 <HAL_RCC_OscConfig+0x43e>
 8006a48:	f7ff fb4b 	bl	80060e2 <LL_RCC_LSE_EnableBypass>
 8006a4c:	f7ff fb27 	bl	800609e <LL_RCC_LSE_Enable>
 8006a50:	e003      	b.n	8006a5a <HAL_RCC_OscConfig+0x446>
 8006a52:	f7ff fb35 	bl	80060c0 <LL_RCC_LSE_Disable>
 8006a56:	f7ff fb55 	bl	8006104 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d014      	beq.n	8006a8c <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a62:	f7fd fce5 	bl	8004430 <HAL_GetTick>
 8006a66:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8006a68:	e00a      	b.n	8006a80 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a6a:	f7fd fce1 	bl	8004430 <HAL_GetTick>
 8006a6e:	4602      	mov	r2, r0
 8006a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a72:	1ad3      	subs	r3, r2, r3
 8006a74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d901      	bls.n	8006a80 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8006a7c:	2303      	movs	r3, #3
 8006a7e:	e136      	b.n	8006cee <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8006a80:	f7ff fb51 	bl	8006126 <LL_RCC_LSE_IsReady>
 8006a84:	4603      	mov	r3, r0
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d0ef      	beq.n	8006a6a <HAL_RCC_OscConfig+0x456>
 8006a8a:	e013      	b.n	8006ab4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a8c:	f7fd fcd0 	bl	8004430 <HAL_GetTick>
 8006a90:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8006a92:	e00a      	b.n	8006aaa <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a94:	f7fd fccc 	bl	8004430 <HAL_GetTick>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a9c:	1ad3      	subs	r3, r2, r3
 8006a9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d901      	bls.n	8006aaa <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8006aa6:	2303      	movs	r3, #3
 8006aa8:	e121      	b.n	8006cee <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8006aaa:	f7ff fb3c 	bl	8006126 <LL_RCC_LSE_IsReady>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d1ef      	bne.n	8006a94 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d02c      	beq.n	8006b1a <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d014      	beq.n	8006af2 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006ac8:	f7ff fab5 	bl	8006036 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006acc:	f7fd fcb0 	bl	8004430 <HAL_GetTick>
 8006ad0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8006ad2:	e008      	b.n	8006ae6 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006ad4:	f7fd fcac 	bl	8004430 <HAL_GetTick>
 8006ad8:	4602      	mov	r2, r0
 8006ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006adc:	1ad3      	subs	r3, r2, r3
 8006ade:	2b02      	cmp	r3, #2
 8006ae0:	d901      	bls.n	8006ae6 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8006ae2:	2303      	movs	r3, #3
 8006ae4:	e103      	b.n	8006cee <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8006ae6:	f7ff fac8 	bl	800607a <LL_RCC_HSI48_IsReady>
 8006aea:	4603      	mov	r3, r0
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d0f1      	beq.n	8006ad4 <HAL_RCC_OscConfig+0x4c0>
 8006af0:	e013      	b.n	8006b1a <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006af2:	f7ff fab1 	bl	8006058 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006af6:	f7fd fc9b 	bl	8004430 <HAL_GetTick>
 8006afa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8006afc:	e008      	b.n	8006b10 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006afe:	f7fd fc97 	bl	8004430 <HAL_GetTick>
 8006b02:	4602      	mov	r2, r0
 8006b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b06:	1ad3      	subs	r3, r2, r3
 8006b08:	2b02      	cmp	r3, #2
 8006b0a:	d901      	bls.n	8006b10 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8006b0c:	2303      	movs	r3, #3
 8006b0e:	e0ee      	b.n	8006cee <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8006b10:	f7ff fab3 	bl	800607a <LL_RCC_HSI48_IsReady>
 8006b14:	4603      	mov	r3, r0
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d1f1      	bne.n	8006afe <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	f000 80e4 	beq.w	8006cec <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b24:	f7ff fc11 	bl	800634a <LL_RCC_GetSysClkSource>
 8006b28:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8006b2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b2e:	68db      	ldr	r3, [r3, #12]
 8006b30:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b36:	2b02      	cmp	r3, #2
 8006b38:	f040 80b4 	bne.w	8006ca4 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f003 0203 	and.w	r2, r3, #3
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b46:	429a      	cmp	r2, r3
 8006b48:	d123      	bne.n	8006b92 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d11c      	bne.n	8006b92 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	0a1b      	lsrs	r3, r3, #8
 8006b5c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d114      	bne.n	8006b92 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d10d      	bne.n	8006b92 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006b80:	429a      	cmp	r2, r3
 8006b82:	d106      	bne.n	8006b92 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d05d      	beq.n	8006c4e <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	2b0c      	cmp	r3, #12
 8006b96:	d058      	beq.n	8006c4a <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006b98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d001      	beq.n	8006baa <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	e0a1      	b.n	8006cee <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006baa:	f7ff fc84 	bl	80064b6 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006bae:	f7fd fc3f 	bl	8004430 <HAL_GetTick>
 8006bb2:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006bb4:	e008      	b.n	8006bc8 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bb6:	f7fd fc3b 	bl	8004430 <HAL_GetTick>
 8006bba:	4602      	mov	r2, r0
 8006bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bbe:	1ad3      	subs	r3, r2, r3
 8006bc0:	2b02      	cmp	r3, #2
 8006bc2:	d901      	bls.n	8006bc8 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8006bc4:	2303      	movs	r3, #3
 8006bc6:	e092      	b.n	8006cee <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006bc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d1ef      	bne.n	8006bb6 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006bd6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bda:	68da      	ldr	r2, [r3, #12]
 8006bdc:	4b30      	ldr	r3, [pc, #192]	@ (8006ca0 <HAL_RCC_OscConfig+0x68c>)
 8006bde:	4013      	ands	r3, r2
 8006be0:	687a      	ldr	r2, [r7, #4]
 8006be2:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006be8:	4311      	orrs	r1, r2
 8006bea:	687a      	ldr	r2, [r7, #4]
 8006bec:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006bee:	0212      	lsls	r2, r2, #8
 8006bf0:	4311      	orrs	r1, r2
 8006bf2:	687a      	ldr	r2, [r7, #4]
 8006bf4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006bf6:	4311      	orrs	r1, r2
 8006bf8:	687a      	ldr	r2, [r7, #4]
 8006bfa:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006bfc:	4311      	orrs	r1, r2
 8006bfe:	687a      	ldr	r2, [r7, #4]
 8006c00:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8006c02:	430a      	orrs	r2, r1
 8006c04:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006c0c:	f7ff fc44 	bl	8006498 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006c10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c14:	68db      	ldr	r3, [r3, #12]
 8006c16:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006c1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c1e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006c20:	f7fd fc06 	bl	8004430 <HAL_GetTick>
 8006c24:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c26:	e008      	b.n	8006c3a <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c28:	f7fd fc02 	bl	8004430 <HAL_GetTick>
 8006c2c:	4602      	mov	r2, r0
 8006c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c30:	1ad3      	subs	r3, r2, r3
 8006c32:	2b02      	cmp	r3, #2
 8006c34:	d901      	bls.n	8006c3a <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8006c36:	2303      	movs	r3, #3
 8006c38:	e059      	b.n	8006cee <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d0ef      	beq.n	8006c28 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006c48:	e050      	b.n	8006cec <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e04f      	b.n	8006cee <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d147      	bne.n	8006cec <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006c5c:	f7ff fc1c 	bl	8006498 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006c60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c64:	68db      	ldr	r3, [r3, #12]
 8006c66:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006c6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c6e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006c70:	f7fd fbde 	bl	8004430 <HAL_GetTick>
 8006c74:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c76:	e008      	b.n	8006c8a <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c78:	f7fd fbda 	bl	8004430 <HAL_GetTick>
 8006c7c:	4602      	mov	r2, r0
 8006c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c80:	1ad3      	subs	r3, r2, r3
 8006c82:	2b02      	cmp	r3, #2
 8006c84:	d901      	bls.n	8006c8a <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8006c86:	2303      	movs	r3, #3
 8006c88:	e031      	b.n	8006cee <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d0ef      	beq.n	8006c78 <HAL_RCC_OscConfig+0x664>
 8006c98:	e028      	b.n	8006cec <HAL_RCC_OscConfig+0x6d8>
 8006c9a:	bf00      	nop
 8006c9c:	58000400 	.word	0x58000400
 8006ca0:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	2b0c      	cmp	r3, #12
 8006ca8:	d01e      	beq.n	8006ce8 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006caa:	f7ff fc04 	bl	80064b6 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cae:	f7fd fbbf 	bl	8004430 <HAL_GetTick>
 8006cb2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006cb4:	e008      	b.n	8006cc8 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006cb6:	f7fd fbbb 	bl	8004430 <HAL_GetTick>
 8006cba:	4602      	mov	r2, r0
 8006cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cbe:	1ad3      	subs	r3, r2, r3
 8006cc0:	2b02      	cmp	r3, #2
 8006cc2:	d901      	bls.n	8006cc8 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8006cc4:	2303      	movs	r3, #3
 8006cc6:	e012      	b.n	8006cee <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006cc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d1ef      	bne.n	8006cb6 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8006cd6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006cda:	68da      	ldr	r2, [r3, #12]
 8006cdc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006ce0:	4b05      	ldr	r3, [pc, #20]	@ (8006cf8 <HAL_RCC_OscConfig+0x6e4>)
 8006ce2:	4013      	ands	r3, r2
 8006ce4:	60cb      	str	r3, [r1, #12]
 8006ce6:	e001      	b.n	8006cec <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006ce8:	2301      	movs	r3, #1
 8006cea:	e000      	b.n	8006cee <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8006cec:	2300      	movs	r3, #0
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3734      	adds	r7, #52	@ 0x34
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd90      	pop	{r4, r7, pc}
 8006cf6:	bf00      	nop
 8006cf8:	eefefffc 	.word	0xeefefffc

08006cfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b084      	sub	sp, #16
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d101      	bne.n	8006d10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	e12d      	b.n	8006f6c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006d10:	4b98      	ldr	r3, [pc, #608]	@ (8006f74 <HAL_RCC_ClockConfig+0x278>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f003 0307 	and.w	r3, r3, #7
 8006d18:	683a      	ldr	r2, [r7, #0]
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	d91b      	bls.n	8006d56 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d1e:	4b95      	ldr	r3, [pc, #596]	@ (8006f74 <HAL_RCC_ClockConfig+0x278>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f023 0207 	bic.w	r2, r3, #7
 8006d26:	4993      	ldr	r1, [pc, #588]	@ (8006f74 <HAL_RCC_ClockConfig+0x278>)
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d2e:	f7fd fb7f 	bl	8004430 <HAL_GetTick>
 8006d32:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d34:	e008      	b.n	8006d48 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006d36:	f7fd fb7b 	bl	8004430 <HAL_GetTick>
 8006d3a:	4602      	mov	r2, r0
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	1ad3      	subs	r3, r2, r3
 8006d40:	2b02      	cmp	r3, #2
 8006d42:	d901      	bls.n	8006d48 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8006d44:	2303      	movs	r3, #3
 8006d46:	e111      	b.n	8006f6c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d48:	4b8a      	ldr	r3, [pc, #552]	@ (8006f74 <HAL_RCC_ClockConfig+0x278>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f003 0307 	and.w	r3, r3, #7
 8006d50:	683a      	ldr	r2, [r7, #0]
 8006d52:	429a      	cmp	r2, r3
 8006d54:	d1ef      	bne.n	8006d36 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f003 0302 	and.w	r3, r3, #2
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d016      	beq.n	8006d90 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	4618      	mov	r0, r3
 8006d68:	f7ff fafb 	bl	8006362 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006d6c:	f7fd fb60 	bl	8004430 <HAL_GetTick>
 8006d70:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006d72:	e008      	b.n	8006d86 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006d74:	f7fd fb5c 	bl	8004430 <HAL_GetTick>
 8006d78:	4602      	mov	r2, r0
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	1ad3      	subs	r3, r2, r3
 8006d7e:	2b02      	cmp	r3, #2
 8006d80:	d901      	bls.n	8006d86 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8006d82:	2303      	movs	r3, #3
 8006d84:	e0f2      	b.n	8006f6c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006d86:	f7ff fbe8 	bl	800655a <LL_RCC_IsActiveFlag_HPRE>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d0f1      	beq.n	8006d74 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f003 0320 	and.w	r3, r3, #32
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d016      	beq.n	8006dca <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	695b      	ldr	r3, [r3, #20]
 8006da0:	4618      	mov	r0, r3
 8006da2:	f7ff faf2 	bl	800638a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006da6:	f7fd fb43 	bl	8004430 <HAL_GetTick>
 8006daa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006dac:	e008      	b.n	8006dc0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006dae:	f7fd fb3f 	bl	8004430 <HAL_GetTick>
 8006db2:	4602      	mov	r2, r0
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	1ad3      	subs	r3, r2, r3
 8006db8:	2b02      	cmp	r3, #2
 8006dba:	d901      	bls.n	8006dc0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8006dbc:	2303      	movs	r3, #3
 8006dbe:	e0d5      	b.n	8006f6c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006dc0:	f7ff fbdd 	bl	800657e <LL_RCC_IsActiveFlag_C2HPRE>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d0f1      	beq.n	8006dae <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d016      	beq.n	8006e04 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	699b      	ldr	r3, [r3, #24]
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f7ff faeb 	bl	80063b6 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006de0:	f7fd fb26 	bl	8004430 <HAL_GetTick>
 8006de4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006de6:	e008      	b.n	8006dfa <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006de8:	f7fd fb22 	bl	8004430 <HAL_GetTick>
 8006dec:	4602      	mov	r2, r0
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	1ad3      	subs	r3, r2, r3
 8006df2:	2b02      	cmp	r3, #2
 8006df4:	d901      	bls.n	8006dfa <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8006df6:	2303      	movs	r3, #3
 8006df8:	e0b8      	b.n	8006f6c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006dfa:	f7ff fbd3 	bl	80065a4 <LL_RCC_IsActiveFlag_SHDHPRE>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d0f1      	beq.n	8006de8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f003 0304 	and.w	r3, r3, #4
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d016      	beq.n	8006e3e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	68db      	ldr	r3, [r3, #12]
 8006e14:	4618      	mov	r0, r3
 8006e16:	f7ff fae5 	bl	80063e4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006e1a:	f7fd fb09 	bl	8004430 <HAL_GetTick>
 8006e1e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006e20:	e008      	b.n	8006e34 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006e22:	f7fd fb05 	bl	8004430 <HAL_GetTick>
 8006e26:	4602      	mov	r2, r0
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	1ad3      	subs	r3, r2, r3
 8006e2c:	2b02      	cmp	r3, #2
 8006e2e:	d901      	bls.n	8006e34 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8006e30:	2303      	movs	r3, #3
 8006e32:	e09b      	b.n	8006f6c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006e34:	f7ff fbc9 	bl	80065ca <LL_RCC_IsActiveFlag_PPRE1>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d0f1      	beq.n	8006e22 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f003 0308 	and.w	r3, r3, #8
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d017      	beq.n	8006e7a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	691b      	ldr	r3, [r3, #16]
 8006e4e:	00db      	lsls	r3, r3, #3
 8006e50:	4618      	mov	r0, r3
 8006e52:	f7ff fadb 	bl	800640c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006e56:	f7fd faeb 	bl	8004430 <HAL_GetTick>
 8006e5a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006e5c:	e008      	b.n	8006e70 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006e5e:	f7fd fae7 	bl	8004430 <HAL_GetTick>
 8006e62:	4602      	mov	r2, r0
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	1ad3      	subs	r3, r2, r3
 8006e68:	2b02      	cmp	r3, #2
 8006e6a:	d901      	bls.n	8006e70 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8006e6c:	2303      	movs	r3, #3
 8006e6e:	e07d      	b.n	8006f6c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006e70:	f7ff fbbd 	bl	80065ee <LL_RCC_IsActiveFlag_PPRE2>
 8006e74:	4603      	mov	r3, r0
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d0f1      	beq.n	8006e5e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f003 0301 	and.w	r3, r3, #1
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d043      	beq.n	8006f0e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	2b02      	cmp	r3, #2
 8006e8c:	d106      	bne.n	8006e9c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8006e8e:	f7ff f87b 	bl	8005f88 <LL_RCC_HSE_IsReady>
 8006e92:	4603      	mov	r3, r0
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d11e      	bne.n	8006ed6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006e98:	2301      	movs	r3, #1
 8006e9a:	e067      	b.n	8006f6c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	2b03      	cmp	r3, #3
 8006ea2:	d106      	bne.n	8006eb2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8006ea4:	f7ff fb16 	bl	80064d4 <LL_RCC_PLL_IsReady>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d113      	bne.n	8006ed6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	e05c      	b.n	8006f6c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d106      	bne.n	8006ec8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8006eba:	f7ff f9e3 	bl	8006284 <LL_RCC_MSI_IsReady>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d108      	bne.n	8006ed6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	e051      	b.n	8006f6c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8006ec8:	f7ff f88e 	bl	8005fe8 <LL_RCC_HSI_IsReady>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d101      	bne.n	8006ed6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	e04a      	b.n	8006f6c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	4618      	mov	r0, r3
 8006edc:	f7ff fa21 	bl	8006322 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ee0:	f7fd faa6 	bl	8004430 <HAL_GetTick>
 8006ee4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ee6:	e00a      	b.n	8006efe <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ee8:	f7fd faa2 	bl	8004430 <HAL_GetTick>
 8006eec:	4602      	mov	r2, r0
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	1ad3      	subs	r3, r2, r3
 8006ef2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d901      	bls.n	8006efe <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8006efa:	2303      	movs	r3, #3
 8006efc:	e036      	b.n	8006f6c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006efe:	f7ff fa24 	bl	800634a <LL_RCC_GetSysClkSource>
 8006f02:	4602      	mov	r2, r0
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	009b      	lsls	r3, r3, #2
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d1ec      	bne.n	8006ee8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006f0e:	4b19      	ldr	r3, [pc, #100]	@ (8006f74 <HAL_RCC_ClockConfig+0x278>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f003 0307 	and.w	r3, r3, #7
 8006f16:	683a      	ldr	r2, [r7, #0]
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	d21b      	bcs.n	8006f54 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f1c:	4b15      	ldr	r3, [pc, #84]	@ (8006f74 <HAL_RCC_ClockConfig+0x278>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f023 0207 	bic.w	r2, r3, #7
 8006f24:	4913      	ldr	r1, [pc, #76]	@ (8006f74 <HAL_RCC_ClockConfig+0x278>)
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f2c:	f7fd fa80 	bl	8004430 <HAL_GetTick>
 8006f30:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f32:	e008      	b.n	8006f46 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006f34:	f7fd fa7c 	bl	8004430 <HAL_GetTick>
 8006f38:	4602      	mov	r2, r0
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	1ad3      	subs	r3, r2, r3
 8006f3e:	2b02      	cmp	r3, #2
 8006f40:	d901      	bls.n	8006f46 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8006f42:	2303      	movs	r3, #3
 8006f44:	e012      	b.n	8006f6c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f46:	4b0b      	ldr	r3, [pc, #44]	@ (8006f74 <HAL_RCC_ClockConfig+0x278>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f003 0307 	and.w	r3, r3, #7
 8006f4e:	683a      	ldr	r2, [r7, #0]
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d1ef      	bne.n	8006f34 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006f54:	f000 f87e 	bl	8007054 <HAL_RCC_GetHCLKFreq>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	4a07      	ldr	r2, [pc, #28]	@ (8006f78 <HAL_RCC_ClockConfig+0x27c>)
 8006f5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8006f5e:	f7fd fa73 	bl	8004448 <HAL_GetTickPrio>
 8006f62:	4603      	mov	r3, r0
 8006f64:	4618      	mov	r0, r3
 8006f66:	f7fd fa15 	bl	8004394 <HAL_InitTick>
 8006f6a:	4603      	mov	r3, r0
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3710      	adds	r7, #16
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}
 8006f74:	58004000 	.word	0x58004000
 8006f78:	20000010 	.word	0x20000010

08006f7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f7c:	b590      	push	{r4, r7, lr}
 8006f7e:	b085      	sub	sp, #20
 8006f80:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006f82:	f7ff f9e2 	bl	800634a <LL_RCC_GetSysClkSource>
 8006f86:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d10a      	bne.n	8006fa4 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006f8e:	f7ff f99e 	bl	80062ce <LL_RCC_MSI_GetRange>
 8006f92:	4603      	mov	r3, r0
 8006f94:	091b      	lsrs	r3, r3, #4
 8006f96:	f003 030f 	and.w	r3, r3, #15
 8006f9a:	4a2b      	ldr	r2, [pc, #172]	@ (8007048 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006f9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fa0:	60fb      	str	r3, [r7, #12]
 8006fa2:	e04b      	b.n	800703c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2b04      	cmp	r3, #4
 8006fa8:	d102      	bne.n	8006fb0 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006faa:	4b28      	ldr	r3, [pc, #160]	@ (800704c <HAL_RCC_GetSysClockFreq+0xd0>)
 8006fac:	60fb      	str	r3, [r7, #12]
 8006fae:	e045      	b.n	800703c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2b08      	cmp	r3, #8
 8006fb4:	d10a      	bne.n	8006fcc <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006fb6:	f7fe ffb7 	bl	8005f28 <LL_RCC_HSE_IsEnabledDiv2>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d102      	bne.n	8006fc6 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8006fc0:	4b22      	ldr	r3, [pc, #136]	@ (800704c <HAL_RCC_GetSysClockFreq+0xd0>)
 8006fc2:	60fb      	str	r3, [r7, #12]
 8006fc4:	e03a      	b.n	800703c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8006fc6:	4b22      	ldr	r3, [pc, #136]	@ (8007050 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006fc8:	60fb      	str	r3, [r7, #12]
 8006fca:	e037      	b.n	800703c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8006fcc:	f7ff fab9 	bl	8006542 <LL_RCC_PLL_GetMainSource>
 8006fd0:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	2b02      	cmp	r3, #2
 8006fd6:	d003      	beq.n	8006fe0 <HAL_RCC_GetSysClockFreq+0x64>
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	2b03      	cmp	r3, #3
 8006fdc:	d003      	beq.n	8006fe6 <HAL_RCC_GetSysClockFreq+0x6a>
 8006fde:	e00d      	b.n	8006ffc <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8006fe0:	4b1a      	ldr	r3, [pc, #104]	@ (800704c <HAL_RCC_GetSysClockFreq+0xd0>)
 8006fe2:	60bb      	str	r3, [r7, #8]
        break;
 8006fe4:	e015      	b.n	8007012 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006fe6:	f7fe ff9f 	bl	8005f28 <LL_RCC_HSE_IsEnabledDiv2>
 8006fea:	4603      	mov	r3, r0
 8006fec:	2b01      	cmp	r3, #1
 8006fee:	d102      	bne.n	8006ff6 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8006ff0:	4b16      	ldr	r3, [pc, #88]	@ (800704c <HAL_RCC_GetSysClockFreq+0xd0>)
 8006ff2:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8006ff4:	e00d      	b.n	8007012 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8006ff6:	4b16      	ldr	r3, [pc, #88]	@ (8007050 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006ff8:	60bb      	str	r3, [r7, #8]
        break;
 8006ffa:	e00a      	b.n	8007012 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006ffc:	f7ff f967 	bl	80062ce <LL_RCC_MSI_GetRange>
 8007000:	4603      	mov	r3, r0
 8007002:	091b      	lsrs	r3, r3, #4
 8007004:	f003 030f 	and.w	r3, r3, #15
 8007008:	4a0f      	ldr	r2, [pc, #60]	@ (8007048 <HAL_RCC_GetSysClockFreq+0xcc>)
 800700a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800700e:	60bb      	str	r3, [r7, #8]
        break;
 8007010:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8007012:	f7ff fa71 	bl	80064f8 <LL_RCC_PLL_GetN>
 8007016:	4602      	mov	r2, r0
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	fb03 f402 	mul.w	r4, r3, r2
 800701e:	f7ff fa84 	bl	800652a <LL_RCC_PLL_GetDivider>
 8007022:	4603      	mov	r3, r0
 8007024:	091b      	lsrs	r3, r3, #4
 8007026:	3301      	adds	r3, #1
 8007028:	fbb4 f4f3 	udiv	r4, r4, r3
 800702c:	f7ff fa71 	bl	8006512 <LL_RCC_PLL_GetR>
 8007030:	4603      	mov	r3, r0
 8007032:	0f5b      	lsrs	r3, r3, #29
 8007034:	3301      	adds	r3, #1
 8007036:	fbb4 f3f3 	udiv	r3, r4, r3
 800703a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800703c:	68fb      	ldr	r3, [r7, #12]
}
 800703e:	4618      	mov	r0, r3
 8007040:	3714      	adds	r7, #20
 8007042:	46bd      	mov	sp, r7
 8007044:	bd90      	pop	{r4, r7, pc}
 8007046:	bf00      	nop
 8007048:	08013fac 	.word	0x08013fac
 800704c:	00f42400 	.word	0x00f42400
 8007050:	01e84800 	.word	0x01e84800

08007054 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007054:	b598      	push	{r3, r4, r7, lr}
 8007056:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8007058:	f7ff ff90 	bl	8006f7c <HAL_RCC_GetSysClockFreq>
 800705c:	4604      	mov	r4, r0
 800705e:	f7ff f9e9 	bl	8006434 <LL_RCC_GetAHBPrescaler>
 8007062:	4603      	mov	r3, r0
 8007064:	091b      	lsrs	r3, r3, #4
 8007066:	f003 030f 	and.w	r3, r3, #15
 800706a:	4a03      	ldr	r2, [pc, #12]	@ (8007078 <HAL_RCC_GetHCLKFreq+0x24>)
 800706c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007070:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8007074:	4618      	mov	r0, r3
 8007076:	bd98      	pop	{r3, r4, r7, pc}
 8007078:	08013f4c 	.word	0x08013f4c

0800707c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800707c:	b598      	push	{r3, r4, r7, lr}
 800707e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8007080:	f7ff ffe8 	bl	8007054 <HAL_RCC_GetHCLKFreq>
 8007084:	4604      	mov	r4, r0
 8007086:	f7ff f9ef 	bl	8006468 <LL_RCC_GetAPB1Prescaler>
 800708a:	4603      	mov	r3, r0
 800708c:	0a1b      	lsrs	r3, r3, #8
 800708e:	f003 0307 	and.w	r3, r3, #7
 8007092:	4a04      	ldr	r2, [pc, #16]	@ (80070a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007098:	f003 031f 	and.w	r3, r3, #31
 800709c:	fa24 f303 	lsr.w	r3, r4, r3
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	bd98      	pop	{r3, r4, r7, pc}
 80070a4:	08013f8c 	.word	0x08013f8c

080070a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80070a8:	b598      	push	{r3, r4, r7, lr}
 80070aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80070ac:	f7ff ffd2 	bl	8007054 <HAL_RCC_GetHCLKFreq>
 80070b0:	4604      	mov	r4, r0
 80070b2:	f7ff f9e5 	bl	8006480 <LL_RCC_GetAPB2Prescaler>
 80070b6:	4603      	mov	r3, r0
 80070b8:	0adb      	lsrs	r3, r3, #11
 80070ba:	f003 0307 	and.w	r3, r3, #7
 80070be:	4a04      	ldr	r2, [pc, #16]	@ (80070d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80070c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070c4:	f003 031f 	and.w	r3, r3, #31
 80070c8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	bd98      	pop	{r3, r4, r7, pc}
 80070d0:	08013f8c 	.word	0x08013f8c

080070d4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80070d4:	b590      	push	{r4, r7, lr}
 80070d6:	b085      	sub	sp, #20
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2bb0      	cmp	r3, #176	@ 0xb0
 80070e0:	d903      	bls.n	80070ea <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80070e2:	4b15      	ldr	r3, [pc, #84]	@ (8007138 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80070e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070e6:	60fb      	str	r3, [r7, #12]
 80070e8:	e007      	b.n	80070fa <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	091b      	lsrs	r3, r3, #4
 80070ee:	f003 030f 	and.w	r3, r3, #15
 80070f2:	4a11      	ldr	r2, [pc, #68]	@ (8007138 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80070f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070f8:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80070fa:	f7ff f9a7 	bl	800644c <LL_RCC_GetAHB4Prescaler>
 80070fe:	4603      	mov	r3, r0
 8007100:	091b      	lsrs	r3, r3, #4
 8007102:	f003 030f 	and.w	r3, r3, #15
 8007106:	4a0d      	ldr	r2, [pc, #52]	@ (800713c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8007108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800710c:	68fa      	ldr	r2, [r7, #12]
 800710e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007112:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	4a0a      	ldr	r2, [pc, #40]	@ (8007140 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8007118:	fba2 2303 	umull	r2, r3, r2, r3
 800711c:	0c9c      	lsrs	r4, r3, #18
 800711e:	f7fe fef5 	bl	8005f0c <HAL_PWREx_GetVoltageRange>
 8007122:	4603      	mov	r3, r0
 8007124:	4619      	mov	r1, r3
 8007126:	4620      	mov	r0, r4
 8007128:	f000 f80c 	bl	8007144 <RCC_SetFlashLatency>
 800712c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800712e:	4618      	mov	r0, r3
 8007130:	3714      	adds	r7, #20
 8007132:	46bd      	mov	sp, r7
 8007134:	bd90      	pop	{r4, r7, pc}
 8007136:	bf00      	nop
 8007138:	08013fac 	.word	0x08013fac
 800713c:	08013f4c 	.word	0x08013f4c
 8007140:	431bde83 	.word	0x431bde83

08007144 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8007144:	b590      	push	{r4, r7, lr}
 8007146:	b093      	sub	sp, #76	@ 0x4c
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800714e:	4b37      	ldr	r3, [pc, #220]	@ (800722c <RCC_SetFlashLatency+0xe8>)
 8007150:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8007154:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007156:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800715a:	4a35      	ldr	r2, [pc, #212]	@ (8007230 <RCC_SetFlashLatency+0xec>)
 800715c:	f107 031c 	add.w	r3, r7, #28
 8007160:	ca07      	ldmia	r2, {r0, r1, r2}
 8007162:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8007166:	4b33      	ldr	r3, [pc, #204]	@ (8007234 <RCC_SetFlashLatency+0xf0>)
 8007168:	f107 040c 	add.w	r4, r7, #12
 800716c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800716e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8007172:	2300      	movs	r3, #0
 8007174:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800717c:	d11a      	bne.n	80071b4 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800717e:	2300      	movs	r3, #0
 8007180:	643b      	str	r3, [r7, #64]	@ 0x40
 8007182:	e013      	b.n	80071ac <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8007184:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007186:	009b      	lsls	r3, r3, #2
 8007188:	3348      	adds	r3, #72	@ 0x48
 800718a:	443b      	add	r3, r7
 800718c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8007190:	687a      	ldr	r2, [r7, #4]
 8007192:	429a      	cmp	r2, r3
 8007194:	d807      	bhi.n	80071a6 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007196:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007198:	009b      	lsls	r3, r3, #2
 800719a:	3348      	adds	r3, #72	@ 0x48
 800719c:	443b      	add	r3, r7
 800719e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80071a2:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 80071a4:	e020      	b.n	80071e8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80071a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071a8:	3301      	adds	r3, #1
 80071aa:	643b      	str	r3, [r7, #64]	@ 0x40
 80071ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071ae:	2b03      	cmp	r3, #3
 80071b0:	d9e8      	bls.n	8007184 <RCC_SetFlashLatency+0x40>
 80071b2:	e019      	b.n	80071e8 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80071b4:	2300      	movs	r3, #0
 80071b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80071b8:	e013      	b.n	80071e2 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80071ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071bc:	009b      	lsls	r3, r3, #2
 80071be:	3348      	adds	r3, #72	@ 0x48
 80071c0:	443b      	add	r3, r7
 80071c2:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80071c6:	687a      	ldr	r2, [r7, #4]
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d807      	bhi.n	80071dc <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80071cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071ce:	009b      	lsls	r3, r3, #2
 80071d0:	3348      	adds	r3, #72	@ 0x48
 80071d2:	443b      	add	r3, r7
 80071d4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80071d8:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 80071da:	e005      	b.n	80071e8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80071dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071de:	3301      	adds	r3, #1
 80071e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80071e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071e4:	2b02      	cmp	r3, #2
 80071e6:	d9e8      	bls.n	80071ba <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80071e8:	4b13      	ldr	r3, [pc, #76]	@ (8007238 <RCC_SetFlashLatency+0xf4>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f023 0207 	bic.w	r2, r3, #7
 80071f0:	4911      	ldr	r1, [pc, #68]	@ (8007238 <RCC_SetFlashLatency+0xf4>)
 80071f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80071f4:	4313      	orrs	r3, r2
 80071f6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80071f8:	f7fd f91a 	bl	8004430 <HAL_GetTick>
 80071fc:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80071fe:	e008      	b.n	8007212 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007200:	f7fd f916 	bl	8004430 <HAL_GetTick>
 8007204:	4602      	mov	r2, r0
 8007206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007208:	1ad3      	subs	r3, r2, r3
 800720a:	2b02      	cmp	r3, #2
 800720c:	d901      	bls.n	8007212 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800720e:	2303      	movs	r3, #3
 8007210:	e007      	b.n	8007222 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007212:	4b09      	ldr	r3, [pc, #36]	@ (8007238 <RCC_SetFlashLatency+0xf4>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f003 0307 	and.w	r3, r3, #7
 800721a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800721c:	429a      	cmp	r2, r3
 800721e:	d1ef      	bne.n	8007200 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8007220:	2300      	movs	r3, #0
}
 8007222:	4618      	mov	r0, r3
 8007224:	374c      	adds	r7, #76	@ 0x4c
 8007226:	46bd      	mov	sp, r7
 8007228:	bd90      	pop	{r4, r7, pc}
 800722a:	bf00      	nop
 800722c:	08012c38 	.word	0x08012c38
 8007230:	08012c48 	.word	0x08012c48
 8007234:	08012c54 	.word	0x08012c54
 8007238:	58004000 	.word	0x58004000

0800723c <LL_RCC_LSE_IsEnabled>:
{
 800723c:	b480      	push	{r7}
 800723e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8007240:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007244:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007248:	f003 0301 	and.w	r3, r3, #1
 800724c:	2b01      	cmp	r3, #1
 800724e:	d101      	bne.n	8007254 <LL_RCC_LSE_IsEnabled+0x18>
 8007250:	2301      	movs	r3, #1
 8007252:	e000      	b.n	8007256 <LL_RCC_LSE_IsEnabled+0x1a>
 8007254:	2300      	movs	r3, #0
}
 8007256:	4618      	mov	r0, r3
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr

08007260 <LL_RCC_LSE_IsReady>:
{
 8007260:	b480      	push	{r7}
 8007262:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8007264:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007268:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800726c:	f003 0302 	and.w	r3, r3, #2
 8007270:	2b02      	cmp	r3, #2
 8007272:	d101      	bne.n	8007278 <LL_RCC_LSE_IsReady+0x18>
 8007274:	2301      	movs	r3, #1
 8007276:	e000      	b.n	800727a <LL_RCC_LSE_IsReady+0x1a>
 8007278:	2300      	movs	r3, #0
}
 800727a:	4618      	mov	r0, r3
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr

08007284 <LL_RCC_SetRFWKPClockSource>:
{
 8007284:	b480      	push	{r7}
 8007286:	b083      	sub	sp, #12
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800728c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007290:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007294:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007298:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	4313      	orrs	r3, r2
 80072a0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 80072a4:	bf00      	nop
 80072a6:	370c      	adds	r7, #12
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr

080072b0 <LL_RCC_SetSMPSClockSource>:
{
 80072b0:	b480      	push	{r7}
 80072b2:	b083      	sub	sp, #12
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80072b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80072bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072be:	f023 0203 	bic.w	r2, r3, #3
 80072c2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	4313      	orrs	r3, r2
 80072ca:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80072cc:	bf00      	nop
 80072ce:	370c      	adds	r7, #12
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr

080072d8 <LL_RCC_SetSMPSPrescaler>:
{
 80072d8:	b480      	push	{r7}
 80072da:	b083      	sub	sp, #12
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80072e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80072e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072e6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80072ea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	4313      	orrs	r3, r2
 80072f2:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80072f4:	bf00      	nop
 80072f6:	370c      	adds	r7, #12
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr

08007300 <LL_RCC_SetUSARTClockSource>:
{
 8007300:	b480      	push	{r7}
 8007302:	b083      	sub	sp, #12
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8007308:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800730c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007310:	f023 0203 	bic.w	r2, r3, #3
 8007314:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	4313      	orrs	r3, r2
 800731c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007320:	bf00      	nop
 8007322:	370c      	adds	r7, #12
 8007324:	46bd      	mov	sp, r7
 8007326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732a:	4770      	bx	lr

0800732c <LL_RCC_SetLPUARTClockSource>:
{
 800732c:	b480      	push	{r7}
 800732e:	b083      	sub	sp, #12
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8007334:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007338:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800733c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007340:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	4313      	orrs	r3, r2
 8007348:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800734c:	bf00      	nop
 800734e:	370c      	adds	r7, #12
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr

08007358 <LL_RCC_SetI2CClockSource>:
{
 8007358:	b480      	push	{r7}
 800735a:	b083      	sub	sp, #12
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8007360:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007364:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	091b      	lsrs	r3, r3, #4
 800736c:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8007370:	43db      	mvns	r3, r3
 8007372:	401a      	ands	r2, r3
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	011b      	lsls	r3, r3, #4
 8007378:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800737c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007380:	4313      	orrs	r3, r2
 8007382:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007386:	bf00      	nop
 8007388:	370c      	adds	r7, #12
 800738a:	46bd      	mov	sp, r7
 800738c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007390:	4770      	bx	lr

08007392 <LL_RCC_SetLPTIMClockSource>:
{
 8007392:	b480      	push	{r7}
 8007394:	b083      	sub	sp, #12
 8007396:	af00      	add	r7, sp, #0
 8007398:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800739a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800739e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	0c1b      	lsrs	r3, r3, #16
 80073a6:	041b      	lsls	r3, r3, #16
 80073a8:	43db      	mvns	r3, r3
 80073aa:	401a      	ands	r2, r3
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	041b      	lsls	r3, r3, #16
 80073b0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80073b4:	4313      	orrs	r3, r2
 80073b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80073ba:	bf00      	nop
 80073bc:	370c      	adds	r7, #12
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr

080073c6 <LL_RCC_SetSAIClockSource>:
{
 80073c6:	b480      	push	{r7}
 80073c8:	b083      	sub	sp, #12
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80073ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80073d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073d6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80073da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	4313      	orrs	r3, r2
 80073e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80073e6:	bf00      	nop
 80073e8:	370c      	adds	r7, #12
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr

080073f2 <LL_RCC_SetRNGClockSource>:
{
 80073f2:	b480      	push	{r7}
 80073f4:	b083      	sub	sp, #12
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80073fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80073fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007402:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8007406:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	4313      	orrs	r3, r2
 800740e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007412:	bf00      	nop
 8007414:	370c      	adds	r7, #12
 8007416:	46bd      	mov	sp, r7
 8007418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741c:	4770      	bx	lr

0800741e <LL_RCC_SetCLK48ClockSource>:
{
 800741e:	b480      	push	{r7}
 8007420:	b083      	sub	sp, #12
 8007422:	af00      	add	r7, sp, #0
 8007424:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8007426:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800742a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800742e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007432:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	4313      	orrs	r3, r2
 800743a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800743e:	bf00      	nop
 8007440:	370c      	adds	r7, #12
 8007442:	46bd      	mov	sp, r7
 8007444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007448:	4770      	bx	lr

0800744a <LL_RCC_SetUSBClockSource>:
{
 800744a:	b580      	push	{r7, lr}
 800744c:	b082      	sub	sp, #8
 800744e:	af00      	add	r7, sp, #0
 8007450:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f7ff ffe3 	bl	800741e <LL_RCC_SetCLK48ClockSource>
}
 8007458:	bf00      	nop
 800745a:	3708      	adds	r7, #8
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}

08007460 <LL_RCC_SetADCClockSource>:
{
 8007460:	b480      	push	{r7}
 8007462:	b083      	sub	sp, #12
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8007468:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800746c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007470:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007474:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	4313      	orrs	r3, r2
 800747c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007480:	bf00      	nop
 8007482:	370c      	adds	r7, #12
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr

0800748c <LL_RCC_SetRTCClockSource>:
{
 800748c:	b480      	push	{r7}
 800748e:	b083      	sub	sp, #12
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8007494:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007498:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800749c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80074a0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	4313      	orrs	r3, r2
 80074a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80074ac:	bf00      	nop
 80074ae:	370c      	adds	r7, #12
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr

080074b8 <LL_RCC_GetRTCClockSource>:
{
 80074b8:	b480      	push	{r7}
 80074ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80074bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80074c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	46bd      	mov	sp, r7
 80074cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d0:	4770      	bx	lr

080074d2 <LL_RCC_ForceBackupDomainReset>:
{
 80074d2:	b480      	push	{r7}
 80074d4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80074d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80074da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074de:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80074e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80074e6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80074ea:	bf00      	nop
 80074ec:	46bd      	mov	sp, r7
 80074ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f2:	4770      	bx	lr

080074f4 <LL_RCC_ReleaseBackupDomainReset>:
{
 80074f4:	b480      	push	{r7}
 80074f6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80074f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80074fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007500:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007504:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007508:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800750c:	bf00      	nop
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr

08007516 <LL_RCC_PLLSAI1_Enable>:
{
 8007516:	b480      	push	{r7}
 8007518:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800751a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007524:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007528:	6013      	str	r3, [r2, #0]
}
 800752a:	bf00      	nop
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr

08007534 <LL_RCC_PLLSAI1_Disable>:
{
 8007534:	b480      	push	{r7}
 8007536:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8007538:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007542:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007546:	6013      	str	r3, [r2, #0]
}
 8007548:	bf00      	nop
 800754a:	46bd      	mov	sp, r7
 800754c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007550:	4770      	bx	lr

08007552 <LL_RCC_PLLSAI1_IsReady>:
{
 8007552:	b480      	push	{r7}
 8007554:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8007556:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007560:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007564:	d101      	bne.n	800756a <LL_RCC_PLLSAI1_IsReady+0x18>
 8007566:	2301      	movs	r3, #1
 8007568:	e000      	b.n	800756c <LL_RCC_PLLSAI1_IsReady+0x1a>
 800756a:	2300      	movs	r3, #0
}
 800756c:	4618      	mov	r0, r3
 800756e:	46bd      	mov	sp, r7
 8007570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007574:	4770      	bx	lr

08007576 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007576:	b580      	push	{r7, lr}
 8007578:	b088      	sub	sp, #32
 800757a:	af00      	add	r7, sp, #0
 800757c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800757e:	2300      	movs	r3, #0
 8007580:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8007582:	2300      	movs	r3, #0
 8007584:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800758e:	2b00      	cmp	r3, #0
 8007590:	d034      	beq.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007596:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800759a:	d021      	beq.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800759c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80075a0:	d81b      	bhi.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x64>
 80075a2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80075a6:	d01d      	beq.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80075a8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80075ac:	d815      	bhi.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x64>
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d00b      	beq.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0x54>
 80075b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80075b6:	d110      	bne.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80075b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075bc:	68db      	ldr	r3, [r3, #12]
 80075be:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80075c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80075c6:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80075c8:	e00d      	b.n	80075e6 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	3304      	adds	r3, #4
 80075ce:	4618      	mov	r0, r3
 80075d0:	f000 f947 	bl	8007862 <RCCEx_PLLSAI1_ConfigNP>
 80075d4:	4603      	mov	r3, r0
 80075d6:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80075d8:	e005      	b.n	80075e6 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80075da:	2301      	movs	r3, #1
 80075dc:	77fb      	strb	r3, [r7, #31]
        break;
 80075de:	e002      	b.n	80075e6 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80075e0:	bf00      	nop
 80075e2:	e000      	b.n	80075e6 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80075e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075e6:	7ffb      	ldrb	r3, [r7, #31]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d105      	bne.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075f0:	4618      	mov	r0, r3
 80075f2:	f7ff fee8 	bl	80073c6 <LL_RCC_SetSAIClockSource>
 80075f6:	e001      	b.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075f8:	7ffb      	ldrb	r3, [r7, #31]
 80075fa:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007604:	2b00      	cmp	r3, #0
 8007606:	d046      	beq.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8007608:	f7ff ff56 	bl	80074b8 <LL_RCC_GetRTCClockSource>
 800760c:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007612:	69ba      	ldr	r2, [r7, #24]
 8007614:	429a      	cmp	r2, r3
 8007616:	d03c      	beq.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8007618:	f7fe fc68 	bl	8005eec <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800761c:	69bb      	ldr	r3, [r7, #24]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d105      	bne.n	800762e <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007626:	4618      	mov	r0, r3
 8007628:	f7ff ff30 	bl	800748c <LL_RCC_SetRTCClockSource>
 800762c:	e02e      	b.n	800768c <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800762e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007632:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007636:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8007638:	f7ff ff4b 	bl	80074d2 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800763c:	f7ff ff5a 	bl	80074f4 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800764a:	4313      	orrs	r3, r2
 800764c:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800764e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8007658:	f7ff fdf0 	bl	800723c <LL_RCC_LSE_IsEnabled>
 800765c:	4603      	mov	r3, r0
 800765e:	2b01      	cmp	r3, #1
 8007660:	d114      	bne.n	800768c <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007662:	f7fc fee5 	bl	8004430 <HAL_GetTick>
 8007666:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8007668:	e00b      	b.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800766a:	f7fc fee1 	bl	8004430 <HAL_GetTick>
 800766e:	4602      	mov	r2, r0
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	1ad3      	subs	r3, r2, r3
 8007674:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007678:	4293      	cmp	r3, r2
 800767a:	d902      	bls.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800767c:	2303      	movs	r3, #3
 800767e:	77fb      	strb	r3, [r7, #31]
              break;
 8007680:	e004      	b.n	800768c <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8007682:	f7ff fded 	bl	8007260 <LL_RCC_LSE_IsReady>
 8007686:	4603      	mov	r3, r0
 8007688:	2b01      	cmp	r3, #1
 800768a:	d1ee      	bne.n	800766a <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800768c:	7ffb      	ldrb	r3, [r7, #31]
 800768e:	77bb      	strb	r3, [r7, #30]
 8007690:	e001      	b.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007692:	7ffb      	ldrb	r3, [r7, #31]
 8007694:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f003 0301 	and.w	r3, r3, #1
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d004      	beq.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	699b      	ldr	r3, [r3, #24]
 80076a6:	4618      	mov	r0, r3
 80076a8:	f7ff fe2a 	bl	8007300 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f003 0302 	and.w	r3, r3, #2
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d004      	beq.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	69db      	ldr	r3, [r3, #28]
 80076bc:	4618      	mov	r0, r3
 80076be:	f7ff fe35 	bl	800732c <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f003 0310 	and.w	r3, r3, #16
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d004      	beq.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076d2:	4618      	mov	r0, r3
 80076d4:	f7ff fe5d 	bl	8007392 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f003 0320 	and.w	r3, r3, #32
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d004      	beq.n	80076ee <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076e8:	4618      	mov	r0, r3
 80076ea:	f7ff fe52 	bl	8007392 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f003 0304 	and.w	r3, r3, #4
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d004      	beq.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6a1b      	ldr	r3, [r3, #32]
 80076fe:	4618      	mov	r0, r3
 8007700:	f7ff fe2a 	bl	8007358 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f003 0308 	and.w	r3, r3, #8
 800770c:	2b00      	cmp	r3, #0
 800770e:	d004      	beq.n	800771a <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007714:	4618      	mov	r0, r3
 8007716:	f7ff fe1f 	bl	8007358 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007722:	2b00      	cmp	r3, #0
 8007724:	d022      	beq.n	800776c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800772a:	4618      	mov	r0, r3
 800772c:	f7ff fe8d 	bl	800744a <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007734:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007738:	d107      	bne.n	800774a <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800773a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800773e:	68db      	ldr	r3, [r3, #12]
 8007740:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007744:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007748:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800774e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007752:	d10b      	bne.n	800776c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	3304      	adds	r3, #4
 8007758:	4618      	mov	r0, r3
 800775a:	f000 f8dd 	bl	8007918 <RCCEx_PLLSAI1_ConfigNQ>
 800775e:	4603      	mov	r3, r0
 8007760:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8007762:	7ffb      	ldrb	r3, [r7, #31]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d001      	beq.n	800776c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8007768:	7ffb      	ldrb	r3, [r7, #31]
 800776a:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007774:	2b00      	cmp	r3, #0
 8007776:	d02b      	beq.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800777c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007780:	d008      	beq.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007786:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800778a:	d003      	beq.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007790:	2b00      	cmp	r3, #0
 8007792:	d105      	bne.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007798:	4618      	mov	r0, r3
 800779a:	f7ff fe2a 	bl	80073f2 <LL_RCC_SetRNGClockSource>
 800779e:	e00a      	b.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80077a8:	60fb      	str	r3, [r7, #12]
 80077aa:	2000      	movs	r0, #0
 80077ac:	f7ff fe21 	bl	80073f2 <LL_RCC_SetRNGClockSource>
 80077b0:	68f8      	ldr	r0, [r7, #12]
 80077b2:	f7ff fe34 	bl	800741e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077ba:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80077be:	d107      	bne.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80077c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80077c4:	68db      	ldr	r3, [r3, #12]
 80077c6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80077ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80077ce:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d022      	beq.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077e0:	4618      	mov	r0, r3
 80077e2:	f7ff fe3d 	bl	8007460 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80077ee:	d107      	bne.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80077f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80077f4:	68db      	ldr	r3, [r3, #12]
 80077f6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80077fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80077fe:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007804:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007808:	d10b      	bne.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	3304      	adds	r3, #4
 800780e:	4618      	mov	r0, r3
 8007810:	f000 f8dd 	bl	80079ce <RCCEx_PLLSAI1_ConfigNR>
 8007814:	4603      	mov	r3, r0
 8007816:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8007818:	7ffb      	ldrb	r3, [r7, #31]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d001      	beq.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800781e:	7ffb      	ldrb	r3, [r7, #31]
 8007820:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800782a:	2b00      	cmp	r3, #0
 800782c:	d004      	beq.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007832:	4618      	mov	r0, r3
 8007834:	f7ff fd26 	bl	8007284 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007840:	2b00      	cmp	r3, #0
 8007842:	d009      	beq.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007848:	4618      	mov	r0, r3
 800784a:	f7ff fd45 	bl	80072d8 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007852:	4618      	mov	r0, r3
 8007854:	f7ff fd2c 	bl	80072b0 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8007858:	7fbb      	ldrb	r3, [r7, #30]
}
 800785a:	4618      	mov	r0, r3
 800785c:	3720      	adds	r7, #32
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}

08007862 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007862:	b580      	push	{r7, lr}
 8007864:	b084      	sub	sp, #16
 8007866:	af00      	add	r7, sp, #0
 8007868:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800786a:	2300      	movs	r3, #0
 800786c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800786e:	f7ff fe61 	bl	8007534 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007872:	f7fc fddd 	bl	8004430 <HAL_GetTick>
 8007876:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007878:	e009      	b.n	800788e <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800787a:	f7fc fdd9 	bl	8004430 <HAL_GetTick>
 800787e:	4602      	mov	r2, r0
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	1ad3      	subs	r3, r2, r3
 8007884:	2b02      	cmp	r3, #2
 8007886:	d902      	bls.n	800788e <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8007888:	2303      	movs	r3, #3
 800788a:	73fb      	strb	r3, [r7, #15]
      break;
 800788c:	e004      	b.n	8007898 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800788e:	f7ff fe60 	bl	8007552 <LL_RCC_PLLSAI1_IsReady>
 8007892:	4603      	mov	r3, r0
 8007894:	2b00      	cmp	r3, #0
 8007896:	d1f0      	bne.n	800787a <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8007898:	7bfb      	ldrb	r3, [r7, #15]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d137      	bne.n	800790e <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800789e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80078a2:	691b      	ldr	r3, [r3, #16]
 80078a4:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	021b      	lsls	r3, r3, #8
 80078ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80078b2:	4313      	orrs	r3, r2
 80078b4:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80078b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80078ba:	691b      	ldr	r3, [r3, #16]
 80078bc:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80078c8:	4313      	orrs	r3, r2
 80078ca:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80078cc:	f7ff fe23 	bl	8007516 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078d0:	f7fc fdae 	bl	8004430 <HAL_GetTick>
 80078d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80078d6:	e009      	b.n	80078ec <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80078d8:	f7fc fdaa 	bl	8004430 <HAL_GetTick>
 80078dc:	4602      	mov	r2, r0
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	1ad3      	subs	r3, r2, r3
 80078e2:	2b02      	cmp	r3, #2
 80078e4:	d902      	bls.n	80078ec <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80078e6:	2303      	movs	r3, #3
 80078e8:	73fb      	strb	r3, [r7, #15]
        break;
 80078ea:	e004      	b.n	80078f6 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80078ec:	f7ff fe31 	bl	8007552 <LL_RCC_PLLSAI1_IsReady>
 80078f0:	4603      	mov	r3, r0
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d1f0      	bne.n	80078d8 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80078f6:	7bfb      	ldrb	r3, [r7, #15]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d108      	bne.n	800790e <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80078fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007900:	691a      	ldr	r2, [r3, #16]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	691b      	ldr	r3, [r3, #16]
 8007906:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800790a:	4313      	orrs	r3, r2
 800790c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800790e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007910:	4618      	mov	r0, r3
 8007912:	3710      	adds	r7, #16
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}

08007918 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b084      	sub	sp, #16
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007920:	2300      	movs	r3, #0
 8007922:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007924:	f7ff fe06 	bl	8007534 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007928:	f7fc fd82 	bl	8004430 <HAL_GetTick>
 800792c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800792e:	e009      	b.n	8007944 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007930:	f7fc fd7e 	bl	8004430 <HAL_GetTick>
 8007934:	4602      	mov	r2, r0
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	1ad3      	subs	r3, r2, r3
 800793a:	2b02      	cmp	r3, #2
 800793c:	d902      	bls.n	8007944 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800793e:	2303      	movs	r3, #3
 8007940:	73fb      	strb	r3, [r7, #15]
      break;
 8007942:	e004      	b.n	800794e <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007944:	f7ff fe05 	bl	8007552 <LL_RCC_PLLSAI1_IsReady>
 8007948:	4603      	mov	r3, r0
 800794a:	2b00      	cmp	r3, #0
 800794c:	d1f0      	bne.n	8007930 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800794e:	7bfb      	ldrb	r3, [r7, #15]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d137      	bne.n	80079c4 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007954:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007958:	691b      	ldr	r3, [r3, #16]
 800795a:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	021b      	lsls	r3, r3, #8
 8007964:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007968:	4313      	orrs	r3, r2
 800796a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800796c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007970:	691b      	ldr	r3, [r3, #16]
 8007972:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	689b      	ldr	r3, [r3, #8]
 800797a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800797e:	4313      	orrs	r3, r2
 8007980:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007982:	f7ff fdc8 	bl	8007516 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007986:	f7fc fd53 	bl	8004430 <HAL_GetTick>
 800798a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800798c:	e009      	b.n	80079a2 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800798e:	f7fc fd4f 	bl	8004430 <HAL_GetTick>
 8007992:	4602      	mov	r2, r0
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	1ad3      	subs	r3, r2, r3
 8007998:	2b02      	cmp	r3, #2
 800799a:	d902      	bls.n	80079a2 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800799c:	2303      	movs	r3, #3
 800799e:	73fb      	strb	r3, [r7, #15]
        break;
 80079a0:	e004      	b.n	80079ac <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80079a2:	f7ff fdd6 	bl	8007552 <LL_RCC_PLLSAI1_IsReady>
 80079a6:	4603      	mov	r3, r0
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	d1f0      	bne.n	800798e <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80079ac:	7bfb      	ldrb	r3, [r7, #15]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d108      	bne.n	80079c4 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80079b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80079b6:	691a      	ldr	r2, [r3, #16]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	691b      	ldr	r3, [r3, #16]
 80079bc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80079c0:	4313      	orrs	r3, r2
 80079c2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80079c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3710      	adds	r7, #16
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}

080079ce <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80079ce:	b580      	push	{r7, lr}
 80079d0:	b084      	sub	sp, #16
 80079d2:	af00      	add	r7, sp, #0
 80079d4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80079d6:	2300      	movs	r3, #0
 80079d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80079da:	f7ff fdab 	bl	8007534 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80079de:	f7fc fd27 	bl	8004430 <HAL_GetTick>
 80079e2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80079e4:	e009      	b.n	80079fa <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80079e6:	f7fc fd23 	bl	8004430 <HAL_GetTick>
 80079ea:	4602      	mov	r2, r0
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	1ad3      	subs	r3, r2, r3
 80079f0:	2b02      	cmp	r3, #2
 80079f2:	d902      	bls.n	80079fa <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80079f4:	2303      	movs	r3, #3
 80079f6:	73fb      	strb	r3, [r7, #15]
      break;
 80079f8:	e004      	b.n	8007a04 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80079fa:	f7ff fdaa 	bl	8007552 <LL_RCC_PLLSAI1_IsReady>
 80079fe:	4603      	mov	r3, r0
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d1f0      	bne.n	80079e6 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8007a04:	7bfb      	ldrb	r3, [r7, #15]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d137      	bne.n	8007a7a <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007a0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007a0e:	691b      	ldr	r3, [r3, #16]
 8007a10:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	021b      	lsls	r3, r3, #8
 8007a1a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8007a22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007a26:	691b      	ldr	r3, [r3, #16]
 8007a28:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	68db      	ldr	r3, [r3, #12]
 8007a30:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007a34:	4313      	orrs	r3, r2
 8007a36:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007a38:	f7ff fd6d 	bl	8007516 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a3c:	f7fc fcf8 	bl	8004430 <HAL_GetTick>
 8007a40:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007a42:	e009      	b.n	8007a58 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007a44:	f7fc fcf4 	bl	8004430 <HAL_GetTick>
 8007a48:	4602      	mov	r2, r0
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	1ad3      	subs	r3, r2, r3
 8007a4e:	2b02      	cmp	r3, #2
 8007a50:	d902      	bls.n	8007a58 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8007a52:	2303      	movs	r3, #3
 8007a54:	73fb      	strb	r3, [r7, #15]
        break;
 8007a56:	e004      	b.n	8007a62 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007a58:	f7ff fd7b 	bl	8007552 <LL_RCC_PLLSAI1_IsReady>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	2b01      	cmp	r3, #1
 8007a60:	d1f0      	bne.n	8007a44 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8007a62:	7bfb      	ldrb	r3, [r7, #15]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d108      	bne.n	8007a7a <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007a68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007a6c:	691a      	ldr	r2, [r3, #16]
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	691b      	ldr	r3, [r3, #16]
 8007a72:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007a76:	4313      	orrs	r3, r2
 8007a78:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3710      	adds	r7, #16
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}

08007a84 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b084      	sub	sp, #16
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d101      	bne.n	8007a96 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8007a92:	2301      	movs	r3, #1
 8007a94:	e09f      	b.n	8007bd6 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8007a9c:	b2db      	uxtb	r3, r3
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d106      	bne.n	8007ab0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f7fc f910 	bl	8003cd0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2202      	movs	r2, #2
 8007ab4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007ab8:	4b49      	ldr	r3, [pc, #292]	@ (8007be0 <HAL_RTC_Init+0x15c>)
 8007aba:	68db      	ldr	r3, [r3, #12]
 8007abc:	f003 0310 	and.w	r3, r3, #16
 8007ac0:	2b10      	cmp	r3, #16
 8007ac2:	d07e      	beq.n	8007bc2 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	22ca      	movs	r2, #202	@ 0xca
 8007aca:	625a      	str	r2, [r3, #36]	@ 0x24
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	2253      	movs	r2, #83	@ 0x53
 8007ad2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f000 fa1d 	bl	8007f14 <RTC_EnterInitMode>
 8007ada:	4603      	mov	r3, r0
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d00a      	beq.n	8007af6 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	22ff      	movs	r2, #255	@ 0xff
 8007ae6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2204      	movs	r2, #4
 8007aec:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 8007af0:	2301      	movs	r3, #1
 8007af2:	73fb      	strb	r3, [r7, #15]
 8007af4:	e067      	b.n	8007bc6 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	689b      	ldr	r3, [r3, #8]
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	6812      	ldr	r2, [r2, #0]
 8007b00:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8007b04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b08:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	6899      	ldr	r1, [r3, #8]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	685a      	ldr	r2, [r3, #4]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	691b      	ldr	r3, [r3, #16]
 8007b18:	431a      	orrs	r2, r3
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	699b      	ldr	r3, [r3, #24]
 8007b1e:	431a      	orrs	r2, r3
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	430a      	orrs	r2, r1
 8007b26:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	687a      	ldr	r2, [r7, #4]
 8007b2e:	68d2      	ldr	r2, [r2, #12]
 8007b30:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	6919      	ldr	r1, [r3, #16]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	689b      	ldr	r3, [r3, #8]
 8007b3c:	041a      	lsls	r2, r3, #16
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	430a      	orrs	r2, r1
 8007b44:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	68da      	ldr	r2, [r3, #12]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007b54:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f022 0203 	bic.w	r2, r2, #3
 8007b64:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	69da      	ldr	r2, [r3, #28]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	695b      	ldr	r3, [r3, #20]
 8007b74:	431a      	orrs	r2, r3
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	430a      	orrs	r2, r1
 8007b7c:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	689b      	ldr	r3, [r3, #8]
 8007b84:	f003 0320 	and.w	r3, r3, #32
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d113      	bne.n	8007bb4 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f000 f99b 	bl	8007ec8 <HAL_RTC_WaitForSynchro>
 8007b92:	4603      	mov	r3, r0
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d00d      	beq.n	8007bb4 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	22ff      	movs	r2, #255	@ 0xff
 8007b9e:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2204      	movs	r2, #4
 8007ba4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2200      	movs	r2, #0
 8007bac:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	e010      	b.n	8007bd6 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	22ff      	movs	r2, #255	@ 0xff
 8007bba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	73fb      	strb	r3, [r7, #15]
 8007bc0:	e001      	b.n	8007bc6 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8007bc6:	7bfb      	ldrb	r3, [r7, #15]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d103      	bne.n	8007bd4 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 8007bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3710      	adds	r7, #16
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}
 8007bde:	bf00      	nop
 8007be0:	40002800 	.word	0x40002800

08007be4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007be4:	b590      	push	{r4, r7, lr}
 8007be6:	b087      	sub	sp, #28
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	60f8      	str	r0, [r7, #12]
 8007bec:	60b9      	str	r1, [r7, #8]
 8007bee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007bf6:	2b01      	cmp	r3, #1
 8007bf8:	d101      	bne.n	8007bfe <HAL_RTC_SetTime+0x1a>
 8007bfa:	2302      	movs	r3, #2
 8007bfc:	e0b2      	b.n	8007d64 <HAL_RTC_SetTime+0x180>
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	2201      	movs	r2, #1
 8007c02:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	2202      	movs	r2, #2
 8007c0a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if (Format == RTC_FORMAT_BIN)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d126      	bne.n	8007c62 <HAL_RTC_SetTime+0x7e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	689b      	ldr	r3, [r3, #8]
 8007c1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d102      	bne.n	8007c28 <HAL_RTC_SetTime+0x44>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	2200      	movs	r2, #0
 8007c26:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	781b      	ldrb	r3, [r3, #0]
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	f000 f99b 	bl	8007f68 <RTC_ByteToBcd2>
 8007c32:	4603      	mov	r3, r0
 8007c34:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	785b      	ldrb	r3, [r3, #1]
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f000 f994 	bl	8007f68 <RTC_ByteToBcd2>
 8007c40:	4603      	mov	r3, r0
 8007c42:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007c44:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	789b      	ldrb	r3, [r3, #2]
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f000 f98c 	bl	8007f68 <RTC_ByteToBcd2>
 8007c50:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8007c52:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	78db      	ldrb	r3, [r3, #3]
 8007c5a:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007c5c:	4313      	orrs	r3, r2
 8007c5e:	617b      	str	r3, [r7, #20]
 8007c60:	e018      	b.n	8007c94 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	689b      	ldr	r3, [r3, #8]
 8007c68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d102      	bne.n	8007c76 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	2200      	movs	r2, #0
 8007c74:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	781b      	ldrb	r3, [r3, #0]
 8007c7a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	785b      	ldrb	r3, [r3, #1]
 8007c80:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8007c82:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8007c84:	68ba      	ldr	r2, [r7, #8]
 8007c86:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8007c88:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	78db      	ldrb	r3, [r3, #3]
 8007c8e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8007c90:	4313      	orrs	r3, r2
 8007c92:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	22ca      	movs	r2, #202	@ 0xca
 8007c9a:	625a      	str	r2, [r3, #36]	@ 0x24
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	2253      	movs	r2, #83	@ 0x53
 8007ca2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007ca4:	68f8      	ldr	r0, [r7, #12]
 8007ca6:	f000 f935 	bl	8007f14 <RTC_EnterInitMode>
 8007caa:	4603      	mov	r3, r0
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d00d      	beq.n	8007ccc <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	22ff      	movs	r2, #255	@ 0xff
 8007cb6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2204      	movs	r2, #4
 8007cbc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8007cc8:	2301      	movs	r3, #1
 8007cca:	e04b      	b.n	8007d64 <HAL_RTC_SetTime+0x180>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8007cd6:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8007cda:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	689a      	ldr	r2, [r3, #8]
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007cea:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	6899      	ldr	r1, [r3, #8]
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	68da      	ldr	r2, [r3, #12]
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	691b      	ldr	r3, [r3, #16]
 8007cfa:	431a      	orrs	r2, r3
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	430a      	orrs	r2, r1
 8007d02:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	68da      	ldr	r2, [r3, #12]
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007d12:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	689b      	ldr	r3, [r3, #8]
 8007d1a:	f003 0320 	and.w	r3, r3, #32
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d113      	bne.n	8007d4a <HAL_RTC_SetTime+0x166>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007d22:	68f8      	ldr	r0, [r7, #12]
 8007d24:	f000 f8d0 	bl	8007ec8 <HAL_RTC_WaitForSynchro>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d00d      	beq.n	8007d4a <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	22ff      	movs	r2, #255	@ 0xff
 8007d34:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2204      	movs	r2, #4
 8007d3a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2200      	movs	r2, #0
 8007d42:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8007d46:	2301      	movs	r3, #1
 8007d48:	e00c      	b.n	8007d64 <HAL_RTC_SetTime+0x180>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	22ff      	movs	r2, #255	@ 0xff
 8007d50:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	2201      	movs	r2, #1
 8007d56:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    __HAL_UNLOCK(hrtc);
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 8007d62:	2300      	movs	r3, #0
  }
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	371c      	adds	r7, #28
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd90      	pop	{r4, r7, pc}

08007d6c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007d6c:	b590      	push	{r4, r7, lr}
 8007d6e:	b087      	sub	sp, #28
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	60f8      	str	r0, [r7, #12]
 8007d74:	60b9      	str	r1, [r7, #8]
 8007d76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007d7e:	2b01      	cmp	r3, #1
 8007d80:	d101      	bne.n	8007d86 <HAL_RTC_SetDate+0x1a>
 8007d82:	2302      	movs	r3, #2
 8007d84:	e09c      	b.n	8007ec0 <HAL_RTC_SetDate+0x154>
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	2201      	movs	r2, #1
 8007d8a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2202      	movs	r2, #2
 8007d92:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d10e      	bne.n	8007dba <HAL_RTC_SetDate+0x4e>
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	785b      	ldrb	r3, [r3, #1]
 8007da0:	f003 0310 	and.w	r3, r3, #16
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d008      	beq.n	8007dba <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	785b      	ldrb	r3, [r3, #1]
 8007dac:	f023 0310 	bic.w	r3, r3, #16
 8007db0:	b2db      	uxtb	r3, r3
 8007db2:	330a      	adds	r3, #10
 8007db4:	b2da      	uxtb	r2, r3
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d11c      	bne.n	8007dfa <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	78db      	ldrb	r3, [r3, #3]
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f000 f8cf 	bl	8007f68 <RTC_ByteToBcd2>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	785b      	ldrb	r3, [r3, #1]
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f000 f8c8 	bl	8007f68 <RTC_ByteToBcd2>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8007ddc:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	789b      	ldrb	r3, [r3, #2]
 8007de2:	4618      	mov	r0, r3
 8007de4:	f000 f8c0 	bl	8007f68 <RTC_ByteToBcd2>
 8007de8:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8007dea:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8007df4:	4313      	orrs	r3, r2
 8007df6:	617b      	str	r3, [r7, #20]
 8007df8:	e00e      	b.n	8007e18 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	78db      	ldrb	r3, [r3, #3]
 8007dfe:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	785b      	ldrb	r3, [r3, #1]
 8007e04:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007e06:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8007e08:	68ba      	ldr	r2, [r7, #8]
 8007e0a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8007e0c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	781b      	ldrb	r3, [r3, #0]
 8007e12:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007e14:	4313      	orrs	r3, r2
 8007e16:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	22ca      	movs	r2, #202	@ 0xca
 8007e1e:	625a      	str	r2, [r3, #36]	@ 0x24
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	2253      	movs	r2, #83	@ 0x53
 8007e26:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007e28:	68f8      	ldr	r0, [r7, #12]
 8007e2a:	f000 f873 	bl	8007f14 <RTC_EnterInitMode>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d00d      	beq.n	8007e50 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	22ff      	movs	r2, #255	@ 0xff
 8007e3a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	2204      	movs	r2, #4
 8007e40:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2200      	movs	r2, #0
 8007e48:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	e037      	b.n	8007ec0 <HAL_RTC_SetDate+0x154>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681a      	ldr	r2, [r3, #0]
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007e5a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007e5e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	68da      	ldr	r2, [r3, #12]
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007e6e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	689b      	ldr	r3, [r3, #8]
 8007e76:	f003 0320 	and.w	r3, r3, #32
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d113      	bne.n	8007ea6 <HAL_RTC_SetDate+0x13a>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007e7e:	68f8      	ldr	r0, [r7, #12]
 8007e80:	f000 f822 	bl	8007ec8 <HAL_RTC_WaitForSynchro>
 8007e84:	4603      	mov	r3, r0
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d00d      	beq.n	8007ea6 <HAL_RTC_SetDate+0x13a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	22ff      	movs	r2, #255	@ 0xff
 8007e90:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	2204      	movs	r2, #4
 8007e96:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	e00c      	b.n	8007ec0 <HAL_RTC_SetDate+0x154>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	22ff      	movs	r2, #255	@ 0xff
 8007eac:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2201      	movs	r2, #1
 8007eb2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 8007ebe:	2300      	movs	r3, #0
  }
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	371c      	adds	r7, #28
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd90      	pop	{r4, r7, pc}

08007ec8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b084      	sub	sp, #16
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	68da      	ldr	r2, [r3, #12]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007ede:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007ee0:	f7fc faa6 	bl	8004430 <HAL_GetTick>
 8007ee4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007ee6:	e009      	b.n	8007efc <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007ee8:	f7fc faa2 	bl	8004430 <HAL_GetTick>
 8007eec:	4602      	mov	r2, r0
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	1ad3      	subs	r3, r2, r3
 8007ef2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007ef6:	d901      	bls.n	8007efc <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8007ef8:	2303      	movs	r3, #3
 8007efa:	e007      	b.n	8007f0c <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	68db      	ldr	r3, [r3, #12]
 8007f02:	f003 0320 	and.w	r3, r3, #32
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d0ee      	beq.n	8007ee8 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8007f0a:	2300      	movs	r3, #0
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3710      	adds	r7, #16
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}

08007f14 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b084      	sub	sp, #16
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	68db      	ldr	r3, [r3, #12]
 8007f22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d119      	bne.n	8007f5e <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f04f 32ff 	mov.w	r2, #4294967295
 8007f32:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007f34:	f7fc fa7c 	bl	8004430 <HAL_GetTick>
 8007f38:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007f3a:	e009      	b.n	8007f50 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007f3c:	f7fc fa78 	bl	8004430 <HAL_GetTick>
 8007f40:	4602      	mov	r2, r0
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	1ad3      	subs	r3, r2, r3
 8007f46:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007f4a:	d901      	bls.n	8007f50 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8007f4c:	2303      	movs	r3, #3
 8007f4e:	e007      	b.n	8007f60 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	68db      	ldr	r3, [r3, #12]
 8007f56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d0ee      	beq.n	8007f3c <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8007f5e:	2300      	movs	r3, #0
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3710      	adds	r7, #16
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}

08007f68 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b085      	sub	sp, #20
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	4603      	mov	r3, r0
 8007f70:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007f72:	2300      	movs	r3, #0
 8007f74:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8007f76:	79fb      	ldrb	r3, [r7, #7]
 8007f78:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 8007f7a:	e005      	b.n	8007f88 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	3301      	adds	r3, #1
 8007f80:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8007f82:	7afb      	ldrb	r3, [r7, #11]
 8007f84:	3b0a      	subs	r3, #10
 8007f86:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 8007f88:	7afb      	ldrb	r3, [r7, #11]
 8007f8a:	2b09      	cmp	r3, #9
 8007f8c:	d8f6      	bhi.n	8007f7c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	b2db      	uxtb	r3, r3
 8007f92:	011b      	lsls	r3, r3, #4
 8007f94:	b2da      	uxtb	r2, r3
 8007f96:	7afb      	ldrb	r3, [r7, #11]
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	b2db      	uxtb	r3, r3
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	3714      	adds	r7, #20
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa6:	4770      	bx	lr

08007fa8 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b086      	sub	sp, #24
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	60f8      	str	r0, [r7, #12]
 8007fb0:	60b9      	str	r1, [r7, #8]
 8007fb2:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007fba:	2b01      	cmp	r3, #1
 8007fbc:	d101      	bne.n	8007fc2 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8007fbe:	2302      	movs	r3, #2
 8007fc0:	e0a8      	b.n	8008114 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2201      	movs	r2, #1
 8007fc6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2202      	movs	r2, #2
 8007fce:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	22ca      	movs	r2, #202	@ 0xca
 8007fd8:	625a      	str	r2, [r3, #36]	@ 0x24
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	2253      	movs	r2, #83	@ 0x53
 8007fe0:	625a      	str	r2, [r3, #36]	@ 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	689b      	ldr	r3, [r3, #8]
 8007fe8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d020      	beq.n	8008032 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8007ff0:	f7fc fa1e 	bl	8004430 <HAL_GetTick>
 8007ff4:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8007ff6:	e015      	b.n	8008024 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007ff8:	f7fc fa1a 	bl	8004430 <HAL_GetTick>
 8007ffc:	4602      	mov	r2, r0
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	1ad3      	subs	r3, r2, r3
 8008002:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008006:	d90d      	bls.n	8008024 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	22ff      	movs	r2, #255	@ 0xff
 800800e:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	2203      	movs	r2, #3
 8008014:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	2200      	movs	r2, #0
 800801c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8008020:	2303      	movs	r3, #3
 8008022:	e077      	b.n	8008114 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	68db      	ldr	r3, [r3, #12]
 800802a:	f003 0304 	and.w	r3, r3, #4
 800802e:	2b00      	cmp	r3, #0
 8008030:	d1e2      	bne.n	8007ff8 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	689a      	ldr	r2, [r3, #8]
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008040:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	68db      	ldr	r3, [r3, #12]
 8008048:	b2da      	uxtb	r2, r3
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8008052:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8008054:	f7fc f9ec 	bl	8004430 <HAL_GetTick>
 8008058:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800805a:	e015      	b.n	8008088 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800805c:	f7fc f9e8 	bl	8004430 <HAL_GetTick>
 8008060:	4602      	mov	r2, r0
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	1ad3      	subs	r3, r2, r3
 8008066:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800806a:	d90d      	bls.n	8008088 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	22ff      	movs	r2, #255	@ 0xff
 8008072:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	2203      	movs	r2, #3
 8008078:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	2200      	movs	r2, #0
 8008080:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8008084:	2303      	movs	r3, #3
 8008086:	e045      	b.n	8008114 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	68db      	ldr	r3, [r3, #12]
 800808e:	f003 0304 	and.w	r3, r3, #4
 8008092:	2b00      	cmp	r3, #0
 8008094:	d0e2      	beq.n	800805c <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	68ba      	ldr	r2, [r7, #8]
 800809c:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	689a      	ldr	r2, [r3, #8]
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f022 0207 	bic.w	r2, r2, #7
 80080ac:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	6899      	ldr	r1, [r3, #8]
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	687a      	ldr	r2, [r7, #4]
 80080ba:	430a      	orrs	r2, r1
 80080bc:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80080be:	4b17      	ldr	r3, [pc, #92]	@ (800811c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80080c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80080c4:	4a15      	ldr	r2, [pc, #84]	@ (800811c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80080c6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80080ca:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80080ce:	4b13      	ldr	r3, [pc, #76]	@ (800811c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	4a12      	ldr	r2, [pc, #72]	@ (800811c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80080d4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80080d8:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	689a      	ldr	r2, [r3, #8]
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80080e8:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	689a      	ldr	r2, [r3, #8]
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80080f8:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	22ff      	movs	r2, #255	@ 0xff
 8008100:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2201      	movs	r2, #1
 8008106:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	2200      	movs	r2, #0
 800810e:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8008112:	2300      	movs	r3, #0
}
 8008114:	4618      	mov	r0, r3
 8008116:	3718      	adds	r7, #24
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}
 800811c:	58000800 	.word	0x58000800

08008120 <LL_RCC_GetUSARTClockSource>:
{
 8008120:	b480      	push	{r7}
 8008122:	b083      	sub	sp, #12
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8008128:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800812c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	4013      	ands	r3, r2
}
 8008134:	4618      	mov	r0, r3
 8008136:	370c      	adds	r7, #12
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr

08008140 <LL_RCC_GetLPUARTClockSource>:
{
 8008140:	b480      	push	{r7}
 8008142:	b083      	sub	sp, #12
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8008148:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800814c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	4013      	ands	r3, r2
}
 8008154:	4618      	mov	r0, r3
 8008156:	370c      	adds	r7, #12
 8008158:	46bd      	mov	sp, r7
 800815a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815e:	4770      	bx	lr

08008160 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b082      	sub	sp, #8
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d101      	bne.n	8008172 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800816e:	2301      	movs	r3, #1
 8008170:	e042      	b.n	80081f8 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008178:	2b00      	cmp	r3, #0
 800817a:	d106      	bne.n	800818a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2200      	movs	r2, #0
 8008180:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f7fb ffe1 	bl	800414c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2224      	movs	r2, #36	@ 0x24
 800818e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	681a      	ldr	r2, [r3, #0]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f022 0201 	bic.w	r2, r2, #1
 80081a0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d002      	beq.n	80081b0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f000 fe32 	bl	8008e14 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f000 fc07 	bl	80089c4 <UART_SetConfig>
 80081b6:	4603      	mov	r3, r0
 80081b8:	2b01      	cmp	r3, #1
 80081ba:	d101      	bne.n	80081c0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80081bc:	2301      	movs	r3, #1
 80081be:	e01b      	b.n	80081f8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	685a      	ldr	r2, [r3, #4]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80081ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	689a      	ldr	r2, [r3, #8]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80081de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	681a      	ldr	r2, [r3, #0]
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f042 0201 	orr.w	r2, r2, #1
 80081ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f000 feb1 	bl	8008f58 <UART_CheckIdleState>
 80081f6:	4603      	mov	r3, r0
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	3708      	adds	r7, #8
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}

08008200 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b08a      	sub	sp, #40	@ 0x28
 8008204:	af00      	add	r7, sp, #0
 8008206:	60f8      	str	r0, [r7, #12]
 8008208:	60b9      	str	r1, [r7, #8]
 800820a:	4613      	mov	r3, r2
 800820c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008214:	2b20      	cmp	r3, #32
 8008216:	d167      	bne.n	80082e8 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d002      	beq.n	8008224 <HAL_UART_Transmit_DMA+0x24>
 800821e:	88fb      	ldrh	r3, [r7, #6]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d101      	bne.n	8008228 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008224:	2301      	movs	r3, #1
 8008226:	e060      	b.n	80082ea <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	68ba      	ldr	r2, [r7, #8]
 800822c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	88fa      	ldrh	r2, [r7, #6]
 8008232:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	88fa      	ldrh	r2, [r7, #6]
 800823a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	2200      	movs	r2, #0
 8008242:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	2221      	movs	r2, #33	@ 0x21
 800824a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008252:	2b00      	cmp	r3, #0
 8008254:	d028      	beq.n	80082a8 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800825a:	4a26      	ldr	r2, [pc, #152]	@ (80082f4 <HAL_UART_Transmit_DMA+0xf4>)
 800825c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008262:	4a25      	ldr	r2, [pc, #148]	@ (80082f8 <HAL_UART_Transmit_DMA+0xf8>)
 8008264:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800826a:	4a24      	ldr	r2, [pc, #144]	@ (80082fc <HAL_UART_Transmit_DMA+0xfc>)
 800826c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008272:	2200      	movs	r2, #0
 8008274:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800827e:	4619      	mov	r1, r3
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	3328      	adds	r3, #40	@ 0x28
 8008286:	461a      	mov	r2, r3
 8008288:	88fb      	ldrh	r3, [r7, #6]
 800828a:	f7fc fb37 	bl	80048fc <HAL_DMA_Start_IT>
 800828e:	4603      	mov	r3, r0
 8008290:	2b00      	cmp	r3, #0
 8008292:	d009      	beq.n	80082a8 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	2210      	movs	r2, #16
 8008298:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	2220      	movs	r2, #32
 80082a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 80082a4:	2301      	movs	r3, #1
 80082a6:	e020      	b.n	80082ea <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	2240      	movs	r2, #64	@ 0x40
 80082ae:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	3308      	adds	r3, #8
 80082b6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	e853 3f00 	ldrex	r3, [r3]
 80082be:	613b      	str	r3, [r7, #16]
   return(result);
 80082c0:	693b      	ldr	r3, [r7, #16]
 80082c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	3308      	adds	r3, #8
 80082ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80082d0:	623a      	str	r2, [r7, #32]
 80082d2:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082d4:	69f9      	ldr	r1, [r7, #28]
 80082d6:	6a3a      	ldr	r2, [r7, #32]
 80082d8:	e841 2300 	strex	r3, r2, [r1]
 80082dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80082de:	69bb      	ldr	r3, [r7, #24]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d1e5      	bne.n	80082b0 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80082e4:	2300      	movs	r3, #0
 80082e6:	e000      	b.n	80082ea <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80082e8:	2302      	movs	r3, #2
  }
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	3728      	adds	r7, #40	@ 0x28
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}
 80082f2:	bf00      	nop
 80082f4:	080092d5 	.word	0x080092d5
 80082f8:	0800936f 	.word	0x0800936f
 80082fc:	0800938b 	.word	0x0800938b

08008300 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b0ba      	sub	sp, #232	@ 0xe8
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	69db      	ldr	r3, [r3, #28]
 800830e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	689b      	ldr	r3, [r3, #8]
 8008322:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008326:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800832a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800832e:	4013      	ands	r3, r2
 8008330:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008334:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008338:	2b00      	cmp	r3, #0
 800833a:	d11b      	bne.n	8008374 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800833c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008340:	f003 0320 	and.w	r3, r3, #32
 8008344:	2b00      	cmp	r3, #0
 8008346:	d015      	beq.n	8008374 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008348:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800834c:	f003 0320 	and.w	r3, r3, #32
 8008350:	2b00      	cmp	r3, #0
 8008352:	d105      	bne.n	8008360 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008354:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008358:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800835c:	2b00      	cmp	r3, #0
 800835e:	d009      	beq.n	8008374 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008364:	2b00      	cmp	r3, #0
 8008366:	f000 8300 	beq.w	800896a <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	4798      	blx	r3
      }
      return;
 8008372:	e2fa      	b.n	800896a <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008374:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008378:	2b00      	cmp	r3, #0
 800837a:	f000 8123 	beq.w	80085c4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800837e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008382:	4b8d      	ldr	r3, [pc, #564]	@ (80085b8 <HAL_UART_IRQHandler+0x2b8>)
 8008384:	4013      	ands	r3, r2
 8008386:	2b00      	cmp	r3, #0
 8008388:	d106      	bne.n	8008398 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800838a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800838e:	4b8b      	ldr	r3, [pc, #556]	@ (80085bc <HAL_UART_IRQHandler+0x2bc>)
 8008390:	4013      	ands	r3, r2
 8008392:	2b00      	cmp	r3, #0
 8008394:	f000 8116 	beq.w	80085c4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008398:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800839c:	f003 0301 	and.w	r3, r3, #1
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d011      	beq.n	80083c8 <HAL_UART_IRQHandler+0xc8>
 80083a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80083a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d00b      	beq.n	80083c8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	2201      	movs	r2, #1
 80083b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083be:	f043 0201 	orr.w	r2, r3, #1
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80083c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083cc:	f003 0302 	and.w	r3, r3, #2
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d011      	beq.n	80083f8 <HAL_UART_IRQHandler+0xf8>
 80083d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80083d8:	f003 0301 	and.w	r3, r3, #1
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d00b      	beq.n	80083f8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	2202      	movs	r2, #2
 80083e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083ee:	f043 0204 	orr.w	r2, r3, #4
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80083f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083fc:	f003 0304 	and.w	r3, r3, #4
 8008400:	2b00      	cmp	r3, #0
 8008402:	d011      	beq.n	8008428 <HAL_UART_IRQHandler+0x128>
 8008404:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008408:	f003 0301 	and.w	r3, r3, #1
 800840c:	2b00      	cmp	r3, #0
 800840e:	d00b      	beq.n	8008428 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	2204      	movs	r2, #4
 8008416:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800841e:	f043 0202 	orr.w	r2, r3, #2
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008428:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800842c:	f003 0308 	and.w	r3, r3, #8
 8008430:	2b00      	cmp	r3, #0
 8008432:	d017      	beq.n	8008464 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008434:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008438:	f003 0320 	and.w	r3, r3, #32
 800843c:	2b00      	cmp	r3, #0
 800843e:	d105      	bne.n	800844c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008440:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008444:	4b5c      	ldr	r3, [pc, #368]	@ (80085b8 <HAL_UART_IRQHandler+0x2b8>)
 8008446:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008448:	2b00      	cmp	r3, #0
 800844a:	d00b      	beq.n	8008464 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	2208      	movs	r2, #8
 8008452:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800845a:	f043 0208 	orr.w	r2, r3, #8
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008464:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008468:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800846c:	2b00      	cmp	r3, #0
 800846e:	d012      	beq.n	8008496 <HAL_UART_IRQHandler+0x196>
 8008470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008474:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008478:	2b00      	cmp	r3, #0
 800847a:	d00c      	beq.n	8008496 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008484:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800848c:	f043 0220 	orr.w	r2, r3, #32
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800849c:	2b00      	cmp	r3, #0
 800849e:	f000 8266 	beq.w	800896e <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80084a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084a6:	f003 0320 	and.w	r3, r3, #32
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d013      	beq.n	80084d6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80084ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80084b2:	f003 0320 	and.w	r3, r3, #32
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d105      	bne.n	80084c6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80084ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80084be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d007      	beq.n	80084d6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d003      	beq.n	80084d6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084dc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	689b      	ldr	r3, [r3, #8]
 80084e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084ea:	2b40      	cmp	r3, #64	@ 0x40
 80084ec:	d005      	beq.n	80084fa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80084ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80084f2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d054      	beq.n	80085a4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f000 fe84 	bl	8009208 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	689b      	ldr	r3, [r3, #8]
 8008506:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800850a:	2b40      	cmp	r3, #64	@ 0x40
 800850c:	d146      	bne.n	800859c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	3308      	adds	r3, #8
 8008514:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008518:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800851c:	e853 3f00 	ldrex	r3, [r3]
 8008520:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008524:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008528:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800852c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	3308      	adds	r3, #8
 8008536:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800853a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800853e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008542:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008546:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800854a:	e841 2300 	strex	r3, r2, [r1]
 800854e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008552:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008556:	2b00      	cmp	r3, #0
 8008558:	d1d9      	bne.n	800850e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008560:	2b00      	cmp	r3, #0
 8008562:	d017      	beq.n	8008594 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800856a:	4a15      	ldr	r2, [pc, #84]	@ (80085c0 <HAL_UART_IRQHandler+0x2c0>)
 800856c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008574:	4618      	mov	r0, r3
 8008576:	f7fc fa9b 	bl	8004ab0 <HAL_DMA_Abort_IT>
 800857a:	4603      	mov	r3, r0
 800857c:	2b00      	cmp	r3, #0
 800857e:	d019      	beq.n	80085b4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008586:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008588:	687a      	ldr	r2, [r7, #4]
 800858a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800858e:	4610      	mov	r0, r2
 8008590:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008592:	e00f      	b.n	80085b4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f000 f9ff 	bl	8008998 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800859a:	e00b      	b.n	80085b4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f000 f9fb 	bl	8008998 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085a2:	e007      	b.n	80085b4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f000 f9f7 	bl	8008998 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2200      	movs	r2, #0
 80085ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80085b2:	e1dc      	b.n	800896e <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085b4:	bf00      	nop
    return;
 80085b6:	e1da      	b.n	800896e <HAL_UART_IRQHandler+0x66e>
 80085b8:	10000001 	.word	0x10000001
 80085bc:	04000120 	.word	0x04000120
 80085c0:	0800940b 	.word	0x0800940b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80085c8:	2b01      	cmp	r3, #1
 80085ca:	f040 8170 	bne.w	80088ae <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80085ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085d2:	f003 0310 	and.w	r3, r3, #16
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	f000 8169 	beq.w	80088ae <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80085dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085e0:	f003 0310 	and.w	r3, r3, #16
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	f000 8162 	beq.w	80088ae <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	2210      	movs	r2, #16
 80085f0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	689b      	ldr	r3, [r3, #8]
 80085f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085fc:	2b40      	cmp	r3, #64	@ 0x40
 80085fe:	f040 80d8 	bne.w	80087b2 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	685b      	ldr	r3, [r3, #4]
 800860c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008610:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008614:	2b00      	cmp	r3, #0
 8008616:	f000 80af 	beq.w	8008778 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008620:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008624:	429a      	cmp	r2, r3
 8008626:	f080 80a7 	bcs.w	8008778 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008630:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f003 0320 	and.w	r3, r3, #32
 8008642:	2b00      	cmp	r3, #0
 8008644:	f040 8087 	bne.w	8008756 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008650:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008654:	e853 3f00 	ldrex	r3, [r3]
 8008658:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800865c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008660:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008664:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	461a      	mov	r2, r3
 800866e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008672:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008676:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800867a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800867e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008682:	e841 2300 	strex	r3, r2, [r1]
 8008686:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800868a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800868e:	2b00      	cmp	r3, #0
 8008690:	d1da      	bne.n	8008648 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	3308      	adds	r3, #8
 8008698:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800869a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800869c:	e853 3f00 	ldrex	r3, [r3]
 80086a0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80086a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80086a4:	f023 0301 	bic.w	r3, r3, #1
 80086a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	3308      	adds	r3, #8
 80086b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80086b6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80086ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086bc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80086be:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80086c2:	e841 2300 	strex	r3, r2, [r1]
 80086c6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80086c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d1e1      	bne.n	8008692 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	3308      	adds	r3, #8
 80086d4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80086d8:	e853 3f00 	ldrex	r3, [r3]
 80086dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80086de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80086e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80086e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	3308      	adds	r3, #8
 80086ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80086f2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80086f4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086f6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80086f8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80086fa:	e841 2300 	strex	r3, r2, [r1]
 80086fe:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008700:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008702:	2b00      	cmp	r3, #0
 8008704:	d1e3      	bne.n	80086ce <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2220      	movs	r2, #32
 800870a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2200      	movs	r2, #0
 8008712:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800871a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800871c:	e853 3f00 	ldrex	r3, [r3]
 8008720:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008722:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008724:	f023 0310 	bic.w	r3, r3, #16
 8008728:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	461a      	mov	r2, r3
 8008732:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008736:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008738:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800873a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800873c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800873e:	e841 2300 	strex	r3, r2, [r1]
 8008742:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008744:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008746:	2b00      	cmp	r3, #0
 8008748:	d1e4      	bne.n	8008714 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008750:	4618      	mov	r0, r3
 8008752:	f7fc f94e 	bl	80049f2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2202      	movs	r2, #2
 800875a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008768:	b29b      	uxth	r3, r3
 800876a:	1ad3      	subs	r3, r2, r3
 800876c:	b29b      	uxth	r3, r3
 800876e:	4619      	mov	r1, r3
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f000 f91b 	bl	80089ac <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008776:	e0fc      	b.n	8008972 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800877e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008782:	429a      	cmp	r2, r3
 8008784:	f040 80f5 	bne.w	8008972 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f003 0320 	and.w	r3, r3, #32
 8008796:	2b20      	cmp	r3, #32
 8008798:	f040 80eb 	bne.w	8008972 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2202      	movs	r2, #2
 80087a0:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80087a8:	4619      	mov	r1, r3
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f000 f8fe 	bl	80089ac <HAL_UARTEx_RxEventCallback>
      return;
 80087b0:	e0df      	b.n	8008972 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80087be:	b29b      	uxth	r3, r3
 80087c0:	1ad3      	subs	r3, r2, r3
 80087c2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80087cc:	b29b      	uxth	r3, r3
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	f000 80d1 	beq.w	8008976 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 80087d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80087d8:	2b00      	cmp	r3, #0
 80087da:	f000 80cc 	beq.w	8008976 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087e6:	e853 3f00 	ldrex	r3, [r3]
 80087ea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80087ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80087f2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	461a      	mov	r2, r3
 80087fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008800:	647b      	str	r3, [r7, #68]	@ 0x44
 8008802:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008804:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008806:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008808:	e841 2300 	strex	r3, r2, [r1]
 800880c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800880e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008810:	2b00      	cmp	r3, #0
 8008812:	d1e4      	bne.n	80087de <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	3308      	adds	r3, #8
 800881a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800881c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800881e:	e853 3f00 	ldrex	r3, [r3]
 8008822:	623b      	str	r3, [r7, #32]
   return(result);
 8008824:	6a3b      	ldr	r3, [r7, #32]
 8008826:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800882a:	f023 0301 	bic.w	r3, r3, #1
 800882e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	3308      	adds	r3, #8
 8008838:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800883c:	633a      	str	r2, [r7, #48]	@ 0x30
 800883e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008840:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008842:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008844:	e841 2300 	strex	r3, r2, [r1]
 8008848:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800884a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800884c:	2b00      	cmp	r3, #0
 800884e:	d1e1      	bne.n	8008814 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2220      	movs	r2, #32
 8008854:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2200      	movs	r2, #0
 800885c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2200      	movs	r2, #0
 8008862:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	e853 3f00 	ldrex	r3, [r3]
 8008870:	60fb      	str	r3, [r7, #12]
   return(result);
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	f023 0310 	bic.w	r3, r3, #16
 8008878:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	461a      	mov	r2, r3
 8008882:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008886:	61fb      	str	r3, [r7, #28]
 8008888:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800888a:	69b9      	ldr	r1, [r7, #24]
 800888c:	69fa      	ldr	r2, [r7, #28]
 800888e:	e841 2300 	strex	r3, r2, [r1]
 8008892:	617b      	str	r3, [r7, #20]
   return(result);
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d1e4      	bne.n	8008864 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2202      	movs	r2, #2
 800889e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80088a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80088a4:	4619      	mov	r1, r3
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f000 f880 	bl	80089ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80088ac:	e063      	b.n	8008976 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80088ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d00e      	beq.n	80088d8 <HAL_UART_IRQHandler+0x5d8>
 80088ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80088be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d008      	beq.n	80088d8 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80088ce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f000 fdd7 	bl	8009484 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80088d6:	e051      	b.n	800897c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80088d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d014      	beq.n	800890e <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80088e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80088e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d105      	bne.n	80088fc <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80088f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80088f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d008      	beq.n	800890e <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008900:	2b00      	cmp	r3, #0
 8008902:	d03a      	beq.n	800897a <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	4798      	blx	r3
    }
    return;
 800890c:	e035      	b.n	800897a <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800890e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008912:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008916:	2b00      	cmp	r3, #0
 8008918:	d009      	beq.n	800892e <HAL_UART_IRQHandler+0x62e>
 800891a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800891e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008922:	2b00      	cmp	r3, #0
 8008924:	d003      	beq.n	800892e <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f000 fd81 	bl	800942e <UART_EndTransmit_IT>
    return;
 800892c:	e026      	b.n	800897c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800892e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008932:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008936:	2b00      	cmp	r3, #0
 8008938:	d009      	beq.n	800894e <HAL_UART_IRQHandler+0x64e>
 800893a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800893e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008942:	2b00      	cmp	r3, #0
 8008944:	d003      	beq.n	800894e <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f000 fdb0 	bl	80094ac <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800894c:	e016      	b.n	800897c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800894e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008952:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008956:	2b00      	cmp	r3, #0
 8008958:	d010      	beq.n	800897c <HAL_UART_IRQHandler+0x67c>
 800895a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800895e:	2b00      	cmp	r3, #0
 8008960:	da0c      	bge.n	800897c <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f000 fd98 	bl	8009498 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008968:	e008      	b.n	800897c <HAL_UART_IRQHandler+0x67c>
      return;
 800896a:	bf00      	nop
 800896c:	e006      	b.n	800897c <HAL_UART_IRQHandler+0x67c>
    return;
 800896e:	bf00      	nop
 8008970:	e004      	b.n	800897c <HAL_UART_IRQHandler+0x67c>
      return;
 8008972:	bf00      	nop
 8008974:	e002      	b.n	800897c <HAL_UART_IRQHandler+0x67c>
      return;
 8008976:	bf00      	nop
 8008978:	e000      	b.n	800897c <HAL_UART_IRQHandler+0x67c>
    return;
 800897a:	bf00      	nop
  }
}
 800897c:	37e8      	adds	r7, #232	@ 0xe8
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}
 8008982:	bf00      	nop

08008984 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008984:	b480      	push	{r7}
 8008986:	b083      	sub	sp, #12
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800898c:	bf00      	nop
 800898e:	370c      	adds	r7, #12
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr

08008998 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008998:	b480      	push	{r7}
 800899a:	b083      	sub	sp, #12
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80089a0:	bf00      	nop
 80089a2:	370c      	adds	r7, #12
 80089a4:	46bd      	mov	sp, r7
 80089a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089aa:	4770      	bx	lr

080089ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80089ac:	b480      	push	{r7}
 80089ae:	b083      	sub	sp, #12
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	460b      	mov	r3, r1
 80089b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80089b8:	bf00      	nop
 80089ba:	370c      	adds	r7, #12
 80089bc:	46bd      	mov	sp, r7
 80089be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c2:	4770      	bx	lr

080089c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80089c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80089c8:	b08c      	sub	sp, #48	@ 0x30
 80089ca:	af00      	add	r7, sp, #0
 80089cc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80089ce:	2300      	movs	r3, #0
 80089d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	689a      	ldr	r2, [r3, #8]
 80089d8:	697b      	ldr	r3, [r7, #20]
 80089da:	691b      	ldr	r3, [r3, #16]
 80089dc:	431a      	orrs	r2, r3
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	695b      	ldr	r3, [r3, #20]
 80089e2:	431a      	orrs	r2, r3
 80089e4:	697b      	ldr	r3, [r7, #20]
 80089e6:	69db      	ldr	r3, [r3, #28]
 80089e8:	4313      	orrs	r3, r2
 80089ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	681a      	ldr	r2, [r3, #0]
 80089f2:	4baf      	ldr	r3, [pc, #700]	@ (8008cb0 <UART_SetConfig+0x2ec>)
 80089f4:	4013      	ands	r3, r2
 80089f6:	697a      	ldr	r2, [r7, #20]
 80089f8:	6812      	ldr	r2, [r2, #0]
 80089fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80089fc:	430b      	orrs	r3, r1
 80089fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	68da      	ldr	r2, [r3, #12]
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	430a      	orrs	r2, r1
 8008a14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	699b      	ldr	r3, [r3, #24]
 8008a1a:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4aa4      	ldr	r2, [pc, #656]	@ (8008cb4 <UART_SetConfig+0x2f0>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d004      	beq.n	8008a30 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	6a1b      	ldr	r3, [r3, #32]
 8008a2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a2c:	4313      	orrs	r3, r2
 8008a2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008a30:	697b      	ldr	r3, [r7, #20]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	689b      	ldr	r3, [r3, #8]
 8008a36:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8008a3a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8008a3e:	697a      	ldr	r2, [r7, #20]
 8008a40:	6812      	ldr	r2, [r2, #0]
 8008a42:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008a44:	430b      	orrs	r3, r1
 8008a46:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a4e:	f023 010f 	bic.w	r1, r3, #15
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	430a      	orrs	r2, r1
 8008a5c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	4a95      	ldr	r2, [pc, #596]	@ (8008cb8 <UART_SetConfig+0x2f4>)
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d125      	bne.n	8008ab4 <UART_SetConfig+0xf0>
 8008a68:	2003      	movs	r0, #3
 8008a6a:	f7ff fb59 	bl	8008120 <LL_RCC_GetUSARTClockSource>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	2b03      	cmp	r3, #3
 8008a72:	d81b      	bhi.n	8008aac <UART_SetConfig+0xe8>
 8008a74:	a201      	add	r2, pc, #4	@ (adr r2, 8008a7c <UART_SetConfig+0xb8>)
 8008a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a7a:	bf00      	nop
 8008a7c:	08008a8d 	.word	0x08008a8d
 8008a80:	08008a9d 	.word	0x08008a9d
 8008a84:	08008a95 	.word	0x08008a95
 8008a88:	08008aa5 	.word	0x08008aa5
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a92:	e042      	b.n	8008b1a <UART_SetConfig+0x156>
 8008a94:	2302      	movs	r3, #2
 8008a96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a9a:	e03e      	b.n	8008b1a <UART_SetConfig+0x156>
 8008a9c:	2304      	movs	r3, #4
 8008a9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008aa2:	e03a      	b.n	8008b1a <UART_SetConfig+0x156>
 8008aa4:	2308      	movs	r3, #8
 8008aa6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008aaa:	e036      	b.n	8008b1a <UART_SetConfig+0x156>
 8008aac:	2310      	movs	r3, #16
 8008aae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ab2:	e032      	b.n	8008b1a <UART_SetConfig+0x156>
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	4a7e      	ldr	r2, [pc, #504]	@ (8008cb4 <UART_SetConfig+0x2f0>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d12a      	bne.n	8008b14 <UART_SetConfig+0x150>
 8008abe:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8008ac2:	f7ff fb3d 	bl	8008140 <LL_RCC_GetLPUARTClockSource>
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008acc:	d01a      	beq.n	8008b04 <UART_SetConfig+0x140>
 8008ace:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008ad2:	d81b      	bhi.n	8008b0c <UART_SetConfig+0x148>
 8008ad4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008ad8:	d00c      	beq.n	8008af4 <UART_SetConfig+0x130>
 8008ada:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008ade:	d815      	bhi.n	8008b0c <UART_SetConfig+0x148>
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d003      	beq.n	8008aec <UART_SetConfig+0x128>
 8008ae4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008ae8:	d008      	beq.n	8008afc <UART_SetConfig+0x138>
 8008aea:	e00f      	b.n	8008b0c <UART_SetConfig+0x148>
 8008aec:	2300      	movs	r3, #0
 8008aee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008af2:	e012      	b.n	8008b1a <UART_SetConfig+0x156>
 8008af4:	2302      	movs	r3, #2
 8008af6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008afa:	e00e      	b.n	8008b1a <UART_SetConfig+0x156>
 8008afc:	2304      	movs	r3, #4
 8008afe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b02:	e00a      	b.n	8008b1a <UART_SetConfig+0x156>
 8008b04:	2308      	movs	r3, #8
 8008b06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b0a:	e006      	b.n	8008b1a <UART_SetConfig+0x156>
 8008b0c:	2310      	movs	r3, #16
 8008b0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b12:	e002      	b.n	8008b1a <UART_SetConfig+0x156>
 8008b14:	2310      	movs	r3, #16
 8008b16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	4a65      	ldr	r2, [pc, #404]	@ (8008cb4 <UART_SetConfig+0x2f0>)
 8008b20:	4293      	cmp	r3, r2
 8008b22:	f040 8097 	bne.w	8008c54 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008b26:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008b2a:	2b08      	cmp	r3, #8
 8008b2c:	d823      	bhi.n	8008b76 <UART_SetConfig+0x1b2>
 8008b2e:	a201      	add	r2, pc, #4	@ (adr r2, 8008b34 <UART_SetConfig+0x170>)
 8008b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b34:	08008b59 	.word	0x08008b59
 8008b38:	08008b77 	.word	0x08008b77
 8008b3c:	08008b61 	.word	0x08008b61
 8008b40:	08008b77 	.word	0x08008b77
 8008b44:	08008b67 	.word	0x08008b67
 8008b48:	08008b77 	.word	0x08008b77
 8008b4c:	08008b77 	.word	0x08008b77
 8008b50:	08008b77 	.word	0x08008b77
 8008b54:	08008b6f 	.word	0x08008b6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b58:	f7fe fa90 	bl	800707c <HAL_RCC_GetPCLK1Freq>
 8008b5c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008b5e:	e010      	b.n	8008b82 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b60:	4b56      	ldr	r3, [pc, #344]	@ (8008cbc <UART_SetConfig+0x2f8>)
 8008b62:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008b64:	e00d      	b.n	8008b82 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b66:	f7fe fa09 	bl	8006f7c <HAL_RCC_GetSysClockFreq>
 8008b6a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008b6c:	e009      	b.n	8008b82 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008b72:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008b74:	e005      	b.n	8008b82 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8008b76:	2300      	movs	r3, #0
 8008b78:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008b80:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	f000 812b 	beq.w	8008de0 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008b8a:	697b      	ldr	r3, [r7, #20]
 8008b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b8e:	4a4c      	ldr	r2, [pc, #304]	@ (8008cc0 <UART_SetConfig+0x2fc>)
 8008b90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b94:	461a      	mov	r2, r3
 8008b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b98:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b9c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	685a      	ldr	r2, [r3, #4]
 8008ba2:	4613      	mov	r3, r2
 8008ba4:	005b      	lsls	r3, r3, #1
 8008ba6:	4413      	add	r3, r2
 8008ba8:	69ba      	ldr	r2, [r7, #24]
 8008baa:	429a      	cmp	r2, r3
 8008bac:	d305      	bcc.n	8008bba <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008bae:	697b      	ldr	r3, [r7, #20]
 8008bb0:	685b      	ldr	r3, [r3, #4]
 8008bb2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008bb4:	69ba      	ldr	r2, [r7, #24]
 8008bb6:	429a      	cmp	r2, r3
 8008bb8:	d903      	bls.n	8008bc2 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8008bba:	2301      	movs	r3, #1
 8008bbc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008bc0:	e10e      	b.n	8008de0 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	60bb      	str	r3, [r7, #8]
 8008bc8:	60fa      	str	r2, [r7, #12]
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bce:	4a3c      	ldr	r2, [pc, #240]	@ (8008cc0 <UART_SetConfig+0x2fc>)
 8008bd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008bd4:	b29b      	uxth	r3, r3
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	603b      	str	r3, [r7, #0]
 8008bda:	607a      	str	r2, [r7, #4]
 8008bdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008be0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008be4:	f7f8 f828 	bl	8000c38 <__aeabi_uldivmod>
 8008be8:	4602      	mov	r2, r0
 8008bea:	460b      	mov	r3, r1
 8008bec:	4610      	mov	r0, r2
 8008bee:	4619      	mov	r1, r3
 8008bf0:	f04f 0200 	mov.w	r2, #0
 8008bf4:	f04f 0300 	mov.w	r3, #0
 8008bf8:	020b      	lsls	r3, r1, #8
 8008bfa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008bfe:	0202      	lsls	r2, r0, #8
 8008c00:	6979      	ldr	r1, [r7, #20]
 8008c02:	6849      	ldr	r1, [r1, #4]
 8008c04:	0849      	lsrs	r1, r1, #1
 8008c06:	2000      	movs	r0, #0
 8008c08:	460c      	mov	r4, r1
 8008c0a:	4605      	mov	r5, r0
 8008c0c:	eb12 0804 	adds.w	r8, r2, r4
 8008c10:	eb43 0905 	adc.w	r9, r3, r5
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	685b      	ldr	r3, [r3, #4]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	469a      	mov	sl, r3
 8008c1c:	4693      	mov	fp, r2
 8008c1e:	4652      	mov	r2, sl
 8008c20:	465b      	mov	r3, fp
 8008c22:	4640      	mov	r0, r8
 8008c24:	4649      	mov	r1, r9
 8008c26:	f7f8 f807 	bl	8000c38 <__aeabi_uldivmod>
 8008c2a:	4602      	mov	r2, r0
 8008c2c:	460b      	mov	r3, r1
 8008c2e:	4613      	mov	r3, r2
 8008c30:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008c32:	6a3b      	ldr	r3, [r7, #32]
 8008c34:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008c38:	d308      	bcc.n	8008c4c <UART_SetConfig+0x288>
 8008c3a:	6a3b      	ldr	r3, [r7, #32]
 8008c3c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008c40:	d204      	bcs.n	8008c4c <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	6a3a      	ldr	r2, [r7, #32]
 8008c48:	60da      	str	r2, [r3, #12]
 8008c4a:	e0c9      	b.n	8008de0 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008c52:	e0c5      	b.n	8008de0 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	69db      	ldr	r3, [r3, #28]
 8008c58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008c5c:	d16d      	bne.n	8008d3a <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8008c5e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008c62:	3b01      	subs	r3, #1
 8008c64:	2b07      	cmp	r3, #7
 8008c66:	d82d      	bhi.n	8008cc4 <UART_SetConfig+0x300>
 8008c68:	a201      	add	r2, pc, #4	@ (adr r2, 8008c70 <UART_SetConfig+0x2ac>)
 8008c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c6e:	bf00      	nop
 8008c70:	08008c91 	.word	0x08008c91
 8008c74:	08008c99 	.word	0x08008c99
 8008c78:	08008cc5 	.word	0x08008cc5
 8008c7c:	08008c9f 	.word	0x08008c9f
 8008c80:	08008cc5 	.word	0x08008cc5
 8008c84:	08008cc5 	.word	0x08008cc5
 8008c88:	08008cc5 	.word	0x08008cc5
 8008c8c:	08008ca7 	.word	0x08008ca7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c90:	f7fe fa0a 	bl	80070a8 <HAL_RCC_GetPCLK2Freq>
 8008c94:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008c96:	e01b      	b.n	8008cd0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008c98:	4b08      	ldr	r3, [pc, #32]	@ (8008cbc <UART_SetConfig+0x2f8>)
 8008c9a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008c9c:	e018      	b.n	8008cd0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c9e:	f7fe f96d 	bl	8006f7c <HAL_RCC_GetSysClockFreq>
 8008ca2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008ca4:	e014      	b.n	8008cd0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ca6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008caa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008cac:	e010      	b.n	8008cd0 <UART_SetConfig+0x30c>
 8008cae:	bf00      	nop
 8008cb0:	cfff69f3 	.word	0xcfff69f3
 8008cb4:	40008000 	.word	0x40008000
 8008cb8:	40013800 	.word	0x40013800
 8008cbc:	00f42400 	.word	0x00f42400
 8008cc0:	08013fec 	.word	0x08013fec
      default:
        pclk = 0U;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008cc8:	2301      	movs	r3, #1
 8008cca:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008cce:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	f000 8084 	beq.w	8008de0 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cdc:	4a4b      	ldr	r2, [pc, #300]	@ (8008e0c <UART_SetConfig+0x448>)
 8008cde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ce2:	461a      	mov	r2, r3
 8008ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ce6:	fbb3 f3f2 	udiv	r3, r3, r2
 8008cea:	005a      	lsls	r2, r3, #1
 8008cec:	697b      	ldr	r3, [r7, #20]
 8008cee:	685b      	ldr	r3, [r3, #4]
 8008cf0:	085b      	lsrs	r3, r3, #1
 8008cf2:	441a      	add	r2, r3
 8008cf4:	697b      	ldr	r3, [r7, #20]
 8008cf6:	685b      	ldr	r3, [r3, #4]
 8008cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cfc:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008cfe:	6a3b      	ldr	r3, [r7, #32]
 8008d00:	2b0f      	cmp	r3, #15
 8008d02:	d916      	bls.n	8008d32 <UART_SetConfig+0x36e>
 8008d04:	6a3b      	ldr	r3, [r7, #32]
 8008d06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d0a:	d212      	bcs.n	8008d32 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008d0c:	6a3b      	ldr	r3, [r7, #32]
 8008d0e:	b29b      	uxth	r3, r3
 8008d10:	f023 030f 	bic.w	r3, r3, #15
 8008d14:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008d16:	6a3b      	ldr	r3, [r7, #32]
 8008d18:	085b      	lsrs	r3, r3, #1
 8008d1a:	b29b      	uxth	r3, r3
 8008d1c:	f003 0307 	and.w	r3, r3, #7
 8008d20:	b29a      	uxth	r2, r3
 8008d22:	8bfb      	ldrh	r3, [r7, #30]
 8008d24:	4313      	orrs	r3, r2
 8008d26:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	8bfa      	ldrh	r2, [r7, #30]
 8008d2e:	60da      	str	r2, [r3, #12]
 8008d30:	e056      	b.n	8008de0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8008d32:	2301      	movs	r3, #1
 8008d34:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008d38:	e052      	b.n	8008de0 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008d3a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008d3e:	3b01      	subs	r3, #1
 8008d40:	2b07      	cmp	r3, #7
 8008d42:	d822      	bhi.n	8008d8a <UART_SetConfig+0x3c6>
 8008d44:	a201      	add	r2, pc, #4	@ (adr r2, 8008d4c <UART_SetConfig+0x388>)
 8008d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d4a:	bf00      	nop
 8008d4c:	08008d6d 	.word	0x08008d6d
 8008d50:	08008d75 	.word	0x08008d75
 8008d54:	08008d8b 	.word	0x08008d8b
 8008d58:	08008d7b 	.word	0x08008d7b
 8008d5c:	08008d8b 	.word	0x08008d8b
 8008d60:	08008d8b 	.word	0x08008d8b
 8008d64:	08008d8b 	.word	0x08008d8b
 8008d68:	08008d83 	.word	0x08008d83
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008d6c:	f7fe f99c 	bl	80070a8 <HAL_RCC_GetPCLK2Freq>
 8008d70:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008d72:	e010      	b.n	8008d96 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008d74:	4b26      	ldr	r3, [pc, #152]	@ (8008e10 <UART_SetConfig+0x44c>)
 8008d76:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008d78:	e00d      	b.n	8008d96 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008d7a:	f7fe f8ff 	bl	8006f7c <HAL_RCC_GetSysClockFreq>
 8008d7e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008d80:	e009      	b.n	8008d96 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008d86:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008d88:	e005      	b.n	8008d96 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008d8e:	2301      	movs	r3, #1
 8008d90:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008d94:	bf00      	nop
    }

    if (pclk != 0U)
 8008d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d021      	beq.n	8008de0 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d9c:	697b      	ldr	r3, [r7, #20]
 8008d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008da0:	4a1a      	ldr	r2, [pc, #104]	@ (8008e0c <UART_SetConfig+0x448>)
 8008da2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008da6:	461a      	mov	r2, r3
 8008da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008daa:	fbb3 f2f2 	udiv	r2, r3, r2
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	685b      	ldr	r3, [r3, #4]
 8008db2:	085b      	lsrs	r3, r3, #1
 8008db4:	441a      	add	r2, r3
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	685b      	ldr	r3, [r3, #4]
 8008dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dbe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008dc0:	6a3b      	ldr	r3, [r7, #32]
 8008dc2:	2b0f      	cmp	r3, #15
 8008dc4:	d909      	bls.n	8008dda <UART_SetConfig+0x416>
 8008dc6:	6a3b      	ldr	r3, [r7, #32]
 8008dc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008dcc:	d205      	bcs.n	8008dda <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008dce:	6a3b      	ldr	r3, [r7, #32]
 8008dd0:	b29a      	uxth	r2, r3
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	60da      	str	r2, [r3, #12]
 8008dd8:	e002      	b.n	8008de0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8008dda:	2301      	movs	r3, #1
 8008ddc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008de0:	697b      	ldr	r3, [r7, #20]
 8008de2:	2201      	movs	r2, #1
 8008de4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008de8:	697b      	ldr	r3, [r7, #20]
 8008dea:	2201      	movs	r2, #1
 8008dec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008df0:	697b      	ldr	r3, [r7, #20]
 8008df2:	2200      	movs	r2, #0
 8008df4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008dfc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	3730      	adds	r7, #48	@ 0x30
 8008e04:	46bd      	mov	sp, r7
 8008e06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008e0a:	bf00      	nop
 8008e0c:	08013fec 	.word	0x08013fec
 8008e10:	00f42400 	.word	0x00f42400

08008e14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008e14:	b480      	push	{r7}
 8008e16:	b083      	sub	sp, #12
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e20:	f003 0308 	and.w	r3, r3, #8
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d00a      	beq.n	8008e3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	685b      	ldr	r3, [r3, #4]
 8008e2e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	430a      	orrs	r2, r1
 8008e3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e42:	f003 0301 	and.w	r3, r3, #1
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d00a      	beq.n	8008e60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	685b      	ldr	r3, [r3, #4]
 8008e50:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	430a      	orrs	r2, r1
 8008e5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e64:	f003 0302 	and.w	r3, r3, #2
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d00a      	beq.n	8008e82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	685b      	ldr	r3, [r3, #4]
 8008e72:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	430a      	orrs	r2, r1
 8008e80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e86:	f003 0304 	and.w	r3, r3, #4
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d00a      	beq.n	8008ea4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	685b      	ldr	r3, [r3, #4]
 8008e94:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	430a      	orrs	r2, r1
 8008ea2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ea8:	f003 0310 	and.w	r3, r3, #16
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d00a      	beq.n	8008ec6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	689b      	ldr	r3, [r3, #8]
 8008eb6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	430a      	orrs	r2, r1
 8008ec4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008eca:	f003 0320 	and.w	r3, r3, #32
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d00a      	beq.n	8008ee8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	689b      	ldr	r3, [r3, #8]
 8008ed8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	430a      	orrs	r2, r1
 8008ee6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008eec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d01a      	beq.n	8008f2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	685b      	ldr	r3, [r3, #4]
 8008efa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	430a      	orrs	r2, r1
 8008f08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008f12:	d10a      	bne.n	8008f2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	685b      	ldr	r3, [r3, #4]
 8008f1a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	430a      	orrs	r2, r1
 8008f28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d00a      	beq.n	8008f4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	685b      	ldr	r3, [r3, #4]
 8008f3c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	430a      	orrs	r2, r1
 8008f4a:	605a      	str	r2, [r3, #4]
  }
}
 8008f4c:	bf00      	nop
 8008f4e:	370c      	adds	r7, #12
 8008f50:	46bd      	mov	sp, r7
 8008f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f56:	4770      	bx	lr

08008f58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b098      	sub	sp, #96	@ 0x60
 8008f5c:	af02      	add	r7, sp, #8
 8008f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2200      	movs	r2, #0
 8008f64:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008f68:	f7fb fa62 	bl	8004430 <HAL_GetTick>
 8008f6c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f003 0308 	and.w	r3, r3, #8
 8008f78:	2b08      	cmp	r3, #8
 8008f7a:	d12f      	bne.n	8008fdc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f7c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008f80:	9300      	str	r3, [sp, #0]
 8008f82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008f84:	2200      	movs	r2, #0
 8008f86:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f000 f88e 	bl	80090ac <UART_WaitOnFlagUntilTimeout>
 8008f90:	4603      	mov	r3, r0
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d022      	beq.n	8008fdc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f9e:	e853 3f00 	ldrex	r3, [r3]
 8008fa2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008fa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fa6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008faa:	653b      	str	r3, [r7, #80]	@ 0x50
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	461a      	mov	r2, r3
 8008fb2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008fb4:	647b      	str	r3, [r7, #68]	@ 0x44
 8008fb6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fb8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008fba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008fbc:	e841 2300 	strex	r3, r2, [r1]
 8008fc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008fc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d1e6      	bne.n	8008f96 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2220      	movs	r2, #32
 8008fcc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008fd8:	2303      	movs	r3, #3
 8008fda:	e063      	b.n	80090a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f003 0304 	and.w	r3, r3, #4
 8008fe6:	2b04      	cmp	r3, #4
 8008fe8:	d149      	bne.n	800907e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008fea:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008fee:	9300      	str	r3, [sp, #0]
 8008ff0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f000 f857 	bl	80090ac <UART_WaitOnFlagUntilTimeout>
 8008ffe:	4603      	mov	r3, r0
 8009000:	2b00      	cmp	r3, #0
 8009002:	d03c      	beq.n	800907e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800900a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800900c:	e853 3f00 	ldrex	r3, [r3]
 8009010:	623b      	str	r3, [r7, #32]
   return(result);
 8009012:	6a3b      	ldr	r3, [r7, #32]
 8009014:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009018:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	461a      	mov	r2, r3
 8009020:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009022:	633b      	str	r3, [r7, #48]	@ 0x30
 8009024:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009026:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009028:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800902a:	e841 2300 	strex	r3, r2, [r1]
 800902e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009032:	2b00      	cmp	r3, #0
 8009034:	d1e6      	bne.n	8009004 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	3308      	adds	r3, #8
 800903c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	e853 3f00 	ldrex	r3, [r3]
 8009044:	60fb      	str	r3, [r7, #12]
   return(result);
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	f023 0301 	bic.w	r3, r3, #1
 800904c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	3308      	adds	r3, #8
 8009054:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009056:	61fa      	str	r2, [r7, #28]
 8009058:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800905a:	69b9      	ldr	r1, [r7, #24]
 800905c:	69fa      	ldr	r2, [r7, #28]
 800905e:	e841 2300 	strex	r3, r2, [r1]
 8009062:	617b      	str	r3, [r7, #20]
   return(result);
 8009064:	697b      	ldr	r3, [r7, #20]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d1e5      	bne.n	8009036 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2220      	movs	r2, #32
 800906e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2200      	movs	r2, #0
 8009076:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800907a:	2303      	movs	r3, #3
 800907c:	e012      	b.n	80090a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2220      	movs	r2, #32
 8009082:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2220      	movs	r2, #32
 800908a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2200      	movs	r2, #0
 8009092:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2200      	movs	r2, #0
 8009098:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2200      	movs	r2, #0
 800909e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80090a2:	2300      	movs	r3, #0
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	3758      	adds	r7, #88	@ 0x58
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}

080090ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b084      	sub	sp, #16
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	60f8      	str	r0, [r7, #12]
 80090b4:	60b9      	str	r1, [r7, #8]
 80090b6:	603b      	str	r3, [r7, #0]
 80090b8:	4613      	mov	r3, r2
 80090ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80090bc:	e04f      	b.n	800915e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80090be:	69bb      	ldr	r3, [r7, #24]
 80090c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090c4:	d04b      	beq.n	800915e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80090c6:	f7fb f9b3 	bl	8004430 <HAL_GetTick>
 80090ca:	4602      	mov	r2, r0
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	1ad3      	subs	r3, r2, r3
 80090d0:	69ba      	ldr	r2, [r7, #24]
 80090d2:	429a      	cmp	r2, r3
 80090d4:	d302      	bcc.n	80090dc <UART_WaitOnFlagUntilTimeout+0x30>
 80090d6:	69bb      	ldr	r3, [r7, #24]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d101      	bne.n	80090e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80090dc:	2303      	movs	r3, #3
 80090de:	e04e      	b.n	800917e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f003 0304 	and.w	r3, r3, #4
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d037      	beq.n	800915e <UART_WaitOnFlagUntilTimeout+0xb2>
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	2b80      	cmp	r3, #128	@ 0x80
 80090f2:	d034      	beq.n	800915e <UART_WaitOnFlagUntilTimeout+0xb2>
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	2b40      	cmp	r3, #64	@ 0x40
 80090f8:	d031      	beq.n	800915e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	69db      	ldr	r3, [r3, #28]
 8009100:	f003 0308 	and.w	r3, r3, #8
 8009104:	2b08      	cmp	r3, #8
 8009106:	d110      	bne.n	800912a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	2208      	movs	r2, #8
 800910e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009110:	68f8      	ldr	r0, [r7, #12]
 8009112:	f000 f879 	bl	8009208 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	2208      	movs	r2, #8
 800911a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	2200      	movs	r2, #0
 8009122:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009126:	2301      	movs	r3, #1
 8009128:	e029      	b.n	800917e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	69db      	ldr	r3, [r3, #28]
 8009130:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009134:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009138:	d111      	bne.n	800915e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009142:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009144:	68f8      	ldr	r0, [r7, #12]
 8009146:	f000 f85f 	bl	8009208 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	2220      	movs	r2, #32
 800914e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	2200      	movs	r2, #0
 8009156:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800915a:	2303      	movs	r3, #3
 800915c:	e00f      	b.n	800917e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	69da      	ldr	r2, [r3, #28]
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	4013      	ands	r3, r2
 8009168:	68ba      	ldr	r2, [r7, #8]
 800916a:	429a      	cmp	r2, r3
 800916c:	bf0c      	ite	eq
 800916e:	2301      	moveq	r3, #1
 8009170:	2300      	movne	r3, #0
 8009172:	b2db      	uxtb	r3, r3
 8009174:	461a      	mov	r2, r3
 8009176:	79fb      	ldrb	r3, [r7, #7]
 8009178:	429a      	cmp	r2, r3
 800917a:	d0a0      	beq.n	80090be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800917c:	2300      	movs	r3, #0
}
 800917e:	4618      	mov	r0, r3
 8009180:	3710      	adds	r7, #16
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}

08009186 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009186:	b480      	push	{r7}
 8009188:	b08f      	sub	sp, #60	@ 0x3c
 800918a:	af00      	add	r7, sp, #0
 800918c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009194:	6a3b      	ldr	r3, [r7, #32]
 8009196:	e853 3f00 	ldrex	r3, [r3]
 800919a:	61fb      	str	r3, [r7, #28]
   return(result);
 800919c:	69fb      	ldr	r3, [r7, #28]
 800919e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80091a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	461a      	mov	r2, r3
 80091aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80091ae:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80091b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80091b4:	e841 2300 	strex	r3, r2, [r1]
 80091b8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80091ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d1e6      	bne.n	800918e <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	3308      	adds	r3, #8
 80091c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	e853 3f00 	ldrex	r3, [r3]
 80091ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80091d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	3308      	adds	r3, #8
 80091de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80091e0:	61ba      	str	r2, [r7, #24]
 80091e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091e4:	6979      	ldr	r1, [r7, #20]
 80091e6:	69ba      	ldr	r2, [r7, #24]
 80091e8:	e841 2300 	strex	r3, r2, [r1]
 80091ec:	613b      	str	r3, [r7, #16]
   return(result);
 80091ee:	693b      	ldr	r3, [r7, #16]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d1e5      	bne.n	80091c0 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2220      	movs	r2, #32
 80091f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80091fc:	bf00      	nop
 80091fe:	373c      	adds	r7, #60	@ 0x3c
 8009200:	46bd      	mov	sp, r7
 8009202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009206:	4770      	bx	lr

08009208 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009208:	b480      	push	{r7}
 800920a:	b095      	sub	sp, #84	@ 0x54
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009216:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009218:	e853 3f00 	ldrex	r3, [r3]
 800921c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800921e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009220:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009224:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	461a      	mov	r2, r3
 800922c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800922e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009230:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009232:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009234:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009236:	e841 2300 	strex	r3, r2, [r1]
 800923a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800923c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800923e:	2b00      	cmp	r3, #0
 8009240:	d1e6      	bne.n	8009210 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	3308      	adds	r3, #8
 8009248:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800924a:	6a3b      	ldr	r3, [r7, #32]
 800924c:	e853 3f00 	ldrex	r3, [r3]
 8009250:	61fb      	str	r3, [r7, #28]
   return(result);
 8009252:	69fb      	ldr	r3, [r7, #28]
 8009254:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009258:	f023 0301 	bic.w	r3, r3, #1
 800925c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	3308      	adds	r3, #8
 8009264:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009266:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009268:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800926a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800926c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800926e:	e841 2300 	strex	r3, r2, [r1]
 8009272:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009276:	2b00      	cmp	r3, #0
 8009278:	d1e3      	bne.n	8009242 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800927e:	2b01      	cmp	r3, #1
 8009280:	d118      	bne.n	80092b4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	e853 3f00 	ldrex	r3, [r3]
 800928e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	f023 0310 	bic.w	r3, r3, #16
 8009296:	647b      	str	r3, [r7, #68]	@ 0x44
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	461a      	mov	r2, r3
 800929e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80092a0:	61bb      	str	r3, [r7, #24]
 80092a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092a4:	6979      	ldr	r1, [r7, #20]
 80092a6:	69ba      	ldr	r2, [r7, #24]
 80092a8:	e841 2300 	strex	r3, r2, [r1]
 80092ac:	613b      	str	r3, [r7, #16]
   return(result);
 80092ae:	693b      	ldr	r3, [r7, #16]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d1e6      	bne.n	8009282 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2220      	movs	r2, #32
 80092b8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2200      	movs	r2, #0
 80092c0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2200      	movs	r2, #0
 80092c6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80092c8:	bf00      	nop
 80092ca:	3754      	adds	r7, #84	@ 0x54
 80092cc:	46bd      	mov	sp, r7
 80092ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d2:	4770      	bx	lr

080092d4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b090      	sub	sp, #64	@ 0x40
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092e0:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f003 0320 	and.w	r3, r3, #32
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d137      	bne.n	8009360 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80092f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092f2:	2200      	movs	r2, #0
 80092f4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80092f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	3308      	adds	r3, #8
 80092fe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009302:	e853 3f00 	ldrex	r3, [r3]
 8009306:	623b      	str	r3, [r7, #32]
   return(result);
 8009308:	6a3b      	ldr	r3, [r7, #32]
 800930a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800930e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009310:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	3308      	adds	r3, #8
 8009316:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009318:	633a      	str	r2, [r7, #48]	@ 0x30
 800931a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800931c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800931e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009320:	e841 2300 	strex	r3, r2, [r1]
 8009324:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009328:	2b00      	cmp	r3, #0
 800932a:	d1e5      	bne.n	80092f8 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800932c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009332:	693b      	ldr	r3, [r7, #16]
 8009334:	e853 3f00 	ldrex	r3, [r3]
 8009338:	60fb      	str	r3, [r7, #12]
   return(result);
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009340:	637b      	str	r3, [r7, #52]	@ 0x34
 8009342:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	461a      	mov	r2, r3
 8009348:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800934a:	61fb      	str	r3, [r7, #28]
 800934c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800934e:	69b9      	ldr	r1, [r7, #24]
 8009350:	69fa      	ldr	r2, [r7, #28]
 8009352:	e841 2300 	strex	r3, r2, [r1]
 8009356:	617b      	str	r3, [r7, #20]
   return(result);
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d1e6      	bne.n	800932c <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800935e:	e002      	b.n	8009366 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009360:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8009362:	f7fa fa0f 	bl	8003784 <HAL_UART_TxCpltCallback>
}
 8009366:	bf00      	nop
 8009368:	3740      	adds	r7, #64	@ 0x40
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}

0800936e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800936e:	b580      	push	{r7, lr}
 8009370:	b084      	sub	sp, #16
 8009372:	af00      	add	r7, sp, #0
 8009374:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800937a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800937c:	68f8      	ldr	r0, [r7, #12]
 800937e:	f7ff fb01 	bl	8008984 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009382:	bf00      	nop
 8009384:	3710      	adds	r7, #16
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}

0800938a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800938a:	b580      	push	{r7, lr}
 800938c:	b086      	sub	sp, #24
 800938e:	af00      	add	r7, sp, #0
 8009390:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009396:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009398:	697b      	ldr	r3, [r7, #20]
 800939a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800939e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80093a6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80093a8:	697b      	ldr	r3, [r7, #20]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	689b      	ldr	r3, [r3, #8]
 80093ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80093b2:	2b80      	cmp	r3, #128	@ 0x80
 80093b4:	d109      	bne.n	80093ca <UART_DMAError+0x40>
 80093b6:	693b      	ldr	r3, [r7, #16]
 80093b8:	2b21      	cmp	r3, #33	@ 0x21
 80093ba:	d106      	bne.n	80093ca <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80093bc:	697b      	ldr	r3, [r7, #20]
 80093be:	2200      	movs	r2, #0
 80093c0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 80093c4:	6978      	ldr	r0, [r7, #20]
 80093c6:	f7ff fede 	bl	8009186 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80093ca:	697b      	ldr	r3, [r7, #20]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	689b      	ldr	r3, [r3, #8]
 80093d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093d4:	2b40      	cmp	r3, #64	@ 0x40
 80093d6:	d109      	bne.n	80093ec <UART_DMAError+0x62>
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	2b22      	cmp	r3, #34	@ 0x22
 80093dc:	d106      	bne.n	80093ec <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80093de:	697b      	ldr	r3, [r7, #20]
 80093e0:	2200      	movs	r2, #0
 80093e2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 80093e6:	6978      	ldr	r0, [r7, #20]
 80093e8:	f7ff ff0e 	bl	8009208 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80093ec:	697b      	ldr	r3, [r7, #20]
 80093ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093f2:	f043 0210 	orr.w	r2, r3, #16
 80093f6:	697b      	ldr	r3, [r7, #20]
 80093f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80093fc:	6978      	ldr	r0, [r7, #20]
 80093fe:	f7ff facb 	bl	8008998 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009402:	bf00      	nop
 8009404:	3718      	adds	r7, #24
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}

0800940a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800940a:	b580      	push	{r7, lr}
 800940c:	b084      	sub	sp, #16
 800940e:	af00      	add	r7, sp, #0
 8009410:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009416:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	2200      	movs	r2, #0
 800941c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009420:	68f8      	ldr	r0, [r7, #12]
 8009422:	f7ff fab9 	bl	8008998 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009426:	bf00      	nop
 8009428:	3710      	adds	r7, #16
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}

0800942e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800942e:	b580      	push	{r7, lr}
 8009430:	b088      	sub	sp, #32
 8009432:	af00      	add	r7, sp, #0
 8009434:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	e853 3f00 	ldrex	r3, [r3]
 8009442:	60bb      	str	r3, [r7, #8]
   return(result);
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800944a:	61fb      	str	r3, [r7, #28]
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	461a      	mov	r2, r3
 8009452:	69fb      	ldr	r3, [r7, #28]
 8009454:	61bb      	str	r3, [r7, #24]
 8009456:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009458:	6979      	ldr	r1, [r7, #20]
 800945a:	69ba      	ldr	r2, [r7, #24]
 800945c:	e841 2300 	strex	r3, r2, [r1]
 8009460:	613b      	str	r3, [r7, #16]
   return(result);
 8009462:	693b      	ldr	r3, [r7, #16]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d1e6      	bne.n	8009436 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2220      	movs	r2, #32
 800946c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2200      	movs	r2, #0
 8009474:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f7fa f984 	bl	8003784 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800947c:	bf00      	nop
 800947e:	3720      	adds	r7, #32
 8009480:	46bd      	mov	sp, r7
 8009482:	bd80      	pop	{r7, pc}

08009484 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009484:	b480      	push	{r7}
 8009486:	b083      	sub	sp, #12
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800948c:	bf00      	nop
 800948e:	370c      	adds	r7, #12
 8009490:	46bd      	mov	sp, r7
 8009492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009496:	4770      	bx	lr

08009498 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009498:	b480      	push	{r7}
 800949a:	b083      	sub	sp, #12
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80094a0:	bf00      	nop
 80094a2:	370c      	adds	r7, #12
 80094a4:	46bd      	mov	sp, r7
 80094a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094aa:	4770      	bx	lr

080094ac <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80094ac:	b480      	push	{r7}
 80094ae:	b083      	sub	sp, #12
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80094b4:	bf00      	nop
 80094b6:	370c      	adds	r7, #12
 80094b8:	46bd      	mov	sp, r7
 80094ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094be:	4770      	bx	lr

080094c0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80094c0:	b480      	push	{r7}
 80094c2:	b085      	sub	sp, #20
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80094ce:	2b01      	cmp	r3, #1
 80094d0:	d101      	bne.n	80094d6 <HAL_UARTEx_DisableFifoMode+0x16>
 80094d2:	2302      	movs	r3, #2
 80094d4:	e027      	b.n	8009526 <HAL_UARTEx_DisableFifoMode+0x66>
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2201      	movs	r2, #1
 80094da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2224      	movs	r2, #36	@ 0x24
 80094e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	681a      	ldr	r2, [r3, #0]
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	f022 0201 	bic.w	r2, r2, #1
 80094fc:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009504:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2200      	movs	r2, #0
 800950a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	68fa      	ldr	r2, [r7, #12]
 8009512:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2220      	movs	r2, #32
 8009518:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2200      	movs	r2, #0
 8009520:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009524:	2300      	movs	r3, #0
}
 8009526:	4618      	mov	r0, r3
 8009528:	3714      	adds	r7, #20
 800952a:	46bd      	mov	sp, r7
 800952c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009530:	4770      	bx	lr

08009532 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009532:	b580      	push	{r7, lr}
 8009534:	b084      	sub	sp, #16
 8009536:	af00      	add	r7, sp, #0
 8009538:	6078      	str	r0, [r7, #4]
 800953a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009542:	2b01      	cmp	r3, #1
 8009544:	d101      	bne.n	800954a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009546:	2302      	movs	r3, #2
 8009548:	e02d      	b.n	80095a6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2201      	movs	r2, #1
 800954e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2224      	movs	r2, #36	@ 0x24
 8009556:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	681a      	ldr	r2, [r3, #0]
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	f022 0201 	bic.w	r2, r2, #1
 8009570:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	689b      	ldr	r3, [r3, #8]
 8009578:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	683a      	ldr	r2, [r7, #0]
 8009582:	430a      	orrs	r2, r1
 8009584:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f000 f850 	bl	800962c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	68fa      	ldr	r2, [r7, #12]
 8009592:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2220      	movs	r2, #32
 8009598:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2200      	movs	r2, #0
 80095a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80095a4:	2300      	movs	r3, #0
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3710      	adds	r7, #16
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}

080095ae <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80095ae:	b580      	push	{r7, lr}
 80095b0:	b084      	sub	sp, #16
 80095b2:	af00      	add	r7, sp, #0
 80095b4:	6078      	str	r0, [r7, #4]
 80095b6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80095be:	2b01      	cmp	r3, #1
 80095c0:	d101      	bne.n	80095c6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80095c2:	2302      	movs	r3, #2
 80095c4:	e02d      	b.n	8009622 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2201      	movs	r2, #1
 80095ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2224      	movs	r2, #36	@ 0x24
 80095d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	681a      	ldr	r2, [r3, #0]
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f022 0201 	bic.w	r2, r2, #1
 80095ec:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	689b      	ldr	r3, [r3, #8]
 80095f4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	683a      	ldr	r2, [r7, #0]
 80095fe:	430a      	orrs	r2, r1
 8009600:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f000 f812 	bl	800962c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	68fa      	ldr	r2, [r7, #12]
 800960e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2220      	movs	r2, #32
 8009614:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2200      	movs	r2, #0
 800961c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009620:	2300      	movs	r3, #0
}
 8009622:	4618      	mov	r0, r3
 8009624:	3710      	adds	r7, #16
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}
	...

0800962c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800962c:	b480      	push	{r7}
 800962e:	b085      	sub	sp, #20
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009638:	2b00      	cmp	r3, #0
 800963a:	d108      	bne.n	800964e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2201      	movs	r2, #1
 8009640:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2201      	movs	r2, #1
 8009648:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800964c:	e031      	b.n	80096b2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800964e:	2308      	movs	r3, #8
 8009650:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009652:	2308      	movs	r3, #8
 8009654:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	689b      	ldr	r3, [r3, #8]
 800965c:	0e5b      	lsrs	r3, r3, #25
 800965e:	b2db      	uxtb	r3, r3
 8009660:	f003 0307 	and.w	r3, r3, #7
 8009664:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	689b      	ldr	r3, [r3, #8]
 800966c:	0f5b      	lsrs	r3, r3, #29
 800966e:	b2db      	uxtb	r3, r3
 8009670:	f003 0307 	and.w	r3, r3, #7
 8009674:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009676:	7bbb      	ldrb	r3, [r7, #14]
 8009678:	7b3a      	ldrb	r2, [r7, #12]
 800967a:	4911      	ldr	r1, [pc, #68]	@ (80096c0 <UARTEx_SetNbDataToProcess+0x94>)
 800967c:	5c8a      	ldrb	r2, [r1, r2]
 800967e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009682:	7b3a      	ldrb	r2, [r7, #12]
 8009684:	490f      	ldr	r1, [pc, #60]	@ (80096c4 <UARTEx_SetNbDataToProcess+0x98>)
 8009686:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009688:	fb93 f3f2 	sdiv	r3, r3, r2
 800968c:	b29a      	uxth	r2, r3
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009694:	7bfb      	ldrb	r3, [r7, #15]
 8009696:	7b7a      	ldrb	r2, [r7, #13]
 8009698:	4909      	ldr	r1, [pc, #36]	@ (80096c0 <UARTEx_SetNbDataToProcess+0x94>)
 800969a:	5c8a      	ldrb	r2, [r1, r2]
 800969c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80096a0:	7b7a      	ldrb	r2, [r7, #13]
 80096a2:	4908      	ldr	r1, [pc, #32]	@ (80096c4 <UARTEx_SetNbDataToProcess+0x98>)
 80096a4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80096a6:	fb93 f3f2 	sdiv	r3, r3, r2
 80096aa:	b29a      	uxth	r2, r3
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80096b2:	bf00      	nop
 80096b4:	3714      	adds	r7, #20
 80096b6:	46bd      	mov	sp, r7
 80096b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096bc:	4770      	bx	lr
 80096be:	bf00      	nop
 80096c0:	08014004 	.word	0x08014004
 80096c4:	0801400c 	.word	0x0801400c

080096c8 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b088      	sub	sp, #32
 80096cc:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80096ce:	2300      	movs	r3, #0
 80096d0:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80096d2:	f107 0308 	add.w	r3, r7, #8
 80096d6:	2218      	movs	r2, #24
 80096d8:	2100      	movs	r1, #0
 80096da:	4618      	mov	r0, r3
 80096dc:	f001 f92d 	bl	800a93a <Osal_MemSet>
  rq.ogf = 0x3f;
 80096e0:	233f      	movs	r3, #63	@ 0x3f
 80096e2:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 80096e4:	2381      	movs	r3, #129	@ 0x81
 80096e6:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80096e8:	1dfb      	adds	r3, r7, #7
 80096ea:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80096ec:	2301      	movs	r3, #1
 80096ee:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80096f0:	f107 0308 	add.w	r3, r7, #8
 80096f4:	2100      	movs	r1, #0
 80096f6:	4618      	mov	r0, r3
 80096f8:	f001 fba8 	bl	800ae4c <hci_send_req>
 80096fc:	4603      	mov	r3, r0
 80096fe:	2b00      	cmp	r3, #0
 8009700:	da01      	bge.n	8009706 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8009702:	23ff      	movs	r3, #255	@ 0xff
 8009704:	e000      	b.n	8009708 <aci_gap_set_non_discoverable+0x40>
  return status;
 8009706:	79fb      	ldrb	r3, [r7, #7]
}
 8009708:	4618      	mov	r0, r3
 800970a:	3720      	adds	r7, #32
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}

08009710 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 8009710:	b5b0      	push	{r4, r5, r7, lr}
 8009712:	b0ce      	sub	sp, #312	@ 0x138
 8009714:	af00      	add	r7, sp, #0
 8009716:	4605      	mov	r5, r0
 8009718:	460c      	mov	r4, r1
 800971a:	4610      	mov	r0, r2
 800971c:	4619      	mov	r1, r3
 800971e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009722:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8009726:	462a      	mov	r2, r5
 8009728:	701a      	strb	r2, [r3, #0]
 800972a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800972e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8009732:	4622      	mov	r2, r4
 8009734:	801a      	strh	r2, [r3, #0]
 8009736:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800973a:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 800973e:	4602      	mov	r2, r0
 8009740:	801a      	strh	r2, [r3, #0]
 8009742:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009746:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800974a:	460a      	mov	r2, r1
 800974c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800974e:	f107 0310 	add.w	r3, r7, #16
 8009752:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8009756:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800975a:	3308      	adds	r3, #8
 800975c:	f107 0210 	add.w	r2, r7, #16
 8009760:	4413      	add	r3, r2
 8009762:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8009766:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800976a:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 800976e:	4413      	add	r3, r2
 8009770:	3309      	adds	r3, #9
 8009772:	f107 0210 	add.w	r2, r7, #16
 8009776:	4413      	add	r3, r2
 8009778:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800977c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009780:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8009784:	2200      	movs	r2, #0
 8009786:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009788:	2300      	movs	r3, #0
 800978a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 800978e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009792:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8009796:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 800979a:	7812      	ldrb	r2, [r2, #0]
 800979c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800979e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80097a2:	3301      	adds	r3, #1
 80097a4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 80097a8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80097ac:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80097b0:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 80097b4:	8812      	ldrh	r2, [r2, #0]
 80097b6:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 80097ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80097be:	3302      	adds	r3, #2
 80097c0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 80097c4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80097c8:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80097cc:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 80097d0:	8812      	ldrh	r2, [r2, #0]
 80097d2:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 80097d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80097da:	3302      	adds	r3, #2
 80097dc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 80097e0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80097e4:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80097e8:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 80097ec:	7812      	ldrb	r2, [r2, #0]
 80097ee:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80097f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80097f4:	3301      	adds	r3, #1
 80097f6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 80097fa:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80097fe:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8009802:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8009804:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009808:	3301      	adds	r3, #1
 800980a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800980e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009812:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8009816:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8009818:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800981c:	3301      	adds	r3, #1
 800981e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8009822:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009826:	3308      	adds	r3, #8
 8009828:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800982c:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 8009830:	4618      	mov	r0, r3
 8009832:	f001 f872 	bl	800a91a <Osal_MemCpy>
    index_input += Local_Name_Length;
 8009836:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800983a:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800983e:	4413      	add	r3, r2
 8009840:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8009844:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009848:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800984c:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800984e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009852:	3301      	adds	r3, #1
 8009854:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8009858:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800985c:	3301      	adds	r3, #1
 800985e:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8009862:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 8009866:	4618      	mov	r0, r3
 8009868:	f001 f857 	bl	800a91a <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800986c:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8009870:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8009874:	4413      	add	r3, r2
 8009876:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 800987a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800987e:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 8009882:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8009884:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009888:	3302      	adds	r3, #2
 800988a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 800988e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009892:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 8009896:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8009898:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800989c:	3302      	adds	r3, #2
 800989e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80098a2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80098a6:	2218      	movs	r2, #24
 80098a8:	2100      	movs	r1, #0
 80098aa:	4618      	mov	r0, r3
 80098ac:	f001 f845 	bl	800a93a <Osal_MemSet>
  rq.ogf = 0x3f;
 80098b0:	233f      	movs	r3, #63	@ 0x3f
 80098b2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 80098b6:	2383      	movs	r3, #131	@ 0x83
 80098b8:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80098bc:	f107 0310 	add.w	r3, r7, #16
 80098c0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80098c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80098c8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80098cc:	f107 030f 	add.w	r3, r7, #15
 80098d0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80098d4:	2301      	movs	r3, #1
 80098d6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80098da:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80098de:	2100      	movs	r1, #0
 80098e0:	4618      	mov	r0, r3
 80098e2:	f001 fab3 	bl	800ae4c <hci_send_req>
 80098e6:	4603      	mov	r3, r0
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	da01      	bge.n	80098f0 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 80098ec:	23ff      	movs	r3, #255	@ 0xff
 80098ee:	e004      	b.n	80098fa <aci_gap_set_discoverable+0x1ea>
  return status;
 80098f0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80098f4:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80098f8:	781b      	ldrb	r3, [r3, #0]
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8009900:	46bd      	mov	sp, r7
 8009902:	bdb0      	pop	{r4, r5, r7, pc}

08009904 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b0cc      	sub	sp, #304	@ 0x130
 8009908:	af00      	add	r7, sp, #0
 800990a:	4602      	mov	r2, r0
 800990c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009910:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8009914:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8009916:	f107 0310 	add.w	r3, r7, #16
 800991a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800991e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009922:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009926:	2200      	movs	r2, #0
 8009928:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800992a:	2300      	movs	r3, #0
 800992c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 8009930:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009934:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009938:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800993c:	7812      	ldrb	r2, [r2, #0]
 800993e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009940:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009944:	3301      	adds	r3, #1
 8009946:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800994a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800994e:	2218      	movs	r2, #24
 8009950:	2100      	movs	r1, #0
 8009952:	4618      	mov	r0, r3
 8009954:	f000 fff1 	bl	800a93a <Osal_MemSet>
  rq.ogf = 0x3f;
 8009958:	233f      	movs	r3, #63	@ 0x3f
 800995a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 800995e:	2385      	movs	r3, #133	@ 0x85
 8009960:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009964:	f107 0310 	add.w	r3, r7, #16
 8009968:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800996c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009970:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8009974:	f107 030f 	add.w	r3, r7, #15
 8009978:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800997c:	2301      	movs	r3, #1
 800997e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009982:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009986:	2100      	movs	r1, #0
 8009988:	4618      	mov	r0, r3
 800998a:	f001 fa5f 	bl	800ae4c <hci_send_req>
 800998e:	4603      	mov	r3, r0
 8009990:	2b00      	cmp	r3, #0
 8009992:	da01      	bge.n	8009998 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8009994:	23ff      	movs	r3, #255	@ 0xff
 8009996:	e004      	b.n	80099a2 <aci_gap_set_io_capability+0x9e>
  return status;
 8009998:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800999c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80099a0:	781b      	ldrb	r3, [r3, #0]
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}

080099ac <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 80099ac:	b5b0      	push	{r4, r5, r7, lr}
 80099ae:	b0cc      	sub	sp, #304	@ 0x130
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	4605      	mov	r5, r0
 80099b4:	460c      	mov	r4, r1
 80099b6:	4610      	mov	r0, r2
 80099b8:	4619      	mov	r1, r3
 80099ba:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80099be:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80099c2:	462a      	mov	r2, r5
 80099c4:	701a      	strb	r2, [r3, #0]
 80099c6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80099ca:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80099ce:	4622      	mov	r2, r4
 80099d0:	701a      	strb	r2, [r3, #0]
 80099d2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80099d6:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 80099da:	4602      	mov	r2, r0
 80099dc:	701a      	strb	r2, [r3, #0]
 80099de:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80099e2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80099e6:	460a      	mov	r2, r1
 80099e8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 80099ea:	f107 0310 	add.w	r3, r7, #16
 80099ee:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80099f2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80099f6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80099fa:	2200      	movs	r2, #0
 80099fc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80099fe:	2300      	movs	r3, #0
 8009a00:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8009a04:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009a08:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009a0c:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8009a10:	7812      	ldrb	r2, [r2, #0]
 8009a12:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009a14:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009a18:	3301      	adds	r3, #1
 8009a1a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 8009a1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009a22:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009a26:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8009a2a:	7812      	ldrb	r2, [r2, #0]
 8009a2c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009a2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009a32:	3301      	adds	r3, #1
 8009a34:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 8009a38:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009a3c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009a40:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8009a44:	7812      	ldrb	r2, [r2, #0]
 8009a46:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009a48:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009a4c:	3301      	adds	r3, #1
 8009a4e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8009a52:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009a56:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009a5a:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8009a5e:	7812      	ldrb	r2, [r2, #0]
 8009a60:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8009a62:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009a66:	3301      	adds	r3, #1
 8009a68:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8009a6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009a70:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 8009a74:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8009a76:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009a7a:	3301      	adds	r3, #1
 8009a7c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8009a80:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009a84:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 8009a88:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8009a8a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009a8e:	3301      	adds	r3, #1
 8009a90:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8009a94:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009a98:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8009a9c:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8009a9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009aa2:	3301      	adds	r3, #1
 8009aa4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8009aa8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009aac:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8009ab0:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8009ab4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009ab8:	3304      	adds	r3, #4
 8009aba:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8009abe:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009ac2:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8009ac6:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8009ac8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009acc:	3301      	adds	r3, #1
 8009ace:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009ad2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009ad6:	2218      	movs	r2, #24
 8009ad8:	2100      	movs	r1, #0
 8009ada:	4618      	mov	r0, r3
 8009adc:	f000 ff2d 	bl	800a93a <Osal_MemSet>
  rq.ogf = 0x3f;
 8009ae0:	233f      	movs	r3, #63	@ 0x3f
 8009ae2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 8009ae6:	2386      	movs	r3, #134	@ 0x86
 8009ae8:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009aec:	f107 0310 	add.w	r3, r7, #16
 8009af0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009af4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009af8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8009afc:	f107 030f 	add.w	r3, r7, #15
 8009b00:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009b04:	2301      	movs	r3, #1
 8009b06:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009b0a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009b0e:	2100      	movs	r1, #0
 8009b10:	4618      	mov	r0, r3
 8009b12:	f001 f99b 	bl	800ae4c <hci_send_req>
 8009b16:	4603      	mov	r3, r0
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	da01      	bge.n	8009b20 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8009b1c:	23ff      	movs	r3, #255	@ 0xff
 8009b1e:	e004      	b.n	8009b2a <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8009b20:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009b24:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009b28:	781b      	ldrb	r3, [r3, #0]
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bdb0      	pop	{r4, r5, r7, pc}

08009b34 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b0cc      	sub	sp, #304	@ 0x130
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	4602      	mov	r2, r0
 8009b3c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009b40:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8009b44:	6019      	str	r1, [r3, #0]
 8009b46:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009b4a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8009b4e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8009b50:	f107 0310 	add.w	r3, r7, #16
 8009b54:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8009b58:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009b5c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009b60:	2200      	movs	r2, #0
 8009b62:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009b64:	2300      	movs	r3, #0
 8009b66:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8009b6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009b6e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009b72:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8009b76:	8812      	ldrh	r2, [r2, #0]
 8009b78:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009b7a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009b7e:	3302      	adds	r3, #2
 8009b80:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 8009b84:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009b88:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009b8c:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8009b90:	6812      	ldr	r2, [r2, #0]
 8009b92:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 8009b96:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009b9a:	3304      	adds	r3, #4
 8009b9c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009ba0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009ba4:	2218      	movs	r2, #24
 8009ba6:	2100      	movs	r1, #0
 8009ba8:	4618      	mov	r0, r3
 8009baa:	f000 fec6 	bl	800a93a <Osal_MemSet>
  rq.ogf = 0x3f;
 8009bae:	233f      	movs	r3, #63	@ 0x3f
 8009bb0:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 8009bb4:	2388      	movs	r3, #136	@ 0x88
 8009bb6:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009bba:	f107 0310 	add.w	r3, r7, #16
 8009bbe:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009bc2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009bc6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8009bca:	f107 030f 	add.w	r3, r7, #15
 8009bce:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009bd2:	2301      	movs	r3, #1
 8009bd4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009bd8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009bdc:	2100      	movs	r1, #0
 8009bde:	4618      	mov	r0, r3
 8009be0:	f001 f934 	bl	800ae4c <hci_send_req>
 8009be4:	4603      	mov	r3, r0
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	da01      	bge.n	8009bee <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 8009bea:	23ff      	movs	r3, #255	@ 0xff
 8009bec:	e004      	b.n	8009bf8 <aci_gap_pass_key_resp+0xc4>
  return status;
 8009bee:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009bf2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009bf6:	781b      	ldrb	r3, [r3, #0]
}
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}

08009c02 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8009c02:	b590      	push	{r4, r7, lr}
 8009c04:	b0cd      	sub	sp, #308	@ 0x134
 8009c06:	af00      	add	r7, sp, #0
 8009c08:	4604      	mov	r4, r0
 8009c0a:	4608      	mov	r0, r1
 8009c0c:	4611      	mov	r1, r2
 8009c0e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009c12:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8009c16:	6013      	str	r3, [r2, #0]
 8009c18:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009c1c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8009c20:	4622      	mov	r2, r4
 8009c22:	701a      	strb	r2, [r3, #0]
 8009c24:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009c28:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8009c2c:	4602      	mov	r2, r0
 8009c2e:	701a      	strb	r2, [r3, #0]
 8009c30:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009c34:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8009c38:	460a      	mov	r2, r1
 8009c3a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8009c3c:	f107 0310 	add.w	r3, r7, #16
 8009c40:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8009c44:	f107 0308 	add.w	r3, r7, #8
 8009c48:	2207      	movs	r2, #7
 8009c4a:	2100      	movs	r1, #0
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	f000 fe74 	bl	800a93a <Osal_MemSet>
  int index_input = 0;
 8009c52:	2300      	movs	r3, #0
 8009c54:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 8009c58:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009c5c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009c60:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8009c64:	7812      	ldrb	r2, [r2, #0]
 8009c66:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009c68:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009c6c:	3301      	adds	r3, #1
 8009c6e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 8009c72:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009c76:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009c7a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8009c7e:	7812      	ldrb	r2, [r2, #0]
 8009c80:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009c82:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009c86:	3301      	adds	r3, #1
 8009c88:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 8009c8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009c90:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009c94:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8009c98:	7812      	ldrb	r2, [r2, #0]
 8009c9a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009c9c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009ca0:	3301      	adds	r3, #1
 8009ca2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009ca6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009caa:	2218      	movs	r2, #24
 8009cac:	2100      	movs	r1, #0
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f000 fe43 	bl	800a93a <Osal_MemSet>
  rq.ogf = 0x3f;
 8009cb4:	233f      	movs	r3, #63	@ 0x3f
 8009cb6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 8009cba:	238a      	movs	r3, #138	@ 0x8a
 8009cbc:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009cc0:	f107 0310 	add.w	r3, r7, #16
 8009cc4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009cc8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009ccc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8009cd0:	f107 0308 	add.w	r3, r7, #8
 8009cd4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 8009cd8:	2307      	movs	r3, #7
 8009cda:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009cde:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009ce2:	2100      	movs	r1, #0
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	f001 f8b1 	bl	800ae4c <hci_send_req>
 8009cea:	4603      	mov	r3, r0
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	da01      	bge.n	8009cf4 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8009cf0:	23ff      	movs	r3, #255	@ 0xff
 8009cf2:	e02e      	b.n	8009d52 <aci_gap_init+0x150>
  if ( resp.Status )
 8009cf4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009cf8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8009cfc:	781b      	ldrb	r3, [r3, #0]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d005      	beq.n	8009d0e <aci_gap_init+0x10c>
    return resp.Status;
 8009d02:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009d06:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8009d0a:	781b      	ldrb	r3, [r3, #0]
 8009d0c:	e021      	b.n	8009d52 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8009d0e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009d12:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8009d16:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009d1a:	b29a      	uxth	r2, r3
 8009d1c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009d20:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8009d28:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009d2c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8009d30:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8009d34:	b29a      	uxth	r2, r3
 8009d36:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8009d3a:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8009d3c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009d40:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8009d44:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8009d48:	b29a      	uxth	r2, r3
 8009d4a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009d4e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8009d50:	2300      	movs	r3, #0
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	bd90      	pop	{r4, r7, pc}

08009d5c <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b0cc      	sub	sp, #304	@ 0x130
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	4602      	mov	r2, r0
 8009d64:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009d68:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8009d6c:	6019      	str	r1, [r3, #0]
 8009d6e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009d72:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8009d76:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8009d78:	f107 0310 	add.w	r3, r7, #16
 8009d7c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8009d80:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009d84:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009d88:	2200      	movs	r2, #0
 8009d8a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 8009d92:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009d96:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009d9a:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8009d9e:	7812      	ldrb	r2, [r2, #0]
 8009da0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009da2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009da6:	3301      	adds	r3, #1
 8009da8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8009dac:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009db0:	1c58      	adds	r0, r3, #1
 8009db2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009db6:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8009dba:	781a      	ldrb	r2, [r3, #0]
 8009dbc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009dc0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8009dc4:	6819      	ldr	r1, [r3, #0]
 8009dc6:	f000 fda8 	bl	800a91a <Osal_MemCpy>
  index_input += AdvDataLen;
 8009dca:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009dce:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8009dd2:	781b      	ldrb	r3, [r3, #0]
 8009dd4:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8009dd8:	4413      	add	r3, r2
 8009dda:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009dde:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009de2:	2218      	movs	r2, #24
 8009de4:	2100      	movs	r1, #0
 8009de6:	4618      	mov	r0, r3
 8009de8:	f000 fda7 	bl	800a93a <Osal_MemSet>
  rq.ogf = 0x3f;
 8009dec:	233f      	movs	r3, #63	@ 0x3f
 8009dee:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 8009df2:	238e      	movs	r3, #142	@ 0x8e
 8009df4:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009df8:	f107 0310 	add.w	r3, r7, #16
 8009dfc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009e00:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009e04:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8009e08:	f107 030f 	add.w	r3, r7, #15
 8009e0c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009e10:	2301      	movs	r3, #1
 8009e12:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009e16:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009e1a:	2100      	movs	r1, #0
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	f001 f815 	bl	800ae4c <hci_send_req>
 8009e22:	4603      	mov	r3, r0
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	da01      	bge.n	8009e2c <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8009e28:	23ff      	movs	r3, #255	@ 0xff
 8009e2a:	e004      	b.n	8009e36 <aci_gap_update_adv_data+0xda>
  return status;
 8009e2c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009e30:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009e34:	781b      	ldrb	r3, [r3, #0]
}
 8009e36:	4618      	mov	r0, r3
 8009e38:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bd80      	pop	{r7, pc}

08009e40 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b088      	sub	sp, #32
 8009e44:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009e46:	2300      	movs	r3, #0
 8009e48:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009e4a:	f107 0308 	add.w	r3, r7, #8
 8009e4e:	2218      	movs	r2, #24
 8009e50:	2100      	movs	r1, #0
 8009e52:	4618      	mov	r0, r3
 8009e54:	f000 fd71 	bl	800a93a <Osal_MemSet>
  rq.ogf = 0x3f;
 8009e58:	233f      	movs	r3, #63	@ 0x3f
 8009e5a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8009e5c:	2392      	movs	r3, #146	@ 0x92
 8009e5e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009e60:	1dfb      	adds	r3, r7, #7
 8009e62:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009e64:	2301      	movs	r3, #1
 8009e66:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009e68:	f107 0308 	add.w	r3, r7, #8
 8009e6c:	2100      	movs	r1, #0
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f000 ffec 	bl	800ae4c <hci_send_req>
 8009e74:	4603      	mov	r3, r0
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	da01      	bge.n	8009e7e <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 8009e7a:	23ff      	movs	r3, #255	@ 0xff
 8009e7c:	e000      	b.n	8009e80 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 8009e7e:	79fb      	ldrb	r3, [r7, #7]
}
 8009e80:	4618      	mov	r0, r3
 8009e82:	3720      	adds	r7, #32
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}

08009e88 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b0cc      	sub	sp, #304	@ 0x130
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	4602      	mov	r2, r0
 8009e90:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009e94:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8009e98:	801a      	strh	r2, [r3, #0]
 8009e9a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009e9e:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8009ea2:	460a      	mov	r2, r1
 8009ea4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8009ea6:	f107 0310 	add.w	r3, r7, #16
 8009eaa:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8009eae:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009eb2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009eba:	2300      	movs	r3, #0
 8009ebc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8009ec0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009ec4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009ec8:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8009ecc:	8812      	ldrh	r2, [r2, #0]
 8009ece:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009ed0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009ed4:	3302      	adds	r3, #2
 8009ed6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8009eda:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009ede:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009ee2:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8009ee6:	7812      	ldrb	r2, [r2, #0]
 8009ee8:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009eea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009eee:	3301      	adds	r3, #1
 8009ef0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009ef4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009ef8:	2218      	movs	r2, #24
 8009efa:	2100      	movs	r1, #0
 8009efc:	4618      	mov	r0, r3
 8009efe:	f000 fd1c 	bl	800a93a <Osal_MemSet>
  rq.ogf = 0x3f;
 8009f02:	233f      	movs	r3, #63	@ 0x3f
 8009f04:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 8009f08:	23a5      	movs	r3, #165	@ 0xa5
 8009f0a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009f0e:	f107 0310 	add.w	r3, r7, #16
 8009f12:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009f16:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009f1a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8009f1e:	f107 030f 	add.w	r3, r7, #15
 8009f22:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009f26:	2301      	movs	r3, #1
 8009f28:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009f2c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009f30:	2100      	movs	r1, #0
 8009f32:	4618      	mov	r0, r3
 8009f34:	f000 ff8a 	bl	800ae4c <hci_send_req>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	da01      	bge.n	8009f42 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 8009f3e:	23ff      	movs	r3, #255	@ 0xff
 8009f40:	e004      	b.n	8009f4c <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 8009f42:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009f46:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009f4a:	781b      	ldrb	r3, [r3, #0]
}
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd80      	pop	{r7, pc}

08009f56 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8009f56:	b580      	push	{r7, lr}
 8009f58:	b088      	sub	sp, #32
 8009f5a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009f60:	f107 0308 	add.w	r3, r7, #8
 8009f64:	2218      	movs	r2, #24
 8009f66:	2100      	movs	r1, #0
 8009f68:	4618      	mov	r0, r3
 8009f6a:	f000 fce6 	bl	800a93a <Osal_MemSet>
  rq.ogf = 0x3f;
 8009f6e:	233f      	movs	r3, #63	@ 0x3f
 8009f70:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8009f72:	f240 1301 	movw	r3, #257	@ 0x101
 8009f76:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009f78:	1dfb      	adds	r3, r7, #7
 8009f7a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009f7c:	2301      	movs	r3, #1
 8009f7e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009f80:	f107 0308 	add.w	r3, r7, #8
 8009f84:	2100      	movs	r1, #0
 8009f86:	4618      	mov	r0, r3
 8009f88:	f000 ff60 	bl	800ae4c <hci_send_req>
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	da01      	bge.n	8009f96 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8009f92:	23ff      	movs	r3, #255	@ 0xff
 8009f94:	e000      	b.n	8009f98 <aci_gatt_init+0x42>
  return status;
 8009f96:	79fb      	ldrb	r3, [r7, #7]
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	3720      	adds	r7, #32
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}

08009fa0 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8009fa0:	b590      	push	{r4, r7, lr}
 8009fa2:	b0cf      	sub	sp, #316	@ 0x13c
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	4604      	mov	r4, r0
 8009fa8:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8009fac:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 8009fb0:	6001      	str	r1, [r0, #0]
 8009fb2:	4610      	mov	r0, r2
 8009fb4:	4619      	mov	r1, r3
 8009fb6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009fba:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8009fbe:	4622      	mov	r2, r4
 8009fc0:	701a      	strb	r2, [r3, #0]
 8009fc2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009fc6:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8009fca:	4602      	mov	r2, r0
 8009fcc:	701a      	strb	r2, [r3, #0]
 8009fce:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009fd2:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8009fd6:	460a      	mov	r2, r1
 8009fd8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8009fda:	f107 0310 	add.w	r3, r7, #16
 8009fde:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8009fe2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009fe6:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8009fea:	781b      	ldrb	r3, [r3, #0]
 8009fec:	2b01      	cmp	r3, #1
 8009fee:	d00a      	beq.n	800a006 <aci_gatt_add_service+0x66>
 8009ff0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009ff4:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8009ff8:	781b      	ldrb	r3, [r3, #0]
 8009ffa:	2b02      	cmp	r3, #2
 8009ffc:	d101      	bne.n	800a002 <aci_gatt_add_service+0x62>
 8009ffe:	2311      	movs	r3, #17
 800a000:	e002      	b.n	800a008 <aci_gatt_add_service+0x68>
 800a002:	2301      	movs	r3, #1
 800a004:	e000      	b.n	800a008 <aci_gatt_add_service+0x68>
 800a006:	2303      	movs	r3, #3
 800a008:	f107 0210 	add.w	r2, r7, #16
 800a00c:	4413      	add	r3, r2
 800a00e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800a012:	f107 030c 	add.w	r3, r7, #12
 800a016:	2203      	movs	r2, #3
 800a018:	2100      	movs	r1, #0
 800a01a:	4618      	mov	r0, r3
 800a01c:	f000 fc8d 	bl	800a93a <Osal_MemSet>
  int index_input = 0;
 800a020:	2300      	movs	r3, #0
 800a022:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 800a026:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a02a:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800a02e:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 800a032:	7812      	ldrb	r2, [r2, #0]
 800a034:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a036:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a03a:	3301      	adds	r3, #1
 800a03c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 800a040:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a044:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800a048:	781b      	ldrb	r3, [r3, #0]
 800a04a:	2b01      	cmp	r3, #1
 800a04c:	d002      	beq.n	800a054 <aci_gatt_add_service+0xb4>
 800a04e:	2b02      	cmp	r3, #2
 800a050:	d004      	beq.n	800a05c <aci_gatt_add_service+0xbc>
 800a052:	e007      	b.n	800a064 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 800a054:	2302      	movs	r3, #2
 800a056:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 800a05a:	e005      	b.n	800a068 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 800a05c:	2310      	movs	r3, #16
 800a05e:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 800a062:	e001      	b.n	800a068 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 800a064:	2397      	movs	r3, #151	@ 0x97
 800a066:	e06c      	b.n	800a142 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 800a068:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a06c:	1c58      	adds	r0, r3, #1
 800a06e:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 800a072:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a076:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800a07a:	6819      	ldr	r1, [r3, #0]
 800a07c:	f000 fc4d 	bl	800a91a <Osal_MemCpy>
    index_input += size;
 800a080:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 800a084:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800a088:	4413      	add	r3, r2
 800a08a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 800a08e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a092:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800a096:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800a09a:	7812      	ldrb	r2, [r2, #0]
 800a09c:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800a09e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a0a2:	3301      	adds	r3, #1
 800a0a4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 800a0a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a0ac:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800a0b0:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 800a0b4:	7812      	ldrb	r2, [r2, #0]
 800a0b6:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800a0b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a0bc:	3301      	adds	r3, #1
 800a0be:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a0c2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a0c6:	2218      	movs	r2, #24
 800a0c8:	2100      	movs	r1, #0
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	f000 fc35 	bl	800a93a <Osal_MemSet>
  rq.ogf = 0x3f;
 800a0d0:	233f      	movs	r3, #63	@ 0x3f
 800a0d2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 800a0d6:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800a0da:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800a0de:	f107 0310 	add.w	r3, r7, #16
 800a0e2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800a0e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a0ea:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 800a0ee:	f107 030c 	add.w	r3, r7, #12
 800a0f2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 800a0f6:	2303      	movs	r3, #3
 800a0f8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a0fc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a100:	2100      	movs	r1, #0
 800a102:	4618      	mov	r0, r3
 800a104:	f000 fea2 	bl	800ae4c <hci_send_req>
 800a108:	4603      	mov	r3, r0
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	da01      	bge.n	800a112 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 800a10e:	23ff      	movs	r3, #255	@ 0xff
 800a110:	e017      	b.n	800a142 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 800a112:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a116:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800a11a:	781b      	ldrb	r3, [r3, #0]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d005      	beq.n	800a12c <aci_gatt_add_service+0x18c>
    return resp.Status;
 800a120:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a124:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800a128:	781b      	ldrb	r3, [r3, #0]
 800a12a:	e00a      	b.n	800a142 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 800a12c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a130:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800a134:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a138:	b29a      	uxth	r2, r3
 800a13a:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800a13e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800a140:	2300      	movs	r3, #0
}
 800a142:	4618      	mov	r0, r3
 800a144:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd90      	pop	{r4, r7, pc}

0800a14c <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800a14c:	b590      	push	{r4, r7, lr}
 800a14e:	b0d1      	sub	sp, #324	@ 0x144
 800a150:	af00      	add	r7, sp, #0
 800a152:	4604      	mov	r4, r0
 800a154:	4608      	mov	r0, r1
 800a156:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 800a15a:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 800a15e:	600a      	str	r2, [r1, #0]
 800a160:	4619      	mov	r1, r3
 800a162:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800a166:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800a16a:	4622      	mov	r2, r4
 800a16c:	801a      	strh	r2, [r3, #0]
 800a16e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800a172:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800a176:	4602      	mov	r2, r0
 800a178:	701a      	strb	r2, [r3, #0]
 800a17a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800a17e:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 800a182:	460a      	mov	r2, r1
 800a184:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800a186:	f107 0318 	add.w	r3, r7, #24
 800a18a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800a18e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800a192:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800a196:	781b      	ldrb	r3, [r3, #0]
 800a198:	2b01      	cmp	r3, #1
 800a19a:	d00a      	beq.n	800a1b2 <aci_gatt_add_char+0x66>
 800a19c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800a1a0:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800a1a4:	781b      	ldrb	r3, [r3, #0]
 800a1a6:	2b02      	cmp	r3, #2
 800a1a8:	d101      	bne.n	800a1ae <aci_gatt_add_char+0x62>
 800a1aa:	2313      	movs	r3, #19
 800a1ac:	e002      	b.n	800a1b4 <aci_gatt_add_char+0x68>
 800a1ae:	2303      	movs	r3, #3
 800a1b0:	e000      	b.n	800a1b4 <aci_gatt_add_char+0x68>
 800a1b2:	2305      	movs	r3, #5
 800a1b4:	f107 0218 	add.w	r2, r7, #24
 800a1b8:	4413      	add	r3, r2
 800a1ba:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800a1be:	f107 0314 	add.w	r3, r7, #20
 800a1c2:	2203      	movs	r2, #3
 800a1c4:	2100      	movs	r1, #0
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	f000 fbb7 	bl	800a93a <Osal_MemSet>
  int index_input = 0;
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 800a1d2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800a1d6:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800a1da:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800a1de:	8812      	ldrh	r2, [r2, #0]
 800a1e0:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a1e2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a1e6:	3302      	adds	r3, #2
 800a1e8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 800a1ec:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800a1f0:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800a1f4:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 800a1f8:	7812      	ldrb	r2, [r2, #0]
 800a1fa:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800a1fc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a200:	3301      	adds	r3, #1
 800a202:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800a206:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800a20a:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800a20e:	781b      	ldrb	r3, [r3, #0]
 800a210:	2b01      	cmp	r3, #1
 800a212:	d002      	beq.n	800a21a <aci_gatt_add_char+0xce>
 800a214:	2b02      	cmp	r3, #2
 800a216:	d004      	beq.n	800a222 <aci_gatt_add_char+0xd6>
 800a218:	e007      	b.n	800a22a <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 800a21a:	2302      	movs	r3, #2
 800a21c:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 800a220:	e005      	b.n	800a22e <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 800a222:	2310      	movs	r3, #16
 800a224:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 800a228:	e001      	b.n	800a22e <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 800a22a:	2397      	movs	r3, #151	@ 0x97
 800a22c:	e091      	b.n	800a352 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800a22e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800a232:	1cd8      	adds	r0, r3, #3
 800a234:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 800a238:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800a23c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800a240:	6819      	ldr	r1, [r3, #0]
 800a242:	f000 fb6a 	bl	800a91a <Osal_MemCpy>
    index_input += size;
 800a246:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 800a24a:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800a24e:	4413      	add	r3, r2
 800a250:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 800a254:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a258:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800a25c:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 800a260:	8812      	ldrh	r2, [r2, #0]
 800a262:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800a264:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a268:	3302      	adds	r3, #2
 800a26a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800a26e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a272:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800a276:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800a278:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a27c:	3301      	adds	r3, #1
 800a27e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800a282:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a286:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800a28a:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800a28c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a290:	3301      	adds	r3, #1
 800a292:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800a296:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a29a:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 800a29e:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800a2a0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a2a4:	3301      	adds	r3, #1
 800a2a6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800a2aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a2ae:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 800a2b2:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800a2b4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a2b8:	3301      	adds	r3, #1
 800a2ba:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800a2be:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a2c2:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 800a2c6:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800a2c8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a2cc:	3301      	adds	r3, #1
 800a2ce:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a2d2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800a2d6:	2218      	movs	r2, #24
 800a2d8:	2100      	movs	r1, #0
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f000 fb2d 	bl	800a93a <Osal_MemSet>
  rq.ogf = 0x3f;
 800a2e0:	233f      	movs	r3, #63	@ 0x3f
 800a2e2:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 800a2e6:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800a2ea:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 800a2ee:	f107 0318 	add.w	r3, r7, #24
 800a2f2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 800a2f6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a2fa:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 800a2fe:	f107 0314 	add.w	r3, r7, #20
 800a302:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 800a306:	2303      	movs	r3, #3
 800a308:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a30c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800a310:	2100      	movs	r1, #0
 800a312:	4618      	mov	r0, r3
 800a314:	f000 fd9a 	bl	800ae4c <hci_send_req>
 800a318:	4603      	mov	r3, r0
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	da01      	bge.n	800a322 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 800a31e:	23ff      	movs	r3, #255	@ 0xff
 800a320:	e017      	b.n	800a352 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 800a322:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800a326:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800a32a:	781b      	ldrb	r3, [r3, #0]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d005      	beq.n	800a33c <aci_gatt_add_char+0x1f0>
    return resp.Status;
 800a330:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800a334:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800a338:	781b      	ldrb	r3, [r3, #0]
 800a33a:	e00a      	b.n	800a352 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 800a33c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800a340:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800a344:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a348:	b29a      	uxth	r2, r3
 800a34a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800a34e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800a350:	2300      	movs	r3, #0
}
 800a352:	4618      	mov	r0, r3
 800a354:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 800a358:	46bd      	mov	sp, r7
 800a35a:	bd90      	pop	{r4, r7, pc}

0800a35c <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800a35c:	b5b0      	push	{r4, r5, r7, lr}
 800a35e:	b0cc      	sub	sp, #304	@ 0x130
 800a360:	af00      	add	r7, sp, #0
 800a362:	4605      	mov	r5, r0
 800a364:	460c      	mov	r4, r1
 800a366:	4610      	mov	r0, r2
 800a368:	4619      	mov	r1, r3
 800a36a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a36e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a372:	462a      	mov	r2, r5
 800a374:	801a      	strh	r2, [r3, #0]
 800a376:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a37a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800a37e:	4622      	mov	r2, r4
 800a380:	801a      	strh	r2, [r3, #0]
 800a382:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a386:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 800a38a:	4602      	mov	r2, r0
 800a38c:	701a      	strb	r2, [r3, #0]
 800a38e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a392:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800a396:	460a      	mov	r2, r1
 800a398:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800a39a:	f107 0310 	add.w	r3, r7, #16
 800a39e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800a3a2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a3a6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 800a3b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a3b8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a3bc:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800a3c0:	8812      	ldrh	r2, [r2, #0]
 800a3c2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a3c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a3c8:	3302      	adds	r3, #2
 800a3ca:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 800a3ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a3d2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a3d6:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800a3da:	8812      	ldrh	r2, [r2, #0]
 800a3dc:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800a3de:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a3e2:	3302      	adds	r3, #2
 800a3e4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 800a3e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a3ec:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a3f0:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 800a3f4:	7812      	ldrb	r2, [r2, #0]
 800a3f6:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800a3f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a3fc:	3301      	adds	r3, #1
 800a3fe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800a402:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a406:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a40a:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 800a40e:	7812      	ldrb	r2, [r2, #0]
 800a410:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800a412:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a416:	3301      	adds	r3, #1
 800a418:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800a41c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a420:	1d98      	adds	r0, r3, #6
 800a422:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a426:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800a42a:	781b      	ldrb	r3, [r3, #0]
 800a42c:	461a      	mov	r2, r3
 800a42e:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800a432:	f000 fa72 	bl	800a91a <Osal_MemCpy>
  index_input += Char_Value_Length;
 800a436:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a43a:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800a43e:	781b      	ldrb	r3, [r3, #0]
 800a440:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800a444:	4413      	add	r3, r2
 800a446:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a44a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a44e:	2218      	movs	r2, #24
 800a450:	2100      	movs	r1, #0
 800a452:	4618      	mov	r0, r3
 800a454:	f000 fa71 	bl	800a93a <Osal_MemSet>
  rq.ogf = 0x3f;
 800a458:	233f      	movs	r3, #63	@ 0x3f
 800a45a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 800a45e:	f44f 7383 	mov.w	r3, #262	@ 0x106
 800a462:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800a466:	f107 0310 	add.w	r3, r7, #16
 800a46a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800a46e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a472:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800a476:	f107 030f 	add.w	r3, r7, #15
 800a47a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800a47e:	2301      	movs	r3, #1
 800a480:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a484:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a488:	2100      	movs	r1, #0
 800a48a:	4618      	mov	r0, r3
 800a48c:	f000 fcde 	bl	800ae4c <hci_send_req>
 800a490:	4603      	mov	r3, r0
 800a492:	2b00      	cmp	r3, #0
 800a494:	da01      	bge.n	800a49a <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800a496:	23ff      	movs	r3, #255	@ 0xff
 800a498:	e004      	b.n	800a4a4 <aci_gatt_update_char_value+0x148>
  return status;
 800a49a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a49e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a4a2:	781b      	ldrb	r3, [r3, #0]
}
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bdb0      	pop	{r4, r5, r7, pc}

0800a4ae <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 800a4ae:	b580      	push	{r7, lr}
 800a4b0:	b0cc      	sub	sp, #304	@ 0x130
 800a4b2:	af00      	add	r7, sp, #0
 800a4b4:	4602      	mov	r2, r0
 800a4b6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a4ba:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a4be:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 800a4c0:	f107 0310 	add.w	r3, r7, #16
 800a4c4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800a4c8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a4cc:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800a4da:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a4de:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a4e2:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800a4e6:	8812      	ldrh	r2, [r2, #0]
 800a4e8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a4ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a4ee:	3302      	adds	r3, #2
 800a4f0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a4f4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a4f8:	2218      	movs	r2, #24
 800a4fa:	2100      	movs	r1, #0
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	f000 fa1c 	bl	800a93a <Osal_MemSet>
  rq.ogf = 0x3f;
 800a502:	233f      	movs	r3, #63	@ 0x3f
 800a504:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 800a508:	f240 1325 	movw	r3, #293	@ 0x125
 800a50c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800a510:	f107 0310 	add.w	r3, r7, #16
 800a514:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800a518:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a51c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800a520:	f107 030f 	add.w	r3, r7, #15
 800a524:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800a528:	2301      	movs	r3, #1
 800a52a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a52e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a532:	2100      	movs	r1, #0
 800a534:	4618      	mov	r0, r3
 800a536:	f000 fc89 	bl	800ae4c <hci_send_req>
 800a53a:	4603      	mov	r3, r0
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	da01      	bge.n	800a544 <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 800a540:	23ff      	movs	r3, #255	@ 0xff
 800a542:	e004      	b.n	800a54e <aci_gatt_confirm_indication+0xa0>
  return status;
 800a544:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a548:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a54c:	781b      	ldrb	r3, [r3, #0]
}
 800a54e:	4618      	mov	r0, r3
 800a550:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800a554:	46bd      	mov	sp, r7
 800a556:	bd80      	pop	{r7, pc}

0800a558 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b0cc      	sub	sp, #304	@ 0x130
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a562:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800a566:	601a      	str	r2, [r3, #0]
 800a568:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a56c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800a570:	4602      	mov	r2, r0
 800a572:	701a      	strb	r2, [r3, #0]
 800a574:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a578:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a57c:	460a      	mov	r2, r1
 800a57e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800a580:	f107 0310 	add.w	r3, r7, #16
 800a584:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800a588:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a58c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a590:	2200      	movs	r2, #0
 800a592:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a594:	2300      	movs	r3, #0
 800a596:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 800a59a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a59e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a5a2:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800a5a6:	7812      	ldrb	r2, [r2, #0]
 800a5a8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a5aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a5ae:	3301      	adds	r3, #1
 800a5b0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 800a5b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a5b8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a5bc:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800a5c0:	7812      	ldrb	r2, [r2, #0]
 800a5c2:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800a5c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a5c8:	3301      	adds	r3, #1
 800a5ca:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800a5ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a5d2:	1c98      	adds	r0, r3, #2
 800a5d4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a5d8:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a5dc:	781a      	ldrb	r2, [r3, #0]
 800a5de:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a5e2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800a5e6:	6819      	ldr	r1, [r3, #0]
 800a5e8:	f000 f997 	bl	800a91a <Osal_MemCpy>
  index_input += Length;
 800a5ec:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a5f0:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a5f4:	781b      	ldrb	r3, [r3, #0]
 800a5f6:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800a5fa:	4413      	add	r3, r2
 800a5fc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a600:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a604:	2218      	movs	r2, #24
 800a606:	2100      	movs	r1, #0
 800a608:	4618      	mov	r0, r3
 800a60a:	f000 f996 	bl	800a93a <Osal_MemSet>
  rq.ogf = 0x3f;
 800a60e:	233f      	movs	r3, #63	@ 0x3f
 800a610:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 800a614:	230c      	movs	r3, #12
 800a616:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800a61a:	f107 0310 	add.w	r3, r7, #16
 800a61e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800a622:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a626:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800a62a:	f107 030f 	add.w	r3, r7, #15
 800a62e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800a632:	2301      	movs	r3, #1
 800a634:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a638:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a63c:	2100      	movs	r1, #0
 800a63e:	4618      	mov	r0, r3
 800a640:	f000 fc04 	bl	800ae4c <hci_send_req>
 800a644:	4603      	mov	r3, r0
 800a646:	2b00      	cmp	r3, #0
 800a648:	da01      	bge.n	800a64e <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800a64a:	23ff      	movs	r3, #255	@ 0xff
 800a64c:	e004      	b.n	800a658 <aci_hal_write_config_data+0x100>
  return status;
 800a64e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a652:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a656:	781b      	ldrb	r3, [r3, #0]
}
 800a658:	4618      	mov	r0, r3
 800a65a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800a65e:	46bd      	mov	sp, r7
 800a660:	bd80      	pop	{r7, pc}

0800a662 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800a662:	b580      	push	{r7, lr}
 800a664:	b0cc      	sub	sp, #304	@ 0x130
 800a666:	af00      	add	r7, sp, #0
 800a668:	4602      	mov	r2, r0
 800a66a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a66e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800a672:	701a      	strb	r2, [r3, #0]
 800a674:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a678:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a67c:	460a      	mov	r2, r1
 800a67e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800a680:	f107 0310 	add.w	r3, r7, #16
 800a684:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800a688:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a68c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a690:	2200      	movs	r2, #0
 800a692:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a694:	2300      	movs	r3, #0
 800a696:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 800a69a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a69e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a6a2:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800a6a6:	7812      	ldrb	r2, [r2, #0]
 800a6a8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a6aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a6ae:	3301      	adds	r3, #1
 800a6b0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 800a6b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a6b8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a6bc:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800a6c0:	7812      	ldrb	r2, [r2, #0]
 800a6c2:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800a6c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a6c8:	3301      	adds	r3, #1
 800a6ca:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a6ce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a6d2:	2218      	movs	r2, #24
 800a6d4:	2100      	movs	r1, #0
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	f000 f92f 	bl	800a93a <Osal_MemSet>
  rq.ogf = 0x3f;
 800a6dc:	233f      	movs	r3, #63	@ 0x3f
 800a6de:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 800a6e2:	230f      	movs	r3, #15
 800a6e4:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800a6e8:	f107 0310 	add.w	r3, r7, #16
 800a6ec:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800a6f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a6f4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800a6f8:	f107 030f 	add.w	r3, r7, #15
 800a6fc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800a700:	2301      	movs	r3, #1
 800a702:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a706:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a70a:	2100      	movs	r1, #0
 800a70c:	4618      	mov	r0, r3
 800a70e:	f000 fb9d 	bl	800ae4c <hci_send_req>
 800a712:	4603      	mov	r3, r0
 800a714:	2b00      	cmp	r3, #0
 800a716:	da01      	bge.n	800a71c <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800a718:	23ff      	movs	r3, #255	@ 0xff
 800a71a:	e004      	b.n	800a726 <aci_hal_set_tx_power_level+0xc4>
  return status;
 800a71c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a720:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a724:	781b      	ldrb	r3, [r3, #0]
}
 800a726:	4618      	mov	r0, r3
 800a728:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800a72c:	46bd      	mov	sp, r7
 800a72e:	bd80      	pop	{r7, pc}

0800a730 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b0cc      	sub	sp, #304	@ 0x130
 800a734:	af00      	add	r7, sp, #0
 800a736:	4602      	mov	r2, r0
 800a738:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a73c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a740:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800a742:	f107 0310 	add.w	r3, r7, #16
 800a746:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800a74a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a74e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a752:	2200      	movs	r2, #0
 800a754:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a756:	2300      	movs	r3, #0
 800a758:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800a75c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a760:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a764:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800a768:	8812      	ldrh	r2, [r2, #0]
 800a76a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a76c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a770:	3302      	adds	r3, #2
 800a772:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a776:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a77a:	2218      	movs	r2, #24
 800a77c:	2100      	movs	r1, #0
 800a77e:	4618      	mov	r0, r3
 800a780:	f000 f8db 	bl	800a93a <Osal_MemSet>
  rq.ogf = 0x3f;
 800a784:	233f      	movs	r3, #63	@ 0x3f
 800a786:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 800a78a:	2318      	movs	r3, #24
 800a78c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800a790:	f107 0310 	add.w	r3, r7, #16
 800a794:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800a798:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a79c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800a7a0:	f107 030f 	add.w	r3, r7, #15
 800a7a4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800a7a8:	2301      	movs	r3, #1
 800a7aa:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a7ae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a7b2:	2100      	movs	r1, #0
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	f000 fb49 	bl	800ae4c <hci_send_req>
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	da01      	bge.n	800a7c4 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 800a7c0:	23ff      	movs	r3, #255	@ 0xff
 800a7c2:	e004      	b.n	800a7ce <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 800a7c4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a7c8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a7cc:	781b      	ldrb	r3, [r3, #0]
}
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bd80      	pop	{r7, pc}

0800a7d8 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b088      	sub	sp, #32
 800a7dc:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a7e2:	f107 0308 	add.w	r3, r7, #8
 800a7e6:	2218      	movs	r2, #24
 800a7e8:	2100      	movs	r1, #0
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	f000 f8a5 	bl	800a93a <Osal_MemSet>
  rq.ogf = 0x03;
 800a7f0:	2303      	movs	r3, #3
 800a7f2:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800a7f4:	2303      	movs	r3, #3
 800a7f6:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800a7f8:	1dfb      	adds	r3, r7, #7
 800a7fa:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a800:	f107 0308 	add.w	r3, r7, #8
 800a804:	2100      	movs	r1, #0
 800a806:	4618      	mov	r0, r3
 800a808:	f000 fb20 	bl	800ae4c <hci_send_req>
 800a80c:	4603      	mov	r3, r0
 800a80e:	2b00      	cmp	r3, #0
 800a810:	da01      	bge.n	800a816 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800a812:	23ff      	movs	r3, #255	@ 0xff
 800a814:	e000      	b.n	800a818 <hci_reset+0x40>
  return status;
 800a816:	79fb      	ldrb	r3, [r7, #7]
}
 800a818:	4618      	mov	r0, r3
 800a81a:	3720      	adds	r7, #32
 800a81c:	46bd      	mov	sp, r7
 800a81e:	bd80      	pop	{r7, pc}

0800a820 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800a820:	b590      	push	{r4, r7, lr}
 800a822:	b0cd      	sub	sp, #308	@ 0x134
 800a824:	af00      	add	r7, sp, #0
 800a826:	4604      	mov	r4, r0
 800a828:	4608      	mov	r0, r1
 800a82a:	4611      	mov	r1, r2
 800a82c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a830:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800a834:	4622      	mov	r2, r4
 800a836:	701a      	strb	r2, [r3, #0]
 800a838:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a83c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a840:	4602      	mov	r2, r0
 800a842:	701a      	strb	r2, [r3, #0]
 800a844:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a848:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800a84c:	460a      	mov	r2, r1
 800a84e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800a850:	f107 0310 	add.w	r3, r7, #16
 800a854:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800a858:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a85c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a860:	2200      	movs	r2, #0
 800a862:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a864:	2300      	movs	r3, #0
 800a866:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800a86a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a86e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a872:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800a876:	7812      	ldrb	r2, [r2, #0]
 800a878:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a87a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a87e:	3301      	adds	r3, #1
 800a880:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 800a884:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a888:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a88c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800a890:	7812      	ldrb	r2, [r2, #0]
 800a892:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800a894:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a898:	3301      	adds	r3, #1
 800a89a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 800a89e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a8a2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a8a6:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800a8aa:	7812      	ldrb	r2, [r2, #0]
 800a8ac:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800a8ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a8b2:	3301      	adds	r3, #1
 800a8b4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a8b8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a8bc:	2218      	movs	r2, #24
 800a8be:	2100      	movs	r1, #0
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	f000 f83a 	bl	800a93a <Osal_MemSet>
  rq.ogf = 0x08;
 800a8c6:	2308      	movs	r3, #8
 800a8c8:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 800a8cc:	2331      	movs	r3, #49	@ 0x31
 800a8ce:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800a8d2:	f107 0310 	add.w	r3, r7, #16
 800a8d6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800a8da:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a8de:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800a8e2:	f107 030f 	add.w	r3, r7, #15
 800a8e6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800a8ea:	2301      	movs	r3, #1
 800a8ec:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a8f0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a8f4:	2100      	movs	r1, #0
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	f000 faa8 	bl	800ae4c <hci_send_req>
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	da01      	bge.n	800a906 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 800a902:	23ff      	movs	r3, #255	@ 0xff
 800a904:	e004      	b.n	800a910 <hci_le_set_default_phy+0xf0>
  return status;
 800a906:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a90a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a90e:	781b      	ldrb	r3, [r3, #0]
}
 800a910:	4618      	mov	r0, r3
 800a912:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800a916:	46bd      	mov	sp, r7
 800a918:	bd90      	pop	{r4, r7, pc}

0800a91a <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800a91a:	b580      	push	{r7, lr}
 800a91c:	b084      	sub	sp, #16
 800a91e:	af00      	add	r7, sp, #0
 800a920:	60f8      	str	r0, [r7, #12]
 800a922:	60b9      	str	r1, [r7, #8]
 800a924:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 800a926:	687a      	ldr	r2, [r7, #4]
 800a928:	68b9      	ldr	r1, [r7, #8]
 800a92a:	68f8      	ldr	r0, [r7, #12]
 800a92c:	f004 fc85 	bl	800f23a <memcpy>
 800a930:	4603      	mov	r3, r0
}
 800a932:	4618      	mov	r0, r3
 800a934:	3710      	adds	r7, #16
 800a936:	46bd      	mov	sp, r7
 800a938:	bd80      	pop	{r7, pc}

0800a93a <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800a93a:	b580      	push	{r7, lr}
 800a93c:	b084      	sub	sp, #16
 800a93e:	af00      	add	r7, sp, #0
 800a940:	60f8      	str	r0, [r7, #12]
 800a942:	60b9      	str	r1, [r7, #8]
 800a944:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800a946:	687a      	ldr	r2, [r7, #4]
 800a948:	68b9      	ldr	r1, [r7, #8]
 800a94a:	68f8      	ldr	r0, [r7, #12]
 800a94c:	f004 fbe0 	bl	800f110 <memset>
 800a950:	4603      	mov	r3, r0
}
 800a952:	4618      	mov	r0, r3
 800a954:	3710      	adds	r7, #16
 800a956:	46bd      	mov	sp, r7
 800a958:	bd80      	pop	{r7, pc}

0800a95a <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800a95a:	b480      	push	{r7}
 800a95c:	af00      	add	r7, sp, #0
  return;
 800a95e:	bf00      	nop
}
 800a960:	46bd      	mov	sp, r7
 800a962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a966:	4770      	bx	lr

0800a968 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800a968:	b480      	push	{r7}
 800a96a:	af00      	add	r7, sp, #0
  return;
 800a96c:	bf00      	nop
}
 800a96e:	46bd      	mov	sp, r7
 800a970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a974:	4770      	bx	lr

0800a976 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800a976:	b480      	push	{r7}
 800a978:	af00      	add	r7, sp, #0
  return;
 800a97a:	bf00      	nop
}
 800a97c:	46bd      	mov	sp, r7
 800a97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a982:	4770      	bx	lr

0800a984 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800a984:	b480      	push	{r7}
 800a986:	af00      	add	r7, sp, #0
  return;
 800a988:	bf00      	nop
}
 800a98a:	46bd      	mov	sp, r7
 800a98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a990:	4770      	bx	lr

0800a992 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800a992:	b480      	push	{r7}
 800a994:	af00      	add	r7, sp, #0
  return;
 800a996:	bf00      	nop
}
 800a998:	46bd      	mov	sp, r7
 800a99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99e:	4770      	bx	lr

0800a9a0 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800a9a0:	b480      	push	{r7}
 800a9a2:	af00      	add	r7, sp, #0
  return;
 800a9a4:	bf00      	nop
}
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ac:	4770      	bx	lr

0800a9ae <HRS_Init>:
__WEAK void HRS_Init( void )
{
 800a9ae:	b480      	push	{r7}
 800a9b0:	af00      	add	r7, sp, #0
  return;
 800a9b2:	bf00      	nop
}
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ba:	4770      	bx	lr

0800a9bc <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800a9bc:	b480      	push	{r7}
 800a9be:	af00      	add	r7, sp, #0
  return;
 800a9c0:	bf00      	nop
}
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c8:	4770      	bx	lr

0800a9ca <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800a9ca:	b480      	push	{r7}
 800a9cc:	af00      	add	r7, sp, #0
  return;
 800a9ce:	bf00      	nop
}
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d6:	4770      	bx	lr

0800a9d8 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800a9d8:	b480      	push	{r7}
 800a9da:	af00      	add	r7, sp, #0
  return;
 800a9dc:	bf00      	nop
}
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e4:	4770      	bx	lr

0800a9e6 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800a9e6:	b480      	push	{r7}
 800a9e8:	af00      	add	r7, sp, #0
  return;
 800a9ea:	bf00      	nop
}
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f2:	4770      	bx	lr

0800a9f4 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800a9f4:	b480      	push	{r7}
 800a9f6:	af00      	add	r7, sp, #0
  return;
 800a9f8:	bf00      	nop
}
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa00:	4770      	bx	lr

0800aa02 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 800aa02:	b480      	push	{r7}
 800aa04:	af00      	add	r7, sp, #0
  return;
 800aa06:	bf00      	nop
}
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0e:	4770      	bx	lr

0800aa10 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 800aa10:	b480      	push	{r7}
 800aa12:	af00      	add	r7, sp, #0
  return;
 800aa14:	bf00      	nop
}
 800aa16:	46bd      	mov	sp, r7
 800aa18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1c:	4770      	bx	lr

0800aa1e <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800aa1e:	b480      	push	{r7}
 800aa20:	af00      	add	r7, sp, #0
  return;
 800aa22:	bf00      	nop
}
 800aa24:	46bd      	mov	sp, r7
 800aa26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2a:	4770      	bx	lr

0800aa2c <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800aa2c:	b480      	push	{r7}
 800aa2e:	af00      	add	r7, sp, #0
  return;
 800aa30:	bf00      	nop
}
 800aa32:	46bd      	mov	sp, r7
 800aa34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa38:	4770      	bx	lr

0800aa3a <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800aa3a:	b480      	push	{r7}
 800aa3c:	af00      	add	r7, sp, #0
  return;
 800aa3e:	bf00      	nop
}
 800aa40:	46bd      	mov	sp, r7
 800aa42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa46:	4770      	bx	lr

0800aa48 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800aa4c:	4b04      	ldr	r3, [pc, #16]	@ (800aa60 <SVCCTL_Init+0x18>)
 800aa4e:	2200      	movs	r2, #0
 800aa50:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800aa52:	4b04      	ldr	r3, [pc, #16]	@ (800aa64 <SVCCTL_Init+0x1c>)
 800aa54:	2200      	movs	r2, #0
 800aa56:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800aa58:	f000 f806 	bl	800aa68 <SVCCTL_SvcInit>

  return;
 800aa5c:	bf00      	nop
}
 800aa5e:	bd80      	pop	{r7, pc}
 800aa60:	200001fc 	.word	0x200001fc
 800aa64:	2000021c 	.word	0x2000021c

0800aa68 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	af00      	add	r7, sp, #0
  BAS_Init();
 800aa6c:	f7ff ff75 	bl	800a95a <BAS_Init>

  BLS_Init();
 800aa70:	f7ff ff7a 	bl	800a968 <BLS_Init>

  CRS_STM_Init();
 800aa74:	f7ff ff7f 	bl	800a976 <CRS_STM_Init>

  DIS_Init();
 800aa78:	f7ff ff84 	bl	800a984 <DIS_Init>

  EDS_STM_Init();
 800aa7c:	f7ff ff89 	bl	800a992 <EDS_STM_Init>

  HIDS_Init();
 800aa80:	f7ff ff8e 	bl	800a9a0 <HIDS_Init>

  HRS_Init();
 800aa84:	f7ff ff93 	bl	800a9ae <HRS_Init>

  HTS_Init();
 800aa88:	f7ff ff98 	bl	800a9bc <HTS_Init>

  IAS_Init();
 800aa8c:	f7ff ff9d 	bl	800a9ca <IAS_Init>

  LLS_Init();
 800aa90:	f7ff ffa2 	bl	800a9d8 <LLS_Init>

  TPS_Init();
 800aa94:	f7ff ffa7 	bl	800a9e6 <TPS_Init>

  MOTENV_STM_Init();
 800aa98:	f7ff ffac 	bl	800a9f4 <MOTENV_STM_Init>

  P2PS_STM_Init();
 800aa9c:	f7ff ffb1 	bl	800aa02 <P2PS_STM_Init>

  ZDD_STM_Init();
 800aaa0:	f7ff ffb6 	bl	800aa10 <ZDD_STM_Init>

  OTAS_STM_Init();
 800aaa4:	f7ff ffbb 	bl	800aa1e <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800aaa8:	f7ff ffc7 	bl	800aa3a <BVOPUS_STM_Init>

  MESH_Init();
 800aaac:	f7ff ffbe 	bl	800aa2c <MESH_Init>

  SVCCTL_InitCustomSvc();
 800aab0:	f002 fd28 	bl	800d504 <SVCCTL_InitCustomSvc>
  
  return;
 800aab4:	bf00      	nop
}
 800aab6:	bd80      	pop	{r7, pc}

0800aab8 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800aab8:	b480      	push	{r7}
 800aaba:	b083      	sub	sp, #12
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800aac0:	4b09      	ldr	r3, [pc, #36]	@ (800aae8 <SVCCTL_RegisterSvcHandler+0x30>)
 800aac2:	7f1b      	ldrb	r3, [r3, #28]
 800aac4:	4619      	mov	r1, r3
 800aac6:	4a08      	ldr	r2, [pc, #32]	@ (800aae8 <SVCCTL_RegisterSvcHandler+0x30>)
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800aace:	4b06      	ldr	r3, [pc, #24]	@ (800aae8 <SVCCTL_RegisterSvcHandler+0x30>)
 800aad0:	7f1b      	ldrb	r3, [r3, #28]
 800aad2:	3301      	adds	r3, #1
 800aad4:	b2da      	uxtb	r2, r3
 800aad6:	4b04      	ldr	r3, [pc, #16]	@ (800aae8 <SVCCTL_RegisterSvcHandler+0x30>)
 800aad8:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800aada:	bf00      	nop
}
 800aadc:	370c      	adds	r7, #12
 800aade:	46bd      	mov	sp, r7
 800aae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae4:	4770      	bx	lr
 800aae6:	bf00      	nop
 800aae8:	200001fc 	.word	0x200001fc

0800aaec <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b086      	sub	sp, #24
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	3301      	adds	r3, #1
 800aaf8:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800aafa:	2300      	movs	r3, #0
 800aafc:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800aafe:	693b      	ldr	r3, [r7, #16]
 800ab00:	781b      	ldrb	r3, [r3, #0]
 800ab02:	2bff      	cmp	r3, #255	@ 0xff
 800ab04:	d125      	bne.n	800ab52 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800ab06:	693b      	ldr	r3, [r7, #16]
 800ab08:	3302      	adds	r3, #2
 800ab0a:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	881b      	ldrh	r3, [r3, #0]
 800ab10:	b29b      	uxth	r3, r3
 800ab12:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800ab16:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ab1a:	d118      	bne.n	800ab4e <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	757b      	strb	r3, [r7, #21]
 800ab20:	e00d      	b.n	800ab3e <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800ab22:	7d7b      	ldrb	r3, [r7, #21]
 800ab24:	4a1a      	ldr	r2, [pc, #104]	@ (800ab90 <SVCCTL_UserEvtRx+0xa4>)
 800ab26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab2a:	6878      	ldr	r0, [r7, #4]
 800ab2c:	4798      	blx	r3
 800ab2e:	4603      	mov	r3, r0
 800ab30:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800ab32:	7dfb      	ldrb	r3, [r7, #23]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d108      	bne.n	800ab4a <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800ab38:	7d7b      	ldrb	r3, [r7, #21]
 800ab3a:	3301      	adds	r3, #1
 800ab3c:	757b      	strb	r3, [r7, #21]
 800ab3e:	4b14      	ldr	r3, [pc, #80]	@ (800ab90 <SVCCTL_UserEvtRx+0xa4>)
 800ab40:	7f1b      	ldrb	r3, [r3, #28]
 800ab42:	7d7a      	ldrb	r2, [r7, #21]
 800ab44:	429a      	cmp	r2, r3
 800ab46:	d3ec      	bcc.n	800ab22 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800ab48:	e002      	b.n	800ab50 <SVCCTL_UserEvtRx+0x64>
              break;
 800ab4a:	bf00      	nop
          break;
 800ab4c:	e000      	b.n	800ab50 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800ab4e:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800ab50:	e000      	b.n	800ab54 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800ab52:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 800ab54:	7dfb      	ldrb	r3, [r7, #23]
 800ab56:	2b02      	cmp	r3, #2
 800ab58:	d00f      	beq.n	800ab7a <SVCCTL_UserEvtRx+0x8e>
 800ab5a:	2b02      	cmp	r3, #2
 800ab5c:	dc10      	bgt.n	800ab80 <SVCCTL_UserEvtRx+0x94>
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d002      	beq.n	800ab68 <SVCCTL_UserEvtRx+0x7c>
 800ab62:	2b01      	cmp	r3, #1
 800ab64:	d006      	beq.n	800ab74 <SVCCTL_UserEvtRx+0x88>
 800ab66:	e00b      	b.n	800ab80 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800ab68:	6878      	ldr	r0, [r7, #4]
 800ab6a:	f001 fcad 	bl	800c4c8 <SVCCTL_App_Notification>
 800ab6e:	4603      	mov	r3, r0
 800ab70:	75bb      	strb	r3, [r7, #22]
      break;
 800ab72:	e008      	b.n	800ab86 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800ab74:	2301      	movs	r3, #1
 800ab76:	75bb      	strb	r3, [r7, #22]
      break;
 800ab78:	e005      	b.n	800ab86 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	75bb      	strb	r3, [r7, #22]
      break;
 800ab7e:	e002      	b.n	800ab86 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800ab80:	2301      	movs	r3, #1
 800ab82:	75bb      	strb	r3, [r7, #22]
      break;
 800ab84:	bf00      	nop
  }

  return (return_status);
 800ab86:	7dbb      	ldrb	r3, [r7, #22]
}
 800ab88:	4618      	mov	r0, r3
 800ab8a:	3718      	adds	r7, #24
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bd80      	pop	{r7, pc}
 800ab90:	200001fc 	.word	0x200001fc

0800ab94 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b088      	sub	sp, #32
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800ab9c:	f107 030c 	add.w	r3, r7, #12
 800aba0:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800aba8:	69fb      	ldr	r3, [r7, #28]
 800abaa:	212e      	movs	r1, #46	@ 0x2e
 800abac:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 800abb0:	f000 fae8 	bl	800b184 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800abb4:	69fb      	ldr	r3, [r7, #28]
 800abb6:	330b      	adds	r3, #11
 800abb8:	78db      	ldrb	r3, [r3, #3]
}
 800abba:	4618      	mov	r0, r3
 800abbc:	3720      	adds	r7, #32
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}

0800abc2 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800abc2:	b580      	push	{r7, lr}
 800abc4:	b088      	sub	sp, #32
 800abc6:	af00      	add	r7, sp, #0
 800abc8:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800abca:	f107 030c 	add.w	r3, r7, #12
 800abce:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800abd6:	69fb      	ldr	r3, [r7, #28]
 800abd8:	210f      	movs	r1, #15
 800abda:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 800abde:	f000 fad1 	bl	800b184 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800abe2:	69fb      	ldr	r3, [r7, #28]
 800abe4:	330b      	adds	r3, #11
 800abe6:	78db      	ldrb	r3, [r3, #3]
}
 800abe8:	4618      	mov	r0, r3
 800abea:	3720      	adds	r7, #32
 800abec:	46bd      	mov	sp, r7
 800abee:	bd80      	pop	{r7, pc}

0800abf0 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b088      	sub	sp, #32
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800abf8:	f107 030c 	add.w	r3, r7, #12
 800abfc:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800abfe:	69fb      	ldr	r3, [r7, #28]
 800ac00:	687a      	ldr	r2, [r7, #4]
 800ac02:	2110      	movs	r1, #16
 800ac04:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 800ac08:	f000 fabc 	bl	800b184 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800ac0c:	69fb      	ldr	r3, [r7, #28]
 800ac0e:	330b      	adds	r3, #11
 800ac10:	78db      	ldrb	r3, [r3, #3]
}
 800ac12:	4618      	mov	r0, r3
 800ac14:	3720      	adds	r7, #32
 800ac16:	46bd      	mov	sp, r7
 800ac18:	bd80      	pop	{r7, pc}
	...

0800ac1c <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800ac1c:	b480      	push	{r7}
 800ac1e:	b08b      	sub	sp, #44	@ 0x2c
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800ac24:	2300      	movs	r3, #0
 800ac26:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800ac28:	2300      	movs	r3, #0
 800ac2a:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800ac30:	2300      	movs	r3, #0
 800ac32:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800ac34:	2300      	movs	r3, #0
 800ac36:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800ac38:	2300      	movs	r3, #0
 800ac3a:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800ac40:	2300      	movs	r3, #0
 800ac42:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800ac44:	4b4a      	ldr	r3, [pc, #296]	@ (800ad70 <SHCI_GetWirelessFwInfo+0x154>)
 800ac46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac48:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ac4c:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800ac4e:	693b      	ldr	r3, [r7, #16]
 800ac50:	009b      	lsls	r3, r3, #2
 800ac52:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800ac56:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	4a44      	ldr	r2, [pc, #272]	@ (800ad74 <SHCI_GetWirelessFwInfo+0x158>)
 800ac64:	4293      	cmp	r3, r2
 800ac66:	d10f      	bne.n	800ac88 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800ac68:	68bb      	ldr	r3, [r7, #8]
 800ac6a:	695b      	ldr	r3, [r3, #20]
 800ac6c:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800ac6e:	68bb      	ldr	r3, [r7, #8]
 800ac70:	699b      	ldr	r3, [r3, #24]
 800ac72:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800ac74:	68bb      	ldr	r3, [r7, #8]
 800ac76:	69db      	ldr	r3, [r3, #28]
 800ac78:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	68db      	ldr	r3, [r3, #12]
 800ac7e:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800ac80:	68bb      	ldr	r3, [r7, #8]
 800ac82:	691b      	ldr	r3, [r3, #16]
 800ac84:	617b      	str	r3, [r7, #20]
 800ac86:	e01a      	b.n	800acbe <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800ac88:	693b      	ldr	r3, [r7, #16]
 800ac8a:	009b      	lsls	r3, r3, #2
 800ac8c:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800ac90:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800ac94:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	691b      	ldr	r3, [r3, #16]
 800ac9c:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	695b      	ldr	r3, [r3, #20]
 800aca4:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	699b      	ldr	r3, [r3, #24]
 800acac:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	685b      	ldr	r3, [r3, #4]
 800acb4:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	689b      	ldr	r3, [r3, #8]
 800acbc:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800acbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acc0:	0e1b      	lsrs	r3, r3, #24
 800acc2:	b2da      	uxtb	r2, r3
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800acc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acca:	0c1b      	lsrs	r3, r3, #16
 800accc:	b2da      	uxtb	r2, r3
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800acd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acd4:	0a1b      	lsrs	r3, r3, #8
 800acd6:	b2da      	uxtb	r2, r3
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800acdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acde:	091b      	lsrs	r3, r3, #4
 800ace0:	b2db      	uxtb	r3, r3
 800ace2:	f003 030f 	and.w	r3, r3, #15
 800ace6:	b2da      	uxtb	r2, r3
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800acec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acee:	b2db      	uxtb	r3, r3
 800acf0:	f003 030f 	and.w	r3, r3, #15
 800acf4:	b2da      	uxtb	r2, r3
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800acfa:	6a3b      	ldr	r3, [r7, #32]
 800acfc:	0e1b      	lsrs	r3, r3, #24
 800acfe:	b2da      	uxtb	r2, r3
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800ad04:	6a3b      	ldr	r3, [r7, #32]
 800ad06:	0c1b      	lsrs	r3, r3, #16
 800ad08:	b2da      	uxtb	r2, r3
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800ad0e:	6a3b      	ldr	r3, [r7, #32]
 800ad10:	0a1b      	lsrs	r3, r3, #8
 800ad12:	b2da      	uxtb	r2, r3
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800ad18:	6a3b      	ldr	r3, [r7, #32]
 800ad1a:	b2da      	uxtb	r2, r3
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800ad20:	69fb      	ldr	r3, [r7, #28]
 800ad22:	b2da      	uxtb	r2, r3
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800ad28:	69bb      	ldr	r3, [r7, #24]
 800ad2a:	0e1b      	lsrs	r3, r3, #24
 800ad2c:	b2da      	uxtb	r2, r3
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800ad32:	69bb      	ldr	r3, [r7, #24]
 800ad34:	0c1b      	lsrs	r3, r3, #16
 800ad36:	b2da      	uxtb	r2, r3
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800ad3c:	69bb      	ldr	r3, [r7, #24]
 800ad3e:	0a1b      	lsrs	r3, r3, #8
 800ad40:	b2da      	uxtb	r2, r3
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800ad46:	697b      	ldr	r3, [r7, #20]
 800ad48:	0e1b      	lsrs	r3, r3, #24
 800ad4a:	b2da      	uxtb	r2, r3
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800ad50:	697b      	ldr	r3, [r7, #20]
 800ad52:	0c1b      	lsrs	r3, r3, #16
 800ad54:	b2da      	uxtb	r2, r3
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800ad5a:	697b      	ldr	r3, [r7, #20]
 800ad5c:	b2da      	uxtb	r2, r3
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800ad62:	2300      	movs	r3, #0
}
 800ad64:	4618      	mov	r0, r3
 800ad66:	372c      	adds	r7, #44	@ 0x2c
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6e:	4770      	bx	lr
 800ad70:	58004000 	.word	0x58004000
 800ad74:	a94656b9 	.word	0xa94656b9

0800ad78 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b082      	sub	sp, #8
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
 800ad80:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800ad82:	683b      	ldr	r3, [r7, #0]
 800ad84:	685b      	ldr	r3, [r3, #4]
 800ad86:	4a08      	ldr	r2, [pc, #32]	@ (800ada8 <hci_init+0x30>)
 800ad88:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800ad8a:	4a08      	ldr	r2, [pc, #32]	@ (800adac <hci_init+0x34>)
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800ad90:	4806      	ldr	r0, [pc, #24]	@ (800adac <hci_init+0x34>)
 800ad92:	f000 f979 	bl	800b088 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	f000 f8da 	bl	800af54 <TlInit>

  return;
 800ada0:	bf00      	nop
}
 800ada2:	3708      	adds	r7, #8
 800ada4:	46bd      	mov	sp, r7
 800ada6:	bd80      	pop	{r7, pc}
 800ada8:	20002c64 	.word	0x20002c64
 800adac:	20002c3c 	.word	0x20002c3c

0800adb0 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b084      	sub	sp, #16
 800adb4:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800adb6:	4822      	ldr	r0, [pc, #136]	@ (800ae40 <hci_user_evt_proc+0x90>)
 800adb8:	f000 fe10 	bl	800b9dc <LST_is_empty>
 800adbc:	4603      	mov	r3, r0
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d12b      	bne.n	800ae1a <hci_user_evt_proc+0x6a>
 800adc2:	4b20      	ldr	r3, [pc, #128]	@ (800ae44 <hci_user_evt_proc+0x94>)
 800adc4:	781b      	ldrb	r3, [r3, #0]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d027      	beq.n	800ae1a <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800adca:	f107 030c 	add.w	r3, r7, #12
 800adce:	4619      	mov	r1, r3
 800add0:	481b      	ldr	r0, [pc, #108]	@ (800ae40 <hci_user_evt_proc+0x90>)
 800add2:	f000 fe92 	bl	800bafa <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800add6:	4b1c      	ldr	r3, [pc, #112]	@ (800ae48 <hci_user_evt_proc+0x98>)
 800add8:	69db      	ldr	r3, [r3, #28]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d00c      	beq.n	800adf8 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800ade2:	2301      	movs	r3, #1
 800ade4:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800ade6:	4b18      	ldr	r3, [pc, #96]	@ (800ae48 <hci_user_evt_proc+0x98>)
 800ade8:	69db      	ldr	r3, [r3, #28]
 800adea:	1d3a      	adds	r2, r7, #4
 800adec:	4610      	mov	r0, r2
 800adee:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800adf0:	793a      	ldrb	r2, [r7, #4]
 800adf2:	4b14      	ldr	r3, [pc, #80]	@ (800ae44 <hci_user_evt_proc+0x94>)
 800adf4:	701a      	strb	r2, [r3, #0]
 800adf6:	e002      	b.n	800adfe <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800adf8:	4b12      	ldr	r3, [pc, #72]	@ (800ae44 <hci_user_evt_proc+0x94>)
 800adfa:	2201      	movs	r2, #1
 800adfc:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800adfe:	4b11      	ldr	r3, [pc, #68]	@ (800ae44 <hci_user_evt_proc+0x94>)
 800ae00:	781b      	ldrb	r3, [r3, #0]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d004      	beq.n	800ae10 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	4618      	mov	r0, r3
 800ae0a:	f000 fc0d 	bl	800b628 <TL_MM_EvtDone>
 800ae0e:	e004      	b.n	800ae1a <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	4619      	mov	r1, r3
 800ae14:	480a      	ldr	r0, [pc, #40]	@ (800ae40 <hci_user_evt_proc+0x90>)
 800ae16:	f000 fe03 	bl	800ba20 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800ae1a:	4809      	ldr	r0, [pc, #36]	@ (800ae40 <hci_user_evt_proc+0x90>)
 800ae1c:	f000 fdde 	bl	800b9dc <LST_is_empty>
 800ae20:	4603      	mov	r3, r0
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d107      	bne.n	800ae36 <hci_user_evt_proc+0x86>
 800ae26:	4b07      	ldr	r3, [pc, #28]	@ (800ae44 <hci_user_evt_proc+0x94>)
 800ae28:	781b      	ldrb	r3, [r3, #0]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d003      	beq.n	800ae36 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800ae2e:	4804      	ldr	r0, [pc, #16]	@ (800ae40 <hci_user_evt_proc+0x90>)
 800ae30:	f002 fa18 	bl	800d264 <hci_notify_asynch_evt>
  }


  return;
 800ae34:	bf00      	nop
 800ae36:	bf00      	nop
}
 800ae38:	3710      	adds	r7, #16
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	bd80      	pop	{r7, pc}
 800ae3e:	bf00      	nop
 800ae40:	20000224 	.word	0x20000224
 800ae44:	20000230 	.word	0x20000230
 800ae48:	20002c3c 	.word	0x20002c3c

0800ae4c <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b088      	sub	sp, #32
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
 800ae54:	460b      	mov	r3, r1
 800ae56:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800ae58:	2000      	movs	r0, #0
 800ae5a:	f000 f8d1 	bl	800b000 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800ae5e:	2300      	movs	r3, #0
 800ae60:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	885b      	ldrh	r3, [r3, #2]
 800ae66:	b21b      	sxth	r3, r3
 800ae68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ae6c:	b21a      	sxth	r2, r3
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	881b      	ldrh	r3, [r3, #0]
 800ae72:	029b      	lsls	r3, r3, #10
 800ae74:	b21b      	sxth	r3, r3
 800ae76:	4313      	orrs	r3, r2
 800ae78:	b21b      	sxth	r3, r3
 800ae7a:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 800ae7c:	4b33      	ldr	r3, [pc, #204]	@ (800af4c <hci_send_req+0x100>)
 800ae7e:	2201      	movs	r2, #1
 800ae80:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	68db      	ldr	r3, [r3, #12]
 800ae86:	b2d9      	uxtb	r1, r3
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	689a      	ldr	r2, [r3, #8]
 800ae8c:	8bbb      	ldrh	r3, [r7, #28]
 800ae8e:	4618      	mov	r0, r3
 800ae90:	f000 f890 	bl	800afb4 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800ae94:	e04e      	b.n	800af34 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800ae96:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800ae9a:	f002 f9fa 	bl	800d292 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800ae9e:	e043      	b.n	800af28 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800aea0:	f107 030c 	add.w	r3, r7, #12
 800aea4:	4619      	mov	r1, r3
 800aea6:	482a      	ldr	r0, [pc, #168]	@ (800af50 <hci_send_req+0x104>)
 800aea8:	f000 fe27 	bl	800bafa <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	7a5b      	ldrb	r3, [r3, #9]
 800aeb0:	2b0f      	cmp	r3, #15
 800aeb2:	d114      	bne.n	800aede <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	330b      	adds	r3, #11
 800aeb8:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800aeba:	693b      	ldr	r3, [r7, #16]
 800aebc:	885b      	ldrh	r3, [r3, #2]
 800aebe:	b29b      	uxth	r3, r3
 800aec0:	8bba      	ldrh	r2, [r7, #28]
 800aec2:	429a      	cmp	r2, r3
 800aec4:	d104      	bne.n	800aed0 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	691b      	ldr	r3, [r3, #16]
 800aeca:	693a      	ldr	r2, [r7, #16]
 800aecc:	7812      	ldrb	r2, [r2, #0]
 800aece:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800aed0:	693b      	ldr	r3, [r7, #16]
 800aed2:	785b      	ldrb	r3, [r3, #1]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d027      	beq.n	800af28 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800aed8:	2301      	movs	r3, #1
 800aeda:	77fb      	strb	r3, [r7, #31]
 800aedc:	e024      	b.n	800af28 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	330b      	adds	r3, #11
 800aee2:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800aee4:	69bb      	ldr	r3, [r7, #24]
 800aee6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800aeea:	b29b      	uxth	r3, r3
 800aeec:	8bba      	ldrh	r2, [r7, #28]
 800aeee:	429a      	cmp	r2, r3
 800aef0:	d114      	bne.n	800af1c <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	7a9b      	ldrb	r3, [r3, #10]
 800aef6:	3b03      	subs	r3, #3
 800aef8:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	695a      	ldr	r2, [r3, #20]
 800aefe:	7dfb      	ldrb	r3, [r7, #23]
 800af00:	429a      	cmp	r2, r3
 800af02:	bfa8      	it	ge
 800af04:	461a      	movge	r2, r3
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	6918      	ldr	r0, [r3, #16]
 800af0e:	69bb      	ldr	r3, [r7, #24]
 800af10:	1cd9      	adds	r1, r3, #3
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	695b      	ldr	r3, [r3, #20]
 800af16:	461a      	mov	r2, r3
 800af18:	f004 f98f 	bl	800f23a <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800af1c:	69bb      	ldr	r3, [r7, #24]
 800af1e:	781b      	ldrb	r3, [r3, #0]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d001      	beq.n	800af28 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800af24:	2301      	movs	r3, #1
 800af26:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800af28:	4809      	ldr	r0, [pc, #36]	@ (800af50 <hci_send_req+0x104>)
 800af2a:	f000 fd57 	bl	800b9dc <LST_is_empty>
 800af2e:	4603      	mov	r3, r0
 800af30:	2b00      	cmp	r3, #0
 800af32:	d0b5      	beq.n	800aea0 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800af34:	7ffb      	ldrb	r3, [r7, #31]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d0ad      	beq.n	800ae96 <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800af3a:	2001      	movs	r0, #1
 800af3c:	f000 f860 	bl	800b000 <NotifyCmdStatus>

  return 0;
 800af40:	2300      	movs	r3, #0
}
 800af42:	4618      	mov	r0, r3
 800af44:	3720      	adds	r7, #32
 800af46:	46bd      	mov	sp, r7
 800af48:	bd80      	pop	{r7, pc}
 800af4a:	bf00      	nop
 800af4c:	20002c68 	.word	0x20002c68
 800af50:	20002c5c 	.word	0x20002c5c

0800af54 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b086      	sub	sp, #24
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800af5c:	480f      	ldr	r0, [pc, #60]	@ (800af9c <TlInit+0x48>)
 800af5e:	f000 fd2d 	bl	800b9bc <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800af62:	4a0f      	ldr	r2, [pc, #60]	@ (800afa0 <TlInit+0x4c>)
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800af68:	480e      	ldr	r0, [pc, #56]	@ (800afa4 <TlInit+0x50>)
 800af6a:	f000 fd27 	bl	800b9bc <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800af6e:	4b0e      	ldr	r3, [pc, #56]	@ (800afa8 <TlInit+0x54>)
 800af70:	2201      	movs	r2, #1
 800af72:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800af74:	4b0d      	ldr	r3, [pc, #52]	@ (800afac <TlInit+0x58>)
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d00a      	beq.n	800af92 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800af80:	4b0b      	ldr	r3, [pc, #44]	@ (800afb0 <TlInit+0x5c>)
 800af82:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800af84:	4b09      	ldr	r3, [pc, #36]	@ (800afac <TlInit+0x58>)
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	f107 0208 	add.w	r2, r7, #8
 800af8c:	4610      	mov	r0, r2
 800af8e:	4798      	blx	r3
  }

  return;
 800af90:	bf00      	nop
 800af92:	bf00      	nop
}
 800af94:	3718      	adds	r7, #24
 800af96:	46bd      	mov	sp, r7
 800af98:	bd80      	pop	{r7, pc}
 800af9a:	bf00      	nop
 800af9c:	20002c5c 	.word	0x20002c5c
 800afa0:	2000022c 	.word	0x2000022c
 800afa4:	20000224 	.word	0x20000224
 800afa8:	20000230 	.word	0x20000230
 800afac:	20002c3c 	.word	0x20002c3c
 800afb0:	0800b041 	.word	0x0800b041

0800afb4 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b082      	sub	sp, #8
 800afb8:	af00      	add	r7, sp, #0
 800afba:	4603      	mov	r3, r0
 800afbc:	603a      	str	r2, [r7, #0]
 800afbe:	80fb      	strh	r3, [r7, #6]
 800afc0:	460b      	mov	r3, r1
 800afc2:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800afc4:	4b0c      	ldr	r3, [pc, #48]	@ (800aff8 <SendCmd+0x44>)
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	88fa      	ldrh	r2, [r7, #6]
 800afca:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800afce:	4b0a      	ldr	r3, [pc, #40]	@ (800aff8 <SendCmd+0x44>)
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	797a      	ldrb	r2, [r7, #5]
 800afd4:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800afd6:	4b08      	ldr	r3, [pc, #32]	@ (800aff8 <SendCmd+0x44>)
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	330c      	adds	r3, #12
 800afdc:	797a      	ldrb	r2, [r7, #5]
 800afde:	6839      	ldr	r1, [r7, #0]
 800afe0:	4618      	mov	r0, r3
 800afe2:	f004 f92a 	bl	800f23a <memcpy>

  hciContext.io.Send(0,0);
 800afe6:	4b05      	ldr	r3, [pc, #20]	@ (800affc <SendCmd+0x48>)
 800afe8:	691b      	ldr	r3, [r3, #16]
 800afea:	2100      	movs	r1, #0
 800afec:	2000      	movs	r0, #0
 800afee:	4798      	blx	r3

  return;
 800aff0:	bf00      	nop
}
 800aff2:	3708      	adds	r7, #8
 800aff4:	46bd      	mov	sp, r7
 800aff6:	bd80      	pop	{r7, pc}
 800aff8:	2000022c 	.word	0x2000022c
 800affc:	20002c3c 	.word	0x20002c3c

0800b000 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b082      	sub	sp, #8
 800b004:	af00      	add	r7, sp, #0
 800b006:	4603      	mov	r3, r0
 800b008:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800b00a:	79fb      	ldrb	r3, [r7, #7]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d108      	bne.n	800b022 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800b010:	4b0a      	ldr	r3, [pc, #40]	@ (800b03c <NotifyCmdStatus+0x3c>)
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d00d      	beq.n	800b034 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800b018:	4b08      	ldr	r3, [pc, #32]	@ (800b03c <NotifyCmdStatus+0x3c>)
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	2000      	movs	r0, #0
 800b01e:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800b020:	e008      	b.n	800b034 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800b022:	4b06      	ldr	r3, [pc, #24]	@ (800b03c <NotifyCmdStatus+0x3c>)
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d004      	beq.n	800b034 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800b02a:	4b04      	ldr	r3, [pc, #16]	@ (800b03c <NotifyCmdStatus+0x3c>)
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	2001      	movs	r0, #1
 800b030:	4798      	blx	r3
  return;
 800b032:	bf00      	nop
 800b034:	bf00      	nop
}
 800b036:	3708      	adds	r7, #8
 800b038:	46bd      	mov	sp, r7
 800b03a:	bd80      	pop	{r7, pc}
 800b03c:	20002c64 	.word	0x20002c64

0800b040 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b082      	sub	sp, #8
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	7a5b      	ldrb	r3, [r3, #9]
 800b04c:	2b0f      	cmp	r3, #15
 800b04e:	d003      	beq.n	800b058 <TlEvtReceived+0x18>
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	7a5b      	ldrb	r3, [r3, #9]
 800b054:	2b0e      	cmp	r3, #14
 800b056:	d107      	bne.n	800b068 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800b058:	6879      	ldr	r1, [r7, #4]
 800b05a:	4809      	ldr	r0, [pc, #36]	@ (800b080 <TlEvtReceived+0x40>)
 800b05c:	f000 fd06 	bl	800ba6c <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800b060:	2000      	movs	r0, #0
 800b062:	f002 f90b 	bl	800d27c <hci_cmd_resp_release>
 800b066:	e006      	b.n	800b076 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800b068:	6879      	ldr	r1, [r7, #4]
 800b06a:	4806      	ldr	r0, [pc, #24]	@ (800b084 <TlEvtReceived+0x44>)
 800b06c:	f000 fcfe 	bl	800ba6c <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800b070:	4804      	ldr	r0, [pc, #16]	@ (800b084 <TlEvtReceived+0x44>)
 800b072:	f002 f8f7 	bl	800d264 <hci_notify_asynch_evt>
  }

  return;
 800b076:	bf00      	nop
}
 800b078:	3708      	adds	r7, #8
 800b07a:	46bd      	mov	sp, r7
 800b07c:	bd80      	pop	{r7, pc}
 800b07e:	bf00      	nop
 800b080:	20002c5c 	.word	0x20002c5c
 800b084:	20000224 	.word	0x20000224

0800b088 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800b088:	b480      	push	{r7}
 800b08a:	b083      	sub	sp, #12
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	4a05      	ldr	r2, [pc, #20]	@ (800b0a8 <hci_register_io_bus+0x20>)
 800b094:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	4a04      	ldr	r2, [pc, #16]	@ (800b0ac <hci_register_io_bus+0x24>)
 800b09a:	611a      	str	r2, [r3, #16]

  return;
 800b09c:	bf00      	nop
}
 800b09e:	370c      	adds	r7, #12
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a6:	4770      	bx	lr
 800b0a8:	0800b3a1 	.word	0x0800b3a1
 800b0ac:	0800b409 	.word	0x0800b409

0800b0b0 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b082      	sub	sp, #8
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
 800b0b8:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800b0ba:	683b      	ldr	r3, [r7, #0]
 800b0bc:	685b      	ldr	r3, [r3, #4]
 800b0be:	4a08      	ldr	r2, [pc, #32]	@ (800b0e0 <shci_init+0x30>)
 800b0c0:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800b0c2:	4a08      	ldr	r2, [pc, #32]	@ (800b0e4 <shci_init+0x34>)
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800b0c8:	4806      	ldr	r0, [pc, #24]	@ (800b0e4 <shci_init+0x34>)
 800b0ca:	f000 f915 	bl	800b2f8 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800b0ce:	683b      	ldr	r3, [r7, #0]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	f000 f898 	bl	800b208 <TlInit>

  return;
 800b0d8:	bf00      	nop
}
 800b0da:	3708      	adds	r7, #8
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	bd80      	pop	{r7, pc}
 800b0e0:	20002c8c 	.word	0x20002c8c
 800b0e4:	20002c6c 	.word	0x20002c6c

0800b0e8 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b084      	sub	sp, #16
 800b0ec:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800b0ee:	4822      	ldr	r0, [pc, #136]	@ (800b178 <shci_user_evt_proc+0x90>)
 800b0f0:	f000 fc74 	bl	800b9dc <LST_is_empty>
 800b0f4:	4603      	mov	r3, r0
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d12b      	bne.n	800b152 <shci_user_evt_proc+0x6a>
 800b0fa:	4b20      	ldr	r3, [pc, #128]	@ (800b17c <shci_user_evt_proc+0x94>)
 800b0fc:	781b      	ldrb	r3, [r3, #0]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d027      	beq.n	800b152 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800b102:	f107 030c 	add.w	r3, r7, #12
 800b106:	4619      	mov	r1, r3
 800b108:	481b      	ldr	r0, [pc, #108]	@ (800b178 <shci_user_evt_proc+0x90>)
 800b10a:	f000 fcf6 	bl	800bafa <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800b10e:	4b1c      	ldr	r3, [pc, #112]	@ (800b180 <shci_user_evt_proc+0x98>)
 800b110:	69db      	ldr	r3, [r3, #28]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d00c      	beq.n	800b130 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800b11a:	2301      	movs	r3, #1
 800b11c:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800b11e:	4b18      	ldr	r3, [pc, #96]	@ (800b180 <shci_user_evt_proc+0x98>)
 800b120:	69db      	ldr	r3, [r3, #28]
 800b122:	1d3a      	adds	r2, r7, #4
 800b124:	4610      	mov	r0, r2
 800b126:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800b128:	793a      	ldrb	r2, [r7, #4]
 800b12a:	4b14      	ldr	r3, [pc, #80]	@ (800b17c <shci_user_evt_proc+0x94>)
 800b12c:	701a      	strb	r2, [r3, #0]
 800b12e:	e002      	b.n	800b136 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800b130:	4b12      	ldr	r3, [pc, #72]	@ (800b17c <shci_user_evt_proc+0x94>)
 800b132:	2201      	movs	r2, #1
 800b134:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800b136:	4b11      	ldr	r3, [pc, #68]	@ (800b17c <shci_user_evt_proc+0x94>)
 800b138:	781b      	ldrb	r3, [r3, #0]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d004      	beq.n	800b148 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	4618      	mov	r0, r3
 800b142:	f000 fa71 	bl	800b628 <TL_MM_EvtDone>
 800b146:	e004      	b.n	800b152 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	4619      	mov	r1, r3
 800b14c:	480a      	ldr	r0, [pc, #40]	@ (800b178 <shci_user_evt_proc+0x90>)
 800b14e:	f000 fc67 	bl	800ba20 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800b152:	4809      	ldr	r0, [pc, #36]	@ (800b178 <shci_user_evt_proc+0x90>)
 800b154:	f000 fc42 	bl	800b9dc <LST_is_empty>
 800b158:	4603      	mov	r3, r0
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d107      	bne.n	800b16e <shci_user_evt_proc+0x86>
 800b15e:	4b07      	ldr	r3, [pc, #28]	@ (800b17c <shci_user_evt_proc+0x94>)
 800b160:	781b      	ldrb	r3, [r3, #0]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d003      	beq.n	800b16e <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800b166:	4804      	ldr	r0, [pc, #16]	@ (800b178 <shci_user_evt_proc+0x90>)
 800b168:	f7f7 fc0e 	bl	8002988 <shci_notify_asynch_evt>
  }


  return;
 800b16c:	bf00      	nop
 800b16e:	bf00      	nop
}
 800b170:	3710      	adds	r7, #16
 800b172:	46bd      	mov	sp, r7
 800b174:	bd80      	pop	{r7, pc}
 800b176:	bf00      	nop
 800b178:	20000234 	.word	0x20000234
 800b17c:	20000244 	.word	0x20000244
 800b180:	20002c6c 	.word	0x20002c6c

0800b184 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800b184:	b580      	push	{r7, lr}
 800b186:	b084      	sub	sp, #16
 800b188:	af00      	add	r7, sp, #0
 800b18a:	60ba      	str	r2, [r7, #8]
 800b18c:	607b      	str	r3, [r7, #4]
 800b18e:	4603      	mov	r3, r0
 800b190:	81fb      	strh	r3, [r7, #14]
 800b192:	460b      	mov	r3, r1
 800b194:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800b196:	2000      	movs	r0, #0
 800b198:	f000 f868 	bl	800b26c <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800b19c:	4b17      	ldr	r3, [pc, #92]	@ (800b1fc <shci_send+0x78>)
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	89fa      	ldrh	r2, [r7, #14]
 800b1a2:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800b1a6:	4b15      	ldr	r3, [pc, #84]	@ (800b1fc <shci_send+0x78>)
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	7b7a      	ldrb	r2, [r7, #13]
 800b1ac:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800b1ae:	4b13      	ldr	r3, [pc, #76]	@ (800b1fc <shci_send+0x78>)
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	330c      	adds	r3, #12
 800b1b4:	7b7a      	ldrb	r2, [r7, #13]
 800b1b6:	68b9      	ldr	r1, [r7, #8]
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	f004 f83e 	bl	800f23a <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 800b1be:	4b10      	ldr	r3, [pc, #64]	@ (800b200 <shci_send+0x7c>)
 800b1c0:	2201      	movs	r2, #1
 800b1c2:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 800b1c4:	4b0f      	ldr	r3, [pc, #60]	@ (800b204 <shci_send+0x80>)
 800b1c6:	691b      	ldr	r3, [r3, #16]
 800b1c8:	2100      	movs	r1, #0
 800b1ca:	2000      	movs	r0, #0
 800b1cc:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800b1ce:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800b1d2:	f7f7 fbf0 	bl	80029b6 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	f103 0008 	add.w	r0, r3, #8
 800b1dc:	4b07      	ldr	r3, [pc, #28]	@ (800b1fc <shci_send+0x78>)
 800b1de:	6819      	ldr	r1, [r3, #0]
 800b1e0:	4b06      	ldr	r3, [pc, #24]	@ (800b1fc <shci_send+0x78>)
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	789b      	ldrb	r3, [r3, #2]
 800b1e6:	3303      	adds	r3, #3
 800b1e8:	461a      	mov	r2, r3
 800b1ea:	f004 f826 	bl	800f23a <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800b1ee:	2001      	movs	r0, #1
 800b1f0:	f000 f83c 	bl	800b26c <Cmd_SetStatus>

  return;
 800b1f4:	bf00      	nop
}
 800b1f6:	3710      	adds	r7, #16
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	bd80      	pop	{r7, pc}
 800b1fc:	20000240 	.word	0x20000240
 800b200:	20002c90 	.word	0x20002c90
 800b204:	20002c6c 	.word	0x20002c6c

0800b208 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b086      	sub	sp, #24
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800b210:	4a10      	ldr	r2, [pc, #64]	@ (800b254 <TlInit+0x4c>)
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800b216:	4810      	ldr	r0, [pc, #64]	@ (800b258 <TlInit+0x50>)
 800b218:	f000 fbd0 	bl	800b9bc <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800b21c:	2001      	movs	r0, #1
 800b21e:	f000 f825 	bl	800b26c <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800b222:	4b0e      	ldr	r3, [pc, #56]	@ (800b25c <TlInit+0x54>)
 800b224:	2201      	movs	r2, #1
 800b226:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800b228:	4b0d      	ldr	r3, [pc, #52]	@ (800b260 <TlInit+0x58>)
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d00c      	beq.n	800b24a <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800b234:	4b0b      	ldr	r3, [pc, #44]	@ (800b264 <TlInit+0x5c>)
 800b236:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800b238:	4b0b      	ldr	r3, [pc, #44]	@ (800b268 <TlInit+0x60>)
 800b23a:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800b23c:	4b08      	ldr	r3, [pc, #32]	@ (800b260 <TlInit+0x58>)
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	f107 020c 	add.w	r2, r7, #12
 800b244:	4610      	mov	r0, r2
 800b246:	4798      	blx	r3
  }

  return;
 800b248:	bf00      	nop
 800b24a:	bf00      	nop
}
 800b24c:	3718      	adds	r7, #24
 800b24e:	46bd      	mov	sp, r7
 800b250:	bd80      	pop	{r7, pc}
 800b252:	bf00      	nop
 800b254:	20000240 	.word	0x20000240
 800b258:	20000234 	.word	0x20000234
 800b25c:	20000244 	.word	0x20000244
 800b260:	20002c6c 	.word	0x20002c6c
 800b264:	0800b2bd 	.word	0x0800b2bd
 800b268:	0800b2d5 	.word	0x0800b2d5

0800b26c <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b082      	sub	sp, #8
 800b270:	af00      	add	r7, sp, #0
 800b272:	4603      	mov	r3, r0
 800b274:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800b276:	79fb      	ldrb	r3, [r7, #7]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d10b      	bne.n	800b294 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800b27c:	4b0d      	ldr	r3, [pc, #52]	@ (800b2b4 <Cmd_SetStatus+0x48>)
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d003      	beq.n	800b28c <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800b284:	4b0b      	ldr	r3, [pc, #44]	@ (800b2b4 <Cmd_SetStatus+0x48>)
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	2000      	movs	r0, #0
 800b28a:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800b28c:	4b0a      	ldr	r3, [pc, #40]	@ (800b2b8 <Cmd_SetStatus+0x4c>)
 800b28e:	2200      	movs	r2, #0
 800b290:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800b292:	e00b      	b.n	800b2ac <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800b294:	4b08      	ldr	r3, [pc, #32]	@ (800b2b8 <Cmd_SetStatus+0x4c>)
 800b296:	2201      	movs	r2, #1
 800b298:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800b29a:	4b06      	ldr	r3, [pc, #24]	@ (800b2b4 <Cmd_SetStatus+0x48>)
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d004      	beq.n	800b2ac <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800b2a2:	4b04      	ldr	r3, [pc, #16]	@ (800b2b4 <Cmd_SetStatus+0x48>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	2001      	movs	r0, #1
 800b2a8:	4798      	blx	r3
  return;
 800b2aa:	bf00      	nop
 800b2ac:	bf00      	nop
}
 800b2ae:	3708      	adds	r7, #8
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	bd80      	pop	{r7, pc}
 800b2b4:	20002c8c 	.word	0x20002c8c
 800b2b8:	2000023c 	.word	0x2000023c

0800b2bc <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b082      	sub	sp, #8
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800b2c4:	2000      	movs	r0, #0
 800b2c6:	f7f7 fb6b 	bl	80029a0 <shci_cmd_resp_release>

  return;
 800b2ca:	bf00      	nop
}
 800b2cc:	3708      	adds	r7, #8
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	bd80      	pop	{r7, pc}
	...

0800b2d4 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b082      	sub	sp, #8
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800b2dc:	6879      	ldr	r1, [r7, #4]
 800b2de:	4805      	ldr	r0, [pc, #20]	@ (800b2f4 <TlUserEvtReceived+0x20>)
 800b2e0:	f000 fbc4 	bl	800ba6c <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800b2e4:	4803      	ldr	r0, [pc, #12]	@ (800b2f4 <TlUserEvtReceived+0x20>)
 800b2e6:	f7f7 fb4f 	bl	8002988 <shci_notify_asynch_evt>

  return;
 800b2ea:	bf00      	nop
}
 800b2ec:	3708      	adds	r7, #8
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	bd80      	pop	{r7, pc}
 800b2f2:	bf00      	nop
 800b2f4:	20000234 	.word	0x20000234

0800b2f8 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800b2f8:	b480      	push	{r7}
 800b2fa:	b083      	sub	sp, #12
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	4a05      	ldr	r2, [pc, #20]	@ (800b318 <shci_register_io_bus+0x20>)
 800b304:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	4a04      	ldr	r2, [pc, #16]	@ (800b31c <shci_register_io_bus+0x24>)
 800b30a:	611a      	str	r2, [r3, #16]

  return;
 800b30c:	bf00      	nop
}
 800b30e:	370c      	adds	r7, #12
 800b310:	46bd      	mov	sp, r7
 800b312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b316:	4770      	bx	lr
 800b318:	0800b4b5 	.word	0x0800b4b5
 800b31c:	0800b509 	.word	0x0800b509

0800b320 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800b320:	b580      	push	{r7, lr}
 800b322:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800b324:	f002 fb28 	bl	800d978 <HW_IPCC_Enable>

  return;
 800b328:	bf00      	nop
}
 800b32a:	bd80      	pop	{r7, pc}

0800b32c <TL_Init>:


void TL_Init( void )
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800b330:	4b10      	ldr	r3, [pc, #64]	@ (800b374 <TL_Init+0x48>)
 800b332:	4a11      	ldr	r2, [pc, #68]	@ (800b378 <TL_Init+0x4c>)
 800b334:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800b336:	4b0f      	ldr	r3, [pc, #60]	@ (800b374 <TL_Init+0x48>)
 800b338:	4a10      	ldr	r2, [pc, #64]	@ (800b37c <TL_Init+0x50>)
 800b33a:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800b33c:	4b0d      	ldr	r3, [pc, #52]	@ (800b374 <TL_Init+0x48>)
 800b33e:	4a10      	ldr	r2, [pc, #64]	@ (800b380 <TL_Init+0x54>)
 800b340:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800b342:	4b0c      	ldr	r3, [pc, #48]	@ (800b374 <TL_Init+0x48>)
 800b344:	4a0f      	ldr	r2, [pc, #60]	@ (800b384 <TL_Init+0x58>)
 800b346:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800b348:	4b0a      	ldr	r3, [pc, #40]	@ (800b374 <TL_Init+0x48>)
 800b34a:	4a0f      	ldr	r2, [pc, #60]	@ (800b388 <TL_Init+0x5c>)
 800b34c:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800b34e:	4b09      	ldr	r3, [pc, #36]	@ (800b374 <TL_Init+0x48>)
 800b350:	4a0e      	ldr	r2, [pc, #56]	@ (800b38c <TL_Init+0x60>)
 800b352:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800b354:	4b07      	ldr	r3, [pc, #28]	@ (800b374 <TL_Init+0x48>)
 800b356:	4a0e      	ldr	r2, [pc, #56]	@ (800b390 <TL_Init+0x64>)
 800b358:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800b35a:	4b06      	ldr	r3, [pc, #24]	@ (800b374 <TL_Init+0x48>)
 800b35c:	4a0d      	ldr	r2, [pc, #52]	@ (800b394 <TL_Init+0x68>)
 800b35e:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800b360:	4b04      	ldr	r3, [pc, #16]	@ (800b374 <TL_Init+0x48>)
 800b362:	4a0d      	ldr	r2, [pc, #52]	@ (800b398 <TL_Init+0x6c>)
 800b364:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800b366:	4b03      	ldr	r3, [pc, #12]	@ (800b374 <TL_Init+0x48>)
 800b368:	4a0c      	ldr	r2, [pc, #48]	@ (800b39c <TL_Init+0x70>)
 800b36a:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800b36c:	f002 fb18 	bl	800d9a0 <HW_IPCC_Init>

  return;
 800b370:	bf00      	nop
}
 800b372:	bd80      	pop	{r7, pc}
 800b374:	20030000 	.word	0x20030000
 800b378:	20030028 	.word	0x20030028
 800b37c:	20030048 	.word	0x20030048
 800b380:	20030058 	.word	0x20030058
 800b384:	20030068 	.word	0x20030068
 800b388:	20030070 	.word	0x20030070
 800b38c:	20030078 	.word	0x20030078
 800b390:	20030080 	.word	0x20030080
 800b394:	2003009c 	.word	0x2003009c
 800b398:	200300a0 	.word	0x200300a0
 800b39c:	200300ac 	.word	0x200300ac

0800b3a0 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b084      	sub	sp, #16
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800b3ac:	4811      	ldr	r0, [pc, #68]	@ (800b3f4 <TL_BLE_Init+0x54>)
 800b3ae:	f000 fb05 	bl	800b9bc <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800b3b2:	4b11      	ldr	r3, [pc, #68]	@ (800b3f8 <TL_BLE_Init+0x58>)
 800b3b4:	685b      	ldr	r3, [r3, #4]
 800b3b6:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	689a      	ldr	r2, [r3, #8]
 800b3bc:	68bb      	ldr	r3, [r7, #8]
 800b3be:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	68da      	ldr	r2, [r3, #12]
 800b3c4:	68bb      	ldr	r3, [r7, #8]
 800b3c6:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800b3c8:	68bb      	ldr	r3, [r7, #8]
 800b3ca:	4a0c      	ldr	r2, [pc, #48]	@ (800b3fc <TL_BLE_Init+0x5c>)
 800b3cc:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800b3ce:	68bb      	ldr	r3, [r7, #8]
 800b3d0:	4a08      	ldr	r2, [pc, #32]	@ (800b3f4 <TL_BLE_Init+0x54>)
 800b3d2:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800b3d4:	f002 fafa 	bl	800d9cc <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	4a08      	ldr	r2, [pc, #32]	@ (800b400 <TL_BLE_Init+0x60>)
 800b3de:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	685b      	ldr	r3, [r3, #4]
 800b3e4:	4a07      	ldr	r2, [pc, #28]	@ (800b404 <TL_BLE_Init+0x64>)
 800b3e6:	6013      	str	r3, [r2, #0]

  return 0;
 800b3e8:	2300      	movs	r3, #0
}
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	3710      	adds	r7, #16
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	bd80      	pop	{r7, pc}
 800b3f2:	bf00      	nop
 800b3f4:	200300c8 	.word	0x200300c8
 800b3f8:	20030000 	.word	0x20030000
 800b3fc:	20030a58 	.word	0x20030a58
 800b400:	20002c9c 	.word	0x20002c9c
 800b404:	20002ca0 	.word	0x20002ca0

0800b408 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b082      	sub	sp, #8
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
 800b410:	460b      	mov	r3, r1
 800b412:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800b414:	4b09      	ldr	r3, [pc, #36]	@ (800b43c <TL_BLE_SendCmd+0x34>)
 800b416:	685b      	ldr	r3, [r3, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	2201      	movs	r2, #1
 800b41c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800b41e:	4b07      	ldr	r3, [pc, #28]	@ (800b43c <TL_BLE_SendCmd+0x34>)
 800b420:	685b      	ldr	r3, [r3, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	4619      	mov	r1, r3
 800b426:	2001      	movs	r0, #1
 800b428:	f000 f96c 	bl	800b704 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800b42c:	f002 fad8 	bl	800d9e0 <HW_IPCC_BLE_SendCmd>

  return 0;
 800b430:	2300      	movs	r3, #0
}
 800b432:	4618      	mov	r0, r3
 800b434:	3708      	adds	r7, #8
 800b436:	46bd      	mov	sp, r7
 800b438:	bd80      	pop	{r7, pc}
 800b43a:	bf00      	nop
 800b43c:	20030000 	.word	0x20030000

0800b440 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b082      	sub	sp, #8
 800b444:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800b446:	e01c      	b.n	800b482 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800b448:	1d3b      	adds	r3, r7, #4
 800b44a:	4619      	mov	r1, r3
 800b44c:	4812      	ldr	r0, [pc, #72]	@ (800b498 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800b44e:	f000 fb54 	bl	800bafa <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	7a5b      	ldrb	r3, [r3, #9]
 800b456:	2b0f      	cmp	r3, #15
 800b458:	d003      	beq.n	800b462 <HW_IPCC_BLE_RxEvtNot+0x22>
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	7a5b      	ldrb	r3, [r3, #9]
 800b45e:	2b0e      	cmp	r3, #14
 800b460:	d105      	bne.n	800b46e <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	4619      	mov	r1, r3
 800b466:	2002      	movs	r0, #2
 800b468:	f000 f94c 	bl	800b704 <OutputDbgTrace>
 800b46c:	e004      	b.n	800b478 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	4619      	mov	r1, r3
 800b472:	2003      	movs	r0, #3
 800b474:	f000 f946 	bl	800b704 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800b478:	4b08      	ldr	r3, [pc, #32]	@ (800b49c <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	687a      	ldr	r2, [r7, #4]
 800b47e:	4610      	mov	r0, r2
 800b480:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800b482:	4805      	ldr	r0, [pc, #20]	@ (800b498 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800b484:	f000 faaa 	bl	800b9dc <LST_is_empty>
 800b488:	4603      	mov	r3, r0
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d0dc      	beq.n	800b448 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800b48e:	bf00      	nop
}
 800b490:	3708      	adds	r7, #8
 800b492:	46bd      	mov	sp, r7
 800b494:	bd80      	pop	{r7, pc}
 800b496:	bf00      	nop
 800b498:	200300c8 	.word	0x200300c8
 800b49c:	20002c9c 	.word	0x20002c9c

0800b4a0 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800b4a4:	4b02      	ldr	r3, [pc, #8]	@ (800b4b0 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	4798      	blx	r3

  return;
 800b4aa:	bf00      	nop
}
 800b4ac:	bd80      	pop	{r7, pc}
 800b4ae:	bf00      	nop
 800b4b0:	20002ca0 	.word	0x20002ca0

0800b4b4 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b084      	sub	sp, #16
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800b4c0:	480d      	ldr	r0, [pc, #52]	@ (800b4f8 <TL_SYS_Init+0x44>)
 800b4c2:	f000 fa7b 	bl	800b9bc <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800b4c6:	4b0d      	ldr	r3, [pc, #52]	@ (800b4fc <TL_SYS_Init+0x48>)
 800b4c8:	68db      	ldr	r3, [r3, #12]
 800b4ca:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	689a      	ldr	r2, [r3, #8]
 800b4d0:	68bb      	ldr	r3, [r7, #8]
 800b4d2:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800b4d4:	68bb      	ldr	r3, [r7, #8]
 800b4d6:	4a08      	ldr	r2, [pc, #32]	@ (800b4f8 <TL_SYS_Init+0x44>)
 800b4d8:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800b4da:	f002 faa3 	bl	800da24 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	4a07      	ldr	r2, [pc, #28]	@ (800b500 <TL_SYS_Init+0x4c>)
 800b4e4:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	685b      	ldr	r3, [r3, #4]
 800b4ea:	4a06      	ldr	r2, [pc, #24]	@ (800b504 <TL_SYS_Init+0x50>)
 800b4ec:	6013      	str	r3, [r2, #0]

  return 0;
 800b4ee:	2300      	movs	r3, #0
}
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	3710      	adds	r7, #16
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bd80      	pop	{r7, pc}
 800b4f8:	200300d0 	.word	0x200300d0
 800b4fc:	20030000 	.word	0x20030000
 800b500:	20002ca4 	.word	0x20002ca4
 800b504:	20002ca8 	.word	0x20002ca8

0800b508 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b082      	sub	sp, #8
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
 800b510:	460b      	mov	r3, r1
 800b512:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800b514:	4b09      	ldr	r3, [pc, #36]	@ (800b53c <TL_SYS_SendCmd+0x34>)
 800b516:	68db      	ldr	r3, [r3, #12]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	2210      	movs	r2, #16
 800b51c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800b51e:	4b07      	ldr	r3, [pc, #28]	@ (800b53c <TL_SYS_SendCmd+0x34>)
 800b520:	68db      	ldr	r3, [r3, #12]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	4619      	mov	r1, r3
 800b526:	2004      	movs	r0, #4
 800b528:	f000 f8ec 	bl	800b704 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800b52c:	f002 fa84 	bl	800da38 <HW_IPCC_SYS_SendCmd>

  return 0;
 800b530:	2300      	movs	r3, #0
}
 800b532:	4618      	mov	r0, r3
 800b534:	3708      	adds	r7, #8
 800b536:	46bd      	mov	sp, r7
 800b538:	bd80      	pop	{r7, pc}
 800b53a:	bf00      	nop
 800b53c:	20030000 	.word	0x20030000

0800b540 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800b540:	b580      	push	{r7, lr}
 800b542:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800b544:	4b07      	ldr	r3, [pc, #28]	@ (800b564 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800b546:	68db      	ldr	r3, [r3, #12]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	4619      	mov	r1, r3
 800b54c:	2005      	movs	r0, #5
 800b54e:	f000 f8d9 	bl	800b704 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800b552:	4b05      	ldr	r3, [pc, #20]	@ (800b568 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	4a03      	ldr	r2, [pc, #12]	@ (800b564 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800b558:	68d2      	ldr	r2, [r2, #12]
 800b55a:	6812      	ldr	r2, [r2, #0]
 800b55c:	4610      	mov	r0, r2
 800b55e:	4798      	blx	r3

  return;
 800b560:	bf00      	nop
}
 800b562:	bd80      	pop	{r7, pc}
 800b564:	20030000 	.word	0x20030000
 800b568:	20002ca4 	.word	0x20002ca4

0800b56c <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b082      	sub	sp, #8
 800b570:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800b572:	e00e      	b.n	800b592 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800b574:	1d3b      	adds	r3, r7, #4
 800b576:	4619      	mov	r1, r3
 800b578:	480b      	ldr	r0, [pc, #44]	@ (800b5a8 <HW_IPCC_SYS_EvtNot+0x3c>)
 800b57a:	f000 fabe 	bl	800bafa <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	4619      	mov	r1, r3
 800b582:	2006      	movs	r0, #6
 800b584:	f000 f8be 	bl	800b704 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800b588:	4b08      	ldr	r3, [pc, #32]	@ (800b5ac <HW_IPCC_SYS_EvtNot+0x40>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	687a      	ldr	r2, [r7, #4]
 800b58e:	4610      	mov	r0, r2
 800b590:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800b592:	4805      	ldr	r0, [pc, #20]	@ (800b5a8 <HW_IPCC_SYS_EvtNot+0x3c>)
 800b594:	f000 fa22 	bl	800b9dc <LST_is_empty>
 800b598:	4603      	mov	r3, r0
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d0ea      	beq.n	800b574 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800b59e:	bf00      	nop
}
 800b5a0:	3708      	adds	r7, #8
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	bd80      	pop	{r7, pc}
 800b5a6:	bf00      	nop
 800b5a8:	200300d0 	.word	0x200300d0
 800b5ac:	20002ca8 	.word	0x20002ca8

0800b5b0 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b082      	sub	sp, #8
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800b5b8:	4817      	ldr	r0, [pc, #92]	@ (800b618 <TL_MM_Init+0x68>)
 800b5ba:	f000 f9ff 	bl	800b9bc <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800b5be:	4817      	ldr	r0, [pc, #92]	@ (800b61c <TL_MM_Init+0x6c>)
 800b5c0:	f000 f9fc 	bl	800b9bc <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800b5c4:	4b16      	ldr	r3, [pc, #88]	@ (800b620 <TL_MM_Init+0x70>)
 800b5c6:	691b      	ldr	r3, [r3, #16]
 800b5c8:	4a16      	ldr	r2, [pc, #88]	@ (800b624 <TL_MM_Init+0x74>)
 800b5ca:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800b5cc:	4b15      	ldr	r3, [pc, #84]	@ (800b624 <TL_MM_Init+0x74>)
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	687a      	ldr	r2, [r7, #4]
 800b5d2:	6892      	ldr	r2, [r2, #8]
 800b5d4:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800b5d6:	4b13      	ldr	r3, [pc, #76]	@ (800b624 <TL_MM_Init+0x74>)
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	687a      	ldr	r2, [r7, #4]
 800b5dc:	68d2      	ldr	r2, [r2, #12]
 800b5de:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800b5e0:	4b10      	ldr	r3, [pc, #64]	@ (800b624 <TL_MM_Init+0x74>)
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	4a0c      	ldr	r2, [pc, #48]	@ (800b618 <TL_MM_Init+0x68>)
 800b5e6:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800b5e8:	4b0e      	ldr	r3, [pc, #56]	@ (800b624 <TL_MM_Init+0x74>)
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	687a      	ldr	r2, [r7, #4]
 800b5ee:	6812      	ldr	r2, [r2, #0]
 800b5f0:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800b5f2:	4b0c      	ldr	r3, [pc, #48]	@ (800b624 <TL_MM_Init+0x74>)
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	687a      	ldr	r2, [r7, #4]
 800b5f8:	6852      	ldr	r2, [r2, #4]
 800b5fa:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800b5fc:	4b09      	ldr	r3, [pc, #36]	@ (800b624 <TL_MM_Init+0x74>)
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	687a      	ldr	r2, [r7, #4]
 800b602:	6912      	ldr	r2, [r2, #16]
 800b604:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800b606:	4b07      	ldr	r3, [pc, #28]	@ (800b624 <TL_MM_Init+0x74>)
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	687a      	ldr	r2, [r7, #4]
 800b60c:	6952      	ldr	r2, [r2, #20]
 800b60e:	619a      	str	r2, [r3, #24]

  return;
 800b610:	bf00      	nop
}
 800b612:	3708      	adds	r7, #8
 800b614:	46bd      	mov	sp, r7
 800b616:	bd80      	pop	{r7, pc}
 800b618:	200300b8 	.word	0x200300b8
 800b61c:	20002c94 	.word	0x20002c94
 800b620:	20030000 	.word	0x20030000
 800b624:	20002cac 	.word	0x20002cac

0800b628 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b082      	sub	sp, #8
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800b630:	6879      	ldr	r1, [r7, #4]
 800b632:	4807      	ldr	r0, [pc, #28]	@ (800b650 <TL_MM_EvtDone+0x28>)
 800b634:	f000 fa1a 	bl	800ba6c <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800b638:	6879      	ldr	r1, [r7, #4]
 800b63a:	2000      	movs	r0, #0
 800b63c:	f000 f862 	bl	800b704 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800b640:	4804      	ldr	r0, [pc, #16]	@ (800b654 <TL_MM_EvtDone+0x2c>)
 800b642:	f002 fa1f 	bl	800da84 <HW_IPCC_MM_SendFreeBuf>

  return;
 800b646:	bf00      	nop
}
 800b648:	3708      	adds	r7, #8
 800b64a:	46bd      	mov	sp, r7
 800b64c:	bd80      	pop	{r7, pc}
 800b64e:	bf00      	nop
 800b650:	20002c94 	.word	0x20002c94
 800b654:	0800b659 	.word	0x0800b659

0800b658 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b082      	sub	sp, #8
 800b65c:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800b65e:	e00c      	b.n	800b67a <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800b660:	1d3b      	adds	r3, r7, #4
 800b662:	4619      	mov	r1, r3
 800b664:	480a      	ldr	r0, [pc, #40]	@ (800b690 <SendFreeBuf+0x38>)
 800b666:	f000 fa48 	bl	800bafa <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800b66a:	4b0a      	ldr	r3, [pc, #40]	@ (800b694 <SendFreeBuf+0x3c>)
 800b66c:	691b      	ldr	r3, [r3, #16]
 800b66e:	691b      	ldr	r3, [r3, #16]
 800b670:	687a      	ldr	r2, [r7, #4]
 800b672:	4611      	mov	r1, r2
 800b674:	4618      	mov	r0, r3
 800b676:	f000 f9f9 	bl	800ba6c <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800b67a:	4805      	ldr	r0, [pc, #20]	@ (800b690 <SendFreeBuf+0x38>)
 800b67c:	f000 f9ae 	bl	800b9dc <LST_is_empty>
 800b680:	4603      	mov	r3, r0
 800b682:	2b00      	cmp	r3, #0
 800b684:	d0ec      	beq.n	800b660 <SendFreeBuf+0x8>
  }

  return;
 800b686:	bf00      	nop
}
 800b688:	3708      	adds	r7, #8
 800b68a:	46bd      	mov	sp, r7
 800b68c:	bd80      	pop	{r7, pc}
 800b68e:	bf00      	nop
 800b690:	20002c94 	.word	0x20002c94
 800b694:	20030000 	.word	0x20030000

0800b698 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800b69c:	4805      	ldr	r0, [pc, #20]	@ (800b6b4 <TL_TRACES_Init+0x1c>)
 800b69e:	f000 f98d 	bl	800b9bc <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800b6a2:	4b05      	ldr	r3, [pc, #20]	@ (800b6b8 <TL_TRACES_Init+0x20>)
 800b6a4:	695b      	ldr	r3, [r3, #20]
 800b6a6:	4a03      	ldr	r2, [pc, #12]	@ (800b6b4 <TL_TRACES_Init+0x1c>)
 800b6a8:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800b6aa:	f002 fa21 	bl	800daf0 <HW_IPCC_TRACES_Init>

  return;
 800b6ae:	bf00      	nop
}
 800b6b0:	bd80      	pop	{r7, pc}
 800b6b2:	bf00      	nop
 800b6b4:	200300c0 	.word	0x200300c0
 800b6b8:	20030000 	.word	0x20030000

0800b6bc <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b082      	sub	sp, #8
 800b6c0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800b6c2:	e008      	b.n	800b6d6 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800b6c4:	1d3b      	adds	r3, r7, #4
 800b6c6:	4619      	mov	r1, r3
 800b6c8:	4808      	ldr	r0, [pc, #32]	@ (800b6ec <HW_IPCC_TRACES_EvtNot+0x30>)
 800b6ca:	f000 fa16 	bl	800bafa <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	f000 f80d 	bl	800b6f0 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800b6d6:	4805      	ldr	r0, [pc, #20]	@ (800b6ec <HW_IPCC_TRACES_EvtNot+0x30>)
 800b6d8:	f000 f980 	bl	800b9dc <LST_is_empty>
 800b6dc:	4603      	mov	r3, r0
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d0f0      	beq.n	800b6c4 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800b6e2:	bf00      	nop
}
 800b6e4:	3708      	adds	r7, #8
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	bd80      	pop	{r7, pc}
 800b6ea:	bf00      	nop
 800b6ec:	200300c0 	.word	0x200300c0

0800b6f0 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800b6f0:	b480      	push	{r7}
 800b6f2:	b083      	sub	sp, #12
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800b6f8:	bf00      	nop
 800b6fa:	370c      	adds	r7, #12
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b702:	4770      	bx	lr

0800b704 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800b704:	b480      	push	{r7}
 800b706:	b087      	sub	sp, #28
 800b708:	af00      	add	r7, sp, #0
 800b70a:	4603      	mov	r3, r0
 800b70c:	6039      	str	r1, [r7, #0]
 800b70e:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;
  TL_EvtSerial_t *p_cmd_rsp_packet;

  switch(packet_type)
 800b710:	79fb      	ldrb	r3, [r7, #7]
 800b712:	2b06      	cmp	r3, #6
 800b714:	d845      	bhi.n	800b7a2 <OutputDbgTrace+0x9e>
 800b716:	a201      	add	r2, pc, #4	@ (adr r2, 800b71c <OutputDbgTrace+0x18>)
 800b718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b71c:	0800b739 	.word	0x0800b739
 800b720:	0800b75d 	.word	0x0800b75d
 800b724:	0800b763 	.word	0x0800b763
 800b728:	0800b777 	.word	0x0800b777
 800b72c:	0800b783 	.word	0x0800b783
 800b730:	0800b789 	.word	0x0800b789
 800b734:	0800b797 	.word	0x0800b797
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800b73c:	697b      	ldr	r3, [r7, #20]
 800b73e:	7a5b      	ldrb	r3, [r3, #9]
 800b740:	2bff      	cmp	r3, #255	@ 0xff
 800b742:	d005      	beq.n	800b750 <OutputDbgTrace+0x4c>
 800b744:	2bff      	cmp	r3, #255	@ 0xff
 800b746:	dc05      	bgt.n	800b754 <OutputDbgTrace+0x50>
 800b748:	2b0e      	cmp	r3, #14
 800b74a:	d005      	beq.n	800b758 <OutputDbgTrace+0x54>
 800b74c:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800b74e:	e001      	b.n	800b754 <OutputDbgTrace+0x50>
          break;
 800b750:	bf00      	nop
 800b752:	e027      	b.n	800b7a4 <OutputDbgTrace+0xa0>
          break;
 800b754:	bf00      	nop
 800b756:	e025      	b.n	800b7a4 <OutputDbgTrace+0xa0>
          break;
 800b758:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800b75a:	e023      	b.n	800b7a4 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	60fb      	str	r3, [r7, #12]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800b760:	e020      	b.n	800b7a4 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b762:	683b      	ldr	r3, [r7, #0]
 800b764:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800b766:	697b      	ldr	r3, [r7, #20]
 800b768:	7a5b      	ldrb	r3, [r3, #9]
 800b76a:	2b0e      	cmp	r3, #14
 800b76c:	d001      	beq.n	800b772 <OutputDbgTrace+0x6e>
 800b76e:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800b770:	e000      	b.n	800b774 <OutputDbgTrace+0x70>
          break;
 800b772:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b774:	e016      	b.n	800b7a4 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800b77a:	697b      	ldr	r3, [r7, #20]
 800b77c:	7a5b      	ldrb	r3, [r3, #9]
 800b77e:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b780:	e010      	b.n	800b7a4 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800b782:	683b      	ldr	r3, [r7, #0]
 800b784:	60fb      	str	r3, [r7, #12]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800b786:	e00d      	b.n	800b7a4 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_cmd_rsp_packet = (TL_EvtSerial_t*)buffer;
 800b788:	683b      	ldr	r3, [r7, #0]
 800b78a:	613b      	str	r3, [r7, #16]
      switch(p_cmd_rsp_packet->evt.evtcode)
 800b78c:	693b      	ldr	r3, [r7, #16]
 800b78e:	785b      	ldrb	r3, [r3, #1]
 800b790:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_cmd_rsp_packet->evt.evtcode);
          break;
 800b792:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_rsp_packet->evt, p_cmd_rsp_packet->evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b794:	e006      	b.n	800b7a4 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b796:	683b      	ldr	r3, [r7, #0]
 800b798:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800b79a:	697b      	ldr	r3, [r7, #20]
 800b79c:	7a5b      	ldrb	r3, [r3, #9]
 800b79e:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b7a0:	e000      	b.n	800b7a4 <OutputDbgTrace+0xa0>

    default:
      break;
 800b7a2:	bf00      	nop
  }

  return;
 800b7a4:	bf00      	nop
}
 800b7a6:	371c      	adds	r7, #28
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ae:	4770      	bx	lr

0800b7b0 <DbgTraceGetFileName>:
 * @param  *fullPath Fullpath string (path + filename)
 * @retval char* Pointer on filename string
 */

const char *DbgTraceGetFileName(const char *fullpath)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b084      	sub	sp, #16
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
  const char *ret = fullpath;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	60fb      	str	r3, [r7, #12]

  if (strrchr(fullpath, '\\') != NULL)
 800b7bc:	215c      	movs	r1, #92	@ 0x5c
 800b7be:	6878      	ldr	r0, [r7, #4]
 800b7c0:	f003 fcae 	bl	800f120 <strrchr>
 800b7c4:	4603      	mov	r3, r0
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d007      	beq.n	800b7da <DbgTraceGetFileName+0x2a>
  {
    ret = strrchr(fullpath, '\\') + 1;
 800b7ca:	215c      	movs	r1, #92	@ 0x5c
 800b7cc:	6878      	ldr	r0, [r7, #4]
 800b7ce:	f003 fca7 	bl	800f120 <strrchr>
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	3301      	adds	r3, #1
 800b7d6:	60fb      	str	r3, [r7, #12]
 800b7d8:	e00d      	b.n	800b7f6 <DbgTraceGetFileName+0x46>
  }
  else if (strrchr(fullpath, '/') != NULL)
 800b7da:	212f      	movs	r1, #47	@ 0x2f
 800b7dc:	6878      	ldr	r0, [r7, #4]
 800b7de:	f003 fc9f 	bl	800f120 <strrchr>
 800b7e2:	4603      	mov	r3, r0
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d006      	beq.n	800b7f6 <DbgTraceGetFileName+0x46>
  {
    ret = strrchr(fullpath, '/') + 1;
 800b7e8:	212f      	movs	r1, #47	@ 0x2f
 800b7ea:	6878      	ldr	r0, [r7, #4]
 800b7ec:	f003 fc98 	bl	800f120 <strrchr>
 800b7f0:	4603      	mov	r3, r0
 800b7f2:	3301      	adds	r3, #1
 800b7f4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800b7f6:	68fb      	ldr	r3, [r7, #12]
}
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	3710      	adds	r7, #16
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	bd80      	pop	{r7, pc}

0800b800 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 800b800:	b580      	push	{r7, lr}
 800b802:	b086      	sub	sp, #24
 800b804:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b806:	f3ef 8310 	mrs	r3, PRIMASK
 800b80a:	60fb      	str	r3, [r7, #12]
  return(result);
 800b80c:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 800b80e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b810:	b672      	cpsid	i
}
 800b812:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 800b814:	1cbb      	adds	r3, r7, #2
 800b816:	4619      	mov	r1, r3
 800b818:	4812      	ldr	r0, [pc, #72]	@ (800b864 <DbgTrace_TxCpltCallback+0x64>)
 800b81a:	f000 fbe5 	bl	800bfe8 <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 800b81e:	1cbb      	adds	r3, r7, #2
 800b820:	4619      	mov	r1, r3
 800b822:	4810      	ldr	r0, [pc, #64]	@ (800b864 <DbgTrace_TxCpltCallback+0x64>)
 800b824:	f000 fccf 	bl	800c1c6 <CircularQueue_Sense>
 800b828:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 800b82a:	693b      	ldr	r3, [r7, #16]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d00c      	beq.n	800b84a <DbgTrace_TxCpltCallback+0x4a>
 800b830:	697b      	ldr	r3, [r7, #20]
 800b832:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b834:	68bb      	ldr	r3, [r7, #8]
 800b836:	f383 8810 	msr	PRIMASK, r3
}
 800b83a:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 800b83c:	887b      	ldrh	r3, [r7, #2]
 800b83e:	4a0a      	ldr	r2, [pc, #40]	@ (800b868 <DbgTrace_TxCpltCallback+0x68>)
 800b840:	4619      	mov	r1, r3
 800b842:	6938      	ldr	r0, [r7, #16]
 800b844:	f7f6 fd33 	bl	80022ae <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 800b848:	e008      	b.n	800b85c <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 800b84a:	4b08      	ldr	r3, [pc, #32]	@ (800b86c <DbgTrace_TxCpltCallback+0x6c>)
 800b84c:	2201      	movs	r2, #1
 800b84e:	701a      	strb	r2, [r3, #0]
 800b850:	697b      	ldr	r3, [r7, #20]
 800b852:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	f383 8810 	msr	PRIMASK, r3
}
 800b85a:	bf00      	nop
}
 800b85c:	bf00      	nop
 800b85e:	3718      	adds	r7, #24
 800b860:	46bd      	mov	sp, r7
 800b862:	bd80      	pop	{r7, pc}
 800b864:	20002cb0 	.word	0x20002cb0
 800b868:	0800b801 	.word	0x0800b801
 800b86c:	20000019 	.word	0x20000019

0800b870 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 800b870:	b580      	push	{r7, lr}
 800b872:	b082      	sub	sp, #8
 800b874:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 800b876:	f7f6 fd14 	bl	80022a2 <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 800b87a:	2302      	movs	r3, #2
 800b87c:	9300      	str	r3, [sp, #0]
 800b87e:	2300      	movs	r3, #0
 800b880:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800b884:	4903      	ldr	r1, [pc, #12]	@ (800b894 <DbgTraceInit+0x24>)
 800b886:	4804      	ldr	r0, [pc, #16]	@ (800b898 <DbgTraceInit+0x28>)
 800b888:	f000 f956 	bl	800bb38 <CircularQueue_Init>
#endif 
#endif
  return;
 800b88c:	bf00      	nop
}
 800b88e:	46bd      	mov	sp, r7
 800b890:	bd80      	pop	{r7, pc}
 800b892:	bf00      	nop
 800b894:	20002cd0 	.word	0x20002cd0
 800b898:	20002cb0 	.word	0x20002cb0

0800b89c <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b084      	sub	sp, #16
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	60f8      	str	r0, [r7, #12]
 800b8a4:	60b9      	str	r1, [r7, #8]
 800b8a6:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 800b8a8:	687a      	ldr	r2, [r7, #4]
 800b8aa:	68b9      	ldr	r1, [r7, #8]
 800b8ac:	68f8      	ldr	r0, [r7, #12]
 800b8ae:	f000 f805 	bl	800b8bc <DbgTraceWrite>
 800b8b2:	4603      	mov	r3, r0
}
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	3710      	adds	r7, #16
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	bd80      	pop	{r7, pc}

0800b8bc <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b08a      	sub	sp, #40	@ 0x28
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	60f8      	str	r0, [r7, #12]
 800b8c4:	60b9      	str	r1, [r7, #8]
 800b8c6:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b8cc:	f3ef 8310 	mrs	r3, PRIMASK
 800b8d0:	61bb      	str	r3, [r7, #24]
  return(result);
 800b8d2:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 800b8d4:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8dc:	d102      	bne.n	800b8e4 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 800b8de:	2300      	movs	r3, #0
 800b8e0:	627b      	str	r3, [r7, #36]	@ 0x24
 800b8e2:	e037      	b.n	800b954 <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	2b01      	cmp	r3, #1
 800b8e8:	d006      	beq.n	800b8f8 <DbgTraceWrite+0x3c>
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	2b02      	cmp	r3, #2
 800b8ee:	d003      	beq.n	800b8f8 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 800b8f0:	f04f 33ff 	mov.w	r3, #4294967295
 800b8f4:	627b      	str	r3, [r7, #36]	@ 0x24
 800b8f6:	e02d      	b.n	800b954 <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d02a      	beq.n	800b954 <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800b902:	b672      	cpsid	i
}
 800b904:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	b29a      	uxth	r2, r3
 800b90a:	2301      	movs	r3, #1
 800b90c:	68b9      	ldr	r1, [r7, #8]
 800b90e:	4814      	ldr	r0, [pc, #80]	@ (800b960 <DbgTraceWrite+0xa4>)
 800b910:	f000 f944 	bl	800bb9c <CircularQueue_Add>
 800b914:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 800b916:	69fb      	ldr	r3, [r7, #28]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d015      	beq.n	800b948 <DbgTraceWrite+0x8c>
 800b91c:	4b11      	ldr	r3, [pc, #68]	@ (800b964 <DbgTraceWrite+0xa8>)
 800b91e:	781b      	ldrb	r3, [r3, #0]
 800b920:	b2db      	uxtb	r3, r3
 800b922:	2b00      	cmp	r3, #0
 800b924:	d010      	beq.n	800b948 <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 800b926:	4b0f      	ldr	r3, [pc, #60]	@ (800b964 <DbgTraceWrite+0xa8>)
 800b928:	2200      	movs	r2, #0
 800b92a:	701a      	strb	r2, [r3, #0]
 800b92c:	6a3b      	ldr	r3, [r7, #32]
 800b92e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b930:	697b      	ldr	r3, [r7, #20]
 800b932:	f383 8810 	msr	PRIMASK, r3
}
 800b936:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	b29b      	uxth	r3, r3
 800b93c:	4a0a      	ldr	r2, [pc, #40]	@ (800b968 <DbgTraceWrite+0xac>)
 800b93e:	4619      	mov	r1, r3
 800b940:	69f8      	ldr	r0, [r7, #28]
 800b942:	f7f6 fcb4 	bl	80022ae <DbgOutputTraces>
 800b946:	e005      	b.n	800b954 <DbgTraceWrite+0x98>
 800b948:	6a3b      	ldr	r3, [r7, #32]
 800b94a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b94c:	693b      	ldr	r3, [r7, #16]
 800b94e:	f383 8810 	msr	PRIMASK, r3
}
 800b952:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 800b954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b956:	4618      	mov	r0, r3
 800b958:	3728      	adds	r7, #40	@ 0x28
 800b95a:	46bd      	mov	sp, r7
 800b95c:	bd80      	pop	{r7, pc}
 800b95e:	bf00      	nop
 800b960:	20002cb0 	.word	0x20002cb0
 800b964:	20000019 	.word	0x20000019
 800b968:	0800b801 	.word	0x0800b801

0800b96c <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800b96c:	b480      	push	{r7}
 800b96e:	b085      	sub	sp, #20
 800b970:	af00      	add	r7, sp, #0
 800b972:	4603      	mov	r3, r0
 800b974:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800b976:	4b0f      	ldr	r3, [pc, #60]	@ (800b9b4 <OTP_Read+0x48>)
 800b978:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800b97a:	e002      	b.n	800b982 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	3b08      	subs	r3, #8
 800b980:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	3307      	adds	r3, #7
 800b986:	781b      	ldrb	r3, [r3, #0]
 800b988:	79fa      	ldrb	r2, [r7, #7]
 800b98a:	429a      	cmp	r2, r3
 800b98c:	d003      	beq.n	800b996 <OTP_Read+0x2a>
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	4a09      	ldr	r2, [pc, #36]	@ (800b9b8 <OTP_Read+0x4c>)
 800b992:	4293      	cmp	r3, r2
 800b994:	d1f2      	bne.n	800b97c <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	3307      	adds	r3, #7
 800b99a:	781b      	ldrb	r3, [r3, #0]
 800b99c:	79fa      	ldrb	r2, [r7, #7]
 800b99e:	429a      	cmp	r2, r3
 800b9a0:	d001      	beq.n	800b9a6 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800b9a6:	68fb      	ldr	r3, [r7, #12]
}
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	3714      	adds	r7, #20
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b2:	4770      	bx	lr
 800b9b4:	1fff73f8 	.word	0x1fff73f8
 800b9b8:	1fff7000 	.word	0x1fff7000

0800b9bc <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800b9bc:	b480      	push	{r7}
 800b9be:	b083      	sub	sp, #12
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	687a      	ldr	r2, [r7, #4]
 800b9c8:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	687a      	ldr	r2, [r7, #4]
 800b9ce:	605a      	str	r2, [r3, #4]
}
 800b9d0:	bf00      	nop
 800b9d2:	370c      	adds	r7, #12
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9da:	4770      	bx	lr

0800b9dc <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800b9dc:	b480      	push	{r7}
 800b9de:	b087      	sub	sp, #28
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b9e4:	f3ef 8310 	mrs	r3, PRIMASK
 800b9e8:	60fb      	str	r3, [r7, #12]
  return(result);
 800b9ea:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b9ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800b9ee:	b672      	cpsid	i
}
 800b9f0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	687a      	ldr	r2, [r7, #4]
 800b9f8:	429a      	cmp	r2, r3
 800b9fa:	d102      	bne.n	800ba02 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800b9fc:	2301      	movs	r3, #1
 800b9fe:	75fb      	strb	r3, [r7, #23]
 800ba00:	e001      	b.n	800ba06 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800ba02:	2300      	movs	r3, #0
 800ba04:	75fb      	strb	r3, [r7, #23]
 800ba06:	693b      	ldr	r3, [r7, #16]
 800ba08:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba0a:	68bb      	ldr	r3, [r7, #8]
 800ba0c:	f383 8810 	msr	PRIMASK, r3
}
 800ba10:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800ba12:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba14:	4618      	mov	r0, r3
 800ba16:	371c      	adds	r7, #28
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1e:	4770      	bx	lr

0800ba20 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800ba20:	b480      	push	{r7}
 800ba22:	b087      	sub	sp, #28
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
 800ba28:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ba2a:	f3ef 8310 	mrs	r3, PRIMASK
 800ba2e:	60fb      	str	r3, [r7, #12]
  return(result);
 800ba30:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ba32:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ba34:	b672      	cpsid	i
}
 800ba36:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681a      	ldr	r2, [r3, #0]
 800ba3c:	683b      	ldr	r3, [r7, #0]
 800ba3e:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800ba40:	683b      	ldr	r3, [r7, #0]
 800ba42:	687a      	ldr	r2, [r7, #4]
 800ba44:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	683a      	ldr	r2, [r7, #0]
 800ba4a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800ba4c:	683b      	ldr	r3, [r7, #0]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	683a      	ldr	r2, [r7, #0]
 800ba52:	605a      	str	r2, [r3, #4]
 800ba54:	697b      	ldr	r3, [r7, #20]
 800ba56:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba58:	693b      	ldr	r3, [r7, #16]
 800ba5a:	f383 8810 	msr	PRIMASK, r3
}
 800ba5e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ba60:	bf00      	nop
 800ba62:	371c      	adds	r7, #28
 800ba64:	46bd      	mov	sp, r7
 800ba66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6a:	4770      	bx	lr

0800ba6c <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800ba6c:	b480      	push	{r7}
 800ba6e:	b087      	sub	sp, #28
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
 800ba74:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ba76:	f3ef 8310 	mrs	r3, PRIMASK
 800ba7a:	60fb      	str	r3, [r7, #12]
  return(result);
 800ba7c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ba7e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ba80:	b672      	cpsid	i
}
 800ba82:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800ba84:	683b      	ldr	r3, [r7, #0]
 800ba86:	687a      	ldr	r2, [r7, #4]
 800ba88:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	685a      	ldr	r2, [r3, #4]
 800ba8e:	683b      	ldr	r3, [r7, #0]
 800ba90:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	683a      	ldr	r2, [r7, #0]
 800ba96:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800ba98:	683b      	ldr	r3, [r7, #0]
 800ba9a:	685b      	ldr	r3, [r3, #4]
 800ba9c:	683a      	ldr	r2, [r7, #0]
 800ba9e:	601a      	str	r2, [r3, #0]
 800baa0:	697b      	ldr	r3, [r7, #20]
 800baa2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800baa4:	693b      	ldr	r3, [r7, #16]
 800baa6:	f383 8810 	msr	PRIMASK, r3
}
 800baaa:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800baac:	bf00      	nop
 800baae:	371c      	adds	r7, #28
 800bab0:	46bd      	mov	sp, r7
 800bab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab6:	4770      	bx	lr

0800bab8 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800bab8:	b480      	push	{r7}
 800baba:	b087      	sub	sp, #28
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bac0:	f3ef 8310 	mrs	r3, PRIMASK
 800bac4:	60fb      	str	r3, [r7, #12]
  return(result);
 800bac6:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800bac8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800baca:	b672      	cpsid	i
}
 800bacc:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	685b      	ldr	r3, [r3, #4]
 800bad2:	687a      	ldr	r2, [r7, #4]
 800bad4:	6812      	ldr	r2, [r2, #0]
 800bad6:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	687a      	ldr	r2, [r7, #4]
 800bade:	6852      	ldr	r2, [r2, #4]
 800bae0:	605a      	str	r2, [r3, #4]
 800bae2:	697b      	ldr	r3, [r7, #20]
 800bae4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bae6:	693b      	ldr	r3, [r7, #16]
 800bae8:	f383 8810 	msr	PRIMASK, r3
}
 800baec:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800baee:	bf00      	nop
 800baf0:	371c      	adds	r7, #28
 800baf2:	46bd      	mov	sp, r7
 800baf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf8:	4770      	bx	lr

0800bafa <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800bafa:	b580      	push	{r7, lr}
 800bafc:	b086      	sub	sp, #24
 800bafe:	af00      	add	r7, sp, #0
 800bb00:	6078      	str	r0, [r7, #4]
 800bb02:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bb04:	f3ef 8310 	mrs	r3, PRIMASK
 800bb08:	60fb      	str	r3, [r7, #12]
  return(result);
 800bb0a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800bb0c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bb0e:	b672      	cpsid	i
}
 800bb10:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681a      	ldr	r2, [r3, #0]
 800bb16:	683b      	ldr	r3, [r7, #0]
 800bb18:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	4618      	mov	r0, r3
 800bb20:	f7ff ffca 	bl	800bab8 <LST_remove_node>
 800bb24:	697b      	ldr	r3, [r7, #20]
 800bb26:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bb28:	693b      	ldr	r3, [r7, #16]
 800bb2a:	f383 8810 	msr	PRIMASK, r3
}
 800bb2e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800bb30:	bf00      	nop
 800bb32:	3718      	adds	r7, #24
 800bb34:	46bd      	mov	sp, r7
 800bb36:	bd80      	pop	{r7, pc}

0800bb38 <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 800bb38:	b480      	push	{r7}
 800bb3a:	b085      	sub	sp, #20
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	60f8      	str	r0, [r7, #12]
 800bb40:	60b9      	str	r1, [r7, #8]
 800bb42:	607a      	str	r2, [r7, #4]
 800bb44:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	68ba      	ldr	r2, [r7, #8]
 800bb4a:	601a      	str	r2, [r3, #0]
  q->first = 0;
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	2200      	movs	r2, #0
 800bb50:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	2200      	movs	r2, #0
 800bb56:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	2200      	movs	r2, #0
 800bb62:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	687a      	ldr	r2, [r7, #4]
 800bb68:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	887a      	ldrh	r2, [r7, #2]
 800bb6e:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	7e3a      	ldrb	r2, [r7, #24]
 800bb74:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 800bb76:	7e3b      	ldrb	r3, [r7, #24]
 800bb78:	f003 0302 	and.w	r3, r3, #2
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d006      	beq.n	800bb8e <CircularQueue_Init+0x56>
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	891b      	ldrh	r3, [r3, #8]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d002      	beq.n	800bb8e <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 800bb88:	f04f 33ff 	mov.w	r3, #4294967295
 800bb8c:	e000      	b.n	800bb90 <CircularQueue_Init+0x58>
  }
  return 0;
 800bb8e:	2300      	movs	r3, #0
}
 800bb90:	4618      	mov	r0, r3
 800bb92:	3714      	adds	r7, #20
 800bb94:	46bd      	mov	sp, r7
 800bb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9a:	4770      	bx	lr

0800bb9c <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b08e      	sub	sp, #56	@ 0x38
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	60f8      	str	r0, [r7, #12]
 800bba4:	60b9      	str	r1, [r7, #8]
 800bba6:	603b      	str	r3, [r7, #0]
 800bba8:	4613      	mov	r3, r2
 800bbaa:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 800bbac:	2300      	movs	r3, #0
 800bbae:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	86fb      	strh	r3, [r7, #54]	@ 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size element (q->elementsize == 0) */
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 800bbb8:	2300      	movs	r3, #0
 800bbba:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicate size of parta of element that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	891b      	ldrh	r3, [r3, #8]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d101      	bne.n	800bbd4 <CircularQueue_Add+0x38>
 800bbd0:	2302      	movs	r3, #2
 800bbd2:	e000      	b.n	800bbd6 <CircularQueue_Add+0x3a>
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	695b      	ldr	r3, [r3, #20]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d029      	beq.n	800bc34 <CircularQueue_Add+0x98>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	891b      	ldrh	r3, [r3, #8]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d122      	bne.n	800bc2e <CircularQueue_Add+0x92>
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	681a      	ldr	r2, [r3, #0]
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	691b      	ldr	r3, [r3, #16]
 800bbf0:	4413      	add	r3, r2
 800bbf2:	781b      	ldrb	r3, [r3, #0]
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	681a      	ldr	r2, [r3, #0]
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	691b      	ldr	r3, [r3, #16]
 800bbfe:	1c59      	adds	r1, r3, #1
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	685b      	ldr	r3, [r3, #4]
 800bc04:	4299      	cmp	r1, r3
 800bc06:	d306      	bcc.n	800bc16 <CircularQueue_Add+0x7a>
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	6919      	ldr	r1, [r3, #16]
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	685b      	ldr	r3, [r3, #4]
 800bc10:	1acb      	subs	r3, r1, r3
 800bc12:	3301      	adds	r3, #1
 800bc14:	e002      	b.n	800bc1c <CircularQueue_Add+0x80>
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	691b      	ldr	r3, [r3, #16]
 800bc1a:	3301      	adds	r3, #1
 800bc1c:	4413      	add	r3, r2
 800bc1e:	781b      	ldrb	r3, [r3, #0]
 800bc20:	021b      	lsls	r3, r3, #8
 800bc22:	b29b      	uxth	r3, r3
 800bc24:	4403      	add	r3, r0
 800bc26:	b29b      	uxth	r3, r3
 800bc28:	3302      	adds	r3, #2
 800bc2a:	b29b      	uxth	r3, r3
 800bc2c:	e001      	b.n	800bc32 <CircularQueue_Add+0x96>
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	891b      	ldrh	r3, [r3, #8]
 800bc32:	86fb      	strh	r3, [r7, #54]	@ 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	891b      	ldrh	r3, [r3, #8]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d002      	beq.n	800bc42 <CircularQueue_Add+0xa6>
  {
    elementSize = q->elementSize;
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	891b      	ldrh	r3, [r3, #8]
 800bc40:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	691a      	ldr	r2, [r3, #16]
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	68db      	ldr	r3, [r3, #12]
 800bc4a:	429a      	cmp	r2, r3
 800bc4c:	d307      	bcc.n	800bc5e <CircularQueue_Add+0xc2>
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	685a      	ldr	r2, [r3, #4]
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	6919      	ldr	r1, [r3, #16]
 800bc56:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800bc58:	440b      	add	r3, r1
 800bc5a:	1ad3      	subs	r3, r2, r3
 800bc5c:	e000      	b.n	800bc60 <CircularQueue_Add+0xc4>
 800bc5e:	2300      	movs	r3, #0
 800bc60:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 800bc62:	88fa      	ldrh	r2, [r7, #6]
 800bc64:	7ffb      	ldrb	r3, [r7, #31]
 800bc66:	4413      	add	r3, r2
 800bc68:	461a      	mov	r2, r3
 800bc6a:	683b      	ldr	r3, [r7, #0]
 800bc6c:	fb02 f303 	mul.w	r3, r2, r3
 800bc70:	69ba      	ldr	r2, [r7, #24]
 800bc72:	429a      	cmp	r2, r3
 800bc74:	d80b      	bhi.n	800bc8e <CircularQueue_Add+0xf2>
 800bc76:	88fa      	ldrh	r2, [r7, #6]
 800bc78:	7ffb      	ldrb	r3, [r7, #31]
 800bc7a:	4413      	add	r3, r2
 800bc7c:	461a      	mov	r2, r3
 800bc7e:	69bb      	ldr	r3, [r7, #24]
 800bc80:	fbb3 f1f2 	udiv	r1, r3, r2
 800bc84:	fb01 f202 	mul.w	r2, r1, r2
 800bc88:	1a9b      	subs	r3, r3, r2
 800bc8a:	b2db      	uxtb	r3, r3
 800bc8c:	e000      	b.n	800bc90 <CircularQueue_Add+0xf4>
 800bc8e:	2300      	movs	r3, #0
 800bc90:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 800bc92:	7dfa      	ldrb	r2, [r7, #23]
 800bc94:	7ffb      	ldrb	r3, [r7, #31]
 800bc96:	429a      	cmp	r2, r3
 800bc98:	bf8c      	ite	hi
 800bc9a:	2301      	movhi	r3, #1
 800bc9c:	2300      	movls	r3, #0
 800bc9e:	b2db      	uxtb	r3, r3
 800bca0:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 800bca2:	7fbb      	ldrb	r3, [r7, #30]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d008      	beq.n	800bcba <CircularQueue_Add+0x11e>
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	7f1b      	ldrb	r3, [r3, #28]
 800bcac:	f003 0301 	and.w	r3, r3, #1
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d002      	beq.n	800bcba <CircularQueue_Add+0x11e>
 800bcb4:	7dfb      	ldrb	r3, [r7, #23]
 800bcb6:	b29b      	uxth	r3, r3
 800bcb8:	e000      	b.n	800bcbc <CircularQueue_Add+0x120>
 800bcba:	8bbb      	ldrh	r3, [r7, #28]
 800bcbc:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 800bcbe:	7fbb      	ldrb	r3, [r7, #30]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d008      	beq.n	800bcd6 <CircularQueue_Add+0x13a>
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	7f1b      	ldrb	r3, [r3, #28]
 800bcc8:	f003 0302 	and.w	r3, r3, #2
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d002      	beq.n	800bcd6 <CircularQueue_Add+0x13a>
 800bcd0:	7ffb      	ldrb	r3, [r7, #31]
 800bcd2:	b29b      	uxth	r3, r3
 800bcd4:	e000      	b.n	800bcd8 <CircularQueue_Add+0x13c>
 800bcd6:	8bbb      	ldrh	r3, [r7, #28]
 800bcd8:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 800bcda:	88fb      	ldrh	r3, [r7, #6]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	f000 817e 	beq.w	800bfde <CircularQueue_Add+0x442>
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	695a      	ldr	r2, [r3, #20]
 800bce6:	88f9      	ldrh	r1, [r7, #6]
 800bce8:	7ffb      	ldrb	r3, [r7, #31]
 800bcea:	440b      	add	r3, r1
 800bcec:	4619      	mov	r1, r3
 800bcee:	683b      	ldr	r3, [r7, #0]
 800bcf0:	fb01 f303 	mul.w	r3, r1, r3
 800bcf4:	441a      	add	r2, r3
 800bcf6:	8bbb      	ldrh	r3, [r7, #28]
 800bcf8:	441a      	add	r2, r3
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	685b      	ldr	r3, [r3, #4]
 800bcfe:	429a      	cmp	r2, r3
 800bd00:	f200 816d 	bhi.w	800bfde <CircularQueue_Add+0x442>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 800bd04:	2300      	movs	r3, #0
 800bd06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bd08:	e14a      	b.n	800bfa0 <CircularQueue_Add+0x404>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	691a      	ldr	r2, [r3, #16]
 800bd0e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800bd10:	441a      	add	r2, r3
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	685b      	ldr	r3, [r3, #4]
 800bd16:	429a      	cmp	r2, r3
 800bd18:	d307      	bcc.n	800bd2a <CircularQueue_Add+0x18e>
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	691a      	ldr	r2, [r3, #16]
 800bd1e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800bd20:	441a      	add	r2, r3
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	685b      	ldr	r3, [r3, #4]
 800bd26:	1ad3      	subs	r3, r2, r3
 800bd28:	e003      	b.n	800bd32 <CircularQueue_Add+0x196>
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	691a      	ldr	r2, [r3, #16]
 800bd2e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800bd30:	4413      	add	r3, r2
 800bd32:	68fa      	ldr	r2, [r7, #12]
 800bd34:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	691b      	ldr	r3, [r3, #16]
 800bd3a:	633b      	str	r3, [r7, #48]	@ 0x30
      
      /* store the element  */
      /* store first the element size if element size is variable */
      if (q->elementSize == 0) 
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	891b      	ldrh	r3, [r3, #8]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d130      	bne.n	800bda6 <CircularQueue_Add+0x20a>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	681a      	ldr	r2, [r3, #0]
 800bd48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd4a:	1c59      	adds	r1, r3, #1
 800bd4c:	6339      	str	r1, [r7, #48]	@ 0x30
 800bd4e:	4413      	add	r3, r2
 800bd50:	88fa      	ldrh	r2, [r7, #6]
 800bd52:	b2d2      	uxtb	r2, r2
 800bd54:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	685b      	ldr	r3, [r3, #4]
 800bd5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bd5c:	429a      	cmp	r2, r3
 800bd5e:	d304      	bcc.n	800bd6a <CircularQueue_Add+0x1ce>
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	685b      	ldr	r3, [r3, #4]
 800bd64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bd66:	1ad3      	subs	r3, r2, r3
 800bd68:	e000      	b.n	800bd6c <CircularQueue_Add+0x1d0>
 800bd6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd6c:	633b      	str	r3, [r7, #48]	@ 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 800bd6e:	88fb      	ldrh	r3, [r7, #6]
 800bd70:	0a1b      	lsrs	r3, r3, #8
 800bd72:	b298      	uxth	r0, r3
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	681a      	ldr	r2, [r3, #0]
 800bd78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd7a:	1c59      	adds	r1, r3, #1
 800bd7c:	6339      	str	r1, [r7, #48]	@ 0x30
 800bd7e:	4413      	add	r3, r2
 800bd80:	b2c2      	uxtb	r2, r0
 800bd82:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	685b      	ldr	r3, [r3, #4]
 800bd88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bd8a:	429a      	cmp	r2, r3
 800bd8c:	d304      	bcc.n	800bd98 <CircularQueue_Add+0x1fc>
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	685b      	ldr	r3, [r3, #4]
 800bd92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bd94:	1ad3      	subs	r3, r2, r3
 800bd96:	e000      	b.n	800bd9a <CircularQueue_Add+0x1fe>
 800bd98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd9a:	633b      	str	r3, [r7, #48]	@ 0x30
        q->byteCount += 2;
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	695b      	ldr	r3, [r3, #20]
 800bda0:	1c9a      	adds	r2, r3, #2
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 800bda6:	88fa      	ldrh	r2, [r7, #6]
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	6859      	ldr	r1, [r3, #4]
 800bdac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdae:	1acb      	subs	r3, r1, r3
 800bdb0:	4293      	cmp	r3, r2
 800bdb2:	bf28      	it	cs
 800bdb4:	4613      	movcs	r3, r2
 800bdb6:	62bb      	str	r3, [r7, #40]	@ 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In this case part of data will copied at the end of the buffer and the rest a the beginning */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 800bdb8:	88fb      	ldrh	r3, [r7, #6]
 800bdba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bdbc:	429a      	cmp	r2, r3
 800bdbe:	d007      	beq.n	800bdd0 <CircularQueue_Add+0x234>
 800bdc0:	88fb      	ldrh	r3, [r7, #6]
 800bdc2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bdc4:	429a      	cmp	r2, r3
 800bdc6:	d225      	bcs.n	800be14 <CircularQueue_Add+0x278>
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	7f1b      	ldrb	r3, [r3, #28]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d121      	bne.n	800be14 <CircularQueue_Add+0x278>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	681a      	ldr	r2, [r3, #0]
 800bdd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdd6:	18d0      	adds	r0, r2, r3
 800bdd8:	88fb      	ldrh	r3, [r7, #6]
 800bdda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bddc:	fb02 f303 	mul.w	r3, r2, r3
 800bde0:	68ba      	ldr	r2, [r7, #8]
 800bde2:	4413      	add	r3, r2
 800bde4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bde6:	4619      	mov	r1, r3
 800bde8:	f003 fa27 	bl	800f23a <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	695a      	ldr	r2, [r3, #20]
 800bdf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdf2:	441a      	add	r2, r3
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	633b      	str	r3, [r7, #48]	@ 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 800bdfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdfe:	627b      	str	r3, [r7, #36]	@ 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 800be00:	88fa      	ldrh	r2, [r7, #6]
 800be02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be04:	1ad3      	subs	r3, r2, r3
 800be06:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* set the current element Size, will be used to calaculate next last position at beginning of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800be08:	7ffb      	ldrb	r3, [r7, #31]
 800be0a:	b29a      	uxth	r2, r3
 800be0c:	88fb      	ldrh	r3, [r7, #6]
 800be0e:	4413      	add	r3, r2
 800be10:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800be12:	e0a4      	b.n	800bf5e <CircularQueue_Add+0x3c2>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 800be14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be16:	2b00      	cmp	r3, #0
 800be18:	f000 80a1 	beq.w	800bf5e <CircularQueue_Add+0x3c2>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	7f1b      	ldrb	r3, [r3, #28]
 800be20:	f003 0301 	and.w	r3, r3, #1
 800be24:	2b00      	cmp	r3, #0
 800be26:	d03a      	beq.n	800be9e <CircularQueue_Add+0x302>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	891b      	ldrh	r3, [r3, #8]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d10d      	bne.n	800be4c <CircularQueue_Add+0x2b0>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	681a      	ldr	r2, [r3, #0]
 800be34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be36:	3b02      	subs	r3, #2
 800be38:	4413      	add	r3, r2
 800be3a:	22ff      	movs	r2, #255	@ 0xff
 800be3c:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	681a      	ldr	r2, [r3, #0]
 800be42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be44:	3b01      	subs	r3, #1
 800be46:	4413      	add	r3, r2
 800be48:	22ff      	movs	r2, #255	@ 0xff
 800be4a:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	695a      	ldr	r2, [r3, #20]
 800be50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be52:	441a      	add	r2, r3
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 800be58:	2300      	movs	r3, #0
 800be5a:	627b      	str	r3, [r7, #36]	@ 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 800be5c:	88fb      	ldrh	r3, [r7, #6]
 800be5e:	62bb      	str	r3, [r7, #40]	@ 0x28
          /* Wrap */
          curBuffPosition = 0; 
 800be60:	2300      	movs	r3, #0
 800be62:	633b      	str	r3, [r7, #48]	@ 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	891b      	ldrh	r3, [r3, #8]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d16f      	bne.n	800bf4c <CircularQueue_Add+0x3b0>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	681a      	ldr	r2, [r3, #0]
 800be70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be72:	1c59      	adds	r1, r3, #1
 800be74:	6339      	str	r1, [r7, #48]	@ 0x30
 800be76:	4413      	add	r3, r2
 800be78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800be7a:	b2d2      	uxtb	r2, r2
 800be7c:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800be7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be80:	0a18      	lsrs	r0, r3, #8
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	681a      	ldr	r2, [r3, #0]
 800be86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be88:	1c59      	adds	r1, r3, #1
 800be8a:	6339      	str	r1, [r7, #48]	@ 0x30
 800be8c:	4413      	add	r3, r2
 800be8e:	b2c2      	uxtb	r2, r0
 800be90:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	695b      	ldr	r3, [r3, #20]
 800be96:	1c9a      	adds	r2, r3, #2
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	615a      	str	r2, [r3, #20]
 800be9c:	e056      	b.n	800bf4c <CircularQueue_Add+0x3b0>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	7f1b      	ldrb	r3, [r3, #28]
 800bea2:	f003 0302 	and.w	r3, r3, #2
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d050      	beq.n	800bf4c <CircularQueue_Add+0x3b0>
        {
          if (q->elementSize == 0)
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	891b      	ldrh	r3, [r3, #8]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d14a      	bne.n	800bf48 <CircularQueue_Add+0x3ac>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	681a      	ldr	r2, [r3, #0]
 800beb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800beb8:	3b02      	subs	r3, #2
 800beba:	4413      	add	r3, r2
 800bebc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bebe:	b2d2      	uxtb	r2, r2
 800bec0:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800bec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bec4:	0a19      	lsrs	r1, r3, #8
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	681a      	ldr	r2, [r3, #0]
 800beca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800becc:	3b01      	subs	r3, #1
 800bece:	4413      	add	r3, r2
 800bed0:	b2ca      	uxtb	r2, r1
 800bed2:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	681a      	ldr	r2, [r3, #0]
 800bed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800beda:	18d0      	adds	r0, r2, r3
 800bedc:	88fb      	ldrh	r3, [r7, #6]
 800bede:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bee0:	fb02 f303 	mul.w	r3, r2, r3
 800bee4:	68ba      	ldr	r2, [r7, #8]
 800bee6:	4413      	add	r3, r2
 800bee8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800beea:	4619      	mov	r1, r3
 800beec:	f003 f9a5 	bl	800f23a <memcpy>
             q->byteCount += NbBytesToCopy; 
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	695a      	ldr	r2, [r3, #20]
 800bef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bef6:	441a      	add	r2, r3
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 800befc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800befe:	627b      	str	r3, [r7, #36]	@ 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 800bf00:	88fa      	ldrh	r2, [r7, #6]
 800bf02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf04:	1ad3      	subs	r3, r2, r3
 800bf06:	62bb      	str	r3, [r7, #40]	@ 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	699b      	ldr	r3, [r3, #24]
 800bf0c:	1c5a      	adds	r2, r3, #1
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 800bf12:	2300      	movs	r3, #0
 800bf14:	633b      	str	r3, [r7, #48]	@ 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	681a      	ldr	r2, [r3, #0]
 800bf1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf1c:	1c59      	adds	r1, r3, #1
 800bf1e:	6339      	str	r1, [r7, #48]	@ 0x30
 800bf20:	4413      	add	r3, r2
 800bf22:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bf24:	b2d2      	uxtb	r2, r2
 800bf26:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800bf28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf2a:	0a18      	lsrs	r0, r3, #8
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	681a      	ldr	r2, [r3, #0]
 800bf30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf32:	1c59      	adds	r1, r3, #1
 800bf34:	6339      	str	r1, [r7, #48]	@ 0x30
 800bf36:	4413      	add	r3, r2
 800bf38:	b2c2      	uxtb	r2, r0
 800bf3a:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	695b      	ldr	r3, [r3, #20]
 800bf40:	1c9a      	adds	r2, r3, #2
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	615a      	str	r2, [r3, #20]
 800bf46:	e001      	b.n	800bf4c <CircularQueue_Add+0x3b0>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 800bf48:	2300      	movs	r3, #0
 800bf4a:	e049      	b.n	800bfe0 <CircularQueue_Add+0x444>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800bf4c:	7ffb      	ldrb	r3, [r7, #31]
 800bf4e:	b29a      	uxth	r2, r3
 800bf50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf52:	b29b      	uxth	r3, r3
 800bf54:	4413      	add	r3, r2
 800bf56:	86fb      	strh	r3, [r7, #54]	@ 0x36
        q->last = 0;        
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaining byte to copy */
      if (NbBytesToCopy)      
 800bf5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d015      	beq.n	800bf90 <CircularQueue_Add+0x3f4>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	681a      	ldr	r2, [r3, #0]
 800bf68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf6a:	18d0      	adds	r0, r2, r3
 800bf6c:	88fb      	ldrh	r3, [r7, #6]
 800bf6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bf70:	fb03 f202 	mul.w	r2, r3, r2
 800bf74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf76:	4413      	add	r3, r2
 800bf78:	68ba      	ldr	r2, [r7, #8]
 800bf7a:	4413      	add	r3, r2
 800bf7c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bf7e:	4619      	mov	r1, r3
 800bf80:	f003 f95b 	bl	800f23a <memcpy>
        q->byteCount += NbBytesToCopy;
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	695a      	ldr	r2, [r3, #20]
 800bf88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf8a:	441a      	add	r2, r3
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	699b      	ldr	r3, [r3, #24]
 800bf94:	1c5a      	adds	r2, r3, #1
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 800bf9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf9c:	3301      	adds	r3, #1
 800bf9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bfa0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bfa2:	683b      	ldr	r3, [r7, #0]
 800bfa4:	429a      	cmp	r2, r3
 800bfa6:	f4ff aeb0 	bcc.w	800bd0a <CircularQueue_Add+0x16e>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	681a      	ldr	r2, [r3, #0]
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	6919      	ldr	r1, [r3, #16]
 800bfb2:	7ffb      	ldrb	r3, [r7, #31]
 800bfb4:	4419      	add	r1, r3
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	685b      	ldr	r3, [r3, #4]
 800bfba:	4299      	cmp	r1, r3
 800bfbc:	d307      	bcc.n	800bfce <CircularQueue_Add+0x432>
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	6919      	ldr	r1, [r3, #16]
 800bfc2:	7ffb      	ldrb	r3, [r7, #31]
 800bfc4:	4419      	add	r1, r3
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	685b      	ldr	r3, [r3, #4]
 800bfca:	1acb      	subs	r3, r1, r3
 800bfcc:	e003      	b.n	800bfd6 <CircularQueue_Add+0x43a>
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	6919      	ldr	r1, [r3, #16]
 800bfd2:	7ffb      	ldrb	r3, [r7, #31]
 800bfd4:	440b      	add	r3, r1
 800bfd6:	4413      	add	r3, r2
 800bfd8:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 800bfda:	6a3b      	ldr	r3, [r7, #32]
 800bfdc:	e000      	b.n	800bfe0 <CircularQueue_Add+0x444>
    return NULL;
 800bfde:	2300      	movs	r3, #0
}
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	3738      	adds	r7, #56	@ 0x38
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	bd80      	pop	{r7, pc}

0800bfe8 <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 800bfe8:	b480      	push	{r7}
 800bfea:	b085      	sub	sp, #20
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	6078      	str	r0, [r7, #4]
 800bff0:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800bff2:	2300      	movs	r3, #0
 800bff4:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 800bff6:	2300      	movs	r3, #0
 800bff8:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	891b      	ldrh	r3, [r3, #8]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d101      	bne.n	800c006 <CircularQueue_Remove+0x1e>
 800c002:	2302      	movs	r3, #2
 800c004:	e000      	b.n	800c008 <CircularQueue_Remove+0x20>
 800c006:	2300      	movs	r3, #0
 800c008:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 800c00a:	2300      	movs	r3, #0
 800c00c:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	695b      	ldr	r3, [r3, #20]
 800c012:	2b00      	cmp	r3, #0
 800c014:	f000 80ca 	beq.w	800c1ac <CircularQueue_Remove+0x1c4>
  {
    /* retrieve element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	891b      	ldrh	r3, [r3, #8]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d120      	bne.n	800c062 <CircularQueue_Remove+0x7a>
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681a      	ldr	r2, [r3, #0]
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	68db      	ldr	r3, [r3, #12]
 800c028:	4413      	add	r3, r2
 800c02a:	781b      	ldrb	r3, [r3, #0]
 800c02c:	4618      	mov	r0, r3
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681a      	ldr	r2, [r3, #0]
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	68db      	ldr	r3, [r3, #12]
 800c036:	1c59      	adds	r1, r3, #1
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	685b      	ldr	r3, [r3, #4]
 800c03c:	4299      	cmp	r1, r3
 800c03e:	d306      	bcc.n	800c04e <CircularQueue_Remove+0x66>
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	68d9      	ldr	r1, [r3, #12]
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	685b      	ldr	r3, [r3, #4]
 800c048:	1acb      	subs	r3, r1, r3
 800c04a:	3301      	adds	r3, #1
 800c04c:	e002      	b.n	800c054 <CircularQueue_Remove+0x6c>
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	68db      	ldr	r3, [r3, #12]
 800c052:	3301      	adds	r3, #1
 800c054:	4413      	add	r3, r2
 800c056:	781b      	ldrb	r3, [r3, #0]
 800c058:	021b      	lsls	r3, r3, #8
 800c05a:	b29b      	uxth	r3, r3
 800c05c:	4403      	add	r3, r0
 800c05e:	b29b      	uxth	r3, r3
 800c060:	e001      	b.n	800c066 <CircularQueue_Remove+0x7e>
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	891b      	ldrh	r3, [r3, #8]
 800c066:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	7f1b      	ldrb	r3, [r3, #28]
 800c06c:	f003 0301 	and.w	r3, r3, #1
 800c070:	2b00      	cmp	r3, #0
 800c072:	d056      	beq.n	800c122 <CircularQueue_Remove+0x13a>
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	7f1b      	ldrb	r3, [r3, #28]
 800c078:	f003 0302 	and.w	r3, r3, #2
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d150      	bne.n	800c122 <CircularQueue_Remove+0x13a>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800c080:	897b      	ldrh	r3, [r7, #10]
 800c082:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c086:	4293      	cmp	r3, r2
 800c088:	d103      	bne.n	800c092 <CircularQueue_Remove+0xaa>
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	891b      	ldrh	r3, [r3, #8]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d012      	beq.n	800c0b8 <CircularQueue_Remove+0xd0>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	68da      	ldr	r2, [r3, #12]
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800c09a:	429a      	cmp	r2, r3
 800c09c:	d941      	bls.n	800c122 <CircularQueue_Remove+0x13a>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	891b      	ldrh	r3, [r3, #8]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d03d      	beq.n	800c122 <CircularQueue_Remove+0x13a>
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	685a      	ldr	r2, [r3, #4]
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	68db      	ldr	r3, [r3, #12]
 800c0ae:	1ad3      	subs	r3, r2, r3
 800c0b0:	687a      	ldr	r2, [r7, #4]
 800c0b2:	8912      	ldrh	r2, [r2, #8]
 800c0b4:	4293      	cmp	r3, r2
 800c0b6:	d234      	bcs.n	800c122 <CircularQueue_Remove+0x13a>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	695a      	ldr	r2, [r3, #20]
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	68d9      	ldr	r1, [r3, #12]
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	685b      	ldr	r3, [r3, #4]
 800c0c4:	1acb      	subs	r3, r1, r3
 800c0c6:	441a      	add	r2, r3
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	60da      	str	r2, [r3, #12]
          /* retrieve the right size after the wrap [if variable size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	891b      	ldrh	r3, [r3, #8]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d120      	bne.n	800c11c <CircularQueue_Remove+0x134>
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	681a      	ldr	r2, [r3, #0]
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	68db      	ldr	r3, [r3, #12]
 800c0e2:	4413      	add	r3, r2
 800c0e4:	781b      	ldrb	r3, [r3, #0]
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681a      	ldr	r2, [r3, #0]
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	68db      	ldr	r3, [r3, #12]
 800c0f0:	1c59      	adds	r1, r3, #1
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	685b      	ldr	r3, [r3, #4]
 800c0f6:	4299      	cmp	r1, r3
 800c0f8:	d306      	bcc.n	800c108 <CircularQueue_Remove+0x120>
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	68d9      	ldr	r1, [r3, #12]
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	685b      	ldr	r3, [r3, #4]
 800c102:	1acb      	subs	r3, r1, r3
 800c104:	3301      	adds	r3, #1
 800c106:	e002      	b.n	800c10e <CircularQueue_Remove+0x126>
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	68db      	ldr	r3, [r3, #12]
 800c10c:	3301      	adds	r3, #1
 800c10e:	4413      	add	r3, r2
 800c110:	781b      	ldrb	r3, [r3, #0]
 800c112:	021b      	lsls	r3, r3, #8
 800c114:	b29b      	uxth	r3, r3
 800c116:	4403      	add	r3, r0
 800c118:	b29b      	uxth	r3, r3
 800c11a:	e001      	b.n	800c120 <CircularQueue_Remove+0x138>
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	891b      	ldrh	r3, [r3, #8]
 800c120:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retrieve element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	681a      	ldr	r2, [r3, #0]
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	68d9      	ldr	r1, [r3, #12]
 800c12a:	7a7b      	ldrb	r3, [r7, #9]
 800c12c:	4419      	add	r1, r3
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	685b      	ldr	r3, [r3, #4]
 800c132:	4299      	cmp	r1, r3
 800c134:	d307      	bcc.n	800c146 <CircularQueue_Remove+0x15e>
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	68d9      	ldr	r1, [r3, #12]
 800c13a:	7a7b      	ldrb	r3, [r7, #9]
 800c13c:	4419      	add	r1, r3
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	685b      	ldr	r3, [r3, #4]
 800c142:	1acb      	subs	r3, r1, r3
 800c144:	e003      	b.n	800c14e <CircularQueue_Remove+0x166>
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	68d9      	ldr	r1, [r3, #12]
 800c14a:	7a7b      	ldrb	r3, [r7, #9]
 800c14c:	440b      	add	r3, r1
 800c14e:	4413      	add	r3, r2
 800c150:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	695b      	ldr	r3, [r3, #20]
 800c156:	8979      	ldrh	r1, [r7, #10]
 800c158:	7a7a      	ldrb	r2, [r7, #9]
 800c15a:	440a      	add	r2, r1
 800c15c:	1a9a      	subs	r2, r3, r2
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	695b      	ldr	r3, [r3, #20]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d01b      	beq.n	800c1a2 <CircularQueue_Remove+0x1ba>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	68da      	ldr	r2, [r3, #12]
 800c16e:	897b      	ldrh	r3, [r7, #10]
 800c170:	441a      	add	r2, r3
 800c172:	7a7b      	ldrb	r3, [r7, #9]
 800c174:	441a      	add	r2, r3
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	685b      	ldr	r3, [r3, #4]
 800c17a:	429a      	cmp	r2, r3
 800c17c:	d309      	bcc.n	800c192 <CircularQueue_Remove+0x1aa>
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	68da      	ldr	r2, [r3, #12]
 800c182:	897b      	ldrh	r3, [r7, #10]
 800c184:	441a      	add	r2, r3
 800c186:	7a7b      	ldrb	r3, [r7, #9]
 800c188:	441a      	add	r2, r3
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	685b      	ldr	r3, [r3, #4]
 800c18e:	1ad3      	subs	r3, r2, r3
 800c190:	e005      	b.n	800c19e <CircularQueue_Remove+0x1b6>
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	68da      	ldr	r2, [r3, #12]
 800c196:	897b      	ldrh	r3, [r7, #10]
 800c198:	441a      	add	r2, r3
 800c19a:	7a7b      	ldrb	r3, [r7, #9]
 800c19c:	4413      	add	r3, r2
 800c19e:	687a      	ldr	r2, [r7, #4]
 800c1a0:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	699b      	ldr	r3, [r3, #24]
 800c1a6:	1e5a      	subs	r2, r3, #1
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 800c1ac:	683b      	ldr	r3, [r7, #0]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d002      	beq.n	800c1b8 <CircularQueue_Remove+0x1d0>
  {
    *elementSize = eltSize;
 800c1b2:	683b      	ldr	r3, [r7, #0]
 800c1b4:	897a      	ldrh	r2, [r7, #10]
 800c1b6:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 800c1b8:	68fb      	ldr	r3, [r7, #12]
}
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	3714      	adds	r7, #20
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c4:	4770      	bx	lr

0800c1c6 <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 800c1c6:	b480      	push	{r7}
 800c1c8:	b087      	sub	sp, #28
 800c1ca:	af00      	add	r7, sp, #0
 800c1cc:	6078      	str	r0, [r7, #4]
 800c1ce:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	891b      	ldrh	r3, [r3, #8]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d101      	bne.n	800c1e4 <CircularQueue_Sense+0x1e>
 800c1e0:	2302      	movs	r3, #2
 800c1e2:	e000      	b.n	800c1e6 <CircularQueue_Sense+0x20>
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	695b      	ldr	r3, [r3, #20]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	f000 808e 	beq.w	800c316 <CircularQueue_Sense+0x150>
  {
    FirstElemetPos = q->first;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	68db      	ldr	r3, [r3, #12]
 800c1fe:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	891b      	ldrh	r3, [r3, #8]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d120      	bne.n	800c24a <CircularQueue_Sense+0x84>
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681a      	ldr	r2, [r3, #0]
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	68db      	ldr	r3, [r3, #12]
 800c210:	4413      	add	r3, r2
 800c212:	781b      	ldrb	r3, [r3, #0]
 800c214:	4618      	mov	r0, r3
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	681a      	ldr	r2, [r3, #0]
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	68db      	ldr	r3, [r3, #12]
 800c21e:	1c59      	adds	r1, r3, #1
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	685b      	ldr	r3, [r3, #4]
 800c224:	4299      	cmp	r1, r3
 800c226:	d306      	bcc.n	800c236 <CircularQueue_Sense+0x70>
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	68d9      	ldr	r1, [r3, #12]
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	685b      	ldr	r3, [r3, #4]
 800c230:	1acb      	subs	r3, r1, r3
 800c232:	3301      	adds	r3, #1
 800c234:	e002      	b.n	800c23c <CircularQueue_Sense+0x76>
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	68db      	ldr	r3, [r3, #12]
 800c23a:	3301      	adds	r3, #1
 800c23c:	4413      	add	r3, r2
 800c23e:	781b      	ldrb	r3, [r3, #0]
 800c240:	021b      	lsls	r3, r3, #8
 800c242:	b29b      	uxth	r3, r3
 800c244:	4403      	add	r3, r0
 800c246:	b29b      	uxth	r3, r3
 800c248:	e001      	b.n	800c24e <CircularQueue_Sense+0x88>
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	891b      	ldrh	r3, [r3, #8]
 800c24e:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	7f1b      	ldrb	r3, [r3, #28]
 800c254:	f003 0301 	and.w	r3, r3, #1
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d047      	beq.n	800c2ec <CircularQueue_Sense+0x126>
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	7f1b      	ldrb	r3, [r3, #28]
 800c260:	f003 0302 	and.w	r3, r3, #2
 800c264:	2b00      	cmp	r3, #0
 800c266:	d141      	bne.n	800c2ec <CircularQueue_Sense+0x126>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800c268:	8a7b      	ldrh	r3, [r7, #18]
 800c26a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c26e:	4293      	cmp	r3, r2
 800c270:	d103      	bne.n	800c27a <CircularQueue_Sense+0xb4>
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	891b      	ldrh	r3, [r3, #8]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d012      	beq.n	800c2a0 <CircularQueue_Sense+0xda>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	68da      	ldr	r2, [r3, #12]
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800c282:	429a      	cmp	r2, r3
 800c284:	d932      	bls.n	800c2ec <CircularQueue_Sense+0x126>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	891b      	ldrh	r3, [r3, #8]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d02e      	beq.n	800c2ec <CircularQueue_Sense+0x126>
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	685a      	ldr	r2, [r3, #4]
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	68db      	ldr	r3, [r3, #12]
 800c296:	1ad3      	subs	r3, r2, r3
 800c298:	687a      	ldr	r2, [r7, #4]
 800c29a:	8912      	ldrh	r2, [r2, #8]
 800c29c:	4293      	cmp	r3, r2
 800c29e:	d225      	bcs.n	800c2ec <CircularQueue_Sense+0x126>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	60fb      	str	r3, [r7, #12]

        /* retrieve the right size after the wrap [if variable size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	891b      	ldrh	r3, [r3, #8]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d11c      	bne.n	800c2e6 <CircularQueue_Sense+0x120>
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681a      	ldr	r2, [r3, #0]
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	4413      	add	r3, r2
 800c2b4:	781b      	ldrb	r3, [r3, #0]
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681a      	ldr	r2, [r3, #0]
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	1c59      	adds	r1, r3, #1
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	685b      	ldr	r3, [r3, #4]
 800c2c4:	4299      	cmp	r1, r3
 800c2c6:	d305      	bcc.n	800c2d4 <CircularQueue_Sense+0x10e>
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	685b      	ldr	r3, [r3, #4]
 800c2cc:	68f9      	ldr	r1, [r7, #12]
 800c2ce:	1acb      	subs	r3, r1, r3
 800c2d0:	3301      	adds	r3, #1
 800c2d2:	e001      	b.n	800c2d8 <CircularQueue_Sense+0x112>
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	3301      	adds	r3, #1
 800c2d8:	4413      	add	r3, r2
 800c2da:	781b      	ldrb	r3, [r3, #0]
 800c2dc:	021b      	lsls	r3, r3, #8
 800c2de:	b29b      	uxth	r3, r3
 800c2e0:	4403      	add	r3, r0
 800c2e2:	b29b      	uxth	r3, r3
 800c2e4:	e001      	b.n	800c2ea <CircularQueue_Sense+0x124>
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	891b      	ldrh	r3, [r3, #8]
 800c2ea:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681a      	ldr	r2, [r3, #0]
 800c2f0:	7af9      	ldrb	r1, [r7, #11]
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	4419      	add	r1, r3
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	685b      	ldr	r3, [r3, #4]
 800c2fa:	4299      	cmp	r1, r3
 800c2fc:	d306      	bcc.n	800c30c <CircularQueue_Sense+0x146>
 800c2fe:	7af9      	ldrb	r1, [r7, #11]
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	4419      	add	r1, r3
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	685b      	ldr	r3, [r3, #4]
 800c308:	1acb      	subs	r3, r1, r3
 800c30a:	e002      	b.n	800c312 <CircularQueue_Sense+0x14c>
 800c30c:	7af9      	ldrb	r1, [r7, #11]
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	440b      	add	r3, r1
 800c312:	4413      	add	r3, r2
 800c314:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 800c316:	683b      	ldr	r3, [r7, #0]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d002      	beq.n	800c322 <CircularQueue_Sense+0x15c>
  {
    *elementSize = eltSize;
 800c31c:	683b      	ldr	r3, [r7, #0]
 800c31e:	8a7a      	ldrh	r2, [r7, #18]
 800c320:	801a      	strh	r2, [r3, #0]
  }
  return x;
 800c322:	697b      	ldr	r3, [r7, #20]
}
 800c324:	4618      	mov	r0, r3
 800c326:	371c      	adds	r7, #28
 800c328:	46bd      	mov	sp, r7
 800c32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32e:	4770      	bx	lr

0800c330 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800c330:	b480      	push	{r7}
 800c332:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800c334:	4b03      	ldr	r3, [pc, #12]	@ (800c344 <LL_FLASH_GetUDN+0x14>)
 800c336:	681b      	ldr	r3, [r3, #0]
}
 800c338:	4618      	mov	r0, r3
 800c33a:	46bd      	mov	sp, r7
 800c33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c340:	4770      	bx	lr
 800c342:	bf00      	nop
 800c344:	1fff7580 	.word	0x1fff7580

0800c348 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800c348:	b480      	push	{r7}
 800c34a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800c34c:	4b03      	ldr	r3, [pc, #12]	@ (800c35c <LL_FLASH_GetDeviceID+0x14>)
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	b2db      	uxtb	r3, r3
}
 800c352:	4618      	mov	r0, r3
 800c354:	46bd      	mov	sp, r7
 800c356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35a:	4770      	bx	lr
 800c35c:	1fff7584 	.word	0x1fff7584

0800c360 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800c360:	b480      	push	{r7}
 800c362:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800c364:	4b03      	ldr	r3, [pc, #12]	@ (800c374 <LL_FLASH_GetSTCompanyID+0x14>)
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	0a1b      	lsrs	r3, r3, #8
}
 800c36a:	4618      	mov	r0, r3
 800c36c:	46bd      	mov	sp, r7
 800c36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c372:	4770      	bx	lr
 800c374:	1fff7584 	.word	0x1fff7584

0800c378 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 800c378:	b5b0      	push	{r4, r5, r7, lr}
 800c37a:	b090      	sub	sp, #64	@ 0x40
 800c37c:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800c37e:	2392      	movs	r3, #146	@ 0x92
 800c380:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */
 //UTIL_SEQ_RegTask( 1<<CFG_MY_TASK, UTIL_SEQ_RFU, myTask);
// UTIL_SEQ_SetTask(1 << CFG_MY_TASK, CFG_SCH_PRIO_0);
  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800c384:	4b45      	ldr	r3, [pc, #276]	@ (800c49c <APP_BLE_Init+0x124>)
 800c386:	1d3c      	adds	r4, r7, #4
 800c388:	461d      	mov	r5, r3
 800c38a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c38c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c38e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c390:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c392:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c394:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c396:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c39a:	c403      	stmia	r4!, {r0, r1}
 800c39c:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800c39e:	f000 fba5 	bl	800caec <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800c3a2:	2101      	movs	r1, #1
 800c3a4:	2002      	movs	r0, #2
 800c3a6:	f001 fbcb 	bl	800db40 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800c3aa:	4a3d      	ldr	r2, [pc, #244]	@ (800c4a0 <APP_BLE_Init+0x128>)
 800c3ac:	2100      	movs	r1, #0
 800c3ae:	2002      	movs	r0, #2
 800c3b0:	f001 fcf2 	bl	800dd98 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 800c3b4:	1d3b      	adds	r3, r7, #4
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	f7fe fbec 	bl	800ab94 <SHCI_C2_BLE_Init>
 800c3bc:	4603      	mov	r3, r0
 800c3be:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 800c3c2:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d012      	beq.n	800c3f0 <APP_BLE_Init+0x78>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 800c3ca:	4836      	ldr	r0, [pc, #216]	@ (800c4a4 <APP_BLE_Init+0x12c>)
 800c3cc:	f7ff f9f0 	bl	800b7b0 <DbgTraceGetFileName>
 800c3d0:	4601      	mov	r1, r0
 800c3d2:	f240 1347 	movw	r3, #327	@ 0x147
 800c3d6:	4a34      	ldr	r2, [pc, #208]	@ (800c4a8 <APP_BLE_Init+0x130>)
 800c3d8:	4834      	ldr	r0, [pc, #208]	@ (800c4ac <APP_BLE_Init+0x134>)
 800c3da:	f002 fd29 	bl	800ee30 <iprintf>
 800c3de:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800c3e2:	4619      	mov	r1, r3
 800c3e4:	4832      	ldr	r0, [pc, #200]	@ (800c4b0 <APP_BLE_Init+0x138>)
 800c3e6:	f002 fd23 	bl	800ee30 <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800c3ea:	f7f7 fbcf 	bl	8003b8c <Error_Handler>
 800c3ee:	e00c      	b.n	800c40a <APP_BLE_Init+0x92>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 800c3f0:	482c      	ldr	r0, [pc, #176]	@ (800c4a4 <APP_BLE_Init+0x12c>)
 800c3f2:	f7ff f9dd 	bl	800b7b0 <DbgTraceGetFileName>
 800c3f6:	4601      	mov	r1, r0
 800c3f8:	f240 134d 	movw	r3, #333	@ 0x14d
 800c3fc:	4a2a      	ldr	r2, [pc, #168]	@ (800c4a8 <APP_BLE_Init+0x130>)
 800c3fe:	482b      	ldr	r0, [pc, #172]	@ (800c4ac <APP_BLE_Init+0x134>)
 800c400:	f002 fd16 	bl	800ee30 <iprintf>
 800c404:	482b      	ldr	r0, [pc, #172]	@ (800c4b4 <APP_BLE_Init+0x13c>)
 800c406:	f002 fd13 	bl	800ee30 <iprintf>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800c40a:	f000 fb85 	bl	800cb18 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800c40e:	f7fe fb1b 	bl	800aa48 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800c412:	4b29      	ldr	r3, [pc, #164]	@ (800c4b8 <APP_BLE_Init+0x140>)
 800c414:	2200      	movs	r2, #0
 800c416:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800c41a:	4b27      	ldr	r3, [pc, #156]	@ (800c4b8 <APP_BLE_Init+0x140>)
 800c41c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c420:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800c422:	4a26      	ldr	r2, [pc, #152]	@ (800c4bc <APP_BLE_Init+0x144>)
 800c424:	2100      	movs	r1, #0
 800c426:	2001      	movs	r0, #1
 800c428:	f001 fcb6 	bl	800dd98 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 800c42c:	2006      	movs	r0, #6
 800c42e:	f7fe f97f 	bl	800a730 <aci_hal_set_radio_activity_mask>
 800c432:	4603      	mov	r3, r0
 800c434:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (ret != BLE_STATUS_SUCCESS)
 800c438:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d010      	beq.n	800c462 <APP_BLE_Init+0xea>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 800c440:	4818      	ldr	r0, [pc, #96]	@ (800c4a4 <APP_BLE_Init+0x12c>)
 800c442:	f7ff f9b5 	bl	800b7b0 <DbgTraceGetFileName>
 800c446:	4601      	mov	r1, r0
 800c448:	f240 1371 	movw	r3, #369	@ 0x171
 800c44c:	4a16      	ldr	r2, [pc, #88]	@ (800c4a8 <APP_BLE_Init+0x130>)
 800c44e:	4817      	ldr	r0, [pc, #92]	@ (800c4ac <APP_BLE_Init+0x134>)
 800c450:	f002 fcee 	bl	800ee30 <iprintf>
 800c454:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c458:	4619      	mov	r1, r3
 800c45a:	4819      	ldr	r0, [pc, #100]	@ (800c4c0 <APP_BLE_Init+0x148>)
 800c45c:	f002 fce8 	bl	800ee30 <iprintf>
 800c460:	e00c      	b.n	800c47c <APP_BLE_Init+0x104>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 800c462:	4810      	ldr	r0, [pc, #64]	@ (800c4a4 <APP_BLE_Init+0x12c>)
 800c464:	f7ff f9a4 	bl	800b7b0 <DbgTraceGetFileName>
 800c468:	4601      	mov	r1, r0
 800c46a:	f240 1375 	movw	r3, #373	@ 0x175
 800c46e:	4a0e      	ldr	r2, [pc, #56]	@ (800c4a8 <APP_BLE_Init+0x130>)
 800c470:	480e      	ldr	r0, [pc, #56]	@ (800c4ac <APP_BLE_Init+0x134>)
 800c472:	f002 fcdd 	bl	800ee30 <iprintf>
 800c476:	4813      	ldr	r0, [pc, #76]	@ (800c4c4 <APP_BLE_Init+0x14c>)
 800c478:	f002 fcda 	bl	800ee30 <iprintf>
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 800c47c:	f000 ff82 	bl	800d384 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800c480:	4b0d      	ldr	r3, [pc, #52]	@ (800c4b8 <APP_BLE_Init+0x140>)
 800c482:	2200      	movs	r2, #0
 800c484:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800c486:	4b0c      	ldr	r3, [pc, #48]	@ (800c4b8 <APP_BLE_Init+0x140>)
 800c488:	2200      	movs	r2, #0
 800c48a:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 800c48c:	2001      	movs	r0, #1
 800c48e:	f000 fdd7 	bl	800d040 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 800c492:	bf00      	nop
}
 800c494:	3740      	adds	r7, #64	@ 0x40
 800c496:	46bd      	mov	sp, r7
 800c498:	bdb0      	pop	{r4, r5, r7, pc}
 800c49a:	bf00      	nop
 800c49c:	08012d70 	.word	0x08012d70
 800c4a0:	0800adb1 	.word	0x0800adb1
 800c4a4:	08012c64 	.word	0x08012c64
 800c4a8:	0801403c 	.word	0x0801403c
 800c4ac:	08012c80 	.word	0x08012c80
 800c4b0:	08012c94 	.word	0x08012c94
 800c4b4:	08012ccc 	.word	0x08012ccc
 800c4b8:	20003cd8 	.word	0x20003cd8
 800c4bc:	0800d1c5 	.word	0x0800d1c5
 800c4c0:	08012cf4 	.word	0x08012cf4
 800c4c4:	08012d38 	.word	0x08012d38

0800c4c8 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 800c4c8:	b5b0      	push	{r4, r5, r7, lr}
 800c4ca:	b090      	sub	sp, #64	@ 0x40
 800c4cc:	af04      	add	r7, sp, #16
 800c4ce:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 800c4d0:	2392      	movs	r3, #146	@ 0x92
 800c4d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	3301      	adds	r3, #1
 800c4da:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (p_event_pckt->evt)
 800c4dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4de:	781b      	ldrb	r3, [r3, #0]
 800c4e0:	2bff      	cmp	r3, #255	@ 0xff
 800c4e2:	f000 8143 	beq.w	800c76c <SVCCTL_App_Notification+0x2a4>
 800c4e6:	2bff      	cmp	r3, #255	@ 0xff
 800c4e8:	f300 82cd 	bgt.w	800ca86 <SVCCTL_App_Notification+0x5be>
 800c4ec:	2b3e      	cmp	r3, #62	@ 0x3e
 800c4ee:	d06a      	beq.n	800c5c6 <SVCCTL_App_Notification+0xfe>
 800c4f0:	2b3e      	cmp	r3, #62	@ 0x3e
 800c4f2:	f300 82c8 	bgt.w	800ca86 <SVCCTL_App_Notification+0x5be>
 800c4f6:	2b05      	cmp	r3, #5
 800c4f8:	d002      	beq.n	800c500 <SVCCTL_App_Notification+0x38>
 800c4fa:	2b10      	cmp	r3, #16
 800c4fc:	d042      	beq.n	800c584 <SVCCTL_App_Notification+0xbc>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800c4fe:	e2c2      	b.n	800ca86 <SVCCTL_App_Notification+0x5be>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 800c500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c502:	3302      	adds	r3, #2
 800c504:	60bb      	str	r3, [r7, #8]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800c506:	68bb      	ldr	r3, [r7, #8]
 800c508:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800c50c:	b29a      	uxth	r2, r3
 800c50e:	4bab      	ldr	r3, [pc, #684]	@ (800c7bc <SVCCTL_App_Notification+0x2f4>)
 800c510:	8adb      	ldrh	r3, [r3, #22]
 800c512:	429a      	cmp	r2, r3
 800c514:	d128      	bne.n	800c568 <SVCCTL_App_Notification+0xa0>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800c516:	4ba9      	ldr	r3, [pc, #676]	@ (800c7bc <SVCCTL_App_Notification+0x2f4>)
 800c518:	2200      	movs	r2, #0
 800c51a:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800c51c:	4ba7      	ldr	r3, [pc, #668]	@ (800c7bc <SVCCTL_App_Notification+0x2f4>)
 800c51e:	2200      	movs	r2, #0
 800c520:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
        APP_DBG_MSG(">>== HCI_DISCONNECTION_COMPLETE_EVT_CODE\n");
 800c524:	48a6      	ldr	r0, [pc, #664]	@ (800c7c0 <SVCCTL_App_Notification+0x2f8>)
 800c526:	f7ff f943 	bl	800b7b0 <DbgTraceGetFileName>
 800c52a:	4601      	mov	r1, r0
 800c52c:	f240 13b9 	movw	r3, #441	@ 0x1b9
 800c530:	4aa4      	ldr	r2, [pc, #656]	@ (800c7c4 <SVCCTL_App_Notification+0x2fc>)
 800c532:	48a5      	ldr	r0, [pc, #660]	@ (800c7c8 <SVCCTL_App_Notification+0x300>)
 800c534:	f002 fc7c 	bl	800ee30 <iprintf>
 800c538:	48a4      	ldr	r0, [pc, #656]	@ (800c7cc <SVCCTL_App_Notification+0x304>)
 800c53a:	f002 fce9 	bl	800ef10 <puts>
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 800c53e:	48a0      	ldr	r0, [pc, #640]	@ (800c7c0 <SVCCTL_App_Notification+0x2f8>)
 800c540:	f7ff f936 	bl	800b7b0 <DbgTraceGetFileName>
 800c544:	4601      	mov	r1, r0
 800c546:	f44f 73dd 	mov.w	r3, #442	@ 0x1ba
 800c54a:	4a9e      	ldr	r2, [pc, #632]	@ (800c7c4 <SVCCTL_App_Notification+0x2fc>)
 800c54c:	489e      	ldr	r0, [pc, #632]	@ (800c7c8 <SVCCTL_App_Notification+0x300>)
 800c54e:	f002 fc6f 	bl	800ee30 <iprintf>
 800c552:	68bb      	ldr	r3, [r7, #8]
 800c554:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800c558:	b29b      	uxth	r3, r3
 800c55a:	4619      	mov	r1, r3
 800c55c:	68bb      	ldr	r3, [r7, #8]
 800c55e:	78db      	ldrb	r3, [r3, #3]
 800c560:	461a      	mov	r2, r3
 800c562:	489b      	ldr	r0, [pc, #620]	@ (800c7d0 <SVCCTL_App_Notification+0x308>)
 800c564:	f002 fc64 	bl	800ee30 <iprintf>
      Adv_Request(APP_BLE_FAST_ADV);
 800c568:	2001      	movs	r0, #1
 800c56a:	f000 fd69 	bl	800d040 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 800c56e:	4b99      	ldr	r3, [pc, #612]	@ (800c7d4 <SVCCTL_App_Notification+0x30c>)
 800c570:	2201      	movs	r2, #1
 800c572:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800c574:	4b91      	ldr	r3, [pc, #580]	@ (800c7bc <SVCCTL_App_Notification+0x2f4>)
 800c576:	8ada      	ldrh	r2, [r3, #22]
 800c578:	4b96      	ldr	r3, [pc, #600]	@ (800c7d4 <SVCCTL_App_Notification+0x30c>)
 800c57a:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 800c57c:	4895      	ldr	r0, [pc, #596]	@ (800c7d4 <SVCCTL_App_Notification+0x30c>)
 800c57e:	f000 feed 	bl	800d35c <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800c582:	e283      	b.n	800ca8c <SVCCTL_App_Notification+0x5c4>
      p_hardware_error_event = (hci_hardware_error_event_rp0 *)p_event_pckt->data;
 800c584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c586:	3302      	adds	r3, #2
 800c588:	60fb      	str	r3, [r7, #12]
      APP_DBG_MSG(">>== HCI_HARDWARE_ERROR_EVT_CODE\n");
 800c58a:	488d      	ldr	r0, [pc, #564]	@ (800c7c0 <SVCCTL_App_Notification+0x2f8>)
 800c58c:	f7ff f910 	bl	800b7b0 <DbgTraceGetFileName>
 800c590:	4601      	mov	r1, r0
 800c592:	f44f 73ee 	mov.w	r3, #476	@ 0x1dc
 800c596:	4a8b      	ldr	r2, [pc, #556]	@ (800c7c4 <SVCCTL_App_Notification+0x2fc>)
 800c598:	488b      	ldr	r0, [pc, #556]	@ (800c7c8 <SVCCTL_App_Notification+0x300>)
 800c59a:	f002 fc49 	bl	800ee30 <iprintf>
 800c59e:	488e      	ldr	r0, [pc, #568]	@ (800c7d8 <SVCCTL_App_Notification+0x310>)
 800c5a0:	f002 fcb6 	bl	800ef10 <puts>
      APP_DBG_MSG("Hardware Code = 0x%02X\n",p_hardware_error_event->Hardware_Code);
 800c5a4:	4886      	ldr	r0, [pc, #536]	@ (800c7c0 <SVCCTL_App_Notification+0x2f8>)
 800c5a6:	f7ff f903 	bl	800b7b0 <DbgTraceGetFileName>
 800c5aa:	4601      	mov	r1, r0
 800c5ac:	f240 13dd 	movw	r3, #477	@ 0x1dd
 800c5b0:	4a84      	ldr	r2, [pc, #528]	@ (800c7c4 <SVCCTL_App_Notification+0x2fc>)
 800c5b2:	4885      	ldr	r0, [pc, #532]	@ (800c7c8 <SVCCTL_App_Notification+0x300>)
 800c5b4:	f002 fc3c 	bl	800ee30 <iprintf>
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	781b      	ldrb	r3, [r3, #0]
 800c5bc:	4619      	mov	r1, r3
 800c5be:	4887      	ldr	r0, [pc, #540]	@ (800c7dc <SVCCTL_App_Notification+0x314>)
 800c5c0:	f002 fc36 	bl	800ee30 <iprintf>
      break; /* HCI_HARDWARE_ERROR_EVT_CODE */
 800c5c4:	e262      	b.n	800ca8c <SVCCTL_App_Notification+0x5c4>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 800c5c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5c8:	3302      	adds	r3, #2
 800c5ca:	61bb      	str	r3, [r7, #24]
      switch (p_meta_evt->subevent)
 800c5cc:	69bb      	ldr	r3, [r7, #24]
 800c5ce:	781b      	ldrb	r3, [r3, #0]
 800c5d0:	2b01      	cmp	r3, #1
 800c5d2:	d042      	beq.n	800c65a <SVCCTL_App_Notification+0x192>
 800c5d4:	2b03      	cmp	r3, #3
 800c5d6:	f040 80c7 	bne.w	800c768 <SVCCTL_App_Notification+0x2a0>
          p_connection_update_complete_event = (hci_le_connection_update_complete_event_rp0 *) p_meta_evt->data;
 800c5da:	69bb      	ldr	r3, [r7, #24]
 800c5dc:	3301      	adds	r3, #1
 800c5de:	617b      	str	r3, [r7, #20]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE\n");
 800c5e0:	4877      	ldr	r0, [pc, #476]	@ (800c7c0 <SVCCTL_App_Notification+0x2f8>)
 800c5e2:	f7ff f8e5 	bl	800b7b0 <DbgTraceGetFileName>
 800c5e6:	4601      	mov	r1, r0
 800c5e8:	f240 13ef 	movw	r3, #495	@ 0x1ef
 800c5ec:	4a75      	ldr	r2, [pc, #468]	@ (800c7c4 <SVCCTL_App_Notification+0x2fc>)
 800c5ee:	4876      	ldr	r0, [pc, #472]	@ (800c7c8 <SVCCTL_App_Notification+0x300>)
 800c5f0:	f002 fc1e 	bl	800ee30 <iprintf>
 800c5f4:	487a      	ldr	r0, [pc, #488]	@ (800c7e0 <SVCCTL_App_Notification+0x318>)
 800c5f6:	f002 fc8b 	bl	800ef10 <puts>
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800c5fa:	4871      	ldr	r0, [pc, #452]	@ (800c7c0 <SVCCTL_App_Notification+0x2f8>)
 800c5fc:	f7ff f8d8 	bl	800b7b0 <DbgTraceGetFileName>
 800c600:	4601      	mov	r1, r0
 800c602:	f44f 73f8 	mov.w	r3, #496	@ 0x1f0
 800c606:	4a6f      	ldr	r2, [pc, #444]	@ (800c7c4 <SVCCTL_App_Notification+0x2fc>)
 800c608:	486f      	ldr	r0, [pc, #444]	@ (800c7c8 <SVCCTL_App_Notification+0x300>)
 800c60a:	f002 fc11 	bl	800ee30 <iprintf>
 800c60e:	697b      	ldr	r3, [r7, #20]
 800c610:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800c614:	b29b      	uxth	r3, r3
 800c616:	4618      	mov	r0, r3
 800c618:	f7f3 ff5c 	bl	80004d4 <__aeabi_i2d>
 800c61c:	f04f 0200 	mov.w	r2, #0
 800c620:	4b70      	ldr	r3, [pc, #448]	@ (800c7e4 <SVCCTL_App_Notification+0x31c>)
 800c622:	f7f3 ffc1 	bl	80005a8 <__aeabi_dmul>
 800c626:	4602      	mov	r2, r0
 800c628:	460b      	mov	r3, r1
 800c62a:	4610      	mov	r0, r2
 800c62c:	4619      	mov	r1, r3
 800c62e:	697b      	ldr	r3, [r7, #20]
 800c630:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800c634:	b29b      	uxth	r3, r3
 800c636:	461c      	mov	r4, r3
 800c638:	697b      	ldr	r3, [r7, #20]
 800c63a:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800c63e:	b29b      	uxth	r3, r3
 800c640:	461a      	mov	r2, r3
 800c642:	4613      	mov	r3, r2
 800c644:	009b      	lsls	r3, r3, #2
 800c646:	4413      	add	r3, r2
 800c648:	005b      	lsls	r3, r3, #1
 800c64a:	9301      	str	r3, [sp, #4]
 800c64c:	9400      	str	r4, [sp, #0]
 800c64e:	4602      	mov	r2, r0
 800c650:	460b      	mov	r3, r1
 800c652:	4865      	ldr	r0, [pc, #404]	@ (800c7e8 <SVCCTL_App_Notification+0x320>)
 800c654:	f002 fbec 	bl	800ee30 <iprintf>
          break;
 800c658:	e087      	b.n	800c76a <SVCCTL_App_Notification+0x2a2>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 800c65a:	69bb      	ldr	r3, [r7, #24]
 800c65c:	3301      	adds	r3, #1
 800c65e:	613b      	str	r3, [r7, #16]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE - Connection handle: 0x%x\n", p_connection_complete_event->Connection_Handle);
 800c660:	4857      	ldr	r0, [pc, #348]	@ (800c7c0 <SVCCTL_App_Notification+0x2f8>)
 800c662:	f7ff f8a5 	bl	800b7b0 <DbgTraceGetFileName>
 800c666:	4601      	mov	r1, r0
 800c668:	f240 2302 	movw	r3, #514	@ 0x202
 800c66c:	4a55      	ldr	r2, [pc, #340]	@ (800c7c4 <SVCCTL_App_Notification+0x2fc>)
 800c66e:	4856      	ldr	r0, [pc, #344]	@ (800c7c8 <SVCCTL_App_Notification+0x300>)
 800c670:	f002 fbde 	bl	800ee30 <iprintf>
 800c674:	693b      	ldr	r3, [r7, #16]
 800c676:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800c67a:	b29b      	uxth	r3, r3
 800c67c:	4619      	mov	r1, r3
 800c67e:	485b      	ldr	r0, [pc, #364]	@ (800c7ec <SVCCTL_App_Notification+0x324>)
 800c680:	f002 fbd6 	bl	800ee30 <iprintf>
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800c684:	484e      	ldr	r0, [pc, #312]	@ (800c7c0 <SVCCTL_App_Notification+0x2f8>)
 800c686:	f7ff f893 	bl	800b7b0 <DbgTraceGetFileName>
 800c68a:	4601      	mov	r1, r0
 800c68c:	f240 2303 	movw	r3, #515	@ 0x203
 800c690:	4a4c      	ldr	r2, [pc, #304]	@ (800c7c4 <SVCCTL_App_Notification+0x2fc>)
 800c692:	484d      	ldr	r0, [pc, #308]	@ (800c7c8 <SVCCTL_App_Notification+0x300>)
 800c694:	f002 fbcc 	bl	800ee30 <iprintf>
 800c698:	693b      	ldr	r3, [r7, #16]
 800c69a:	7a9b      	ldrb	r3, [r3, #10]
 800c69c:	4618      	mov	r0, r3
 800c69e:	693b      	ldr	r3, [r7, #16]
 800c6a0:	7a5b      	ldrb	r3, [r3, #9]
 800c6a2:	461c      	mov	r4, r3
 800c6a4:	693b      	ldr	r3, [r7, #16]
 800c6a6:	7a1b      	ldrb	r3, [r3, #8]
 800c6a8:	461d      	mov	r5, r3
 800c6aa:	693b      	ldr	r3, [r7, #16]
 800c6ac:	79db      	ldrb	r3, [r3, #7]
 800c6ae:	461a      	mov	r2, r3
 800c6b0:	693b      	ldr	r3, [r7, #16]
 800c6b2:	799b      	ldrb	r3, [r3, #6]
 800c6b4:	4619      	mov	r1, r3
 800c6b6:	693b      	ldr	r3, [r7, #16]
 800c6b8:	795b      	ldrb	r3, [r3, #5]
 800c6ba:	9302      	str	r3, [sp, #8]
 800c6bc:	9101      	str	r1, [sp, #4]
 800c6be:	9200      	str	r2, [sp, #0]
 800c6c0:	462b      	mov	r3, r5
 800c6c2:	4622      	mov	r2, r4
 800c6c4:	4601      	mov	r1, r0
 800c6c6:	484a      	ldr	r0, [pc, #296]	@ (800c7f0 <SVCCTL_App_Notification+0x328>)
 800c6c8:	f002 fbb2 	bl	800ee30 <iprintf>
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800c6cc:	483c      	ldr	r0, [pc, #240]	@ (800c7c0 <SVCCTL_App_Notification+0x2f8>)
 800c6ce:	f7ff f86f 	bl	800b7b0 <DbgTraceGetFileName>
 800c6d2:	4601      	mov	r1, r0
 800c6d4:	f240 230a 	movw	r3, #522	@ 0x20a
 800c6d8:	4a3a      	ldr	r2, [pc, #232]	@ (800c7c4 <SVCCTL_App_Notification+0x2fc>)
 800c6da:	483b      	ldr	r0, [pc, #236]	@ (800c7c8 <SVCCTL_App_Notification+0x300>)
 800c6dc:	f002 fba8 	bl	800ee30 <iprintf>
 800c6e0:	693b      	ldr	r3, [r7, #16]
 800c6e2:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 800c6e6:	b29b      	uxth	r3, r3
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	f7f3 fef3 	bl	80004d4 <__aeabi_i2d>
 800c6ee:	f04f 0200 	mov.w	r2, #0
 800c6f2:	4b3c      	ldr	r3, [pc, #240]	@ (800c7e4 <SVCCTL_App_Notification+0x31c>)
 800c6f4:	f7f3 ff58 	bl	80005a8 <__aeabi_dmul>
 800c6f8:	4602      	mov	r2, r0
 800c6fa:	460b      	mov	r3, r1
 800c6fc:	4610      	mov	r0, r2
 800c6fe:	4619      	mov	r1, r3
 800c700:	693b      	ldr	r3, [r7, #16]
 800c702:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 800c706:	b29b      	uxth	r3, r3
 800c708:	461c      	mov	r4, r3
 800c70a:	693b      	ldr	r3, [r7, #16]
 800c70c:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 800c710:	b29b      	uxth	r3, r3
 800c712:	461a      	mov	r2, r3
 800c714:	4613      	mov	r3, r2
 800c716:	009b      	lsls	r3, r3, #2
 800c718:	4413      	add	r3, r2
 800c71a:	005b      	lsls	r3, r3, #1
 800c71c:	9301      	str	r3, [sp, #4]
 800c71e:	9400      	str	r4, [sp, #0]
 800c720:	4602      	mov	r2, r0
 800c722:	460b      	mov	r3, r1
 800c724:	4830      	ldr	r0, [pc, #192]	@ (800c7e8 <SVCCTL_App_Notification+0x320>)
 800c726:	f002 fb83 	bl	800ee30 <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800c72a:	4b24      	ldr	r3, [pc, #144]	@ (800c7bc <SVCCTL_App_Notification+0x2f4>)
 800c72c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800c730:	2b04      	cmp	r3, #4
 800c732:	d104      	bne.n	800c73e <SVCCTL_App_Notification+0x276>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800c734:	4b21      	ldr	r3, [pc, #132]	@ (800c7bc <SVCCTL_App_Notification+0x2f4>)
 800c736:	2206      	movs	r2, #6
 800c738:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 800c73c:	e003      	b.n	800c746 <SVCCTL_App_Notification+0x27e>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800c73e:	4b1f      	ldr	r3, [pc, #124]	@ (800c7bc <SVCCTL_App_Notification+0x2f4>)
 800c740:	2205      	movs	r2, #5
 800c742:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 800c746:	693b      	ldr	r3, [r7, #16]
 800c748:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800c74c:	b29a      	uxth	r2, r3
 800c74e:	4b1b      	ldr	r3, [pc, #108]	@ (800c7bc <SVCCTL_App_Notification+0x2f4>)
 800c750:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 800c752:	4b20      	ldr	r3, [pc, #128]	@ (800c7d4 <SVCCTL_App_Notification+0x30c>)
 800c754:	2200      	movs	r2, #0
 800c756:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800c758:	4b18      	ldr	r3, [pc, #96]	@ (800c7bc <SVCCTL_App_Notification+0x2f4>)
 800c75a:	8ada      	ldrh	r2, [r3, #22]
 800c75c:	4b1d      	ldr	r3, [pc, #116]	@ (800c7d4 <SVCCTL_App_Notification+0x30c>)
 800c75e:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 800c760:	481c      	ldr	r0, [pc, #112]	@ (800c7d4 <SVCCTL_App_Notification+0x30c>)
 800c762:	f000 fdfb 	bl	800d35c <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800c766:	e000      	b.n	800c76a <SVCCTL_App_Notification+0x2a2>
          break;
 800c768:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800c76a:	e18f      	b.n	800ca8c <SVCCTL_App_Notification+0x5c4>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 800c76c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c76e:	3302      	adds	r3, #2
 800c770:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (p_blecore_evt->ecode)
 800c772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c774:	881b      	ldrh	r3, [r3, #0]
 800c776:	b29b      	uxth	r3, r3
 800c778:	f640 420e 	movw	r2, #3086	@ 0xc0e
 800c77c:	4293      	cmp	r3, r2
 800c77e:	f000 814a 	beq.w	800ca16 <SVCCTL_App_Notification+0x54e>
 800c782:	f640 420e 	movw	r2, #3086	@ 0xc0e
 800c786:	4293      	cmp	r3, r2
 800c788:	f300 817f 	bgt.w	800ca8a <SVCCTL_App_Notification+0x5c2>
 800c78c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c790:	f000 8175 	beq.w	800ca7e <SVCCTL_App_Notification+0x5b6>
 800c794:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c798:	f300 8177 	bgt.w	800ca8a <SVCCTL_App_Notification+0x5c2>
 800c79c:	f240 420a 	movw	r2, #1034	@ 0x40a
 800c7a0:	4293      	cmp	r3, r2
 800c7a2:	f300 8172 	bgt.w	800ca8a <SVCCTL_App_Notification+0x5c2>
 800c7a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c7aa:	dc23      	bgt.n	800c7f4 <SVCCTL_App_Notification+0x32c>
 800c7ac:	2b04      	cmp	r3, #4
 800c7ae:	f000 8168 	beq.w	800ca82 <SVCCTL_App_Notification+0x5ba>
 800c7b2:	2b06      	cmp	r3, #6
 800c7b4:	f000 8142 	beq.w	800ca3c <SVCCTL_App_Notification+0x574>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800c7b8:	e167      	b.n	800ca8a <SVCCTL_App_Notification+0x5c2>
 800c7ba:	bf00      	nop
 800c7bc:	20003cd8 	.word	0x20003cd8
 800c7c0:	08012c64 	.word	0x08012c64
 800c7c4:	0801404c 	.word	0x0801404c
 800c7c8:	08012c80 	.word	0x08012c80
 800c7cc:	08012dac 	.word	0x08012dac
 800c7d0:	08012dd8 	.word	0x08012dd8
 800c7d4:	20003d5c 	.word	0x20003d5c
 800c7d8:	08012e14 	.word	0x08012e14
 800c7dc:	08012e38 	.word	0x08012e38
 800c7e0:	08012e50 	.word	0x08012e50
 800c7e4:	3ff40000 	.word	0x3ff40000
 800c7e8:	08012e84 	.word	0x08012e84
 800c7ec:	08012ef0 	.word	0x08012ef0
 800c7f0:	08012f38 	.word	0x08012f38
 800c7f4:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 800c7f8:	2b09      	cmp	r3, #9
 800c7fa:	f200 8146 	bhi.w	800ca8a <SVCCTL_App_Notification+0x5c2>
 800c7fe:	a201      	add	r2, pc, #4	@ (adr r2, 800c804 <SVCCTL_App_Notification+0x33c>)
 800c800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c804:	0800c991 	.word	0x0800c991
 800c808:	0800c865 	.word	0x0800c865
 800c80c:	0800ca8b 	.word	0x0800ca8b
 800c810:	0800ca8b 	.word	0x0800ca8b
 800c814:	0800ca8b 	.word	0x0800ca8b
 800c818:	0800ca8b 	.word	0x0800ca8b
 800c81c:	0800c82d 	.word	0x0800c82d
 800c820:	0800ca8b 	.word	0x0800ca8b
 800c824:	0800c8d7 	.word	0x0800c8d7
 800c828:	0800c849 	.word	0x0800c849
          APP_DBG_MSG(">>== ACI_GAP_PROC_COMPLETE_VSEVT_CODE \r");
 800c82c:	489a      	ldr	r0, [pc, #616]	@ (800ca98 <SVCCTL_App_Notification+0x5d0>)
 800c82e:	f7fe ffbf 	bl	800b7b0 <DbgTraceGetFileName>
 800c832:	4601      	mov	r1, r0
 800c834:	f44f 7313 	mov.w	r3, #588	@ 0x24c
 800c838:	4a98      	ldr	r2, [pc, #608]	@ (800ca9c <SVCCTL_App_Notification+0x5d4>)
 800c83a:	4899      	ldr	r0, [pc, #612]	@ (800caa0 <SVCCTL_App_Notification+0x5d8>)
 800c83c:	f002 faf8 	bl	800ee30 <iprintf>
 800c840:	4898      	ldr	r0, [pc, #608]	@ (800caa4 <SVCCTL_App_Notification+0x5dc>)
 800c842:	f002 faf5 	bl	800ee30 <iprintf>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 800c846:	e11d      	b.n	800ca84 <SVCCTL_App_Notification+0x5bc>
          APP_DBG_MSG(">>== ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE\n");
 800c848:	4893      	ldr	r0, [pc, #588]	@ (800ca98 <SVCCTL_App_Notification+0x5d0>)
 800c84a:	f7fe ffb1 	bl	800b7b0 <DbgTraceGetFileName>
 800c84e:	4601      	mov	r1, r0
 800c850:	f44f 7317 	mov.w	r3, #604	@ 0x25c
 800c854:	4a91      	ldr	r2, [pc, #580]	@ (800ca9c <SVCCTL_App_Notification+0x5d4>)
 800c856:	4892      	ldr	r0, [pc, #584]	@ (800caa0 <SVCCTL_App_Notification+0x5d8>)
 800c858:	f002 faea 	bl	800ee30 <iprintf>
 800c85c:	4892      	ldr	r0, [pc, #584]	@ (800caa8 <SVCCTL_App_Notification+0x5e0>)
 800c85e:	f002 fb57 	bl	800ef10 <puts>
          break;
 800c862:	e10f      	b.n	800ca84 <SVCCTL_App_Notification+0x5bc>
          APP_DBG_MSG(">>== ACI_GAP_PASS_KEY_REQ_VSEVT_CODE \n");
 800c864:	488c      	ldr	r0, [pc, #560]	@ (800ca98 <SVCCTL_App_Notification+0x5d0>)
 800c866:	f7fe ffa3 	bl	800b7b0 <DbgTraceGetFileName>
 800c86a:	4601      	mov	r1, r0
 800c86c:	f240 2363 	movw	r3, #611	@ 0x263
 800c870:	4a8a      	ldr	r2, [pc, #552]	@ (800ca9c <SVCCTL_App_Notification+0x5d4>)
 800c872:	488b      	ldr	r0, [pc, #556]	@ (800caa0 <SVCCTL_App_Notification+0x5d8>)
 800c874:	f002 fadc 	bl	800ee30 <iprintf>
 800c878:	488c      	ldr	r0, [pc, #560]	@ (800caac <SVCCTL_App_Notification+0x5e4>)
 800c87a:	f002 fb49 	bl	800ef10 <puts>
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 800c87e:	4b8c      	ldr	r3, [pc, #560]	@ (800cab0 <SVCCTL_App_Notification+0x5e8>)
 800c880:	8adb      	ldrh	r3, [r3, #22]
 800c882:	498c      	ldr	r1, [pc, #560]	@ (800cab4 <SVCCTL_App_Notification+0x5ec>)
 800c884:	4618      	mov	r0, r3
 800c886:	f7fd f955 	bl	8009b34 <aci_gap_pass_key_resp>
 800c88a:	4603      	mov	r3, r0
 800c88c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          if (ret != BLE_STATUS_SUCCESS)
 800c890:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c894:	2b00      	cmp	r3, #0
 800c896:	d010      	beq.n	800c8ba <SVCCTL_App_Notification+0x3f2>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Fail, reason: 0x%x\n", ret);
 800c898:	487f      	ldr	r0, [pc, #508]	@ (800ca98 <SVCCTL_App_Notification+0x5d0>)
 800c89a:	f7fe ff89 	bl	800b7b0 <DbgTraceGetFileName>
 800c89e:	4601      	mov	r1, r0
 800c8a0:	f44f 731a 	mov.w	r3, #616	@ 0x268
 800c8a4:	4a7d      	ldr	r2, [pc, #500]	@ (800ca9c <SVCCTL_App_Notification+0x5d4>)
 800c8a6:	487e      	ldr	r0, [pc, #504]	@ (800caa0 <SVCCTL_App_Notification+0x5d8>)
 800c8a8:	f002 fac2 	bl	800ee30 <iprintf>
 800c8ac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c8b0:	4619      	mov	r1, r3
 800c8b2:	4881      	ldr	r0, [pc, #516]	@ (800cab8 <SVCCTL_App_Notification+0x5f0>)
 800c8b4:	f002 fabc 	bl	800ee30 <iprintf>
          break;
 800c8b8:	e0e4      	b.n	800ca84 <SVCCTL_App_Notification+0x5bc>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Success \n");
 800c8ba:	4877      	ldr	r0, [pc, #476]	@ (800ca98 <SVCCTL_App_Notification+0x5d0>)
 800c8bc:	f7fe ff78 	bl	800b7b0 <DbgTraceGetFileName>
 800c8c0:	4601      	mov	r1, r0
 800c8c2:	f44f 731b 	mov.w	r3, #620	@ 0x26c
 800c8c6:	4a75      	ldr	r2, [pc, #468]	@ (800ca9c <SVCCTL_App_Notification+0x5d4>)
 800c8c8:	4875      	ldr	r0, [pc, #468]	@ (800caa0 <SVCCTL_App_Notification+0x5d8>)
 800c8ca:	f002 fab1 	bl	800ee30 <iprintf>
 800c8ce:	487b      	ldr	r0, [pc, #492]	@ (800cabc <SVCCTL_App_Notification+0x5f4>)
 800c8d0:	f002 fb1e 	bl	800ef10 <puts>
          break;
 800c8d4:	e0d6      	b.n	800ca84 <SVCCTL_App_Notification+0x5bc>
          APP_DBG_MSG(">>== ACI_GAP_NUMERIC_COMPARISON_VALUE_VSEVT_CODE\n");
 800c8d6:	4870      	ldr	r0, [pc, #448]	@ (800ca98 <SVCCTL_App_Notification+0x5d0>)
 800c8d8:	f7fe ff6a 	bl	800b7b0 <DbgTraceGetFileName>
 800c8dc:	4601      	mov	r1, r0
 800c8de:	f44f 731d 	mov.w	r3, #628	@ 0x274
 800c8e2:	4a6e      	ldr	r2, [pc, #440]	@ (800ca9c <SVCCTL_App_Notification+0x5d4>)
 800c8e4:	486e      	ldr	r0, [pc, #440]	@ (800caa0 <SVCCTL_App_Notification+0x5d8>)
 800c8e6:	f002 faa3 	bl	800ee30 <iprintf>
 800c8ea:	4875      	ldr	r0, [pc, #468]	@ (800cac0 <SVCCTL_App_Notification+0x5f8>)
 800c8ec:	f002 fb10 	bl	800ef10 <puts>
          APP_DBG_MSG("     - numeric_value = %ld\n",
 800c8f0:	4869      	ldr	r0, [pc, #420]	@ (800ca98 <SVCCTL_App_Notification+0x5d0>)
 800c8f2:	f7fe ff5d 	bl	800b7b0 <DbgTraceGetFileName>
 800c8f6:	4601      	mov	r1, r0
 800c8f8:	f240 2375 	movw	r3, #629	@ 0x275
 800c8fc:	4a67      	ldr	r2, [pc, #412]	@ (800ca9c <SVCCTL_App_Notification+0x5d4>)
 800c8fe:	4868      	ldr	r0, [pc, #416]	@ (800caa0 <SVCCTL_App_Notification+0x5d8>)
 800c900:	f002 fa96 	bl	800ee30 <iprintf>
 800c904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c906:	3302      	adds	r3, #2
 800c908:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800c90c:	4619      	mov	r1, r3
 800c90e:	486d      	ldr	r0, [pc, #436]	@ (800cac4 <SVCCTL_App_Notification+0x5fc>)
 800c910:	f002 fa8e 	bl	800ee30 <iprintf>
          APP_DBG_MSG("     - Hex_value = %lx\n",
 800c914:	4860      	ldr	r0, [pc, #384]	@ (800ca98 <SVCCTL_App_Notification+0x5d0>)
 800c916:	f7fe ff4b 	bl	800b7b0 <DbgTraceGetFileName>
 800c91a:	4601      	mov	r1, r0
 800c91c:	f240 2377 	movw	r3, #631	@ 0x277
 800c920:	4a5e      	ldr	r2, [pc, #376]	@ (800ca9c <SVCCTL_App_Notification+0x5d4>)
 800c922:	485f      	ldr	r0, [pc, #380]	@ (800caa0 <SVCCTL_App_Notification+0x5d8>)
 800c924:	f002 fa84 	bl	800ee30 <iprintf>
 800c928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c92a:	3302      	adds	r3, #2
 800c92c:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800c930:	4619      	mov	r1, r3
 800c932:	4865      	ldr	r0, [pc, #404]	@ (800cac8 <SVCCTL_App_Notification+0x600>)
 800c934:	f002 fa7c 	bl	800ee30 <iprintf>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 800c938:	4b5d      	ldr	r3, [pc, #372]	@ (800cab0 <SVCCTL_App_Notification+0x5e8>)
 800c93a:	8adb      	ldrh	r3, [r3, #22]
 800c93c:	2101      	movs	r1, #1
 800c93e:	4618      	mov	r0, r3
 800c940:	f7fd faa2 	bl	8009e88 <aci_gap_numeric_comparison_value_confirm_yesno>
 800c944:	4603      	mov	r3, r0
 800c946:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          if (ret != BLE_STATUS_SUCCESS)
 800c94a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d010      	beq.n	800c974 <SVCCTL_App_Notification+0x4ac>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Fail, reason: 0x%x\n", ret);
 800c952:	4851      	ldr	r0, [pc, #324]	@ (800ca98 <SVCCTL_App_Notification+0x5d0>)
 800c954:	f7fe ff2c 	bl	800b7b0 <DbgTraceGetFileName>
 800c958:	4601      	mov	r1, r0
 800c95a:	f44f 731f 	mov.w	r3, #636	@ 0x27c
 800c95e:	4a4f      	ldr	r2, [pc, #316]	@ (800ca9c <SVCCTL_App_Notification+0x5d4>)
 800c960:	484f      	ldr	r0, [pc, #316]	@ (800caa0 <SVCCTL_App_Notification+0x5d8>)
 800c962:	f002 fa65 	bl	800ee30 <iprintf>
 800c966:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c96a:	4619      	mov	r1, r3
 800c96c:	4857      	ldr	r0, [pc, #348]	@ (800cacc <SVCCTL_App_Notification+0x604>)
 800c96e:	f002 fa5f 	bl	800ee30 <iprintf>
          break;
 800c972:	e087      	b.n	800ca84 <SVCCTL_App_Notification+0x5bc>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Success \n");
 800c974:	4848      	ldr	r0, [pc, #288]	@ (800ca98 <SVCCTL_App_Notification+0x5d0>)
 800c976:	f7fe ff1b 	bl	800b7b0 <DbgTraceGetFileName>
 800c97a:	4601      	mov	r1, r0
 800c97c:	f44f 7320 	mov.w	r3, #640	@ 0x280
 800c980:	4a46      	ldr	r2, [pc, #280]	@ (800ca9c <SVCCTL_App_Notification+0x5d4>)
 800c982:	4847      	ldr	r0, [pc, #284]	@ (800caa0 <SVCCTL_App_Notification+0x5d8>)
 800c984:	f002 fa54 	bl	800ee30 <iprintf>
 800c988:	4851      	ldr	r0, [pc, #324]	@ (800cad0 <SVCCTL_App_Notification+0x608>)
 800c98a:	f002 fac1 	bl	800ef10 <puts>
          break;
 800c98e:	e079      	b.n	800ca84 <SVCCTL_App_Notification+0x5bc>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 800c990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c992:	3302      	adds	r3, #2
 800c994:	623b      	str	r3, [r7, #32]
          APP_DBG_MSG(">>== ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE\n");
 800c996:	4840      	ldr	r0, [pc, #256]	@ (800ca98 <SVCCTL_App_Notification+0x5d0>)
 800c998:	f7fe ff0a 	bl	800b7b0 <DbgTraceGetFileName>
 800c99c:	4601      	mov	r1, r0
 800c99e:	f240 238a 	movw	r3, #650	@ 0x28a
 800c9a2:	4a3e      	ldr	r2, [pc, #248]	@ (800ca9c <SVCCTL_App_Notification+0x5d4>)
 800c9a4:	483e      	ldr	r0, [pc, #248]	@ (800caa0 <SVCCTL_App_Notification+0x5d8>)
 800c9a6:	f002 fa43 	bl	800ee30 <iprintf>
 800c9aa:	484a      	ldr	r0, [pc, #296]	@ (800cad4 <SVCCTL_App_Notification+0x60c>)
 800c9ac:	f002 fab0 	bl	800ef10 <puts>
          if (p_pairing_complete->Status != 0)
 800c9b0:	6a3b      	ldr	r3, [r7, #32]
 800c9b2:	789b      	ldrb	r3, [r3, #2]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d013      	beq.n	800c9e0 <SVCCTL_App_Notification+0x518>
            APP_DBG_MSG("     - Pairing KO \n     - Status: 0x%x\n     - Reason: 0x%x\n", p_pairing_complete->Status, p_pairing_complete->Reason);
 800c9b8:	4837      	ldr	r0, [pc, #220]	@ (800ca98 <SVCCTL_App_Notification+0x5d0>)
 800c9ba:	f7fe fef9 	bl	800b7b0 <DbgTraceGetFileName>
 800c9be:	4601      	mov	r1, r0
 800c9c0:	f240 238d 	movw	r3, #653	@ 0x28d
 800c9c4:	4a35      	ldr	r2, [pc, #212]	@ (800ca9c <SVCCTL_App_Notification+0x5d4>)
 800c9c6:	4836      	ldr	r0, [pc, #216]	@ (800caa0 <SVCCTL_App_Notification+0x5d8>)
 800c9c8:	f002 fa32 	bl	800ee30 <iprintf>
 800c9cc:	6a3b      	ldr	r3, [r7, #32]
 800c9ce:	789b      	ldrb	r3, [r3, #2]
 800c9d0:	4619      	mov	r1, r3
 800c9d2:	6a3b      	ldr	r3, [r7, #32]
 800c9d4:	78db      	ldrb	r3, [r3, #3]
 800c9d6:	461a      	mov	r2, r3
 800c9d8:	483f      	ldr	r0, [pc, #252]	@ (800cad8 <SVCCTL_App_Notification+0x610>)
 800c9da:	f002 fa29 	bl	800ee30 <iprintf>
 800c9de:	e00c      	b.n	800c9fa <SVCCTL_App_Notification+0x532>
            APP_DBG_MSG("     - Pairing Success\n");
 800c9e0:	482d      	ldr	r0, [pc, #180]	@ (800ca98 <SVCCTL_App_Notification+0x5d0>)
 800c9e2:	f7fe fee5 	bl	800b7b0 <DbgTraceGetFileName>
 800c9e6:	4601      	mov	r1, r0
 800c9e8:	f240 2391 	movw	r3, #657	@ 0x291
 800c9ec:	4a2b      	ldr	r2, [pc, #172]	@ (800ca9c <SVCCTL_App_Notification+0x5d4>)
 800c9ee:	482c      	ldr	r0, [pc, #176]	@ (800caa0 <SVCCTL_App_Notification+0x5d8>)
 800c9f0:	f002 fa1e 	bl	800ee30 <iprintf>
 800c9f4:	4839      	ldr	r0, [pc, #228]	@ (800cadc <SVCCTL_App_Notification+0x614>)
 800c9f6:	f002 fa8b 	bl	800ef10 <puts>
          APP_DBG_MSG("\n");
 800c9fa:	4827      	ldr	r0, [pc, #156]	@ (800ca98 <SVCCTL_App_Notification+0x5d0>)
 800c9fc:	f7fe fed8 	bl	800b7b0 <DbgTraceGetFileName>
 800ca00:	4601      	mov	r1, r0
 800ca02:	f240 2393 	movw	r3, #659	@ 0x293
 800ca06:	4a25      	ldr	r2, [pc, #148]	@ (800ca9c <SVCCTL_App_Notification+0x5d4>)
 800ca08:	4825      	ldr	r0, [pc, #148]	@ (800caa0 <SVCCTL_App_Notification+0x5d8>)
 800ca0a:	f002 fa11 	bl	800ee30 <iprintf>
 800ca0e:	200a      	movs	r0, #10
 800ca10:	f002 fa20 	bl	800ee54 <putchar>
          break;
 800ca14:	e036      	b.n	800ca84 <SVCCTL_App_Notification+0x5bc>
          APP_DBG_MSG(">>== ACI_GATT_INDICATION_VSEVT_CODE \r");
 800ca16:	4820      	ldr	r0, [pc, #128]	@ (800ca98 <SVCCTL_App_Notification+0x5d0>)
 800ca18:	f7fe feca 	bl	800b7b0 <DbgTraceGetFileName>
 800ca1c:	4601      	mov	r1, r0
 800ca1e:	f44f 7327 	mov.w	r3, #668	@ 0x29c
 800ca22:	4a1e      	ldr	r2, [pc, #120]	@ (800ca9c <SVCCTL_App_Notification+0x5d4>)
 800ca24:	481e      	ldr	r0, [pc, #120]	@ (800caa0 <SVCCTL_App_Notification+0x5d8>)
 800ca26:	f002 fa03 	bl	800ee30 <iprintf>
 800ca2a:	482d      	ldr	r0, [pc, #180]	@ (800cae0 <SVCCTL_App_Notification+0x618>)
 800ca2c:	f002 fa00 	bl	800ee30 <iprintf>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 800ca30:	4b1f      	ldr	r3, [pc, #124]	@ (800cab0 <SVCCTL_App_Notification+0x5e8>)
 800ca32:	8adb      	ldrh	r3, [r3, #22]
 800ca34:	4618      	mov	r0, r3
 800ca36:	f7fd fd3a 	bl	800a4ae <aci_gatt_confirm_indication>
        break;
 800ca3a:	e023      	b.n	800ca84 <SVCCTL_App_Notification+0x5bc>
	      p_fw_error_event = (aci_hal_fw_error_event_rp0 *)p_blecore_evt->data;
 800ca3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca3e:	3302      	adds	r3, #2
 800ca40:	61fb      	str	r3, [r7, #28]
          APP_DBG_MSG(">>== ACI_HAL_FW_ERROR_VSEVT_CODE\n");
 800ca42:	4815      	ldr	r0, [pc, #84]	@ (800ca98 <SVCCTL_App_Notification+0x5d0>)
 800ca44:	f7fe feb4 	bl	800b7b0 <DbgTraceGetFileName>
 800ca48:	4601      	mov	r1, r0
 800ca4a:	f240 23a7 	movw	r3, #679	@ 0x2a7
 800ca4e:	4a13      	ldr	r2, [pc, #76]	@ (800ca9c <SVCCTL_App_Notification+0x5d4>)
 800ca50:	4813      	ldr	r0, [pc, #76]	@ (800caa0 <SVCCTL_App_Notification+0x5d8>)
 800ca52:	f002 f9ed 	bl	800ee30 <iprintf>
 800ca56:	4823      	ldr	r0, [pc, #140]	@ (800cae4 <SVCCTL_App_Notification+0x61c>)
 800ca58:	f002 fa5a 	bl	800ef10 <puts>
          APP_DBG_MSG("FW Error Type = 0x%02X\n", p_fw_error_event->FW_Error_Type);
 800ca5c:	480e      	ldr	r0, [pc, #56]	@ (800ca98 <SVCCTL_App_Notification+0x5d0>)
 800ca5e:	f7fe fea7 	bl	800b7b0 <DbgTraceGetFileName>
 800ca62:	4601      	mov	r1, r0
 800ca64:	f44f 732a 	mov.w	r3, #680	@ 0x2a8
 800ca68:	4a0c      	ldr	r2, [pc, #48]	@ (800ca9c <SVCCTL_App_Notification+0x5d4>)
 800ca6a:	480d      	ldr	r0, [pc, #52]	@ (800caa0 <SVCCTL_App_Notification+0x5d8>)
 800ca6c:	f002 f9e0 	bl	800ee30 <iprintf>
 800ca70:	69fb      	ldr	r3, [r7, #28]
 800ca72:	781b      	ldrb	r3, [r3, #0]
 800ca74:	4619      	mov	r1, r3
 800ca76:	481c      	ldr	r0, [pc, #112]	@ (800cae8 <SVCCTL_App_Notification+0x620>)
 800ca78:	f002 f9da 	bl	800ee30 <iprintf>
          break;
 800ca7c:	e002      	b.n	800ca84 <SVCCTL_App_Notification+0x5bc>
          break;
 800ca7e:	bf00      	nop
 800ca80:	e003      	b.n	800ca8a <SVCCTL_App_Notification+0x5c2>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800ca82:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800ca84:	e001      	b.n	800ca8a <SVCCTL_App_Notification+0x5c2>
      break;
 800ca86:	bf00      	nop
 800ca88:	e000      	b.n	800ca8c <SVCCTL_App_Notification+0x5c4>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800ca8a:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800ca8c:	2301      	movs	r3, #1
}
 800ca8e:	4618      	mov	r0, r3
 800ca90:	3730      	adds	r7, #48	@ 0x30
 800ca92:	46bd      	mov	sp, r7
 800ca94:	bdb0      	pop	{r4, r5, r7, pc}
 800ca96:	bf00      	nop
 800ca98:	08012c64 	.word	0x08012c64
 800ca9c:	0801404c 	.word	0x0801404c
 800caa0:	08012c80 	.word	0x08012c80
 800caa4:	08012f88 	.word	0x08012f88
 800caa8:	08012fb0 	.word	0x08012fb0
 800caac:	08012fe0 	.word	0x08012fe0
 800cab0:	20003cd8 	.word	0x20003cd8
 800cab4:	0001b207 	.word	0x0001b207
 800cab8:	08013008 	.word	0x08013008
 800cabc:	0801303c 	.word	0x0801303c
 800cac0:	08013064 	.word	0x08013064
 800cac4:	08013098 	.word	0x08013098
 800cac8:	080130b4 	.word	0x080130b4
 800cacc:	080130cc 	.word	0x080130cc
 800cad0:	0801311c 	.word	0x0801311c
 800cad4:	08013164 	.word	0x08013164
 800cad8:	08013190 	.word	0x08013190
 800cadc:	080131cc 	.word	0x080131cc
 800cae0:	080131e4 	.word	0x080131e4
 800cae4:	0801320c 	.word	0x0801320c
 800cae8:	08013230 	.word	0x08013230

0800caec <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 800caec:	b580      	push	{r7, lr}
 800caee:	b082      	sub	sp, #8
 800caf0:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800caf2:	4b06      	ldr	r3, [pc, #24]	@ (800cb0c <Ble_Tl_Init+0x20>)
 800caf4:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800caf6:	4b06      	ldr	r3, [pc, #24]	@ (800cb10 <Ble_Tl_Init+0x24>)
 800caf8:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800cafa:	463b      	mov	r3, r7
 800cafc:	4619      	mov	r1, r3
 800cafe:	4805      	ldr	r0, [pc, #20]	@ (800cb14 <Ble_Tl_Init+0x28>)
 800cb00:	f7fe f93a 	bl	800ad78 <hci_init>

  return;
 800cb04:	bf00      	nop
}
 800cb06:	3708      	adds	r7, #8
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	bd80      	pop	{r7, pc}
 800cb0c:	200300d8 	.word	0x200300d8
 800cb10:	0800d2e1 	.word	0x0800d2e1
 800cb14:	0800d2a9 	.word	0x0800d2a9

0800cb18 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 800cb18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb1a:	b08d      	sub	sp, #52	@ 0x34
 800cb1c:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 800cb1e:	2300      	movs	r3, #0
 800cb20:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800cb22:	2392      	movs	r3, #146	@ 0x92
 800cb24:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init*/

  APP_DBG_MSG("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 800cb26:	48a3      	ldr	r0, [pc, #652]	@ (800cdb4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800cb28:	f7fe fe42 	bl	800b7b0 <DbgTraceGetFileName>
 800cb2c:	4601      	mov	r1, r0
 800cb2e:	f240 23e6 	movw	r3, #742	@ 0x2e6
 800cb32:	4aa1      	ldr	r2, [pc, #644]	@ (800cdb8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800cb34:	48a1      	ldr	r0, [pc, #644]	@ (800cdbc <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800cb36:	f002 f97b 	bl	800ee30 <iprintf>
 800cb3a:	48a1      	ldr	r0, [pc, #644]	@ (800cdc0 <Ble_Hci_Gap_Gatt_Init+0x2a8>)
 800cb3c:	f002 f9e8 	bl	800ef10 <puts>

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 800cb40:	f7fd fe4a 	bl	800a7d8 <hci_reset>
 800cb44:	4603      	mov	r3, r0
 800cb46:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800cb48:	7dfb      	ldrb	r3, [r7, #23]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d00f      	beq.n	800cb6e <Ble_Hci_Gap_Gatt_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n", ret);
 800cb4e:	4899      	ldr	r0, [pc, #612]	@ (800cdb4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800cb50:	f7fe fe2e 	bl	800b7b0 <DbgTraceGetFileName>
 800cb54:	4601      	mov	r1, r0
 800cb56:	f240 23ef 	movw	r3, #751	@ 0x2ef
 800cb5a:	4a97      	ldr	r2, [pc, #604]	@ (800cdb8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800cb5c:	4897      	ldr	r0, [pc, #604]	@ (800cdbc <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800cb5e:	f002 f967 	bl	800ee30 <iprintf>
 800cb62:	7dfb      	ldrb	r3, [r7, #23]
 800cb64:	4619      	mov	r1, r3
 800cb66:	4897      	ldr	r0, [pc, #604]	@ (800cdc4 <Ble_Hci_Gap_Gatt_Init+0x2ac>)
 800cb68:	f002 f962 	bl	800ee30 <iprintf>
 800cb6c:	e00c      	b.n	800cb88 <Ble_Hci_Gap_Gatt_Init+0x70>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_reset command\n");
 800cb6e:	4891      	ldr	r0, [pc, #580]	@ (800cdb4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800cb70:	f7fe fe1e 	bl	800b7b0 <DbgTraceGetFileName>
 800cb74:	4601      	mov	r1, r0
 800cb76:	f240 23f3 	movw	r3, #755	@ 0x2f3
 800cb7a:	4a8f      	ldr	r2, [pc, #572]	@ (800cdb8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800cb7c:	488f      	ldr	r0, [pc, #572]	@ (800cdbc <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800cb7e:	f002 f957 	bl	800ee30 <iprintf>
 800cb82:	4891      	ldr	r0, [pc, #580]	@ (800cdc8 <Ble_Hci_Gap_Gatt_Init+0x2b0>)
 800cb84:	f002 f9c4 	bl	800ef10 <puts>
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800cb88:	f000 fad8 	bl	800d13c <BleGetBdAddress>
 800cb8c:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 800cb8e:	693a      	ldr	r2, [r7, #16]
 800cb90:	2106      	movs	r1, #6
 800cb92:	2000      	movs	r0, #0
 800cb94:	f7fd fce0 	bl	800a558 <aci_hal_write_config_data>
 800cb98:	4603      	mov	r3, r0
 800cb9a:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800cb9c:	7dfb      	ldrb	r3, [r7, #23]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d00f      	beq.n	800cbc2 <Ble_Hci_Gap_Gatt_Init+0xaa>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET, result: 0x%x \n", ret);
 800cba2:	4884      	ldr	r0, [pc, #528]	@ (800cdb4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800cba4:	f7fe fe04 	bl	800b7b0 <DbgTraceGetFileName>
 800cba8:	4601      	mov	r1, r0
 800cbaa:	f240 23fd 	movw	r3, #765	@ 0x2fd
 800cbae:	4a82      	ldr	r2, [pc, #520]	@ (800cdb8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800cbb0:	4882      	ldr	r0, [pc, #520]	@ (800cdbc <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800cbb2:	f002 f93d 	bl	800ee30 <iprintf>
 800cbb6:	7dfb      	ldrb	r3, [r7, #23]
 800cbb8:	4619      	mov	r1, r3
 800cbba:	4884      	ldr	r0, [pc, #528]	@ (800cdcc <Ble_Hci_Gap_Gatt_Init+0x2b4>)
 800cbbc:	f002 f938 	bl	800ee30 <iprintf>
 800cbc0:	e035      	b.n	800cc2e <Ble_Hci_Gap_Gatt_Init+0x116>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET\n");
 800cbc2:	487c      	ldr	r0, [pc, #496]	@ (800cdb4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800cbc4:	f7fe fdf4 	bl	800b7b0 <DbgTraceGetFileName>
 800cbc8:	4601      	mov	r1, r0
 800cbca:	f240 3301 	movw	r3, #769	@ 0x301
 800cbce:	4a7a      	ldr	r2, [pc, #488]	@ (800cdb8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800cbd0:	487a      	ldr	r0, [pc, #488]	@ (800cdbc <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800cbd2:	f002 f92d 	bl	800ee30 <iprintf>
 800cbd6:	487e      	ldr	r0, [pc, #504]	@ (800cdd0 <Ble_Hci_Gap_Gatt_Init+0x2b8>)
 800cbd8:	f002 f99a 	bl	800ef10 <puts>
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 800cbdc:	4875      	ldr	r0, [pc, #468]	@ (800cdb4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800cbde:	f7fe fde7 	bl	800b7b0 <DbgTraceGetFileName>
 800cbe2:	4601      	mov	r1, r0
 800cbe4:	f240 3302 	movw	r3, #770	@ 0x302
 800cbe8:	4a73      	ldr	r2, [pc, #460]	@ (800cdb8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800cbea:	4874      	ldr	r0, [pc, #464]	@ (800cdbc <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800cbec:	f002 f920 	bl	800ee30 <iprintf>
 800cbf0:	693b      	ldr	r3, [r7, #16]
 800cbf2:	3305      	adds	r3, #5
 800cbf4:	781b      	ldrb	r3, [r3, #0]
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	693b      	ldr	r3, [r7, #16]
 800cbfa:	3304      	adds	r3, #4
 800cbfc:	781b      	ldrb	r3, [r3, #0]
 800cbfe:	461c      	mov	r4, r3
 800cc00:	693b      	ldr	r3, [r7, #16]
 800cc02:	3303      	adds	r3, #3
 800cc04:	781b      	ldrb	r3, [r3, #0]
 800cc06:	461d      	mov	r5, r3
 800cc08:	693b      	ldr	r3, [r7, #16]
 800cc0a:	3302      	adds	r3, #2
 800cc0c:	781b      	ldrb	r3, [r3, #0]
 800cc0e:	461a      	mov	r2, r3
 800cc10:	693b      	ldr	r3, [r7, #16]
 800cc12:	3301      	adds	r3, #1
 800cc14:	781b      	ldrb	r3, [r3, #0]
 800cc16:	4619      	mov	r1, r3
 800cc18:	693b      	ldr	r3, [r7, #16]
 800cc1a:	781b      	ldrb	r3, [r3, #0]
 800cc1c:	9302      	str	r3, [sp, #8]
 800cc1e:	9101      	str	r1, [sp, #4]
 800cc20:	9200      	str	r2, [sp, #0]
 800cc22:	462b      	mov	r3, r5
 800cc24:	4622      	mov	r2, r4
 800cc26:	4601      	mov	r1, r0
 800cc28:	486a      	ldr	r0, [pc, #424]	@ (800cdd4 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800cc2a:	f002 f901 	bl	800ee30 <iprintf>
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800cc2e:	4a6a      	ldr	r2, [pc, #424]	@ (800cdd8 <Ble_Hci_Gap_Gatt_Init+0x2c0>)
 800cc30:	2110      	movs	r1, #16
 800cc32:	2018      	movs	r0, #24
 800cc34:	f7fd fc90 	bl	800a558 <aci_hal_write_config_data>
 800cc38:	4603      	mov	r3, r0
 800cc3a:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800cc3c:	7dfb      	ldrb	r3, [r7, #23]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d00f      	beq.n	800cc62 <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%x \n", ret);
 800cc42:	485c      	ldr	r0, [pc, #368]	@ (800cdb4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800cc44:	f7fe fdb4 	bl	800b7b0 <DbgTraceGetFileName>
 800cc48:	4601      	mov	r1, r0
 800cc4a:	f44f 7349 	mov.w	r3, #804	@ 0x324
 800cc4e:	4a5a      	ldr	r2, [pc, #360]	@ (800cdb8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800cc50:	485a      	ldr	r0, [pc, #360]	@ (800cdbc <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800cc52:	f002 f8ed 	bl	800ee30 <iprintf>
 800cc56:	7dfb      	ldrb	r3, [r7, #23]
 800cc58:	4619      	mov	r1, r3
 800cc5a:	4860      	ldr	r0, [pc, #384]	@ (800cddc <Ble_Hci_Gap_Gatt_Init+0x2c4>)
 800cc5c:	f002 f8e8 	bl	800ee30 <iprintf>
 800cc60:	e00c      	b.n	800cc7c <Ble_Hci_Gap_Gatt_Init+0x164>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET\n");
 800cc62:	4854      	ldr	r0, [pc, #336]	@ (800cdb4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800cc64:	f7fe fda4 	bl	800b7b0 <DbgTraceGetFileName>
 800cc68:	4601      	mov	r1, r0
 800cc6a:	f44f 734a 	mov.w	r3, #808	@ 0x328
 800cc6e:	4a52      	ldr	r2, [pc, #328]	@ (800cdb8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800cc70:	4852      	ldr	r0, [pc, #328]	@ (800cdbc <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800cc72:	f002 f8dd 	bl	800ee30 <iprintf>
 800cc76:	485a      	ldr	r0, [pc, #360]	@ (800cde0 <Ble_Hci_Gap_Gatt_Init+0x2c8>)
 800cc78:	f002 f94a 	bl	800ef10 <puts>
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 800cc7c:	4a59      	ldr	r2, [pc, #356]	@ (800cde4 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 800cc7e:	2110      	movs	r1, #16
 800cc80:	2008      	movs	r0, #8
 800cc82:	f7fd fc69 	bl	800a558 <aci_hal_write_config_data>
 800cc86:	4603      	mov	r3, r0
 800cc88:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800cc8a:	7dfb      	ldrb	r3, [r7, #23]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d00f      	beq.n	800ccb0 <Ble_Hci_Gap_Gatt_Init+0x198>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%x \n", ret);
 800cc90:	4848      	ldr	r0, [pc, #288]	@ (800cdb4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800cc92:	f7fe fd8d 	bl	800b7b0 <DbgTraceGetFileName>
 800cc96:	4601      	mov	r1, r0
 800cc98:	f240 3331 	movw	r3, #817	@ 0x331
 800cc9c:	4a46      	ldr	r2, [pc, #280]	@ (800cdb8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800cc9e:	4847      	ldr	r0, [pc, #284]	@ (800cdbc <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800cca0:	f002 f8c6 	bl	800ee30 <iprintf>
 800cca4:	7dfb      	ldrb	r3, [r7, #23]
 800cca6:	4619      	mov	r1, r3
 800cca8:	484f      	ldr	r0, [pc, #316]	@ (800cde8 <Ble_Hci_Gap_Gatt_Init+0x2d0>)
 800ccaa:	f002 f8c1 	bl	800ee30 <iprintf>
 800ccae:	e00c      	b.n	800ccca <Ble_Hci_Gap_Gatt_Init+0x1b2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET\n");
 800ccb0:	4840      	ldr	r0, [pc, #256]	@ (800cdb4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800ccb2:	f7fe fd7d 	bl	800b7b0 <DbgTraceGetFileName>
 800ccb6:	4601      	mov	r1, r0
 800ccb8:	f240 3335 	movw	r3, #821	@ 0x335
 800ccbc:	4a3e      	ldr	r2, [pc, #248]	@ (800cdb8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800ccbe:	483f      	ldr	r0, [pc, #252]	@ (800cdbc <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800ccc0:	f002 f8b6 	bl	800ee30 <iprintf>
 800ccc4:	4849      	ldr	r0, [pc, #292]	@ (800cdec <Ble_Hci_Gap_Gatt_Init+0x2d4>)
 800ccc6:	f002 f923 	bl	800ef10 <puts>
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800ccca:	2118      	movs	r1, #24
 800cccc:	2001      	movs	r0, #1
 800ccce:	f7fd fcc8 	bl	800a662 <aci_hal_set_tx_power_level>
 800ccd2:	4603      	mov	r3, r0
 800ccd4:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800ccd6:	7dfb      	ldrb	r3, [r7, #23]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d00f      	beq.n	800ccfc <Ble_Hci_Gap_Gatt_Init+0x1e4>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n", ret);
 800ccdc:	4835      	ldr	r0, [pc, #212]	@ (800cdb4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800ccde:	f7fe fd67 	bl	800b7b0 <DbgTraceGetFileName>
 800cce2:	4601      	mov	r1, r0
 800cce4:	f240 333e 	movw	r3, #830	@ 0x33e
 800cce8:	4a33      	ldr	r2, [pc, #204]	@ (800cdb8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800ccea:	4834      	ldr	r0, [pc, #208]	@ (800cdbc <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800ccec:	f002 f8a0 	bl	800ee30 <iprintf>
 800ccf0:	7dfb      	ldrb	r3, [r7, #23]
 800ccf2:	4619      	mov	r1, r3
 800ccf4:	483e      	ldr	r0, [pc, #248]	@ (800cdf0 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 800ccf6:	f002 f89b 	bl	800ee30 <iprintf>
 800ccfa:	e00c      	b.n	800cd16 <Ble_Hci_Gap_Gatt_Init+0x1fe>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
 800ccfc:	482d      	ldr	r0, [pc, #180]	@ (800cdb4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800ccfe:	f7fe fd57 	bl	800b7b0 <DbgTraceGetFileName>
 800cd02:	4601      	mov	r1, r0
 800cd04:	f240 3342 	movw	r3, #834	@ 0x342
 800cd08:	4a2b      	ldr	r2, [pc, #172]	@ (800cdb8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800cd0a:	482c      	ldr	r0, [pc, #176]	@ (800cdbc <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800cd0c:	f002 f890 	bl	800ee30 <iprintf>
 800cd10:	4838      	ldr	r0, [pc, #224]	@ (800cdf4 <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 800cd12:	f002 f8fd 	bl	800ef10 <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800cd16:	f7fd f91e 	bl	8009f56 <aci_gatt_init>
 800cd1a:	4603      	mov	r3, r0
 800cd1c:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800cd1e:	7dfb      	ldrb	r3, [r7, #23]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d00f      	beq.n	800cd44 <Ble_Hci_Gap_Gatt_Init+0x22c>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n", ret);
 800cd24:	4823      	ldr	r0, [pc, #140]	@ (800cdb4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800cd26:	f7fe fd43 	bl	800b7b0 <DbgTraceGetFileName>
 800cd2a:	4601      	mov	r1, r0
 800cd2c:	f240 334b 	movw	r3, #843	@ 0x34b
 800cd30:	4a21      	ldr	r2, [pc, #132]	@ (800cdb8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800cd32:	4822      	ldr	r0, [pc, #136]	@ (800cdbc <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800cd34:	f002 f87c 	bl	800ee30 <iprintf>
 800cd38:	7dfb      	ldrb	r3, [r7, #23]
 800cd3a:	4619      	mov	r1, r3
 800cd3c:	482e      	ldr	r0, [pc, #184]	@ (800cdf8 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 800cd3e:	f002 f877 	bl	800ee30 <iprintf>
 800cd42:	e00c      	b.n	800cd5e <Ble_Hci_Gap_Gatt_Init+0x246>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_init command\n");
 800cd44:	481b      	ldr	r0, [pc, #108]	@ (800cdb4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800cd46:	f7fe fd33 	bl	800b7b0 <DbgTraceGetFileName>
 800cd4a:	4601      	mov	r1, r0
 800cd4c:	f240 334f 	movw	r3, #847	@ 0x34f
 800cd50:	4a19      	ldr	r2, [pc, #100]	@ (800cdb8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800cd52:	481a      	ldr	r0, [pc, #104]	@ (800cdbc <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800cd54:	f002 f86c 	bl	800ee30 <iprintf>
 800cd58:	4828      	ldr	r0, [pc, #160]	@ (800cdfc <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 800cd5a:	f002 f8d9 	bl	800ef10 <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800cd5e:	2300      	movs	r3, #0
 800cd60:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800cd62:	7bfb      	ldrb	r3, [r7, #15]
 800cd64:	f043 0301 	orr.w	r3, r3, #1
 800cd68:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 800cd6a:	7bfb      	ldrb	r3, [r7, #15]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d069      	beq.n	800ce44 <Ble_Hci_Gap_Gatt_Init+0x32c>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 800cd70:	4b23      	ldr	r3, [pc, #140]	@ (800ce00 <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 800cd72:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 800cd74:	1dba      	adds	r2, r7, #6
 800cd76:	7bf8      	ldrb	r0, [r7, #15]
 800cd78:	1cbb      	adds	r3, r7, #2
 800cd7a:	9301      	str	r3, [sp, #4]
 800cd7c:	1d3b      	adds	r3, r7, #4
 800cd7e:	9300      	str	r3, [sp, #0]
 800cd80:	4613      	mov	r3, r2
 800cd82:	2208      	movs	r2, #8
 800cd84:	2100      	movs	r1, #0
 800cd86:	f7fc ff3c 	bl	8009c02 <aci_gap_init>
 800cd8a:	4603      	mov	r3, r0
 800cd8c:	75fb      	strb	r3, [r7, #23]
                       CFG_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 800cd8e:	7dfb      	ldrb	r3, [r7, #23]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d039      	beq.n	800ce08 <Ble_Hci_Gap_Gatt_Init+0x2f0>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n", ret);
 800cd94:	4807      	ldr	r0, [pc, #28]	@ (800cdb4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800cd96:	f7fe fd0b 	bl	800b7b0 <DbgTraceGetFileName>
 800cd9a:	4601      	mov	r1, r0
 800cd9c:	f240 336f 	movw	r3, #879	@ 0x36f
 800cda0:	4a05      	ldr	r2, [pc, #20]	@ (800cdb8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800cda2:	4806      	ldr	r0, [pc, #24]	@ (800cdbc <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800cda4:	f002 f844 	bl	800ee30 <iprintf>
 800cda8:	7dfb      	ldrb	r3, [r7, #23]
 800cdaa:	4619      	mov	r1, r3
 800cdac:	4815      	ldr	r0, [pc, #84]	@ (800ce04 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 800cdae:	f002 f83f 	bl	800ee30 <iprintf>
 800cdb2:	e036      	b.n	800ce22 <Ble_Hci_Gap_Gatt_Init+0x30a>
 800cdb4:	08012c64 	.word	0x08012c64
 800cdb8:	08014064 	.word	0x08014064
 800cdbc:	08012c80 	.word	0x08012c80
 800cdc0:	08013248 	.word	0x08013248
 800cdc4:	08013274 	.word	0x08013274
 800cdc8:	080132a4 	.word	0x080132a4
 800cdcc:	080132c4 	.word	0x080132c4
 800cdd0:	08013320 	.word	0x08013320
 800cdd4:	0801336c 	.word	0x0801336c
 800cdd8:	0801401c 	.word	0x0801401c
 800cddc:	080133a8 	.word	0x080133a8
 800cde0:	08013400 	.word	0x08013400
 800cde4:	0801402c 	.word	0x0801402c
 800cde8:	08013448 	.word	0x08013448
 800cdec:	080134a0 	.word	0x080134a0
 800cdf0:	080134e8 	.word	0x080134e8
 800cdf4:	08013528 	.word	0x08013528
 800cdf8:	08013558 	.word	0x08013558
 800cdfc:	0801358c 	.word	0x0801358c
 800ce00:	080135b0 	.word	0x080135b0
 800ce04:	080135bc 	.word	0x080135bc
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
 800ce08:	487e      	ldr	r0, [pc, #504]	@ (800d004 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800ce0a:	f7fe fcd1 	bl	800b7b0 <DbgTraceGetFileName>
 800ce0e:	4601      	mov	r1, r0
 800ce10:	f240 3373 	movw	r3, #883	@ 0x373
 800ce14:	4a7c      	ldr	r2, [pc, #496]	@ (800d008 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800ce16:	487d      	ldr	r0, [pc, #500]	@ (800d00c <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800ce18:	f002 f80a 	bl	800ee30 <iprintf>
 800ce1c:	487c      	ldr	r0, [pc, #496]	@ (800d010 <Ble_Hci_Gap_Gatt_Init+0x4f8>)
 800ce1e:	f002 f877 	bl	800ef10 <puts>
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800ce22:	88fc      	ldrh	r4, [r7, #6]
 800ce24:	88bd      	ldrh	r5, [r7, #4]
 800ce26:	68b8      	ldr	r0, [r7, #8]
 800ce28:	f7f3 f9fa 	bl	8000220 <strlen>
 800ce2c:	4603      	mov	r3, r0
 800ce2e:	b2da      	uxtb	r2, r3
 800ce30:	68bb      	ldr	r3, [r7, #8]
 800ce32:	9300      	str	r3, [sp, #0]
 800ce34:	4613      	mov	r3, r2
 800ce36:	2200      	movs	r2, #0
 800ce38:	4629      	mov	r1, r5
 800ce3a:	4620      	mov	r0, r4
 800ce3c:	f7fd fa8e 	bl	800a35c <aci_gatt_update_char_value>
 800ce40:	4603      	mov	r3, r0
 800ce42:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 800ce44:	88f8      	ldrh	r0, [r7, #6]
 800ce46:	8879      	ldrh	r1, [r7, #2]
 800ce48:	463b      	mov	r3, r7
 800ce4a:	9300      	str	r3, [sp, #0]
 800ce4c:	2302      	movs	r3, #2
 800ce4e:	2200      	movs	r2, #0
 800ce50:	f7fd fa84 	bl	800a35c <aci_gatt_update_char_value>
 800ce54:	4603      	mov	r3, r0
 800ce56:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800ce58:	2202      	movs	r2, #2
 800ce5a:	2102      	movs	r1, #2
 800ce5c:	2000      	movs	r0, #0
 800ce5e:	f7fd fcdf 	bl	800a820 <hci_le_set_default_phy>
 800ce62:	4603      	mov	r3, r0
 800ce64:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800ce66:	7dfb      	ldrb	r3, [r7, #23]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d00f      	beq.n	800ce8c <Ble_Hci_Gap_Gatt_Init+0x374>
  {
    APP_DBG_MSG("  Fail   : hci_le_set_default_phy command, result: 0x%x \n", ret);
 800ce6c:	4865      	ldr	r0, [pc, #404]	@ (800d004 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800ce6e:	f7fe fc9f 	bl	800b7b0 <DbgTraceGetFileName>
 800ce72:	4601      	mov	r1, r0
 800ce74:	f240 3395 	movw	r3, #917	@ 0x395
 800ce78:	4a63      	ldr	r2, [pc, #396]	@ (800d008 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800ce7a:	4864      	ldr	r0, [pc, #400]	@ (800d00c <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800ce7c:	f001 ffd8 	bl	800ee30 <iprintf>
 800ce80:	7dfb      	ldrb	r3, [r7, #23]
 800ce82:	4619      	mov	r1, r3
 800ce84:	4863      	ldr	r0, [pc, #396]	@ (800d014 <Ble_Hci_Gap_Gatt_Init+0x4fc>)
 800ce86:	f001 ffd3 	bl	800ee30 <iprintf>
 800ce8a:	e00c      	b.n	800cea6 <Ble_Hci_Gap_Gatt_Init+0x38e>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_le_set_default_phy command\n");
 800ce8c:	485d      	ldr	r0, [pc, #372]	@ (800d004 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800ce8e:	f7fe fc8f 	bl	800b7b0 <DbgTraceGetFileName>
 800ce92:	4601      	mov	r1, r0
 800ce94:	f240 3399 	movw	r3, #921	@ 0x399
 800ce98:	4a5b      	ldr	r2, [pc, #364]	@ (800d008 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800ce9a:	485c      	ldr	r0, [pc, #368]	@ (800d00c <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800ce9c:	f001 ffc8 	bl	800ee30 <iprintf>
 800cea0:	485d      	ldr	r0, [pc, #372]	@ (800d018 <Ble_Hci_Gap_Gatt_Init+0x500>)
 800cea2:	f002 f835 	bl	800ef10 <puts>
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800cea6:	4b5d      	ldr	r3, [pc, #372]	@ (800d01c <Ble_Hci_Gap_Gatt_Init+0x504>)
 800cea8:	2201      	movs	r2, #1
 800ceaa:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800ceac:	4b5b      	ldr	r3, [pc, #364]	@ (800d01c <Ble_Hci_Gap_Gatt_Init+0x504>)
 800ceae:	781b      	ldrb	r3, [r3, #0]
 800ceb0:	4618      	mov	r0, r3
 800ceb2:	f7fc fd27 	bl	8009904 <aci_gap_set_io_capability>
 800ceb6:	4603      	mov	r3, r0
 800ceb8:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800ceba:	7dfb      	ldrb	r3, [r7, #23]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d00f      	beq.n	800cee0 <Ble_Hci_Gap_Gatt_Init+0x3c8>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_io_capability command, result: 0x%x \n", ret);
 800cec0:	4850      	ldr	r0, [pc, #320]	@ (800d004 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800cec2:	f7fe fc75 	bl	800b7b0 <DbgTraceGetFileName>
 800cec6:	4601      	mov	r1, r0
 800cec8:	f240 33a3 	movw	r3, #931	@ 0x3a3
 800cecc:	4a4e      	ldr	r2, [pc, #312]	@ (800d008 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800cece:	484f      	ldr	r0, [pc, #316]	@ (800d00c <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800ced0:	f001 ffae 	bl	800ee30 <iprintf>
 800ced4:	7dfb      	ldrb	r3, [r7, #23]
 800ced6:	4619      	mov	r1, r3
 800ced8:	4851      	ldr	r0, [pc, #324]	@ (800d020 <Ble_Hci_Gap_Gatt_Init+0x508>)
 800ceda:	f001 ffa9 	bl	800ee30 <iprintf>
 800cede:	e00c      	b.n	800cefa <Ble_Hci_Gap_Gatt_Init+0x3e2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_io_capability command\n");
 800cee0:	4848      	ldr	r0, [pc, #288]	@ (800d004 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800cee2:	f7fe fc65 	bl	800b7b0 <DbgTraceGetFileName>
 800cee6:	4601      	mov	r1, r0
 800cee8:	f240 33a7 	movw	r3, #935	@ 0x3a7
 800ceec:	4a46      	ldr	r2, [pc, #280]	@ (800d008 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800ceee:	4847      	ldr	r0, [pc, #284]	@ (800d00c <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800cef0:	f001 ff9e 	bl	800ee30 <iprintf>
 800cef4:	484b      	ldr	r0, [pc, #300]	@ (800d024 <Ble_Hci_Gap_Gatt_Init+0x50c>)
 800cef6:	f002 f80b 	bl	800ef10 <puts>
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800cefa:	4b48      	ldr	r3, [pc, #288]	@ (800d01c <Ble_Hci_Gap_Gatt_Init+0x504>)
 800cefc:	2201      	movs	r2, #1
 800cefe:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800cf00:	4b46      	ldr	r3, [pc, #280]	@ (800d01c <Ble_Hci_Gap_Gatt_Init+0x504>)
 800cf02:	2208      	movs	r2, #8
 800cf04:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800cf06:	4b45      	ldr	r3, [pc, #276]	@ (800d01c <Ble_Hci_Gap_Gatt_Init+0x504>)
 800cf08:	2210      	movs	r2, #16
 800cf0a:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800cf0c:	4b43      	ldr	r3, [pc, #268]	@ (800d01c <Ble_Hci_Gap_Gatt_Init+0x504>)
 800cf0e:	2201      	movs	r2, #1
 800cf10:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800cf12:	4b42      	ldr	r3, [pc, #264]	@ (800d01c <Ble_Hci_Gap_Gatt_Init+0x504>)
 800cf14:	4a44      	ldr	r2, [pc, #272]	@ (800d028 <Ble_Hci_Gap_Gatt_Init+0x510>)
 800cf16:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800cf18:	4b40      	ldr	r3, [pc, #256]	@ (800d01c <Ble_Hci_Gap_Gatt_Init+0x504>)
 800cf1a:	2200      	movs	r2, #0
 800cf1c:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800cf1e:	4b3f      	ldr	r3, [pc, #252]	@ (800d01c <Ble_Hci_Gap_Gatt_Init+0x504>)
 800cf20:	789c      	ldrb	r4, [r3, #2]
 800cf22:	4b3e      	ldr	r3, [pc, #248]	@ (800d01c <Ble_Hci_Gap_Gatt_Init+0x504>)
 800cf24:	785d      	ldrb	r5, [r3, #1]
 800cf26:	4b3d      	ldr	r3, [pc, #244]	@ (800d01c <Ble_Hci_Gap_Gatt_Init+0x504>)
 800cf28:	791b      	ldrb	r3, [r3, #4]
 800cf2a:	4a3c      	ldr	r2, [pc, #240]	@ (800d01c <Ble_Hci_Gap_Gatt_Init+0x504>)
 800cf2c:	7952      	ldrb	r2, [r2, #5]
 800cf2e:	493b      	ldr	r1, [pc, #236]	@ (800d01c <Ble_Hci_Gap_Gatt_Init+0x504>)
 800cf30:	78c9      	ldrb	r1, [r1, #3]
 800cf32:	483a      	ldr	r0, [pc, #232]	@ (800d01c <Ble_Hci_Gap_Gatt_Init+0x504>)
 800cf34:	6880      	ldr	r0, [r0, #8]
 800cf36:	2600      	movs	r6, #0
 800cf38:	9604      	str	r6, [sp, #16]
 800cf3a:	9003      	str	r0, [sp, #12]
 800cf3c:	9102      	str	r1, [sp, #8]
 800cf3e:	9201      	str	r2, [sp, #4]
 800cf40:	9300      	str	r3, [sp, #0]
 800cf42:	2300      	movs	r3, #0
 800cf44:	2201      	movs	r2, #1
 800cf46:	4629      	mov	r1, r5
 800cf48:	4620      	mov	r0, r4
 800cf4a:	f7fc fd2f 	bl	80099ac <aci_gap_set_authentication_requirement>
 800cf4e:	4603      	mov	r3, r0
 800cf50:	75fb      	strb	r3, [r7, #23]
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
                                               CFG_IDENTITY_ADDRESS);
  if (ret != BLE_STATUS_SUCCESS)
 800cf52:	7dfb      	ldrb	r3, [r7, #23]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d00f      	beq.n	800cf78 <Ble_Hci_Gap_Gatt_Init+0x460>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%x \n", ret);
 800cf58:	482a      	ldr	r0, [pc, #168]	@ (800d004 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800cf5a:	f7fe fc29 	bl	800b7b0 <DbgTraceGetFileName>
 800cf5e:	4601      	mov	r1, r0
 800cf60:	f240 33c2 	movw	r3, #962	@ 0x3c2
 800cf64:	4a28      	ldr	r2, [pc, #160]	@ (800d008 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800cf66:	4829      	ldr	r0, [pc, #164]	@ (800d00c <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800cf68:	f001 ff62 	bl	800ee30 <iprintf>
 800cf6c:	7dfb      	ldrb	r3, [r7, #23]
 800cf6e:	4619      	mov	r1, r3
 800cf70:	482e      	ldr	r0, [pc, #184]	@ (800d02c <Ble_Hci_Gap_Gatt_Init+0x514>)
 800cf72:	f001 ff5d 	bl	800ee30 <iprintf>
 800cf76:	e00c      	b.n	800cf92 <Ble_Hci_Gap_Gatt_Init+0x47a>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_authentication_requirement command\n");
 800cf78:	4822      	ldr	r0, [pc, #136]	@ (800d004 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800cf7a:	f7fe fc19 	bl	800b7b0 <DbgTraceGetFileName>
 800cf7e:	4601      	mov	r1, r0
 800cf80:	f240 33c6 	movw	r3, #966	@ 0x3c6
 800cf84:	4a20      	ldr	r2, [pc, #128]	@ (800d008 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800cf86:	4821      	ldr	r0, [pc, #132]	@ (800d00c <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800cf88:	f001 ff52 	bl	800ee30 <iprintf>
 800cf8c:	4828      	ldr	r0, [pc, #160]	@ (800d030 <Ble_Hci_Gap_Gatt_Init+0x518>)
 800cf8e:	f001 ffbf 	bl	800ef10 <puts>
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800cf92:	4b22      	ldr	r3, [pc, #136]	@ (800d01c <Ble_Hci_Gap_Gatt_Init+0x504>)
 800cf94:	789b      	ldrb	r3, [r3, #2]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d023      	beq.n	800cfe2 <Ble_Hci_Gap_Gatt_Init+0x4ca>
  {
    ret = aci_gap_configure_whitelist();
 800cf9a:	f7fc ff51 	bl	8009e40 <aci_gap_configure_filter_accept_list>
 800cf9e:	4603      	mov	r3, r0
 800cfa0:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
 800cfa2:	7dfb      	ldrb	r3, [r7, #23]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d00f      	beq.n	800cfc8 <Ble_Hci_Gap_Gatt_Init+0x4b0>
    {
      APP_DBG_MSG("  Fail   : aci_gap_configure_whitelist command, result: 0x%x \n", ret);
 800cfa8:	4816      	ldr	r0, [pc, #88]	@ (800d004 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800cfaa:	f7fe fc01 	bl	800b7b0 <DbgTraceGetFileName>
 800cfae:	4601      	mov	r1, r0
 800cfb0:	f240 33d1 	movw	r3, #977	@ 0x3d1
 800cfb4:	4a14      	ldr	r2, [pc, #80]	@ (800d008 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800cfb6:	4815      	ldr	r0, [pc, #84]	@ (800d00c <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800cfb8:	f001 ff3a 	bl	800ee30 <iprintf>
 800cfbc:	7dfb      	ldrb	r3, [r7, #23]
 800cfbe:	4619      	mov	r1, r3
 800cfc0:	481c      	ldr	r0, [pc, #112]	@ (800d034 <Ble_Hci_Gap_Gatt_Init+0x51c>)
 800cfc2:	f001 ff35 	bl	800ee30 <iprintf>
 800cfc6:	e00c      	b.n	800cfe2 <Ble_Hci_Gap_Gatt_Init+0x4ca>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
 800cfc8:	480e      	ldr	r0, [pc, #56]	@ (800d004 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800cfca:	f7fe fbf1 	bl	800b7b0 <DbgTraceGetFileName>
 800cfce:	4601      	mov	r1, r0
 800cfd0:	f240 33d5 	movw	r3, #981	@ 0x3d5
 800cfd4:	4a0c      	ldr	r2, [pc, #48]	@ (800d008 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800cfd6:	480d      	ldr	r0, [pc, #52]	@ (800d00c <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800cfd8:	f001 ff2a 	bl	800ee30 <iprintf>
 800cfdc:	4816      	ldr	r0, [pc, #88]	@ (800d038 <Ble_Hci_Gap_Gatt_Init+0x520>)
 800cfde:	f001 ff97 	bl	800ef10 <puts>
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
 800cfe2:	4808      	ldr	r0, [pc, #32]	@ (800d004 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800cfe4:	f7fe fbe4 	bl	800b7b0 <DbgTraceGetFileName>
 800cfe8:	4601      	mov	r1, r0
 800cfea:	f44f 7376 	mov.w	r3, #984	@ 0x3d8
 800cfee:	4a06      	ldr	r2, [pc, #24]	@ (800d008 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800cff0:	4806      	ldr	r0, [pc, #24]	@ (800d00c <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800cff2:	f001 ff1d 	bl	800ee30 <iprintf>
 800cff6:	4811      	ldr	r0, [pc, #68]	@ (800d03c <Ble_Hci_Gap_Gatt_Init+0x524>)
 800cff8:	f001 ff1a 	bl	800ee30 <iprintf>
}
 800cffc:	bf00      	nop
 800cffe:	371c      	adds	r7, #28
 800d000:	46bd      	mov	sp, r7
 800d002:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d004:	08012c64 	.word	0x08012c64
 800d008:	08014064 	.word	0x08014064
 800d00c:	08012c80 	.word	0x08012c80
 800d010:	080135ec 	.word	0x080135ec
 800d014:	0801360c 	.word	0x0801360c
 800d018:	08013648 	.word	0x08013648
 800d01c:	20003cd8 	.word	0x20003cd8
 800d020:	08013674 	.word	0x08013674
 800d024:	080136b4 	.word	0x080136b4
 800d028:	0001b207 	.word	0x0001b207
 800d02c:	080136e4 	.word	0x080136e4
 800d030:	08013730 	.word	0x08013730
 800d034:	0801376c 	.word	0x0801376c
 800d038:	080137ac 	.word	0x080137ac
 800d03c:	080137dc 	.word	0x080137dc

0800d040 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 800d040:	b580      	push	{r7, lr}
 800d042:	b08c      	sub	sp, #48	@ 0x30
 800d044:	af08      	add	r7, sp, #32
 800d046:	4603      	mov	r3, r0
 800d048:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800d04a:	2392      	movs	r3, #146	@ 0x92
 800d04c:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 800d04e:	4a32      	ldr	r2, [pc, #200]	@ (800d118 <Adv_Request+0xd8>)
 800d050:	79fb      	ldrb	r3, [r7, #7]
 800d052:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 800d056:	2300      	movs	r3, #0
 800d058:	9306      	str	r3, [sp, #24]
 800d05a:	2300      	movs	r3, #0
 800d05c:	9305      	str	r3, [sp, #20]
 800d05e:	2300      	movs	r3, #0
 800d060:	9304      	str	r3, [sp, #16]
 800d062:	2300      	movs	r3, #0
 800d064:	9303      	str	r3, [sp, #12]
 800d066:	2300      	movs	r3, #0
 800d068:	9302      	str	r3, [sp, #8]
 800d06a:	2300      	movs	r3, #0
 800d06c:	9301      	str	r3, [sp, #4]
 800d06e:	2300      	movs	r3, #0
 800d070:	9300      	str	r3, [sp, #0]
 800d072:	2300      	movs	r3, #0
 800d074:	22a0      	movs	r2, #160	@ 0xa0
 800d076:	2180      	movs	r1, #128	@ 0x80
 800d078:	2000      	movs	r0, #0
 800d07a:	f7fc fb49 	bl	8009710 <aci_gap_set_discoverable>
 800d07e:	4603      	mov	r3, r0
 800d080:	73fb      	strb	r3, [r7, #15]
                                 0,
                                 0,
                                 0,
                                 0,
                                 0);
  if (ret != BLE_STATUS_SUCCESS)
 800d082:	7bfb      	ldrb	r3, [r7, #15]
 800d084:	2b00      	cmp	r3, #0
 800d086:	d00f      	beq.n	800d0a8 <Adv_Request+0x68>
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - fail, result: 0x%x \n", ret);
 800d088:	4824      	ldr	r0, [pc, #144]	@ (800d11c <Adv_Request+0xdc>)
 800d08a:	f7fe fb91 	bl	800b7b0 <DbgTraceGetFileName>
 800d08e:	4601      	mov	r1, r0
 800d090:	f240 33ee 	movw	r3, #1006	@ 0x3ee
 800d094:	4a22      	ldr	r2, [pc, #136]	@ (800d120 <Adv_Request+0xe0>)
 800d096:	4823      	ldr	r0, [pc, #140]	@ (800d124 <Adv_Request+0xe4>)
 800d098:	f001 feca 	bl	800ee30 <iprintf>
 800d09c:	7bfb      	ldrb	r3, [r7, #15]
 800d09e:	4619      	mov	r1, r3
 800d0a0:	4821      	ldr	r0, [pc, #132]	@ (800d128 <Adv_Request+0xe8>)
 800d0a2:	f001 fec5 	bl	800ee30 <iprintf>
 800d0a6:	e00c      	b.n	800d0c2 <Adv_Request+0x82>
  }
  else
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
 800d0a8:	481c      	ldr	r0, [pc, #112]	@ (800d11c <Adv_Request+0xdc>)
 800d0aa:	f7fe fb81 	bl	800b7b0 <DbgTraceGetFileName>
 800d0ae:	4601      	mov	r1, r0
 800d0b0:	f240 33f2 	movw	r3, #1010	@ 0x3f2
 800d0b4:	4a1a      	ldr	r2, [pc, #104]	@ (800d120 <Adv_Request+0xe0>)
 800d0b6:	481b      	ldr	r0, [pc, #108]	@ (800d124 <Adv_Request+0xe4>)
 800d0b8:	f001 feba 	bl	800ee30 <iprintf>
 800d0bc:	481b      	ldr	r0, [pc, #108]	@ (800d12c <Adv_Request+0xec>)
 800d0be:	f001 ff27 	bl	800ef10 <puts>
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 800d0c2:	491b      	ldr	r1, [pc, #108]	@ (800d130 <Adv_Request+0xf0>)
 800d0c4:	200c      	movs	r0, #12
 800d0c6:	f7fc fe49 	bl	8009d5c <aci_gap_update_adv_data>
 800d0ca:	4603      	mov	r3, r0
 800d0cc:	73fb      	strb	r3, [r7, #15]
  if (ret != BLE_STATUS_SUCCESS)
 800d0ce:	7bfb      	ldrb	r3, [r7, #15]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d00f      	beq.n	800d0f4 <Adv_Request+0xb4>
  {
      APP_DBG_MSG("==>> Start Fast Advertising Failed , result: %d \n\r", ret);
 800d0d4:	4811      	ldr	r0, [pc, #68]	@ (800d11c <Adv_Request+0xdc>)
 800d0d6:	f7fe fb6b 	bl	800b7b0 <DbgTraceGetFileName>
 800d0da:	4601      	mov	r1, r0
 800d0dc:	f240 33fd 	movw	r3, #1021	@ 0x3fd
 800d0e0:	4a0f      	ldr	r2, [pc, #60]	@ (800d120 <Adv_Request+0xe0>)
 800d0e2:	4810      	ldr	r0, [pc, #64]	@ (800d124 <Adv_Request+0xe4>)
 800d0e4:	f001 fea4 	bl	800ee30 <iprintf>
 800d0e8:	7bfb      	ldrb	r3, [r7, #15]
 800d0ea:	4619      	mov	r1, r3
 800d0ec:	4811      	ldr	r0, [pc, #68]	@ (800d134 <Adv_Request+0xf4>)
 800d0ee:	f001 fe9f 	bl	800ee30 <iprintf>
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 800d0f2:	e00d      	b.n	800d110 <Adv_Request+0xd0>
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
 800d0f4:	4809      	ldr	r0, [pc, #36]	@ (800d11c <Adv_Request+0xdc>)
 800d0f6:	f7fe fb5b 	bl	800b7b0 <DbgTraceGetFileName>
 800d0fa:	4601      	mov	r1, r0
 800d0fc:	f240 4301 	movw	r3, #1025	@ 0x401
 800d100:	4a07      	ldr	r2, [pc, #28]	@ (800d120 <Adv_Request+0xe0>)
 800d102:	4808      	ldr	r0, [pc, #32]	@ (800d124 <Adv_Request+0xe4>)
 800d104:	f001 fe94 	bl	800ee30 <iprintf>
 800d108:	480b      	ldr	r0, [pc, #44]	@ (800d138 <Adv_Request+0xf8>)
 800d10a:	f001 fe91 	bl	800ee30 <iprintf>
  return;
 800d10e:	bf00      	nop
}
 800d110:	3710      	adds	r7, #16
 800d112:	46bd      	mov	sp, r7
 800d114:	bd80      	pop	{r7, pc}
 800d116:	bf00      	nop
 800d118:	20003cd8 	.word	0x20003cd8
 800d11c:	08012c64 	.word	0x08012c64
 800d120:	0801407c 	.word	0x0801407c
 800d124:	08012c80 	.word	0x08012c80
 800d128:	08013808 	.word	0x08013808
 800d12c:	08013840 	.word	0x08013840
 800d130:	2000001c 	.word	0x2000001c
 800d134:	08013868 	.word	0x08013868
 800d138:	0801389c 	.word	0x0801389c

0800d13c <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 800d13c:	b580      	push	{r7, lr}
 800d13e:	b086      	sub	sp, #24
 800d140:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800d142:	f7ff f8f5 	bl	800c330 <LL_FLASH_GetUDN>
 800d146:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 800d148:	693b      	ldr	r3, [r7, #16]
 800d14a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d14e:	d023      	beq.n	800d198 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800d150:	f7ff f906 	bl	800c360 <LL_FLASH_GetSTCompanyID>
 800d154:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800d156:	f7ff f8f7 	bl	800c348 <LL_FLASH_GetDeviceID>
 800d15a:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 800d15c:	693b      	ldr	r3, [r7, #16]
 800d15e:	b2da      	uxtb	r2, r3
 800d160:	4b16      	ldr	r3, [pc, #88]	@ (800d1bc <BleGetBdAddress+0x80>)
 800d162:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 800d164:	693b      	ldr	r3, [r7, #16]
 800d166:	0a1b      	lsrs	r3, r3, #8
 800d168:	b2da      	uxtb	r2, r3
 800d16a:	4b14      	ldr	r3, [pc, #80]	@ (800d1bc <BleGetBdAddress+0x80>)
 800d16c:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	b2da      	uxtb	r2, r3
 800d172:	4b12      	ldr	r3, [pc, #72]	@ (800d1bc <BleGetBdAddress+0x80>)
 800d174:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800d176:	68bb      	ldr	r3, [r7, #8]
 800d178:	b2da      	uxtb	r2, r3
 800d17a:	4b10      	ldr	r3, [pc, #64]	@ (800d1bc <BleGetBdAddress+0x80>)
 800d17c:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800d17e:	68bb      	ldr	r3, [r7, #8]
 800d180:	0a1b      	lsrs	r3, r3, #8
 800d182:	b2da      	uxtb	r2, r3
 800d184:	4b0d      	ldr	r3, [pc, #52]	@ (800d1bc <BleGetBdAddress+0x80>)
 800d186:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 800d188:	68bb      	ldr	r3, [r7, #8]
 800d18a:	0c1b      	lsrs	r3, r3, #16
 800d18c:	b2da      	uxtb	r2, r3
 800d18e:	4b0b      	ldr	r3, [pc, #44]	@ (800d1bc <BleGetBdAddress+0x80>)
 800d190:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800d192:	4b0a      	ldr	r3, [pc, #40]	@ (800d1bc <BleGetBdAddress+0x80>)
 800d194:	617b      	str	r3, [r7, #20]
 800d196:	e00b      	b.n	800d1b0 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 800d198:	2000      	movs	r0, #0
 800d19a:	f7fe fbe7 	bl	800b96c <OTP_Read>
 800d19e:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d002      	beq.n	800d1ac <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	617b      	str	r3, [r7, #20]
 800d1aa:	e001      	b.n	800d1b0 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 800d1ac:	4b04      	ldr	r3, [pc, #16]	@ (800d1c0 <BleGetBdAddress+0x84>)
 800d1ae:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 800d1b0:	697b      	ldr	r3, [r7, #20]
}
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	3718      	adds	r7, #24
 800d1b6:	46bd      	mov	sp, r7
 800d1b8:	bd80      	pop	{r7, pc}
 800d1ba:	bf00      	nop
 800d1bc:	20003cd0 	.word	0x20003cd0
 800d1c0:	08014014 	.word	0x08014014

0800d1c4 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 800d1c4:	b580      	push	{r7, lr}
 800d1c6:	b082      	sub	sp, #8
 800d1c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800d1ca:	4b1f      	ldr	r3, [pc, #124]	@ (800d248 <Adv_Cancel+0x84>)
 800d1cc:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800d1d0:	2b05      	cmp	r3, #5
 800d1d2:	d035      	beq.n	800d240 <Adv_Cancel+0x7c>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800d1d4:	2392      	movs	r3, #146	@ 0x92
 800d1d6:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 800d1d8:	f7fc fa76 	bl	80096c8 <aci_gap_set_non_discoverable>
 800d1dc:	4603      	mov	r3, r0
 800d1de:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800d1e0:	4b19      	ldr	r3, [pc, #100]	@ (800d248 <Adv_Cancel+0x84>)
 800d1e2:	2200      	movs	r2, #0
 800d1e4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    if (ret != BLE_STATUS_SUCCESS)
 800d1e8:	79fb      	ldrb	r3, [r7, #7]
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d00d      	beq.n	800d20a <Adv_Cancel+0x46>
    {
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 800d1ee:	4817      	ldr	r0, [pc, #92]	@ (800d24c <Adv_Cancel+0x88>)
 800d1f0:	f7fe fade 	bl	800b7b0 <DbgTraceGetFileName>
 800d1f4:	4601      	mov	r1, r0
 800d1f6:	f240 434f 	movw	r3, #1103	@ 0x44f
 800d1fa:	4a15      	ldr	r2, [pc, #84]	@ (800d250 <Adv_Cancel+0x8c>)
 800d1fc:	4815      	ldr	r0, [pc, #84]	@ (800d254 <Adv_Cancel+0x90>)
 800d1fe:	f001 fe17 	bl	800ee30 <iprintf>
 800d202:	4815      	ldr	r0, [pc, #84]	@ (800d258 <Adv_Cancel+0x94>)
 800d204:	f001 fe14 	bl	800ee30 <iprintf>

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 800d208:	e01a      	b.n	800d240 <Adv_Cancel+0x7c>
      APP_DBG_MSG("  \r\n\r");
 800d20a:	4810      	ldr	r0, [pc, #64]	@ (800d24c <Adv_Cancel+0x88>)
 800d20c:	f7fe fad0 	bl	800b7b0 <DbgTraceGetFileName>
 800d210:	4601      	mov	r1, r0
 800d212:	f240 4353 	movw	r3, #1107	@ 0x453
 800d216:	4a0e      	ldr	r2, [pc, #56]	@ (800d250 <Adv_Cancel+0x8c>)
 800d218:	480e      	ldr	r0, [pc, #56]	@ (800d254 <Adv_Cancel+0x90>)
 800d21a:	f001 fe09 	bl	800ee30 <iprintf>
 800d21e:	480f      	ldr	r0, [pc, #60]	@ (800d25c <Adv_Cancel+0x98>)
 800d220:	f001 fe06 	bl	800ee30 <iprintf>
      APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 800d224:	4809      	ldr	r0, [pc, #36]	@ (800d24c <Adv_Cancel+0x88>)
 800d226:	f7fe fac3 	bl	800b7b0 <DbgTraceGetFileName>
 800d22a:	4601      	mov	r1, r0
 800d22c:	f240 4354 	movw	r3, #1108	@ 0x454
 800d230:	4a07      	ldr	r2, [pc, #28]	@ (800d250 <Adv_Cancel+0x8c>)
 800d232:	4808      	ldr	r0, [pc, #32]	@ (800d254 <Adv_Cancel+0x90>)
 800d234:	f001 fdfc 	bl	800ee30 <iprintf>
 800d238:	4809      	ldr	r0, [pc, #36]	@ (800d260 <Adv_Cancel+0x9c>)
 800d23a:	f001 fdf9 	bl	800ee30 <iprintf>
  return;
 800d23e:	bf00      	nop
 800d240:	bf00      	nop
}
 800d242:	3708      	adds	r7, #8
 800d244:	46bd      	mov	sp, r7
 800d246:	bd80      	pop	{r7, pc}
 800d248:	20003cd8 	.word	0x20003cd8
 800d24c:	08012c64 	.word	0x08012c64
 800d250:	08014088 	.word	0x08014088
 800d254:	08012c80 	.word	0x08012c80
 800d258:	080138c4 	.word	0x080138c4
 800d25c:	080138e8 	.word	0x080138e8
 800d260:	080138f0 	.word	0x080138f0

0800d264 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 800d264:	b580      	push	{r7, lr}
 800d266:	b082      	sub	sp, #8
 800d268:	af00      	add	r7, sp, #0
 800d26a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800d26c:	2100      	movs	r1, #0
 800d26e:	2002      	movs	r0, #2
 800d270:	f000 fdb4 	bl	800dddc <UTIL_SEQ_SetTask>

  return;
 800d274:	bf00      	nop
}
 800d276:	3708      	adds	r7, #8
 800d278:	46bd      	mov	sp, r7
 800d27a:	bd80      	pop	{r7, pc}

0800d27c <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 800d27c:	b580      	push	{r7, lr}
 800d27e:	b082      	sub	sp, #8
 800d280:	af00      	add	r7, sp, #0
 800d282:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800d284:	2001      	movs	r0, #1
 800d286:	f000 fe15 	bl	800deb4 <UTIL_SEQ_SetEvt>

  return;
 800d28a:	bf00      	nop
}
 800d28c:	3708      	adds	r7, #8
 800d28e:	46bd      	mov	sp, r7
 800d290:	bd80      	pop	{r7, pc}

0800d292 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 800d292:	b580      	push	{r7, lr}
 800d294:	b082      	sub	sp, #8
 800d296:	af00      	add	r7, sp, #0
 800d298:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800d29a:	2001      	movs	r0, #1
 800d29c:	f000 fe2a 	bl	800def4 <UTIL_SEQ_WaitEvt>

  return;
 800d2a0:	bf00      	nop
}
 800d2a2:	3708      	adds	r7, #8
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	bd80      	pop	{r7, pc}

0800d2a8 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 800d2a8:	b580      	push	{r7, lr}
 800d2aa:	b084      	sub	sp, #16
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	685b      	ldr	r3, [r3, #4]
 800d2b8:	3308      	adds	r3, #8
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	f7fd fc16 	bl	800aaec <SVCCTL_UserEvtRx>
 800d2c0:	4603      	mov	r3, r0
 800d2c2:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800d2c4:	7afb      	ldrb	r3, [r7, #11]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d003      	beq.n	800d2d2 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	2201      	movs	r2, #1
 800d2ce:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800d2d0:	e003      	b.n	800d2da <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	2200      	movs	r2, #0
 800d2d6:	701a      	strb	r2, [r3, #0]
  return;
 800d2d8:	bf00      	nop
}
 800d2da:	3710      	adds	r7, #16
 800d2dc:	46bd      	mov	sp, r7
 800d2de:	bd80      	pop	{r7, pc}

0800d2e0 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	b084      	sub	sp, #16
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	4603      	mov	r3, r0
 800d2e8:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800d2ea:	79fb      	ldrb	r3, [r7, #7]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d002      	beq.n	800d2f6 <BLE_StatusNot+0x16>
 800d2f0:	2b01      	cmp	r3, #1
 800d2f2:	d006      	beq.n	800d302 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 800d2f4:	e00b      	b.n	800d30e <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800d2f6:	2303      	movs	r3, #3
 800d2f8:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800d2fa:	68f8      	ldr	r0, [r7, #12]
 800d2fc:	f000 fd9a 	bl	800de34 <UTIL_SEQ_PauseTask>
      break;
 800d300:	e005      	b.n	800d30e <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800d302:	2303      	movs	r3, #3
 800d304:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800d306:	68f8      	ldr	r0, [r7, #12]
 800d308:	f000 fdb4 	bl	800de74 <UTIL_SEQ_ResumeTask>
      break;
 800d30c:	bf00      	nop
  }

  return;
 800d30e:	bf00      	nop
}
 800d310:	3710      	adds	r7, #16
 800d312:	46bd      	mov	sp, r7
 800d314:	bd80      	pop	{r7, pc}
	...

0800d318 <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 800d318:	b480      	push	{r7}
 800d31a:	b083      	sub	sp, #12
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	781b      	ldrb	r3, [r3, #0]
 800d324:	2b06      	cmp	r3, #6
 800d326:	d811      	bhi.n	800d34c <Custom_STM_App_Notification+0x34>
 800d328:	a201      	add	r2, pc, #4	@ (adr r2, 800d330 <Custom_STM_App_Notification+0x18>)
 800d32a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d32e:	bf00      	nop
 800d330:	0800d34d 	.word	0x0800d34d
 800d334:	0800d34d 	.word	0x0800d34d
 800d338:	0800d34d 	.word	0x0800d34d
 800d33c:	0800d34d 	.word	0x0800d34d
 800d340:	0800d34d 	.word	0x0800d34d
 800d344:	0800d34d 	.word	0x0800d34d
 800d348:	0800d34d 	.word	0x0800d34d

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 800d34c:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 800d34e:	bf00      	nop
}
 800d350:	370c      	adds	r7, #12
 800d352:	46bd      	mov	sp, r7
 800d354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d358:	4770      	bx	lr
 800d35a:	bf00      	nop

0800d35c <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 800d35c:	b480      	push	{r7}
 800d35e:	b083      	sub	sp, #12
 800d360:	af00      	add	r7, sp, #0
 800d362:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	781b      	ldrb	r3, [r3, #0]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d002      	beq.n	800d372 <Custom_APP_Notification+0x16>
 800d36c:	2b01      	cmp	r3, #1
 800d36e:	d002      	beq.n	800d376 <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 800d370:	e002      	b.n	800d378 <Custom_APP_Notification+0x1c>
      break;
 800d372:	bf00      	nop
 800d374:	e000      	b.n	800d378 <Custom_APP_Notification+0x1c>
      break;
 800d376:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 800d378:	bf00      	nop
}
 800d37a:	370c      	adds	r7, #12
 800d37c:	46bd      	mov	sp, r7
 800d37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d382:	4770      	bx	lr

0800d384 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 800d384:	b480      	push	{r7}
 800d386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 800d388:	bf00      	nop
}
 800d38a:	46bd      	mov	sp, r7
 800d38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d390:	4770      	bx	lr
	...

0800d394 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 800d394:	b580      	push	{r7, lr}
 800d396:	b08c      	sub	sp, #48	@ 0x30
 800d398:	af00      	add	r7, sp, #0
 800d39a:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 800d39c:	2300      	movs	r3, #0
 800d39e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	3301      	adds	r3, #1
 800d3a6:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (event_pckt->evt)
 800d3a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3aa:	781b      	ldrb	r3, [r3, #0]
 800d3ac:	2bff      	cmp	r3, #255	@ 0xff
 800d3ae:	f040 80a0 	bne.w	800d4f2 <Custom_STM_Event_Handler+0x15e>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800d3b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3b4:	3302      	adds	r3, #2
 800d3b6:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (blecore_evt->ecode)
 800d3b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3ba:	881b      	ldrh	r3, [r3, #0]
 800d3bc:	b29b      	uxth	r3, r3
 800d3be:	f6a3 4301 	subw	r3, r3, #3073	@ 0xc01
 800d3c2:	2b1a      	cmp	r3, #26
 800d3c4:	f200 8091 	bhi.w	800d4ea <Custom_STM_Event_Handler+0x156>
 800d3c8:	a201      	add	r2, pc, #4	@ (adr r2, 800d3d0 <Custom_STM_Event_Handler+0x3c>)
 800d3ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3ce:	bf00      	nop
 800d3d0:	0800d43d 	.word	0x0800d43d
 800d3d4:	0800d4eb 	.word	0x0800d4eb
 800d3d8:	0800d4eb 	.word	0x0800d4eb
 800d3dc:	0800d4eb 	.word	0x0800d4eb
 800d3e0:	0800d4eb 	.word	0x0800d4eb
 800d3e4:	0800d4eb 	.word	0x0800d4eb
 800d3e8:	0800d4eb 	.word	0x0800d4eb
 800d3ec:	0800d4eb 	.word	0x0800d4eb
 800d3f0:	0800d4eb 	.word	0x0800d4eb
 800d3f4:	0800d4eb 	.word	0x0800d4eb
 800d3f8:	0800d4eb 	.word	0x0800d4eb
 800d3fc:	0800d4eb 	.word	0x0800d4eb
 800d400:	0800d4eb 	.word	0x0800d4eb
 800d404:	0800d4eb 	.word	0x0800d4eb
 800d408:	0800d4eb 	.word	0x0800d4eb
 800d40c:	0800d4eb 	.word	0x0800d4eb
 800d410:	0800d4eb 	.word	0x0800d4eb
 800d414:	0800d4eb 	.word	0x0800d4eb
 800d418:	0800d4eb 	.word	0x0800d4eb
 800d41c:	0800d4eb 	.word	0x0800d4eb
 800d420:	0800d4eb 	.word	0x0800d4eb
 800d424:	0800d4eb 	.word	0x0800d4eb
 800d428:	0800d4eb 	.word	0x0800d4eb
 800d42c:	0800d4eb 	.word	0x0800d4eb
 800d430:	0800d4eb 	.word	0x0800d4eb
 800d434:	0800d4eb 	.word	0x0800d4eb
 800d438:	0800d4cd 	.word	0x0800d4cd
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800d43c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d43e:	3302      	adds	r3, #2
 800d440:	61fb      	str	r3, [r7, #28]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomDatasendHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800d442:	69fb      	ldr	r3, [r7, #28]
 800d444:	885b      	ldrh	r3, [r3, #2]
 800d446:	b29b      	uxth	r3, r3
 800d448:	461a      	mov	r2, r3
 800d44a:	4b2d      	ldr	r3, [pc, #180]	@ (800d500 <Custom_STM_Event_Handler+0x16c>)
 800d44c:	885b      	ldrh	r3, [r3, #2]
 800d44e:	3302      	adds	r3, #2
 800d450:	429a      	cmp	r2, r3
 800d452:	d12c      	bne.n	800d4ae <Custom_STM_Event_Handler+0x11a>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800d454:	2301      	movs	r3, #1
 800d456:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_1 */

            /* USER CODE END CUSTOM_STM_Service_1_Char_1 */

            switch (attribute_modified->Attr_Data[0])
 800d45a:	69fb      	ldr	r3, [r7, #28]
 800d45c:	7a1b      	ldrb	r3, [r3, #8]
 800d45e:	2b02      	cmp	r3, #2
 800d460:	d01d      	beq.n	800d49e <Custom_STM_Event_Handler+0x10a>
 800d462:	2b02      	cmp	r3, #2
 800d464:	dc30      	bgt.n	800d4c8 <Custom_STM_Event_Handler+0x134>
 800d466:	2b00      	cmp	r3, #0
 800d468:	d002      	beq.n	800d470 <Custom_STM_Event_Handler+0xdc>
 800d46a:	2b01      	cmp	r3, #1
 800d46c:	d00f      	beq.n	800d48e <Custom_STM_Event_Handler+0xfa>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_1_default */

                /* USER CODE END CUSTOM_STM_Service_1_Char_1_default */
                break;
 800d46e:	e02b      	b.n	800d4c8 <Custom_STM_Event_Handler+0x134>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_DATASEND_NOTIFY_DISABLED_EVT;
 800d470:	2303      	movs	r3, #3
 800d472:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800d474:	f107 0308 	add.w	r3, r7, #8
 800d478:	4618      	mov	r0, r3
 800d47a:	f7ff ff4d 	bl	800d318 <Custom_STM_App_Notification>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_DATASEND_INDICATE_DISABLED_EVT;
 800d47e:	2305      	movs	r3, #5
 800d480:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800d482:	f107 0308 	add.w	r3, r7, #8
 800d486:	4618      	mov	r0, r3
 800d488:	f7ff ff46 	bl	800d318 <Custom_STM_App_Notification>
                break;
 800d48c:	e01d      	b.n	800d4ca <Custom_STM_Event_Handler+0x136>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_DATASEND_NOTIFY_ENABLED_EVT;
 800d48e:	2302      	movs	r3, #2
 800d490:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800d492:	f107 0308 	add.w	r3, r7, #8
 800d496:	4618      	mov	r0, r3
 800d498:	f7ff ff3e 	bl	800d318 <Custom_STM_App_Notification>
                break;
 800d49c:	e015      	b.n	800d4ca <Custom_STM_Event_Handler+0x136>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_DATASEND_INDICATE_ENABLED_EVT;
 800d49e:	2304      	movs	r3, #4
 800d4a0:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800d4a2:	f107 0308 	add.w	r3, r7, #8
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	f7ff ff36 	bl	800d318 <Custom_STM_App_Notification>
                break;
 800d4ac:	e00d      	b.n	800d4ca <Custom_STM_Event_Handler+0x136>
            }
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomDatasendHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if (attribute_modified->Attr_Handle == (CustomContext.CustomDatasendHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800d4ae:	69fb      	ldr	r3, [r7, #28]
 800d4b0:	885b      	ldrh	r3, [r3, #2]
 800d4b2:	b29b      	uxth	r3, r3
 800d4b4:	461a      	mov	r2, r3
 800d4b6:	4b12      	ldr	r3, [pc, #72]	@ (800d500 <Custom_STM_Event_Handler+0x16c>)
 800d4b8:	885b      	ldrh	r3, [r3, #2]
 800d4ba:	3301      	adds	r3, #1
 800d4bc:	429a      	cmp	r2, r3
 800d4be:	d116      	bne.n	800d4ee <Custom_STM_Event_Handler+0x15a>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800d4c0:	2301      	movs	r3, #1
 800d4c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE END CUSTOM_STM_Service_1_Char_1_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
          } /* if (attribute_modified->Attr_Handle == (CustomContext.CustomDatasendHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
          break;
 800d4c6:	e012      	b.n	800d4ee <Custom_STM_Event_Handler+0x15a>
                break;
 800d4c8:	bf00      	nop
          break;
 800d4ca:	e010      	b.n	800d4ee <Custom_STM_Event_Handler+0x15a>
		case ACI_GATT_NOTIFICATION_COMPLETE_VSEVT_CODE:
        {
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */
          notification_complete = (aci_gatt_notification_complete_event_rp0*)blecore_evt->data;
 800d4cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4ce:	3302      	adds	r3, #2
 800d4d0:	623b      	str	r3, [r7, #32]
          Notification.Custom_Evt_Opcode = CUSTOM_STM_NOTIFICATION_COMPLETE_EVT;
 800d4d2:	2306      	movs	r3, #6
 800d4d4:	723b      	strb	r3, [r7, #8]
          Notification.AttrHandle = notification_complete->Attr_Handle;
 800d4d6:	6a3b      	ldr	r3, [r7, #32]
 800d4d8:	881b      	ldrh	r3, [r3, #0]
 800d4da:	b29b      	uxth	r3, r3
 800d4dc:	833b      	strh	r3, [r7, #24]
          Custom_STM_App_Notification(&Notification);
 800d4de:	f107 0308 	add.w	r3, r7, #8
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	f7ff ff18 	bl	800d318 <Custom_STM_App_Notification>
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */
          break;
 800d4e8:	e002      	b.n	800d4f0 <Custom_STM_Event_Handler+0x15c>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 800d4ea:	bf00      	nop
 800d4ec:	e002      	b.n	800d4f4 <Custom_STM_Event_Handler+0x160>
          break;
 800d4ee:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800d4f0:	e000      	b.n	800d4f4 <Custom_STM_Event_Handler+0x160>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 800d4f2:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 800d4f4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}/* end Custom_STM_Event_Handler */
 800d4f8:	4618      	mov	r0, r3
 800d4fa:	3730      	adds	r7, #48	@ 0x30
 800d4fc:	46bd      	mov	sp, r7
 800d4fe:	bd80      	pop	{r7, pc}
 800d500:	20003d60 	.word	0x20003d60

0800d504 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 800d504:	b580      	push	{r7, lr}
 800d506:	b08c      	sub	sp, #48	@ 0x30
 800d508:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800d50a:	2392      	movs	r3, #146	@ 0x92
 800d50c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 800d50e:	4854      	ldr	r0, [pc, #336]	@ (800d660 <SVCCTL_InitCustomSvc+0x15c>)
 800d510:	f7fd fad2 	bl	800aab8 <SVCCTL_RegisterSvcHandler>
   *                              = 5
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 5;
 800d514:	2305      	movs	r3, #5
 800d516:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_MYSVC_UUID(uuid.Char_UUID_128);
 800d518:	238f      	movs	r3, #143	@ 0x8f
 800d51a:	713b      	strb	r3, [r7, #4]
 800d51c:	23e5      	movs	r3, #229	@ 0xe5
 800d51e:	717b      	strb	r3, [r7, #5]
 800d520:	23b3      	movs	r3, #179	@ 0xb3
 800d522:	71bb      	strb	r3, [r7, #6]
 800d524:	23d5      	movs	r3, #213	@ 0xd5
 800d526:	71fb      	strb	r3, [r7, #7]
 800d528:	232e      	movs	r3, #46	@ 0x2e
 800d52a:	723b      	strb	r3, [r7, #8]
 800d52c:	237f      	movs	r3, #127	@ 0x7f
 800d52e:	727b      	strb	r3, [r7, #9]
 800d530:	234a      	movs	r3, #74	@ 0x4a
 800d532:	72bb      	strb	r3, [r7, #10]
 800d534:	2398      	movs	r3, #152	@ 0x98
 800d536:	72fb      	strb	r3, [r7, #11]
 800d538:	232a      	movs	r3, #42	@ 0x2a
 800d53a:	733b      	strb	r3, [r7, #12]
 800d53c:	2348      	movs	r3, #72	@ 0x48
 800d53e:	737b      	strb	r3, [r7, #13]
 800d540:	237a      	movs	r3, #122	@ 0x7a
 800d542:	73bb      	strb	r3, [r7, #14]
 800d544:	23cc      	movs	r3, #204	@ 0xcc
 800d546:	73fb      	strb	r3, [r7, #15]
 800d548:	2300      	movs	r3, #0
 800d54a:	743b      	strb	r3, [r7, #16]
 800d54c:	2300      	movs	r3, #0
 800d54e:	747b      	strb	r3, [r7, #17]
 800d550:	2300      	movs	r3, #0
 800d552:	74bb      	strb	r3, [r7, #18]
 800d554:	2300      	movs	r3, #0
 800d556:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 800d558:	7dbb      	ldrb	r3, [r7, #22]
 800d55a:	1d39      	adds	r1, r7, #4
 800d55c:	4a41      	ldr	r2, [pc, #260]	@ (800d664 <SVCCTL_InitCustomSvc+0x160>)
 800d55e:	9200      	str	r2, [sp, #0]
 800d560:	2201      	movs	r2, #1
 800d562:	2002      	movs	r0, #2
 800d564:	f7fc fd1c 	bl	8009fa0 <aci_gatt_add_service>
 800d568:	4603      	mov	r3, r0
 800d56a:	75fb      	strb	r3, [r7, #23]
                             (Service_UUID_t *) &uuid,
                             PRIMARY_SERVICE,
                             max_attr_record,
                             &(CustomContext.CustomMysvcHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800d56c:	7dfb      	ldrb	r3, [r7, #23]
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d00f      	beq.n	800d592 <SVCCTL_InitCustomSvc+0x8e>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_service command: MYSVC, error code: 0x%x \n\r", ret);
 800d572:	483d      	ldr	r0, [pc, #244]	@ (800d668 <SVCCTL_InitCustomSvc+0x164>)
 800d574:	f7fe f91c 	bl	800b7b0 <DbgTraceGetFileName>
 800d578:	4601      	mov	r1, r0
 800d57a:	f240 134b 	movw	r3, #331	@ 0x14b
 800d57e:	4a3b      	ldr	r2, [pc, #236]	@ (800d66c <SVCCTL_InitCustomSvc+0x168>)
 800d580:	483b      	ldr	r0, [pc, #236]	@ (800d670 <SVCCTL_InitCustomSvc+0x16c>)
 800d582:	f001 fc55 	bl	800ee30 <iprintf>
 800d586:	7dfb      	ldrb	r3, [r7, #23]
 800d588:	4619      	mov	r1, r3
 800d58a:	483a      	ldr	r0, [pc, #232]	@ (800d674 <SVCCTL_InitCustomSvc+0x170>)
 800d58c:	f001 fc50 	bl	800ee30 <iprintf>
 800d590:	e00c      	b.n	800d5ac <SVCCTL_InitCustomSvc+0xa8>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_service command: MYSVC \n\r");
 800d592:	4835      	ldr	r0, [pc, #212]	@ (800d668 <SVCCTL_InitCustomSvc+0x164>)
 800d594:	f7fe f90c 	bl	800b7b0 <DbgTraceGetFileName>
 800d598:	4601      	mov	r1, r0
 800d59a:	f240 134f 	movw	r3, #335	@ 0x14f
 800d59e:	4a33      	ldr	r2, [pc, #204]	@ (800d66c <SVCCTL_InitCustomSvc+0x168>)
 800d5a0:	4833      	ldr	r0, [pc, #204]	@ (800d670 <SVCCTL_InitCustomSvc+0x16c>)
 800d5a2:	f001 fc45 	bl	800ee30 <iprintf>
 800d5a6:	4834      	ldr	r0, [pc, #208]	@ (800d678 <SVCCTL_InitCustomSvc+0x174>)
 800d5a8:	f001 fc42 	bl	800ee30 <iprintf>
  }

  /**
   *  datasend
   */
  COPY_DATASEND_UUID(uuid.Char_UUID_128);
 800d5ac:	2319      	movs	r3, #25
 800d5ae:	713b      	strb	r3, [r7, #4]
 800d5b0:	23ed      	movs	r3, #237	@ 0xed
 800d5b2:	717b      	strb	r3, [r7, #5]
 800d5b4:	2382      	movs	r3, #130	@ 0x82
 800d5b6:	71bb      	strb	r3, [r7, #6]
 800d5b8:	23ae      	movs	r3, #174	@ 0xae
 800d5ba:	71fb      	strb	r3, [r7, #7]
 800d5bc:	23ed      	movs	r3, #237	@ 0xed
 800d5be:	723b      	strb	r3, [r7, #8]
 800d5c0:	2321      	movs	r3, #33	@ 0x21
 800d5c2:	727b      	strb	r3, [r7, #9]
 800d5c4:	234c      	movs	r3, #76	@ 0x4c
 800d5c6:	72bb      	strb	r3, [r7, #10]
 800d5c8:	239d      	movs	r3, #157	@ 0x9d
 800d5ca:	72fb      	strb	r3, [r7, #11]
 800d5cc:	2341      	movs	r3, #65	@ 0x41
 800d5ce:	733b      	strb	r3, [r7, #12]
 800d5d0:	2345      	movs	r3, #69	@ 0x45
 800d5d2:	737b      	strb	r3, [r7, #13]
 800d5d4:	2322      	movs	r3, #34	@ 0x22
 800d5d6:	73bb      	strb	r3, [r7, #14]
 800d5d8:	238e      	movs	r3, #142	@ 0x8e
 800d5da:	73fb      	strb	r3, [r7, #15]
 800d5dc:	2300      	movs	r3, #0
 800d5de:	743b      	strb	r3, [r7, #16]
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	747b      	strb	r3, [r7, #17]
 800d5e4:	2300      	movs	r3, #0
 800d5e6:	74bb      	strb	r3, [r7, #18]
 800d5e8:	2300      	movs	r3, #0
 800d5ea:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMysvcHdle,
 800d5ec:	4b1d      	ldr	r3, [pc, #116]	@ (800d664 <SVCCTL_InitCustomSvc+0x160>)
 800d5ee:	8818      	ldrh	r0, [r3, #0]
 800d5f0:	4b22      	ldr	r3, [pc, #136]	@ (800d67c <SVCCTL_InitCustomSvc+0x178>)
 800d5f2:	881b      	ldrh	r3, [r3, #0]
 800d5f4:	1d3a      	adds	r2, r7, #4
 800d5f6:	4922      	ldr	r1, [pc, #136]	@ (800d680 <SVCCTL_InitCustomSvc+0x17c>)
 800d5f8:	9105      	str	r1, [sp, #20]
 800d5fa:	2100      	movs	r1, #0
 800d5fc:	9104      	str	r1, [sp, #16]
 800d5fe:	2110      	movs	r1, #16
 800d600:	9103      	str	r1, [sp, #12]
 800d602:	2101      	movs	r1, #1
 800d604:	9102      	str	r1, [sp, #8]
 800d606:	2101      	movs	r1, #1
 800d608:	9101      	str	r1, [sp, #4]
 800d60a:	213b      	movs	r1, #59	@ 0x3b
 800d60c:	9100      	str	r1, [sp, #0]
 800d60e:	2102      	movs	r1, #2
 800d610:	f7fc fd9c 	bl	800a14c <aci_gatt_add_char>
 800d614:	4603      	mov	r3, r0
 800d616:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_AUTHEN_READ,
                          GATT_NOTIFY_ATTRIBUTE_WRITE,
                          0x10,
                          CHAR_VALUE_LEN_CONSTANT,
                          &(CustomContext.CustomDatasendHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800d618:	7dfb      	ldrb	r3, [r7, #23]
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d00f      	beq.n	800d63e <SVCCTL_InitCustomSvc+0x13a>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : DATASEND, error code: 0x%x \n\r", ret);
 800d61e:	4812      	ldr	r0, [pc, #72]	@ (800d668 <SVCCTL_InitCustomSvc+0x164>)
 800d620:	f7fe f8c6 	bl	800b7b0 <DbgTraceGetFileName>
 800d624:	4601      	mov	r1, r0
 800d626:	f240 1361 	movw	r3, #353	@ 0x161
 800d62a:	4a10      	ldr	r2, [pc, #64]	@ (800d66c <SVCCTL_InitCustomSvc+0x168>)
 800d62c:	4810      	ldr	r0, [pc, #64]	@ (800d670 <SVCCTL_InitCustomSvc+0x16c>)
 800d62e:	f001 fbff 	bl	800ee30 <iprintf>
 800d632:	7dfb      	ldrb	r3, [r7, #23]
 800d634:	4619      	mov	r1, r3
 800d636:	4813      	ldr	r0, [pc, #76]	@ (800d684 <SVCCTL_InitCustomSvc+0x180>)
 800d638:	f001 fbfa 	bl	800ee30 <iprintf>

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 800d63c:	e00d      	b.n	800d65a <SVCCTL_InitCustomSvc+0x156>
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : DATASEND \n\r");
 800d63e:	480a      	ldr	r0, [pc, #40]	@ (800d668 <SVCCTL_InitCustomSvc+0x164>)
 800d640:	f7fe f8b6 	bl	800b7b0 <DbgTraceGetFileName>
 800d644:	4601      	mov	r1, r0
 800d646:	f240 1365 	movw	r3, #357	@ 0x165
 800d64a:	4a08      	ldr	r2, [pc, #32]	@ (800d66c <SVCCTL_InitCustomSvc+0x168>)
 800d64c:	4808      	ldr	r0, [pc, #32]	@ (800d670 <SVCCTL_InitCustomSvc+0x16c>)
 800d64e:	f001 fbef 	bl	800ee30 <iprintf>
 800d652:	480d      	ldr	r0, [pc, #52]	@ (800d688 <SVCCTL_InitCustomSvc+0x184>)
 800d654:	f001 fbec 	bl	800ee30 <iprintf>
  return;
 800d658:	bf00      	nop
}
 800d65a:	3718      	adds	r7, #24
 800d65c:	46bd      	mov	sp, r7
 800d65e:	bd80      	pop	{r7, pc}
 800d660:	0800d395 	.word	0x0800d395
 800d664:	20003d60 	.word	0x20003d60
 800d668:	0801390c 	.word	0x0801390c
 800d66c:	08014094 	.word	0x08014094
 800d670:	0801392c 	.word	0x0801392c
 800d674:	08013940 	.word	0x08013940
 800d678:	08013984 	.word	0x08013984
 800d67c:	20000028 	.word	0x20000028
 800d680:	20003d62 	.word	0x20003d62
 800d684:	080139b8 	.word	0x080139b8
 800d688:	08013a00 	.word	0x08013a00

0800d68c <LL_PWR_EnableBootC2>:
{
 800d68c:	b480      	push	{r7}
 800d68e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800d690:	4b05      	ldr	r3, [pc, #20]	@ (800d6a8 <LL_PWR_EnableBootC2+0x1c>)
 800d692:	68db      	ldr	r3, [r3, #12]
 800d694:	4a04      	ldr	r2, [pc, #16]	@ (800d6a8 <LL_PWR_EnableBootC2+0x1c>)
 800d696:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d69a:	60d3      	str	r3, [r2, #12]
}
 800d69c:	bf00      	nop
 800d69e:	46bd      	mov	sp, r7
 800d6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a4:	4770      	bx	lr
 800d6a6:	bf00      	nop
 800d6a8:	58000400 	.word	0x58000400

0800d6ac <LL_C2_EXTI_EnableEvent_32_63>:
{
 800d6ac:	b480      	push	{r7}
 800d6ae:	b083      	sub	sp, #12
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800d6b4:	4b06      	ldr	r3, [pc, #24]	@ (800d6d0 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800d6b6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800d6ba:	4905      	ldr	r1, [pc, #20]	@ (800d6d0 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	4313      	orrs	r3, r2
 800d6c0:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 800d6c4:	bf00      	nop
 800d6c6:	370c      	adds	r7, #12
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ce:	4770      	bx	lr
 800d6d0:	58000800 	.word	0x58000800

0800d6d4 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800d6d4:	b480      	push	{r7}
 800d6d6:	b083      	sub	sp, #12
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800d6dc:	4b05      	ldr	r3, [pc, #20]	@ (800d6f4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800d6de:	6a1a      	ldr	r2, [r3, #32]
 800d6e0:	4904      	ldr	r1, [pc, #16]	@ (800d6f4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	4313      	orrs	r3, r2
 800d6e6:	620b      	str	r3, [r1, #32]
}
 800d6e8:	bf00      	nop
 800d6ea:	370c      	adds	r7, #12
 800d6ec:	46bd      	mov	sp, r7
 800d6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f2:	4770      	bx	lr
 800d6f4:	58000800 	.word	0x58000800

0800d6f8 <LL_AHB3_GRP1_EnableClock>:
{
 800d6f8:	b480      	push	{r7}
 800d6fa:	b085      	sub	sp, #20
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800d700:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d704:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d706:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	4313      	orrs	r3, r2
 800d70e:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800d710:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d714:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	4013      	ands	r3, r2
 800d71a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800d71c:	68fb      	ldr	r3, [r7, #12]
}
 800d71e:	bf00      	nop
 800d720:	3714      	adds	r7, #20
 800d722:	46bd      	mov	sp, r7
 800d724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d728:	4770      	bx	lr

0800d72a <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800d72a:	b480      	push	{r7}
 800d72c:	b085      	sub	sp, #20
 800d72e:	af00      	add	r7, sp, #0
 800d730:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800d732:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d736:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800d73a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	4313      	orrs	r3, r2
 800d742:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800d746:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d74a:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	4013      	ands	r3, r2
 800d752:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800d754:	68fb      	ldr	r3, [r7, #12]
}
 800d756:	bf00      	nop
 800d758:	3714      	adds	r7, #20
 800d75a:	46bd      	mov	sp, r7
 800d75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d760:	4770      	bx	lr

0800d762 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 800d762:	b480      	push	{r7}
 800d764:	b083      	sub	sp, #12
 800d766:	af00      	add	r7, sp, #0
 800d768:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	601a      	str	r2, [r3, #0]
}
 800d776:	bf00      	nop
 800d778:	370c      	adds	r7, #12
 800d77a:	46bd      	mov	sp, r7
 800d77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d780:	4770      	bx	lr

0800d782 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 800d782:	b480      	push	{r7}
 800d784:	b083      	sub	sp, #12
 800d786:	af00      	add	r7, sp, #0
 800d788:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	f043 0201 	orr.w	r2, r3, #1
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	601a      	str	r2, [r3, #0]
}
 800d796:	bf00      	nop
 800d798:	370c      	adds	r7, #12
 800d79a:	46bd      	mov	sp, r7
 800d79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a0:	4770      	bx	lr

0800d7a2 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d7a2:	b480      	push	{r7}
 800d7a4:	b083      	sub	sp, #12
 800d7a6:	af00      	add	r7, sp, #0
 800d7a8:	6078      	str	r0, [r7, #4]
 800d7aa:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	685a      	ldr	r2, [r3, #4]
 800d7b0:	683b      	ldr	r3, [r7, #0]
 800d7b2:	041b      	lsls	r3, r3, #16
 800d7b4:	43db      	mvns	r3, r3
 800d7b6:	401a      	ands	r2, r3
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	605a      	str	r2, [r3, #4]
}
 800d7bc:	bf00      	nop
 800d7be:	370c      	adds	r7, #12
 800d7c0:	46bd      	mov	sp, r7
 800d7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c6:	4770      	bx	lr

0800d7c8 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d7c8:	b480      	push	{r7}
 800d7ca:	b083      	sub	sp, #12
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	6078      	str	r0, [r7, #4]
 800d7d0:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	685a      	ldr	r2, [r3, #4]
 800d7d6:	683b      	ldr	r3, [r7, #0]
 800d7d8:	041b      	lsls	r3, r3, #16
 800d7da:	431a      	orrs	r2, r3
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	605a      	str	r2, [r3, #4]
}
 800d7e0:	bf00      	nop
 800d7e2:	370c      	adds	r7, #12
 800d7e4:	46bd      	mov	sp, r7
 800d7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ea:	4770      	bx	lr

0800d7ec <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d7ec:	b480      	push	{r7}
 800d7ee:	b083      	sub	sp, #12
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	6078      	str	r0, [r7, #4]
 800d7f4:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	685a      	ldr	r2, [r3, #4]
 800d7fa:	683b      	ldr	r3, [r7, #0]
 800d7fc:	43db      	mvns	r3, r3
 800d7fe:	401a      	ands	r2, r3
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	605a      	str	r2, [r3, #4]
}
 800d804:	bf00      	nop
 800d806:	370c      	adds	r7, #12
 800d808:	46bd      	mov	sp, r7
 800d80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d80e:	4770      	bx	lr

0800d810 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d810:	b480      	push	{r7}
 800d812:	b083      	sub	sp, #12
 800d814:	af00      	add	r7, sp, #0
 800d816:	6078      	str	r0, [r7, #4]
 800d818:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	683a      	ldr	r2, [r7, #0]
 800d81e:	609a      	str	r2, [r3, #8]
}
 800d820:	bf00      	nop
 800d822:	370c      	adds	r7, #12
 800d824:	46bd      	mov	sp, r7
 800d826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d82a:	4770      	bx	lr

0800d82c <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d82c:	b480      	push	{r7}
 800d82e:	b083      	sub	sp, #12
 800d830:	af00      	add	r7, sp, #0
 800d832:	6078      	str	r0, [r7, #4]
 800d834:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800d836:	683b      	ldr	r3, [r7, #0]
 800d838:	041a      	lsls	r2, r3, #16
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	609a      	str	r2, [r3, #8]
}
 800d83e:	bf00      	nop
 800d840:	370c      	adds	r7, #12
 800d842:	46bd      	mov	sp, r7
 800d844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d848:	4770      	bx	lr

0800d84a <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800d84a:	b480      	push	{r7}
 800d84c:	b083      	sub	sp, #12
 800d84e:	af00      	add	r7, sp, #0
 800d850:	6078      	str	r0, [r7, #4]
 800d852:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	68da      	ldr	r2, [r3, #12]
 800d858:	683b      	ldr	r3, [r7, #0]
 800d85a:	4013      	ands	r3, r2
 800d85c:	683a      	ldr	r2, [r7, #0]
 800d85e:	429a      	cmp	r2, r3
 800d860:	d101      	bne.n	800d866 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800d862:	2301      	movs	r3, #1
 800d864:	e000      	b.n	800d868 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800d866:	2300      	movs	r3, #0
}
 800d868:	4618      	mov	r0, r3
 800d86a:	370c      	adds	r7, #12
 800d86c:	46bd      	mov	sp, r7
 800d86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d872:	4770      	bx	lr

0800d874 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800d874:	b480      	push	{r7}
 800d876:	b083      	sub	sp, #12
 800d878:	af00      	add	r7, sp, #0
 800d87a:	6078      	str	r0, [r7, #4]
 800d87c:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	69da      	ldr	r2, [r3, #28]
 800d882:	683b      	ldr	r3, [r7, #0]
 800d884:	4013      	ands	r3, r2
 800d886:	683a      	ldr	r2, [r7, #0]
 800d888:	429a      	cmp	r2, r3
 800d88a:	d101      	bne.n	800d890 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800d88c:	2301      	movs	r3, #1
 800d88e:	e000      	b.n	800d892 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800d890:	2300      	movs	r3, #0
}
 800d892:	4618      	mov	r0, r3
 800d894:	370c      	adds	r7, #12
 800d896:	46bd      	mov	sp, r7
 800d898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d89c:	4770      	bx	lr
	...

0800d8a0 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800d8a0:	b580      	push	{r7, lr}
 800d8a2:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800d8a4:	2102      	movs	r1, #2
 800d8a6:	4818      	ldr	r0, [pc, #96]	@ (800d908 <HW_IPCC_Rx_Handler+0x68>)
 800d8a8:	f7ff ffe4 	bl	800d874 <LL_C2_IPCC_IsActiveFlag_CHx>
 800d8ac:	4603      	mov	r3, r0
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d008      	beq.n	800d8c4 <HW_IPCC_Rx_Handler+0x24>
 800d8b2:	4b15      	ldr	r3, [pc, #84]	@ (800d908 <HW_IPCC_Rx_Handler+0x68>)
 800d8b4:	685b      	ldr	r3, [r3, #4]
 800d8b6:	f003 0302 	and.w	r3, r3, #2
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d102      	bne.n	800d8c4 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 800d8be:	f000 f8d5 	bl	800da6c <HW_IPCC_SYS_EvtHandler>
 800d8c2:	e01e      	b.n	800d902 <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800d8c4:	2101      	movs	r1, #1
 800d8c6:	4810      	ldr	r0, [pc, #64]	@ (800d908 <HW_IPCC_Rx_Handler+0x68>)
 800d8c8:	f7ff ffd4 	bl	800d874 <LL_C2_IPCC_IsActiveFlag_CHx>
 800d8cc:	4603      	mov	r3, r0
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d008      	beq.n	800d8e4 <HW_IPCC_Rx_Handler+0x44>
 800d8d2:	4b0d      	ldr	r3, [pc, #52]	@ (800d908 <HW_IPCC_Rx_Handler+0x68>)
 800d8d4:	685b      	ldr	r3, [r3, #4]
 800d8d6:	f003 0301 	and.w	r3, r3, #1
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d102      	bne.n	800d8e4 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 800d8de:	f000 f889 	bl	800d9f4 <HW_IPCC_BLE_EvtHandler>
 800d8e2:	e00e      	b.n	800d902 <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800d8e4:	2108      	movs	r1, #8
 800d8e6:	4808      	ldr	r0, [pc, #32]	@ (800d908 <HW_IPCC_Rx_Handler+0x68>)
 800d8e8:	f7ff ffc4 	bl	800d874 <LL_C2_IPCC_IsActiveFlag_CHx>
 800d8ec:	4603      	mov	r3, r0
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d008      	beq.n	800d904 <HW_IPCC_Rx_Handler+0x64>
 800d8f2:	4b05      	ldr	r3, [pc, #20]	@ (800d908 <HW_IPCC_Rx_Handler+0x68>)
 800d8f4:	685b      	ldr	r3, [r3, #4]
 800d8f6:	f003 0308 	and.w	r3, r3, #8
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d102      	bne.n	800d904 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 800d8fe:	f000 f901 	bl	800db04 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800d902:	bf00      	nop
 800d904:	bf00      	nop
}
 800d906:	bd80      	pop	{r7, pc}
 800d908:	58000c00 	.word	0x58000c00

0800d90c <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800d910:	2102      	movs	r1, #2
 800d912:	4818      	ldr	r0, [pc, #96]	@ (800d974 <HW_IPCC_Tx_Handler+0x68>)
 800d914:	f7ff ff99 	bl	800d84a <LL_C1_IPCC_IsActiveFlag_CHx>
 800d918:	4603      	mov	r3, r0
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d108      	bne.n	800d930 <HW_IPCC_Tx_Handler+0x24>
 800d91e:	4b15      	ldr	r3, [pc, #84]	@ (800d974 <HW_IPCC_Tx_Handler+0x68>)
 800d920:	685b      	ldr	r3, [r3, #4]
 800d922:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d926:	2b00      	cmp	r3, #0
 800d928:	d102      	bne.n	800d930 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800d92a:	f000 f893 	bl	800da54 <HW_IPCC_SYS_CmdEvtHandler>
 800d92e:	e01e      	b.n	800d96e <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800d930:	2108      	movs	r1, #8
 800d932:	4810      	ldr	r0, [pc, #64]	@ (800d974 <HW_IPCC_Tx_Handler+0x68>)
 800d934:	f7ff ff89 	bl	800d84a <LL_C1_IPCC_IsActiveFlag_CHx>
 800d938:	4603      	mov	r3, r0
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d108      	bne.n	800d950 <HW_IPCC_Tx_Handler+0x44>
 800d93e:	4b0d      	ldr	r3, [pc, #52]	@ (800d974 <HW_IPCC_Tx_Handler+0x68>)
 800d940:	685b      	ldr	r3, [r3, #4]
 800d942:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800d946:	2b00      	cmp	r3, #0
 800d948:	d102      	bne.n	800d950 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 800d94a:	f000 f8bd 	bl	800dac8 <HW_IPCC_MM_FreeBufHandler>
 800d94e:	e00e      	b.n	800d96e <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800d950:	2120      	movs	r1, #32
 800d952:	4808      	ldr	r0, [pc, #32]	@ (800d974 <HW_IPCC_Tx_Handler+0x68>)
 800d954:	f7ff ff79 	bl	800d84a <LL_C1_IPCC_IsActiveFlag_CHx>
 800d958:	4603      	mov	r3, r0
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d108      	bne.n	800d970 <HW_IPCC_Tx_Handler+0x64>
 800d95e:	4b05      	ldr	r3, [pc, #20]	@ (800d974 <HW_IPCC_Tx_Handler+0x68>)
 800d960:	685b      	ldr	r3, [r3, #4]
 800d962:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d966:	2b00      	cmp	r3, #0
 800d968:	d102      	bne.n	800d970 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800d96a:	f000 f84f 	bl	800da0c <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800d96e:	bf00      	nop
 800d970:	bf00      	nop
}
 800d972:	bd80      	pop	{r7, pc}
 800d974:	58000c00 	.word	0x58000c00

0800d978 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800d978:	b580      	push	{r7, lr}
 800d97a:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800d97c:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800d980:	f7ff fed3 	bl	800d72a <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800d984:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800d988:	f7ff fea4 	bl	800d6d4 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800d98c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800d990:	f7ff fe8c 	bl	800d6ac <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800d994:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800d996:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800d998:	f7ff fe78 	bl	800d68c <LL_PWR_EnableBootC2>

  return;
 800d99c:	bf00      	nop
}
 800d99e:	bd80      	pop	{r7, pc}

0800d9a0 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800d9a0:	b580      	push	{r7, lr}
 800d9a2:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800d9a4:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800d9a8:	f7ff fea6 	bl	800d6f8 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800d9ac:	4806      	ldr	r0, [pc, #24]	@ (800d9c8 <HW_IPCC_Init+0x28>)
 800d9ae:	f7ff fee8 	bl	800d782 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800d9b2:	4805      	ldr	r0, [pc, #20]	@ (800d9c8 <HW_IPCC_Init+0x28>)
 800d9b4:	f7ff fed5 	bl	800d762 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800d9b8:	202c      	movs	r0, #44	@ 0x2c
 800d9ba:	f7f6 feb2 	bl	8004722 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800d9be:	202d      	movs	r0, #45	@ 0x2d
 800d9c0:	f7f6 feaf 	bl	8004722 <HAL_NVIC_EnableIRQ>

  return;
 800d9c4:	bf00      	nop
}
 800d9c6:	bd80      	pop	{r7, pc}
 800d9c8:	58000c00 	.word	0x58000c00

0800d9cc <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800d9cc:	b580      	push	{r7, lr}
 800d9ce:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800d9d0:	2101      	movs	r1, #1
 800d9d2:	4802      	ldr	r0, [pc, #8]	@ (800d9dc <HW_IPCC_BLE_Init+0x10>)
 800d9d4:	f7ff ff0a 	bl	800d7ec <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800d9d8:	bf00      	nop
}
 800d9da:	bd80      	pop	{r7, pc}
 800d9dc:	58000c00 	.word	0x58000c00

0800d9e0 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800d9e0:	b580      	push	{r7, lr}
 800d9e2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800d9e4:	2101      	movs	r1, #1
 800d9e6:	4802      	ldr	r0, [pc, #8]	@ (800d9f0 <HW_IPCC_BLE_SendCmd+0x10>)
 800d9e8:	f7ff ff20 	bl	800d82c <LL_C1_IPCC_SetFlag_CHx>

  return;
 800d9ec:	bf00      	nop
}
 800d9ee:	bd80      	pop	{r7, pc}
 800d9f0:	58000c00 	.word	0x58000c00

0800d9f4 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800d9f8:	f7fd fd22 	bl	800b440 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800d9fc:	2101      	movs	r1, #1
 800d9fe:	4802      	ldr	r0, [pc, #8]	@ (800da08 <HW_IPCC_BLE_EvtHandler+0x14>)
 800da00:	f7ff ff06 	bl	800d810 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800da04:	bf00      	nop
}
 800da06:	bd80      	pop	{r7, pc}
 800da08:	58000c00 	.word	0x58000c00

0800da0c <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800da0c:	b580      	push	{r7, lr}
 800da0e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800da10:	2120      	movs	r1, #32
 800da12:	4803      	ldr	r0, [pc, #12]	@ (800da20 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800da14:	f7ff fed8 	bl	800d7c8 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800da18:	f7fd fd42 	bl	800b4a0 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800da1c:	bf00      	nop
}
 800da1e:	bd80      	pop	{r7, pc}
 800da20:	58000c00 	.word	0x58000c00

0800da24 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800da24:	b580      	push	{r7, lr}
 800da26:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800da28:	2102      	movs	r1, #2
 800da2a:	4802      	ldr	r0, [pc, #8]	@ (800da34 <HW_IPCC_SYS_Init+0x10>)
 800da2c:	f7ff fede 	bl	800d7ec <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800da30:	bf00      	nop
}
 800da32:	bd80      	pop	{r7, pc}
 800da34:	58000c00 	.word	0x58000c00

0800da38 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800da38:	b580      	push	{r7, lr}
 800da3a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800da3c:	2102      	movs	r1, #2
 800da3e:	4804      	ldr	r0, [pc, #16]	@ (800da50 <HW_IPCC_SYS_SendCmd+0x18>)
 800da40:	f7ff fef4 	bl	800d82c <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800da44:	2102      	movs	r1, #2
 800da46:	4802      	ldr	r0, [pc, #8]	@ (800da50 <HW_IPCC_SYS_SendCmd+0x18>)
 800da48:	f7ff feab 	bl	800d7a2 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800da4c:	bf00      	nop
}
 800da4e:	bd80      	pop	{r7, pc}
 800da50:	58000c00 	.word	0x58000c00

0800da54 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800da54:	b580      	push	{r7, lr}
 800da56:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800da58:	2102      	movs	r1, #2
 800da5a:	4803      	ldr	r0, [pc, #12]	@ (800da68 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800da5c:	f7ff feb4 	bl	800d7c8 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800da60:	f7fd fd6e 	bl	800b540 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800da64:	bf00      	nop
}
 800da66:	bd80      	pop	{r7, pc}
 800da68:	58000c00 	.word	0x58000c00

0800da6c <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800da6c:	b580      	push	{r7, lr}
 800da6e:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800da70:	f7fd fd7c 	bl	800b56c <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800da74:	2102      	movs	r1, #2
 800da76:	4802      	ldr	r0, [pc, #8]	@ (800da80 <HW_IPCC_SYS_EvtHandler+0x14>)
 800da78:	f7ff feca 	bl	800d810 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800da7c:	bf00      	nop
}
 800da7e:	bd80      	pop	{r7, pc}
 800da80:	58000c00 	.word	0x58000c00

0800da84 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800da84:	b580      	push	{r7, lr}
 800da86:	b082      	sub	sp, #8
 800da88:	af00      	add	r7, sp, #0
 800da8a:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800da8c:	2108      	movs	r1, #8
 800da8e:	480c      	ldr	r0, [pc, #48]	@ (800dac0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800da90:	f7ff fedb 	bl	800d84a <LL_C1_IPCC_IsActiveFlag_CHx>
 800da94:	4603      	mov	r3, r0
 800da96:	2b00      	cmp	r3, #0
 800da98:	d007      	beq.n	800daaa <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800da9a:	4a0a      	ldr	r2, [pc, #40]	@ (800dac4 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800daa0:	2108      	movs	r1, #8
 800daa2:	4807      	ldr	r0, [pc, #28]	@ (800dac0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800daa4:	f7ff fe7d 	bl	800d7a2 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800daa8:	e006      	b.n	800dab8 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800daae:	2108      	movs	r1, #8
 800dab0:	4803      	ldr	r0, [pc, #12]	@ (800dac0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800dab2:	f7ff febb 	bl	800d82c <LL_C1_IPCC_SetFlag_CHx>
  return;
 800dab6:	bf00      	nop
}
 800dab8:	3708      	adds	r7, #8
 800daba:	46bd      	mov	sp, r7
 800dabc:	bd80      	pop	{r7, pc}
 800dabe:	bf00      	nop
 800dac0:	58000c00 	.word	0x58000c00
 800dac4:	20003d64 	.word	0x20003d64

0800dac8 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800dac8:	b580      	push	{r7, lr}
 800daca:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800dacc:	2108      	movs	r1, #8
 800dace:	4806      	ldr	r0, [pc, #24]	@ (800dae8 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800dad0:	f7ff fe7a 	bl	800d7c8 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800dad4:	4b05      	ldr	r3, [pc, #20]	@ (800daec <HW_IPCC_MM_FreeBufHandler+0x24>)
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800dada:	2108      	movs	r1, #8
 800dadc:	4802      	ldr	r0, [pc, #8]	@ (800dae8 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800dade:	f7ff fea5 	bl	800d82c <LL_C1_IPCC_SetFlag_CHx>

  return;
 800dae2:	bf00      	nop
}
 800dae4:	bd80      	pop	{r7, pc}
 800dae6:	bf00      	nop
 800dae8:	58000c00 	.word	0x58000c00
 800daec:	20003d64 	.word	0x20003d64

0800daf0 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800daf0:	b580      	push	{r7, lr}
 800daf2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800daf4:	2108      	movs	r1, #8
 800daf6:	4802      	ldr	r0, [pc, #8]	@ (800db00 <HW_IPCC_TRACES_Init+0x10>)
 800daf8:	f7ff fe78 	bl	800d7ec <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800dafc:	bf00      	nop
}
 800dafe:	bd80      	pop	{r7, pc}
 800db00:	58000c00 	.word	0x58000c00

0800db04 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800db04:	b580      	push	{r7, lr}
 800db06:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800db08:	f7fd fdd8 	bl	800b6bc <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800db0c:	2108      	movs	r1, #8
 800db0e:	4802      	ldr	r0, [pc, #8]	@ (800db18 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800db10:	f7ff fe7e 	bl	800d810 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800db14:	bf00      	nop
}
 800db16:	bd80      	pop	{r7, pc}
 800db18:	58000c00 	.word	0x58000c00

0800db1c <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800db1c:	b480      	push	{r7}
 800db1e:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800db20:	4b05      	ldr	r3, [pc, #20]	@ (800db38 <UTIL_LPM_Init+0x1c>)
 800db22:	2200      	movs	r2, #0
 800db24:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800db26:	4b05      	ldr	r3, [pc, #20]	@ (800db3c <UTIL_LPM_Init+0x20>)
 800db28:	2200      	movs	r2, #0
 800db2a:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800db2c:	bf00      	nop
 800db2e:	46bd      	mov	sp, r7
 800db30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db34:	4770      	bx	lr
 800db36:	bf00      	nop
 800db38:	20003d68 	.word	0x20003d68
 800db3c:	20003d6c 	.word	0x20003d6c

0800db40 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800db40:	b480      	push	{r7}
 800db42:	b087      	sub	sp, #28
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
 800db48:	460b      	mov	r3, r1
 800db4a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800db4c:	f3ef 8310 	mrs	r3, PRIMASK
 800db50:	613b      	str	r3, [r7, #16]
  return(result);
 800db52:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800db54:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800db56:	b672      	cpsid	i
}
 800db58:	bf00      	nop
  
  switch(state)
 800db5a:	78fb      	ldrb	r3, [r7, #3]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d008      	beq.n	800db72 <UTIL_LPM_SetOffMode+0x32>
 800db60:	2b01      	cmp	r3, #1
 800db62:	d10e      	bne.n	800db82 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800db64:	4b0d      	ldr	r3, [pc, #52]	@ (800db9c <UTIL_LPM_SetOffMode+0x5c>)
 800db66:	681a      	ldr	r2, [r3, #0]
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	4313      	orrs	r3, r2
 800db6c:	4a0b      	ldr	r2, [pc, #44]	@ (800db9c <UTIL_LPM_SetOffMode+0x5c>)
 800db6e:	6013      	str	r3, [r2, #0]
      break;
 800db70:	e008      	b.n	800db84 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	43da      	mvns	r2, r3
 800db76:	4b09      	ldr	r3, [pc, #36]	@ (800db9c <UTIL_LPM_SetOffMode+0x5c>)
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	4013      	ands	r3, r2
 800db7c:	4a07      	ldr	r2, [pc, #28]	@ (800db9c <UTIL_LPM_SetOffMode+0x5c>)
 800db7e:	6013      	str	r3, [r2, #0]
      break;
 800db80:	e000      	b.n	800db84 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800db82:	bf00      	nop
 800db84:	697b      	ldr	r3, [r7, #20]
 800db86:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	f383 8810 	msr	PRIMASK, r3
}
 800db8e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800db90:	bf00      	nop
 800db92:	371c      	adds	r7, #28
 800db94:	46bd      	mov	sp, r7
 800db96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db9a:	4770      	bx	lr
 800db9c:	20003d6c 	.word	0x20003d6c

0800dba0 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800dba0:	b580      	push	{r7, lr}
 800dba2:	b090      	sub	sp, #64	@ 0x40
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800dba8:	4b73      	ldr	r3, [pc, #460]	@ (800dd78 <UTIL_SEQ_Run+0x1d8>)
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 800dbae:	4b72      	ldr	r3, [pc, #456]	@ (800dd78 <UTIL_SEQ_Run+0x1d8>)
 800dbb0:	681a      	ldr	r2, [r3, #0]
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	4013      	ands	r3, r2
 800dbb6:	4a70      	ldr	r2, [pc, #448]	@ (800dd78 <UTIL_SEQ_Run+0x1d8>)
 800dbb8:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800dbba:	4b70      	ldr	r3, [pc, #448]	@ (800dd7c <UTIL_SEQ_Run+0x1dc>)
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800dbc0:	4b6f      	ldr	r3, [pc, #444]	@ (800dd80 <UTIL_SEQ_Run+0x1e0>)
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800dbc6:	4b6f      	ldr	r3, [pc, #444]	@ (800dd84 <UTIL_SEQ_Run+0x1e4>)
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 800dbcc:	4b6e      	ldr	r3, [pc, #440]	@ (800dd88 <UTIL_SEQ_Run+0x1e8>)
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800dbd2:	e08d      	b.n	800dcf0 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800dbd8:	e002      	b.n	800dbe0 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800dbda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dbdc:	3301      	adds	r3, #1
 800dbde:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800dbe0:	4a6a      	ldr	r2, [pc, #424]	@ (800dd8c <UTIL_SEQ_Run+0x1ec>)
 800dbe2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dbe4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800dbe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbea:	401a      	ands	r2, r3
 800dbec:	4b62      	ldr	r3, [pc, #392]	@ (800dd78 <UTIL_SEQ_Run+0x1d8>)
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	4013      	ands	r3, r2
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d0f1      	beq.n	800dbda <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800dbf6:	4a65      	ldr	r2, [pc, #404]	@ (800dd8c <UTIL_SEQ_Run+0x1ec>)
 800dbf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dbfa:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800dbfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc00:	401a      	ands	r2, r3
 800dc02:	4b5d      	ldr	r3, [pc, #372]	@ (800dd78 <UTIL_SEQ_Run+0x1d8>)
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	4013      	ands	r3, r2
 800dc08:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800dc0a:	4a60      	ldr	r2, [pc, #384]	@ (800dd8c <UTIL_SEQ_Run+0x1ec>)
 800dc0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc0e:	00db      	lsls	r3, r3, #3
 800dc10:	4413      	add	r3, r2
 800dc12:	685a      	ldr	r2, [r3, #4]
 800dc14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc16:	4013      	ands	r3, r2
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d106      	bne.n	800dc2a <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800dc1c:	4a5b      	ldr	r2, [pc, #364]	@ (800dd8c <UTIL_SEQ_Run+0x1ec>)
 800dc1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc20:	00db      	lsls	r3, r3, #3
 800dc22:	4413      	add	r3, r2
 800dc24:	f04f 32ff 	mov.w	r2, #4294967295
 800dc28:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800dc2a:	4a58      	ldr	r2, [pc, #352]	@ (800dd8c <UTIL_SEQ_Run+0x1ec>)
 800dc2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc2e:	00db      	lsls	r3, r3, #3
 800dc30:	4413      	add	r3, r2
 800dc32:	685a      	ldr	r2, [r3, #4]
 800dc34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc36:	4013      	ands	r3, r2
 800dc38:	4618      	mov	r0, r3
 800dc3a:	f000 f9b3 	bl	800dfa4 <SEQ_BitPosition>
 800dc3e:	4603      	mov	r3, r0
 800dc40:	461a      	mov	r2, r3
 800dc42:	4b53      	ldr	r3, [pc, #332]	@ (800dd90 <UTIL_SEQ_Run+0x1f0>)
 800dc44:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800dc46:	4a51      	ldr	r2, [pc, #324]	@ (800dd8c <UTIL_SEQ_Run+0x1ec>)
 800dc48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc4a:	00db      	lsls	r3, r3, #3
 800dc4c:	4413      	add	r3, r2
 800dc4e:	685a      	ldr	r2, [r3, #4]
 800dc50:	4b4f      	ldr	r3, [pc, #316]	@ (800dd90 <UTIL_SEQ_Run+0x1f0>)
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	2101      	movs	r1, #1
 800dc56:	fa01 f303 	lsl.w	r3, r1, r3
 800dc5a:	43db      	mvns	r3, r3
 800dc5c:	401a      	ands	r2, r3
 800dc5e:	494b      	ldr	r1, [pc, #300]	@ (800dd8c <UTIL_SEQ_Run+0x1ec>)
 800dc60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc62:	00db      	lsls	r3, r3, #3
 800dc64:	440b      	add	r3, r1
 800dc66:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dc68:	f3ef 8310 	mrs	r3, PRIMASK
 800dc6c:	61bb      	str	r3, [r7, #24]
  return(result);
 800dc6e:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800dc70:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800dc72:	b672      	cpsid	i
}
 800dc74:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800dc76:	4b46      	ldr	r3, [pc, #280]	@ (800dd90 <UTIL_SEQ_Run+0x1f0>)
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	2201      	movs	r2, #1
 800dc7c:	fa02 f303 	lsl.w	r3, r2, r3
 800dc80:	43da      	mvns	r2, r3
 800dc82:	4b3e      	ldr	r3, [pc, #248]	@ (800dd7c <UTIL_SEQ_Run+0x1dc>)
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	4013      	ands	r3, r2
 800dc88:	4a3c      	ldr	r2, [pc, #240]	@ (800dd7c <UTIL_SEQ_Run+0x1dc>)
 800dc8a:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800dc8c:	2301      	movs	r3, #1
 800dc8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dc90:	e013      	b.n	800dcba <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800dc92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc94:	3b01      	subs	r3, #1
 800dc96:	4a3d      	ldr	r2, [pc, #244]	@ (800dd8c <UTIL_SEQ_Run+0x1ec>)
 800dc98:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800dc9c:	4b3c      	ldr	r3, [pc, #240]	@ (800dd90 <UTIL_SEQ_Run+0x1f0>)
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	2201      	movs	r2, #1
 800dca2:	fa02 f303 	lsl.w	r3, r2, r3
 800dca6:	43da      	mvns	r2, r3
 800dca8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dcaa:	3b01      	subs	r3, #1
 800dcac:	400a      	ands	r2, r1
 800dcae:	4937      	ldr	r1, [pc, #220]	@ (800dd8c <UTIL_SEQ_Run+0x1ec>)
 800dcb0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800dcb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dcb6:	3b01      	subs	r3, #1
 800dcb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dcba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d1e8      	bne.n	800dc92 <UTIL_SEQ_Run+0xf2>
 800dcc0:	6a3b      	ldr	r3, [r7, #32]
 800dcc2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dcc4:	697b      	ldr	r3, [r7, #20]
 800dcc6:	f383 8810 	msr	PRIMASK, r3
}
 800dcca:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800dccc:	4b30      	ldr	r3, [pc, #192]	@ (800dd90 <UTIL_SEQ_Run+0x1f0>)
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	4a30      	ldr	r2, [pc, #192]	@ (800dd94 <UTIL_SEQ_Run+0x1f4>)
 800dcd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dcd6:	4798      	blx	r3

    local_taskset = TaskSet;
 800dcd8:	4b28      	ldr	r3, [pc, #160]	@ (800dd7c <UTIL_SEQ_Run+0x1dc>)
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 800dcde:	4b28      	ldr	r3, [pc, #160]	@ (800dd80 <UTIL_SEQ_Run+0x1e0>)
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 800dce4:	4b27      	ldr	r3, [pc, #156]	@ (800dd84 <UTIL_SEQ_Run+0x1e4>)
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 800dcea:	4b27      	ldr	r3, [pc, #156]	@ (800dd88 <UTIL_SEQ_Run+0x1e8>)
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800dcf0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dcf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcf4:	401a      	ands	r2, r3
 800dcf6:	4b20      	ldr	r3, [pc, #128]	@ (800dd78 <UTIL_SEQ_Run+0x1d8>)
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	4013      	ands	r3, r2
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d005      	beq.n	800dd0c <UTIL_SEQ_Run+0x16c>
 800dd00:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dd02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd04:	4013      	ands	r3, r2
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	f43f af64 	beq.w	800dbd4 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800dd0c:	4b20      	ldr	r3, [pc, #128]	@ (800dd90 <UTIL_SEQ_Run+0x1f0>)
 800dd0e:	f04f 32ff 	mov.w	r2, #4294967295
 800dd12:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800dd14:	f000 f938 	bl	800df88 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dd18:	f3ef 8310 	mrs	r3, PRIMASK
 800dd1c:	613b      	str	r3, [r7, #16]
  return(result);
 800dd1e:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800dd20:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800dd22:	b672      	cpsid	i
}
 800dd24:	bf00      	nop
  local_taskset = TaskSet;
 800dd26:	4b15      	ldr	r3, [pc, #84]	@ (800dd7c <UTIL_SEQ_Run+0x1dc>)
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800dd2c:	4b14      	ldr	r3, [pc, #80]	@ (800dd80 <UTIL_SEQ_Run+0x1e0>)
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800dd32:	4b14      	ldr	r3, [pc, #80]	@ (800dd84 <UTIL_SEQ_Run+0x1e4>)
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800dd38:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dd3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd3c:	401a      	ands	r2, r3
 800dd3e:	4b0e      	ldr	r3, [pc, #56]	@ (800dd78 <UTIL_SEQ_Run+0x1d8>)
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	4013      	ands	r3, r2
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d107      	bne.n	800dd58 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800dd48:	4b0f      	ldr	r3, [pc, #60]	@ (800dd88 <UTIL_SEQ_Run+0x1e8>)
 800dd4a:	681a      	ldr	r2, [r3, #0]
 800dd4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd4e:	4013      	ands	r3, r2
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d101      	bne.n	800dd58 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800dd54:	f7f4 fe04 	bl	8002960 <UTIL_SEQ_Idle>
 800dd58:	69fb      	ldr	r3, [r7, #28]
 800dd5a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	f383 8810 	msr	PRIMASK, r3
}
 800dd62:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800dd64:	f000 f917 	bl	800df96 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800dd68:	4a03      	ldr	r2, [pc, #12]	@ (800dd78 <UTIL_SEQ_Run+0x1d8>)
 800dd6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd6c:	6013      	str	r3, [r2, #0]

  return;
 800dd6e:	bf00      	nop
}
 800dd70:	3740      	adds	r7, #64	@ 0x40
 800dd72:	46bd      	mov	sp, r7
 800dd74:	bd80      	pop	{r7, pc}
 800dd76:	bf00      	nop
 800dd78:	20000030 	.word	0x20000030
 800dd7c:	20003d70 	.word	0x20003d70
 800dd80:	20003d74 	.word	0x20003d74
 800dd84:	2000002c 	.word	0x2000002c
 800dd88:	20003d78 	.word	0x20003d78
 800dd8c:	20003e00 	.word	0x20003e00
 800dd90:	20003d7c 	.word	0x20003d7c
 800dd94:	20003d80 	.word	0x20003d80

0800dd98 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	b088      	sub	sp, #32
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	60f8      	str	r0, [r7, #12]
 800dda0:	60b9      	str	r1, [r7, #8]
 800dda2:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dda4:	f3ef 8310 	mrs	r3, PRIMASK
 800dda8:	617b      	str	r3, [r7, #20]
  return(result);
 800ddaa:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800ddac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800ddae:	b672      	cpsid	i
}
 800ddb0:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800ddb2:	68f8      	ldr	r0, [r7, #12]
 800ddb4:	f000 f8f6 	bl	800dfa4 <SEQ_BitPosition>
 800ddb8:	4603      	mov	r3, r0
 800ddba:	4619      	mov	r1, r3
 800ddbc:	4a06      	ldr	r2, [pc, #24]	@ (800ddd8 <UTIL_SEQ_RegTask+0x40>)
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800ddc4:	69fb      	ldr	r3, [r7, #28]
 800ddc6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ddc8:	69bb      	ldr	r3, [r7, #24]
 800ddca:	f383 8810 	msr	PRIMASK, r3
}
 800ddce:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800ddd0:	bf00      	nop
}
 800ddd2:	3720      	adds	r7, #32
 800ddd4:	46bd      	mov	sp, r7
 800ddd6:	bd80      	pop	{r7, pc}
 800ddd8:	20003d80 	.word	0x20003d80

0800dddc <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800dddc:	b480      	push	{r7}
 800ddde:	b087      	sub	sp, #28
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	6078      	str	r0, [r7, #4]
 800dde4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dde6:	f3ef 8310 	mrs	r3, PRIMASK
 800ddea:	60fb      	str	r3, [r7, #12]
  return(result);
 800ddec:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800ddee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ddf0:	b672      	cpsid	i
}
 800ddf2:	bf00      	nop

  TaskSet |= TaskId_bm;
 800ddf4:	4b0d      	ldr	r3, [pc, #52]	@ (800de2c <UTIL_SEQ_SetTask+0x50>)
 800ddf6:	681a      	ldr	r2, [r3, #0]
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	4313      	orrs	r3, r2
 800ddfc:	4a0b      	ldr	r2, [pc, #44]	@ (800de2c <UTIL_SEQ_SetTask+0x50>)
 800ddfe:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800de00:	4a0b      	ldr	r2, [pc, #44]	@ (800de30 <UTIL_SEQ_SetTask+0x54>)
 800de02:	683b      	ldr	r3, [r7, #0]
 800de04:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	431a      	orrs	r2, r3
 800de0c:	4908      	ldr	r1, [pc, #32]	@ (800de30 <UTIL_SEQ_SetTask+0x54>)
 800de0e:	683b      	ldr	r3, [r7, #0]
 800de10:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800de14:	697b      	ldr	r3, [r7, #20]
 800de16:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800de18:	693b      	ldr	r3, [r7, #16]
 800de1a:	f383 8810 	msr	PRIMASK, r3
}
 800de1e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800de20:	bf00      	nop
}
 800de22:	371c      	adds	r7, #28
 800de24:	46bd      	mov	sp, r7
 800de26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de2a:	4770      	bx	lr
 800de2c:	20003d70 	.word	0x20003d70
 800de30:	20003e00 	.word	0x20003e00

0800de34 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800de34:	b480      	push	{r7}
 800de36:	b087      	sub	sp, #28
 800de38:	af00      	add	r7, sp, #0
 800de3a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800de3c:	f3ef 8310 	mrs	r3, PRIMASK
 800de40:	60fb      	str	r3, [r7, #12]
  return(result);
 800de42:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800de44:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800de46:	b672      	cpsid	i
}
 800de48:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	43da      	mvns	r2, r3
 800de4e:	4b08      	ldr	r3, [pc, #32]	@ (800de70 <UTIL_SEQ_PauseTask+0x3c>)
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	4013      	ands	r3, r2
 800de54:	4a06      	ldr	r2, [pc, #24]	@ (800de70 <UTIL_SEQ_PauseTask+0x3c>)
 800de56:	6013      	str	r3, [r2, #0]
 800de58:	697b      	ldr	r3, [r7, #20]
 800de5a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800de5c:	693b      	ldr	r3, [r7, #16]
 800de5e:	f383 8810 	msr	PRIMASK, r3
}
 800de62:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800de64:	bf00      	nop
}
 800de66:	371c      	adds	r7, #28
 800de68:	46bd      	mov	sp, r7
 800de6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de6e:	4770      	bx	lr
 800de70:	2000002c 	.word	0x2000002c

0800de74 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800de74:	b480      	push	{r7}
 800de76:	b087      	sub	sp, #28
 800de78:	af00      	add	r7, sp, #0
 800de7a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800de7c:	f3ef 8310 	mrs	r3, PRIMASK
 800de80:	60fb      	str	r3, [r7, #12]
  return(result);
 800de82:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800de84:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800de86:	b672      	cpsid	i
}
 800de88:	bf00      	nop

  TaskMask |= TaskId_bm;
 800de8a:	4b09      	ldr	r3, [pc, #36]	@ (800deb0 <UTIL_SEQ_ResumeTask+0x3c>)
 800de8c:	681a      	ldr	r2, [r3, #0]
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	4313      	orrs	r3, r2
 800de92:	4a07      	ldr	r2, [pc, #28]	@ (800deb0 <UTIL_SEQ_ResumeTask+0x3c>)
 800de94:	6013      	str	r3, [r2, #0]
 800de96:	697b      	ldr	r3, [r7, #20]
 800de98:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800de9a:	693b      	ldr	r3, [r7, #16]
 800de9c:	f383 8810 	msr	PRIMASK, r3
}
 800dea0:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800dea2:	bf00      	nop
}
 800dea4:	371c      	adds	r7, #28
 800dea6:	46bd      	mov	sp, r7
 800dea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deac:	4770      	bx	lr
 800deae:	bf00      	nop
 800deb0:	2000002c 	.word	0x2000002c

0800deb4 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800deb4:	b480      	push	{r7}
 800deb6:	b087      	sub	sp, #28
 800deb8:	af00      	add	r7, sp, #0
 800deba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800debc:	f3ef 8310 	mrs	r3, PRIMASK
 800dec0:	60fb      	str	r3, [r7, #12]
  return(result);
 800dec2:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800dec4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800dec6:	b672      	cpsid	i
}
 800dec8:	bf00      	nop

  EvtSet |= EvtId_bm;
 800deca:	4b09      	ldr	r3, [pc, #36]	@ (800def0 <UTIL_SEQ_SetEvt+0x3c>)
 800decc:	681a      	ldr	r2, [r3, #0]
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	4313      	orrs	r3, r2
 800ded2:	4a07      	ldr	r2, [pc, #28]	@ (800def0 <UTIL_SEQ_SetEvt+0x3c>)
 800ded4:	6013      	str	r3, [r2, #0]
 800ded6:	697b      	ldr	r3, [r7, #20]
 800ded8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800deda:	693b      	ldr	r3, [r7, #16]
 800dedc:	f383 8810 	msr	PRIMASK, r3
}
 800dee0:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800dee2:	bf00      	nop
}
 800dee4:	371c      	adds	r7, #28
 800dee6:	46bd      	mov	sp, r7
 800dee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deec:	4770      	bx	lr
 800deee:	bf00      	nop
 800def0:	20003d74 	.word	0x20003d74

0800def4 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800def4:	b580      	push	{r7, lr}
 800def6:	b088      	sub	sp, #32
 800def8:	af00      	add	r7, sp, #0
 800defa:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800defc:	4b1f      	ldr	r3, [pc, #124]	@ (800df7c <UTIL_SEQ_WaitEvt+0x88>)
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800df02:	4b1e      	ldr	r3, [pc, #120]	@ (800df7c <UTIL_SEQ_WaitEvt+0x88>)
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df0a:	d102      	bne.n	800df12 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800df0c:	2300      	movs	r3, #0
 800df0e:	61fb      	str	r3, [r7, #28]
 800df10:	e005      	b.n	800df1e <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800df12:	4b1a      	ldr	r3, [pc, #104]	@ (800df7c <UTIL_SEQ_WaitEvt+0x88>)
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	2201      	movs	r2, #1
 800df18:	fa02 f303 	lsl.w	r3, r2, r3
 800df1c:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800df1e:	4b18      	ldr	r3, [pc, #96]	@ (800df80 <UTIL_SEQ_WaitEvt+0x8c>)
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800df24:	4a16      	ldr	r2, [pc, #88]	@ (800df80 <UTIL_SEQ_WaitEvt+0x8c>)
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800df2a:	e003      	b.n	800df34 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800df2c:	6879      	ldr	r1, [r7, #4]
 800df2e:	69f8      	ldr	r0, [r7, #28]
 800df30:	f7f4 fd1d 	bl	800296e <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800df34:	4b13      	ldr	r3, [pc, #76]	@ (800df84 <UTIL_SEQ_WaitEvt+0x90>)
 800df36:	681a      	ldr	r2, [r3, #0]
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	4013      	ands	r3, r2
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d0f5      	beq.n	800df2c <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800df40:	4a0e      	ldr	r2, [pc, #56]	@ (800df7c <UTIL_SEQ_WaitEvt+0x88>)
 800df42:	69bb      	ldr	r3, [r7, #24]
 800df44:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800df46:	f3ef 8310 	mrs	r3, PRIMASK
 800df4a:	60bb      	str	r3, [r7, #8]
  return(result);
 800df4c:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800df4e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800df50:	b672      	cpsid	i
}
 800df52:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	43da      	mvns	r2, r3
 800df58:	4b0a      	ldr	r3, [pc, #40]	@ (800df84 <UTIL_SEQ_WaitEvt+0x90>)
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	4013      	ands	r3, r2
 800df5e:	4a09      	ldr	r2, [pc, #36]	@ (800df84 <UTIL_SEQ_WaitEvt+0x90>)
 800df60:	6013      	str	r3, [r2, #0]
 800df62:	693b      	ldr	r3, [r7, #16]
 800df64:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	f383 8810 	msr	PRIMASK, r3
}
 800df6c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800df6e:	4a04      	ldr	r2, [pc, #16]	@ (800df80 <UTIL_SEQ_WaitEvt+0x8c>)
 800df70:	697b      	ldr	r3, [r7, #20]
 800df72:	6013      	str	r3, [r2, #0]
  return;
 800df74:	bf00      	nop
}
 800df76:	3720      	adds	r7, #32
 800df78:	46bd      	mov	sp, r7
 800df7a:	bd80      	pop	{r7, pc}
 800df7c:	20003d7c 	.word	0x20003d7c
 800df80:	20003d78 	.word	0x20003d78
 800df84:	20003d74 	.word	0x20003d74

0800df88 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800df88:	b480      	push	{r7}
 800df8a:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800df8c:	bf00      	nop
}
 800df8e:	46bd      	mov	sp, r7
 800df90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df94:	4770      	bx	lr

0800df96 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800df96:	b480      	push	{r7}
 800df98:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800df9a:	bf00      	nop
}
 800df9c:	46bd      	mov	sp, r7
 800df9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa2:	4770      	bx	lr

0800dfa4 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800dfa4:	b480      	push	{r7}
 800dfa6:	b085      	sub	sp, #20
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	6078      	str	r0, [r7, #4]
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	60fb      	str	r3, [r7, #12]
  if (value == 0U)
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d101      	bne.n	800dfba <SEQ_BitPosition+0x16>
    return 32U;
 800dfb6:	2320      	movs	r3, #32
 800dfb8:	e003      	b.n	800dfc2 <SEQ_BitPosition+0x1e>
  return __builtin_clz(value);
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	fab3 f383 	clz	r3, r3
 800dfc0:	b2db      	uxtb	r3, r3
  return (uint8_t)(31 -__CLZ( Value ));
 800dfc2:	f1c3 031f 	rsb	r3, r3, #31
 800dfc6:	b2db      	uxtb	r3, r3
}
 800dfc8:	4618      	mov	r0, r3
 800dfca:	3714      	adds	r7, #20
 800dfcc:	46bd      	mov	sp, r7
 800dfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd2:	4770      	bx	lr

0800dfd4 <__cvt>:
 800dfd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dfd8:	ec57 6b10 	vmov	r6, r7, d0
 800dfdc:	2f00      	cmp	r7, #0
 800dfde:	460c      	mov	r4, r1
 800dfe0:	4619      	mov	r1, r3
 800dfe2:	463b      	mov	r3, r7
 800dfe4:	bfbb      	ittet	lt
 800dfe6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800dfea:	461f      	movlt	r7, r3
 800dfec:	2300      	movge	r3, #0
 800dfee:	232d      	movlt	r3, #45	@ 0x2d
 800dff0:	700b      	strb	r3, [r1, #0]
 800dff2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800dff4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800dff8:	4691      	mov	r9, r2
 800dffa:	f023 0820 	bic.w	r8, r3, #32
 800dffe:	bfbc      	itt	lt
 800e000:	4632      	movlt	r2, r6
 800e002:	4616      	movlt	r6, r2
 800e004:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e008:	d005      	beq.n	800e016 <__cvt+0x42>
 800e00a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800e00e:	d100      	bne.n	800e012 <__cvt+0x3e>
 800e010:	3401      	adds	r4, #1
 800e012:	2102      	movs	r1, #2
 800e014:	e000      	b.n	800e018 <__cvt+0x44>
 800e016:	2103      	movs	r1, #3
 800e018:	ab03      	add	r3, sp, #12
 800e01a:	9301      	str	r3, [sp, #4]
 800e01c:	ab02      	add	r3, sp, #8
 800e01e:	9300      	str	r3, [sp, #0]
 800e020:	ec47 6b10 	vmov	d0, r6, r7
 800e024:	4653      	mov	r3, sl
 800e026:	4622      	mov	r2, r4
 800e028:	f001 f9a6 	bl	800f378 <_dtoa_r>
 800e02c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800e030:	4605      	mov	r5, r0
 800e032:	d119      	bne.n	800e068 <__cvt+0x94>
 800e034:	f019 0f01 	tst.w	r9, #1
 800e038:	d00e      	beq.n	800e058 <__cvt+0x84>
 800e03a:	eb00 0904 	add.w	r9, r0, r4
 800e03e:	2200      	movs	r2, #0
 800e040:	2300      	movs	r3, #0
 800e042:	4630      	mov	r0, r6
 800e044:	4639      	mov	r1, r7
 800e046:	f7f2 fd17 	bl	8000a78 <__aeabi_dcmpeq>
 800e04a:	b108      	cbz	r0, 800e050 <__cvt+0x7c>
 800e04c:	f8cd 900c 	str.w	r9, [sp, #12]
 800e050:	2230      	movs	r2, #48	@ 0x30
 800e052:	9b03      	ldr	r3, [sp, #12]
 800e054:	454b      	cmp	r3, r9
 800e056:	d31e      	bcc.n	800e096 <__cvt+0xc2>
 800e058:	9b03      	ldr	r3, [sp, #12]
 800e05a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e05c:	1b5b      	subs	r3, r3, r5
 800e05e:	4628      	mov	r0, r5
 800e060:	6013      	str	r3, [r2, #0]
 800e062:	b004      	add	sp, #16
 800e064:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e068:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e06c:	eb00 0904 	add.w	r9, r0, r4
 800e070:	d1e5      	bne.n	800e03e <__cvt+0x6a>
 800e072:	7803      	ldrb	r3, [r0, #0]
 800e074:	2b30      	cmp	r3, #48	@ 0x30
 800e076:	d10a      	bne.n	800e08e <__cvt+0xba>
 800e078:	2200      	movs	r2, #0
 800e07a:	2300      	movs	r3, #0
 800e07c:	4630      	mov	r0, r6
 800e07e:	4639      	mov	r1, r7
 800e080:	f7f2 fcfa 	bl	8000a78 <__aeabi_dcmpeq>
 800e084:	b918      	cbnz	r0, 800e08e <__cvt+0xba>
 800e086:	f1c4 0401 	rsb	r4, r4, #1
 800e08a:	f8ca 4000 	str.w	r4, [sl]
 800e08e:	f8da 3000 	ldr.w	r3, [sl]
 800e092:	4499      	add	r9, r3
 800e094:	e7d3      	b.n	800e03e <__cvt+0x6a>
 800e096:	1c59      	adds	r1, r3, #1
 800e098:	9103      	str	r1, [sp, #12]
 800e09a:	701a      	strb	r2, [r3, #0]
 800e09c:	e7d9      	b.n	800e052 <__cvt+0x7e>

0800e09e <__exponent>:
 800e09e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e0a0:	2900      	cmp	r1, #0
 800e0a2:	bfba      	itte	lt
 800e0a4:	4249      	neglt	r1, r1
 800e0a6:	232d      	movlt	r3, #45	@ 0x2d
 800e0a8:	232b      	movge	r3, #43	@ 0x2b
 800e0aa:	2909      	cmp	r1, #9
 800e0ac:	7002      	strb	r2, [r0, #0]
 800e0ae:	7043      	strb	r3, [r0, #1]
 800e0b0:	dd29      	ble.n	800e106 <__exponent+0x68>
 800e0b2:	f10d 0307 	add.w	r3, sp, #7
 800e0b6:	461d      	mov	r5, r3
 800e0b8:	270a      	movs	r7, #10
 800e0ba:	461a      	mov	r2, r3
 800e0bc:	fbb1 f6f7 	udiv	r6, r1, r7
 800e0c0:	fb07 1416 	mls	r4, r7, r6, r1
 800e0c4:	3430      	adds	r4, #48	@ 0x30
 800e0c6:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e0ca:	460c      	mov	r4, r1
 800e0cc:	2c63      	cmp	r4, #99	@ 0x63
 800e0ce:	f103 33ff 	add.w	r3, r3, #4294967295
 800e0d2:	4631      	mov	r1, r6
 800e0d4:	dcf1      	bgt.n	800e0ba <__exponent+0x1c>
 800e0d6:	3130      	adds	r1, #48	@ 0x30
 800e0d8:	1e94      	subs	r4, r2, #2
 800e0da:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e0de:	1c41      	adds	r1, r0, #1
 800e0e0:	4623      	mov	r3, r4
 800e0e2:	42ab      	cmp	r3, r5
 800e0e4:	d30a      	bcc.n	800e0fc <__exponent+0x5e>
 800e0e6:	f10d 0309 	add.w	r3, sp, #9
 800e0ea:	1a9b      	subs	r3, r3, r2
 800e0ec:	42ac      	cmp	r4, r5
 800e0ee:	bf88      	it	hi
 800e0f0:	2300      	movhi	r3, #0
 800e0f2:	3302      	adds	r3, #2
 800e0f4:	4403      	add	r3, r0
 800e0f6:	1a18      	subs	r0, r3, r0
 800e0f8:	b003      	add	sp, #12
 800e0fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e0fc:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e100:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e104:	e7ed      	b.n	800e0e2 <__exponent+0x44>
 800e106:	2330      	movs	r3, #48	@ 0x30
 800e108:	3130      	adds	r1, #48	@ 0x30
 800e10a:	7083      	strb	r3, [r0, #2]
 800e10c:	70c1      	strb	r1, [r0, #3]
 800e10e:	1d03      	adds	r3, r0, #4
 800e110:	e7f1      	b.n	800e0f6 <__exponent+0x58>
	...

0800e114 <_printf_float>:
 800e114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e118:	b08d      	sub	sp, #52	@ 0x34
 800e11a:	460c      	mov	r4, r1
 800e11c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e120:	4616      	mov	r6, r2
 800e122:	461f      	mov	r7, r3
 800e124:	4605      	mov	r5, r0
 800e126:	f001 f811 	bl	800f14c <_localeconv_r>
 800e12a:	6803      	ldr	r3, [r0, #0]
 800e12c:	9304      	str	r3, [sp, #16]
 800e12e:	4618      	mov	r0, r3
 800e130:	f7f2 f876 	bl	8000220 <strlen>
 800e134:	2300      	movs	r3, #0
 800e136:	930a      	str	r3, [sp, #40]	@ 0x28
 800e138:	f8d8 3000 	ldr.w	r3, [r8]
 800e13c:	9005      	str	r0, [sp, #20]
 800e13e:	3307      	adds	r3, #7
 800e140:	f023 0307 	bic.w	r3, r3, #7
 800e144:	f103 0208 	add.w	r2, r3, #8
 800e148:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e14c:	f8d4 b000 	ldr.w	fp, [r4]
 800e150:	f8c8 2000 	str.w	r2, [r8]
 800e154:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e158:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800e15c:	9307      	str	r3, [sp, #28]
 800e15e:	f8cd 8018 	str.w	r8, [sp, #24]
 800e162:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800e166:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e16a:	4b9c      	ldr	r3, [pc, #624]	@ (800e3dc <_printf_float+0x2c8>)
 800e16c:	f04f 32ff 	mov.w	r2, #4294967295
 800e170:	f7f2 fcb4 	bl	8000adc <__aeabi_dcmpun>
 800e174:	bb70      	cbnz	r0, 800e1d4 <_printf_float+0xc0>
 800e176:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e17a:	4b98      	ldr	r3, [pc, #608]	@ (800e3dc <_printf_float+0x2c8>)
 800e17c:	f04f 32ff 	mov.w	r2, #4294967295
 800e180:	f7f2 fc8e 	bl	8000aa0 <__aeabi_dcmple>
 800e184:	bb30      	cbnz	r0, 800e1d4 <_printf_float+0xc0>
 800e186:	2200      	movs	r2, #0
 800e188:	2300      	movs	r3, #0
 800e18a:	4640      	mov	r0, r8
 800e18c:	4649      	mov	r1, r9
 800e18e:	f7f2 fc7d 	bl	8000a8c <__aeabi_dcmplt>
 800e192:	b110      	cbz	r0, 800e19a <_printf_float+0x86>
 800e194:	232d      	movs	r3, #45	@ 0x2d
 800e196:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e19a:	4a91      	ldr	r2, [pc, #580]	@ (800e3e0 <_printf_float+0x2cc>)
 800e19c:	4b91      	ldr	r3, [pc, #580]	@ (800e3e4 <_printf_float+0x2d0>)
 800e19e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e1a2:	bf94      	ite	ls
 800e1a4:	4690      	movls	r8, r2
 800e1a6:	4698      	movhi	r8, r3
 800e1a8:	2303      	movs	r3, #3
 800e1aa:	6123      	str	r3, [r4, #16]
 800e1ac:	f02b 0304 	bic.w	r3, fp, #4
 800e1b0:	6023      	str	r3, [r4, #0]
 800e1b2:	f04f 0900 	mov.w	r9, #0
 800e1b6:	9700      	str	r7, [sp, #0]
 800e1b8:	4633      	mov	r3, r6
 800e1ba:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e1bc:	4621      	mov	r1, r4
 800e1be:	4628      	mov	r0, r5
 800e1c0:	f000 f9d2 	bl	800e568 <_printf_common>
 800e1c4:	3001      	adds	r0, #1
 800e1c6:	f040 808d 	bne.w	800e2e4 <_printf_float+0x1d0>
 800e1ca:	f04f 30ff 	mov.w	r0, #4294967295
 800e1ce:	b00d      	add	sp, #52	@ 0x34
 800e1d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1d4:	4642      	mov	r2, r8
 800e1d6:	464b      	mov	r3, r9
 800e1d8:	4640      	mov	r0, r8
 800e1da:	4649      	mov	r1, r9
 800e1dc:	f7f2 fc7e 	bl	8000adc <__aeabi_dcmpun>
 800e1e0:	b140      	cbz	r0, 800e1f4 <_printf_float+0xe0>
 800e1e2:	464b      	mov	r3, r9
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	bfbc      	itt	lt
 800e1e8:	232d      	movlt	r3, #45	@ 0x2d
 800e1ea:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e1ee:	4a7e      	ldr	r2, [pc, #504]	@ (800e3e8 <_printf_float+0x2d4>)
 800e1f0:	4b7e      	ldr	r3, [pc, #504]	@ (800e3ec <_printf_float+0x2d8>)
 800e1f2:	e7d4      	b.n	800e19e <_printf_float+0x8a>
 800e1f4:	6863      	ldr	r3, [r4, #4]
 800e1f6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800e1fa:	9206      	str	r2, [sp, #24]
 800e1fc:	1c5a      	adds	r2, r3, #1
 800e1fe:	d13b      	bne.n	800e278 <_printf_float+0x164>
 800e200:	2306      	movs	r3, #6
 800e202:	6063      	str	r3, [r4, #4]
 800e204:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800e208:	2300      	movs	r3, #0
 800e20a:	6022      	str	r2, [r4, #0]
 800e20c:	9303      	str	r3, [sp, #12]
 800e20e:	ab0a      	add	r3, sp, #40	@ 0x28
 800e210:	e9cd a301 	strd	sl, r3, [sp, #4]
 800e214:	ab09      	add	r3, sp, #36	@ 0x24
 800e216:	9300      	str	r3, [sp, #0]
 800e218:	6861      	ldr	r1, [r4, #4]
 800e21a:	ec49 8b10 	vmov	d0, r8, r9
 800e21e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e222:	4628      	mov	r0, r5
 800e224:	f7ff fed6 	bl	800dfd4 <__cvt>
 800e228:	9b06      	ldr	r3, [sp, #24]
 800e22a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e22c:	2b47      	cmp	r3, #71	@ 0x47
 800e22e:	4680      	mov	r8, r0
 800e230:	d129      	bne.n	800e286 <_printf_float+0x172>
 800e232:	1cc8      	adds	r0, r1, #3
 800e234:	db02      	blt.n	800e23c <_printf_float+0x128>
 800e236:	6863      	ldr	r3, [r4, #4]
 800e238:	4299      	cmp	r1, r3
 800e23a:	dd41      	ble.n	800e2c0 <_printf_float+0x1ac>
 800e23c:	f1aa 0a02 	sub.w	sl, sl, #2
 800e240:	fa5f fa8a 	uxtb.w	sl, sl
 800e244:	3901      	subs	r1, #1
 800e246:	4652      	mov	r2, sl
 800e248:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e24c:	9109      	str	r1, [sp, #36]	@ 0x24
 800e24e:	f7ff ff26 	bl	800e09e <__exponent>
 800e252:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e254:	1813      	adds	r3, r2, r0
 800e256:	2a01      	cmp	r2, #1
 800e258:	4681      	mov	r9, r0
 800e25a:	6123      	str	r3, [r4, #16]
 800e25c:	dc02      	bgt.n	800e264 <_printf_float+0x150>
 800e25e:	6822      	ldr	r2, [r4, #0]
 800e260:	07d2      	lsls	r2, r2, #31
 800e262:	d501      	bpl.n	800e268 <_printf_float+0x154>
 800e264:	3301      	adds	r3, #1
 800e266:	6123      	str	r3, [r4, #16]
 800e268:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d0a2      	beq.n	800e1b6 <_printf_float+0xa2>
 800e270:	232d      	movs	r3, #45	@ 0x2d
 800e272:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e276:	e79e      	b.n	800e1b6 <_printf_float+0xa2>
 800e278:	9a06      	ldr	r2, [sp, #24]
 800e27a:	2a47      	cmp	r2, #71	@ 0x47
 800e27c:	d1c2      	bne.n	800e204 <_printf_float+0xf0>
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d1c0      	bne.n	800e204 <_printf_float+0xf0>
 800e282:	2301      	movs	r3, #1
 800e284:	e7bd      	b.n	800e202 <_printf_float+0xee>
 800e286:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e28a:	d9db      	bls.n	800e244 <_printf_float+0x130>
 800e28c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800e290:	d118      	bne.n	800e2c4 <_printf_float+0x1b0>
 800e292:	2900      	cmp	r1, #0
 800e294:	6863      	ldr	r3, [r4, #4]
 800e296:	dd0b      	ble.n	800e2b0 <_printf_float+0x19c>
 800e298:	6121      	str	r1, [r4, #16]
 800e29a:	b913      	cbnz	r3, 800e2a2 <_printf_float+0x18e>
 800e29c:	6822      	ldr	r2, [r4, #0]
 800e29e:	07d0      	lsls	r0, r2, #31
 800e2a0:	d502      	bpl.n	800e2a8 <_printf_float+0x194>
 800e2a2:	3301      	adds	r3, #1
 800e2a4:	440b      	add	r3, r1
 800e2a6:	6123      	str	r3, [r4, #16]
 800e2a8:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e2aa:	f04f 0900 	mov.w	r9, #0
 800e2ae:	e7db      	b.n	800e268 <_printf_float+0x154>
 800e2b0:	b913      	cbnz	r3, 800e2b8 <_printf_float+0x1a4>
 800e2b2:	6822      	ldr	r2, [r4, #0]
 800e2b4:	07d2      	lsls	r2, r2, #31
 800e2b6:	d501      	bpl.n	800e2bc <_printf_float+0x1a8>
 800e2b8:	3302      	adds	r3, #2
 800e2ba:	e7f4      	b.n	800e2a6 <_printf_float+0x192>
 800e2bc:	2301      	movs	r3, #1
 800e2be:	e7f2      	b.n	800e2a6 <_printf_float+0x192>
 800e2c0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800e2c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e2c6:	4299      	cmp	r1, r3
 800e2c8:	db05      	blt.n	800e2d6 <_printf_float+0x1c2>
 800e2ca:	6823      	ldr	r3, [r4, #0]
 800e2cc:	6121      	str	r1, [r4, #16]
 800e2ce:	07d8      	lsls	r0, r3, #31
 800e2d0:	d5ea      	bpl.n	800e2a8 <_printf_float+0x194>
 800e2d2:	1c4b      	adds	r3, r1, #1
 800e2d4:	e7e7      	b.n	800e2a6 <_printf_float+0x192>
 800e2d6:	2900      	cmp	r1, #0
 800e2d8:	bfd4      	ite	le
 800e2da:	f1c1 0202 	rsble	r2, r1, #2
 800e2de:	2201      	movgt	r2, #1
 800e2e0:	4413      	add	r3, r2
 800e2e2:	e7e0      	b.n	800e2a6 <_printf_float+0x192>
 800e2e4:	6823      	ldr	r3, [r4, #0]
 800e2e6:	055a      	lsls	r2, r3, #21
 800e2e8:	d407      	bmi.n	800e2fa <_printf_float+0x1e6>
 800e2ea:	6923      	ldr	r3, [r4, #16]
 800e2ec:	4642      	mov	r2, r8
 800e2ee:	4631      	mov	r1, r6
 800e2f0:	4628      	mov	r0, r5
 800e2f2:	47b8      	blx	r7
 800e2f4:	3001      	adds	r0, #1
 800e2f6:	d12b      	bne.n	800e350 <_printf_float+0x23c>
 800e2f8:	e767      	b.n	800e1ca <_printf_float+0xb6>
 800e2fa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e2fe:	f240 80dd 	bls.w	800e4bc <_printf_float+0x3a8>
 800e302:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e306:	2200      	movs	r2, #0
 800e308:	2300      	movs	r3, #0
 800e30a:	f7f2 fbb5 	bl	8000a78 <__aeabi_dcmpeq>
 800e30e:	2800      	cmp	r0, #0
 800e310:	d033      	beq.n	800e37a <_printf_float+0x266>
 800e312:	4a37      	ldr	r2, [pc, #220]	@ (800e3f0 <_printf_float+0x2dc>)
 800e314:	2301      	movs	r3, #1
 800e316:	4631      	mov	r1, r6
 800e318:	4628      	mov	r0, r5
 800e31a:	47b8      	blx	r7
 800e31c:	3001      	adds	r0, #1
 800e31e:	f43f af54 	beq.w	800e1ca <_printf_float+0xb6>
 800e322:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800e326:	4543      	cmp	r3, r8
 800e328:	db02      	blt.n	800e330 <_printf_float+0x21c>
 800e32a:	6823      	ldr	r3, [r4, #0]
 800e32c:	07d8      	lsls	r0, r3, #31
 800e32e:	d50f      	bpl.n	800e350 <_printf_float+0x23c>
 800e330:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e334:	4631      	mov	r1, r6
 800e336:	4628      	mov	r0, r5
 800e338:	47b8      	blx	r7
 800e33a:	3001      	adds	r0, #1
 800e33c:	f43f af45 	beq.w	800e1ca <_printf_float+0xb6>
 800e340:	f04f 0900 	mov.w	r9, #0
 800e344:	f108 38ff 	add.w	r8, r8, #4294967295
 800e348:	f104 0a1a 	add.w	sl, r4, #26
 800e34c:	45c8      	cmp	r8, r9
 800e34e:	dc09      	bgt.n	800e364 <_printf_float+0x250>
 800e350:	6823      	ldr	r3, [r4, #0]
 800e352:	079b      	lsls	r3, r3, #30
 800e354:	f100 8103 	bmi.w	800e55e <_printf_float+0x44a>
 800e358:	68e0      	ldr	r0, [r4, #12]
 800e35a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e35c:	4298      	cmp	r0, r3
 800e35e:	bfb8      	it	lt
 800e360:	4618      	movlt	r0, r3
 800e362:	e734      	b.n	800e1ce <_printf_float+0xba>
 800e364:	2301      	movs	r3, #1
 800e366:	4652      	mov	r2, sl
 800e368:	4631      	mov	r1, r6
 800e36a:	4628      	mov	r0, r5
 800e36c:	47b8      	blx	r7
 800e36e:	3001      	adds	r0, #1
 800e370:	f43f af2b 	beq.w	800e1ca <_printf_float+0xb6>
 800e374:	f109 0901 	add.w	r9, r9, #1
 800e378:	e7e8      	b.n	800e34c <_printf_float+0x238>
 800e37a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	dc39      	bgt.n	800e3f4 <_printf_float+0x2e0>
 800e380:	4a1b      	ldr	r2, [pc, #108]	@ (800e3f0 <_printf_float+0x2dc>)
 800e382:	2301      	movs	r3, #1
 800e384:	4631      	mov	r1, r6
 800e386:	4628      	mov	r0, r5
 800e388:	47b8      	blx	r7
 800e38a:	3001      	adds	r0, #1
 800e38c:	f43f af1d 	beq.w	800e1ca <_printf_float+0xb6>
 800e390:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800e394:	ea59 0303 	orrs.w	r3, r9, r3
 800e398:	d102      	bne.n	800e3a0 <_printf_float+0x28c>
 800e39a:	6823      	ldr	r3, [r4, #0]
 800e39c:	07d9      	lsls	r1, r3, #31
 800e39e:	d5d7      	bpl.n	800e350 <_printf_float+0x23c>
 800e3a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e3a4:	4631      	mov	r1, r6
 800e3a6:	4628      	mov	r0, r5
 800e3a8:	47b8      	blx	r7
 800e3aa:	3001      	adds	r0, #1
 800e3ac:	f43f af0d 	beq.w	800e1ca <_printf_float+0xb6>
 800e3b0:	f04f 0a00 	mov.w	sl, #0
 800e3b4:	f104 0b1a 	add.w	fp, r4, #26
 800e3b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e3ba:	425b      	negs	r3, r3
 800e3bc:	4553      	cmp	r3, sl
 800e3be:	dc01      	bgt.n	800e3c4 <_printf_float+0x2b0>
 800e3c0:	464b      	mov	r3, r9
 800e3c2:	e793      	b.n	800e2ec <_printf_float+0x1d8>
 800e3c4:	2301      	movs	r3, #1
 800e3c6:	465a      	mov	r2, fp
 800e3c8:	4631      	mov	r1, r6
 800e3ca:	4628      	mov	r0, r5
 800e3cc:	47b8      	blx	r7
 800e3ce:	3001      	adds	r0, #1
 800e3d0:	f43f aefb 	beq.w	800e1ca <_printf_float+0xb6>
 800e3d4:	f10a 0a01 	add.w	sl, sl, #1
 800e3d8:	e7ee      	b.n	800e3b8 <_printf_float+0x2a4>
 800e3da:	bf00      	nop
 800e3dc:	7fefffff 	.word	0x7fefffff
 800e3e0:	080140a9 	.word	0x080140a9
 800e3e4:	080140ad 	.word	0x080140ad
 800e3e8:	080140b1 	.word	0x080140b1
 800e3ec:	080140b5 	.word	0x080140b5
 800e3f0:	080140b9 	.word	0x080140b9
 800e3f4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e3f6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e3fa:	4553      	cmp	r3, sl
 800e3fc:	bfa8      	it	ge
 800e3fe:	4653      	movge	r3, sl
 800e400:	2b00      	cmp	r3, #0
 800e402:	4699      	mov	r9, r3
 800e404:	dc36      	bgt.n	800e474 <_printf_float+0x360>
 800e406:	f04f 0b00 	mov.w	fp, #0
 800e40a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e40e:	f104 021a 	add.w	r2, r4, #26
 800e412:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e414:	9306      	str	r3, [sp, #24]
 800e416:	eba3 0309 	sub.w	r3, r3, r9
 800e41a:	455b      	cmp	r3, fp
 800e41c:	dc31      	bgt.n	800e482 <_printf_float+0x36e>
 800e41e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e420:	459a      	cmp	sl, r3
 800e422:	dc3a      	bgt.n	800e49a <_printf_float+0x386>
 800e424:	6823      	ldr	r3, [r4, #0]
 800e426:	07da      	lsls	r2, r3, #31
 800e428:	d437      	bmi.n	800e49a <_printf_float+0x386>
 800e42a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e42c:	ebaa 0903 	sub.w	r9, sl, r3
 800e430:	9b06      	ldr	r3, [sp, #24]
 800e432:	ebaa 0303 	sub.w	r3, sl, r3
 800e436:	4599      	cmp	r9, r3
 800e438:	bfa8      	it	ge
 800e43a:	4699      	movge	r9, r3
 800e43c:	f1b9 0f00 	cmp.w	r9, #0
 800e440:	dc33      	bgt.n	800e4aa <_printf_float+0x396>
 800e442:	f04f 0800 	mov.w	r8, #0
 800e446:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e44a:	f104 0b1a 	add.w	fp, r4, #26
 800e44e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e450:	ebaa 0303 	sub.w	r3, sl, r3
 800e454:	eba3 0309 	sub.w	r3, r3, r9
 800e458:	4543      	cmp	r3, r8
 800e45a:	f77f af79 	ble.w	800e350 <_printf_float+0x23c>
 800e45e:	2301      	movs	r3, #1
 800e460:	465a      	mov	r2, fp
 800e462:	4631      	mov	r1, r6
 800e464:	4628      	mov	r0, r5
 800e466:	47b8      	blx	r7
 800e468:	3001      	adds	r0, #1
 800e46a:	f43f aeae 	beq.w	800e1ca <_printf_float+0xb6>
 800e46e:	f108 0801 	add.w	r8, r8, #1
 800e472:	e7ec      	b.n	800e44e <_printf_float+0x33a>
 800e474:	4642      	mov	r2, r8
 800e476:	4631      	mov	r1, r6
 800e478:	4628      	mov	r0, r5
 800e47a:	47b8      	blx	r7
 800e47c:	3001      	adds	r0, #1
 800e47e:	d1c2      	bne.n	800e406 <_printf_float+0x2f2>
 800e480:	e6a3      	b.n	800e1ca <_printf_float+0xb6>
 800e482:	2301      	movs	r3, #1
 800e484:	4631      	mov	r1, r6
 800e486:	4628      	mov	r0, r5
 800e488:	9206      	str	r2, [sp, #24]
 800e48a:	47b8      	blx	r7
 800e48c:	3001      	adds	r0, #1
 800e48e:	f43f ae9c 	beq.w	800e1ca <_printf_float+0xb6>
 800e492:	9a06      	ldr	r2, [sp, #24]
 800e494:	f10b 0b01 	add.w	fp, fp, #1
 800e498:	e7bb      	b.n	800e412 <_printf_float+0x2fe>
 800e49a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e49e:	4631      	mov	r1, r6
 800e4a0:	4628      	mov	r0, r5
 800e4a2:	47b8      	blx	r7
 800e4a4:	3001      	adds	r0, #1
 800e4a6:	d1c0      	bne.n	800e42a <_printf_float+0x316>
 800e4a8:	e68f      	b.n	800e1ca <_printf_float+0xb6>
 800e4aa:	9a06      	ldr	r2, [sp, #24]
 800e4ac:	464b      	mov	r3, r9
 800e4ae:	4442      	add	r2, r8
 800e4b0:	4631      	mov	r1, r6
 800e4b2:	4628      	mov	r0, r5
 800e4b4:	47b8      	blx	r7
 800e4b6:	3001      	adds	r0, #1
 800e4b8:	d1c3      	bne.n	800e442 <_printf_float+0x32e>
 800e4ba:	e686      	b.n	800e1ca <_printf_float+0xb6>
 800e4bc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e4c0:	f1ba 0f01 	cmp.w	sl, #1
 800e4c4:	dc01      	bgt.n	800e4ca <_printf_float+0x3b6>
 800e4c6:	07db      	lsls	r3, r3, #31
 800e4c8:	d536      	bpl.n	800e538 <_printf_float+0x424>
 800e4ca:	2301      	movs	r3, #1
 800e4cc:	4642      	mov	r2, r8
 800e4ce:	4631      	mov	r1, r6
 800e4d0:	4628      	mov	r0, r5
 800e4d2:	47b8      	blx	r7
 800e4d4:	3001      	adds	r0, #1
 800e4d6:	f43f ae78 	beq.w	800e1ca <_printf_float+0xb6>
 800e4da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e4de:	4631      	mov	r1, r6
 800e4e0:	4628      	mov	r0, r5
 800e4e2:	47b8      	blx	r7
 800e4e4:	3001      	adds	r0, #1
 800e4e6:	f43f ae70 	beq.w	800e1ca <_printf_float+0xb6>
 800e4ea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e4ee:	2200      	movs	r2, #0
 800e4f0:	2300      	movs	r3, #0
 800e4f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e4f6:	f7f2 fabf 	bl	8000a78 <__aeabi_dcmpeq>
 800e4fa:	b9c0      	cbnz	r0, 800e52e <_printf_float+0x41a>
 800e4fc:	4653      	mov	r3, sl
 800e4fe:	f108 0201 	add.w	r2, r8, #1
 800e502:	4631      	mov	r1, r6
 800e504:	4628      	mov	r0, r5
 800e506:	47b8      	blx	r7
 800e508:	3001      	adds	r0, #1
 800e50a:	d10c      	bne.n	800e526 <_printf_float+0x412>
 800e50c:	e65d      	b.n	800e1ca <_printf_float+0xb6>
 800e50e:	2301      	movs	r3, #1
 800e510:	465a      	mov	r2, fp
 800e512:	4631      	mov	r1, r6
 800e514:	4628      	mov	r0, r5
 800e516:	47b8      	blx	r7
 800e518:	3001      	adds	r0, #1
 800e51a:	f43f ae56 	beq.w	800e1ca <_printf_float+0xb6>
 800e51e:	f108 0801 	add.w	r8, r8, #1
 800e522:	45d0      	cmp	r8, sl
 800e524:	dbf3      	blt.n	800e50e <_printf_float+0x3fa>
 800e526:	464b      	mov	r3, r9
 800e528:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800e52c:	e6df      	b.n	800e2ee <_printf_float+0x1da>
 800e52e:	f04f 0800 	mov.w	r8, #0
 800e532:	f104 0b1a 	add.w	fp, r4, #26
 800e536:	e7f4      	b.n	800e522 <_printf_float+0x40e>
 800e538:	2301      	movs	r3, #1
 800e53a:	4642      	mov	r2, r8
 800e53c:	e7e1      	b.n	800e502 <_printf_float+0x3ee>
 800e53e:	2301      	movs	r3, #1
 800e540:	464a      	mov	r2, r9
 800e542:	4631      	mov	r1, r6
 800e544:	4628      	mov	r0, r5
 800e546:	47b8      	blx	r7
 800e548:	3001      	adds	r0, #1
 800e54a:	f43f ae3e 	beq.w	800e1ca <_printf_float+0xb6>
 800e54e:	f108 0801 	add.w	r8, r8, #1
 800e552:	68e3      	ldr	r3, [r4, #12]
 800e554:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e556:	1a5b      	subs	r3, r3, r1
 800e558:	4543      	cmp	r3, r8
 800e55a:	dcf0      	bgt.n	800e53e <_printf_float+0x42a>
 800e55c:	e6fc      	b.n	800e358 <_printf_float+0x244>
 800e55e:	f04f 0800 	mov.w	r8, #0
 800e562:	f104 0919 	add.w	r9, r4, #25
 800e566:	e7f4      	b.n	800e552 <_printf_float+0x43e>

0800e568 <_printf_common>:
 800e568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e56c:	4616      	mov	r6, r2
 800e56e:	4698      	mov	r8, r3
 800e570:	688a      	ldr	r2, [r1, #8]
 800e572:	690b      	ldr	r3, [r1, #16]
 800e574:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e578:	4293      	cmp	r3, r2
 800e57a:	bfb8      	it	lt
 800e57c:	4613      	movlt	r3, r2
 800e57e:	6033      	str	r3, [r6, #0]
 800e580:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e584:	4607      	mov	r7, r0
 800e586:	460c      	mov	r4, r1
 800e588:	b10a      	cbz	r2, 800e58e <_printf_common+0x26>
 800e58a:	3301      	adds	r3, #1
 800e58c:	6033      	str	r3, [r6, #0]
 800e58e:	6823      	ldr	r3, [r4, #0]
 800e590:	0699      	lsls	r1, r3, #26
 800e592:	bf42      	ittt	mi
 800e594:	6833      	ldrmi	r3, [r6, #0]
 800e596:	3302      	addmi	r3, #2
 800e598:	6033      	strmi	r3, [r6, #0]
 800e59a:	6825      	ldr	r5, [r4, #0]
 800e59c:	f015 0506 	ands.w	r5, r5, #6
 800e5a0:	d106      	bne.n	800e5b0 <_printf_common+0x48>
 800e5a2:	f104 0a19 	add.w	sl, r4, #25
 800e5a6:	68e3      	ldr	r3, [r4, #12]
 800e5a8:	6832      	ldr	r2, [r6, #0]
 800e5aa:	1a9b      	subs	r3, r3, r2
 800e5ac:	42ab      	cmp	r3, r5
 800e5ae:	dc26      	bgt.n	800e5fe <_printf_common+0x96>
 800e5b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e5b4:	6822      	ldr	r2, [r4, #0]
 800e5b6:	3b00      	subs	r3, #0
 800e5b8:	bf18      	it	ne
 800e5ba:	2301      	movne	r3, #1
 800e5bc:	0692      	lsls	r2, r2, #26
 800e5be:	d42b      	bmi.n	800e618 <_printf_common+0xb0>
 800e5c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e5c4:	4641      	mov	r1, r8
 800e5c6:	4638      	mov	r0, r7
 800e5c8:	47c8      	blx	r9
 800e5ca:	3001      	adds	r0, #1
 800e5cc:	d01e      	beq.n	800e60c <_printf_common+0xa4>
 800e5ce:	6823      	ldr	r3, [r4, #0]
 800e5d0:	6922      	ldr	r2, [r4, #16]
 800e5d2:	f003 0306 	and.w	r3, r3, #6
 800e5d6:	2b04      	cmp	r3, #4
 800e5d8:	bf02      	ittt	eq
 800e5da:	68e5      	ldreq	r5, [r4, #12]
 800e5dc:	6833      	ldreq	r3, [r6, #0]
 800e5de:	1aed      	subeq	r5, r5, r3
 800e5e0:	68a3      	ldr	r3, [r4, #8]
 800e5e2:	bf0c      	ite	eq
 800e5e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e5e8:	2500      	movne	r5, #0
 800e5ea:	4293      	cmp	r3, r2
 800e5ec:	bfc4      	itt	gt
 800e5ee:	1a9b      	subgt	r3, r3, r2
 800e5f0:	18ed      	addgt	r5, r5, r3
 800e5f2:	2600      	movs	r6, #0
 800e5f4:	341a      	adds	r4, #26
 800e5f6:	42b5      	cmp	r5, r6
 800e5f8:	d11a      	bne.n	800e630 <_printf_common+0xc8>
 800e5fa:	2000      	movs	r0, #0
 800e5fc:	e008      	b.n	800e610 <_printf_common+0xa8>
 800e5fe:	2301      	movs	r3, #1
 800e600:	4652      	mov	r2, sl
 800e602:	4641      	mov	r1, r8
 800e604:	4638      	mov	r0, r7
 800e606:	47c8      	blx	r9
 800e608:	3001      	adds	r0, #1
 800e60a:	d103      	bne.n	800e614 <_printf_common+0xac>
 800e60c:	f04f 30ff 	mov.w	r0, #4294967295
 800e610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e614:	3501      	adds	r5, #1
 800e616:	e7c6      	b.n	800e5a6 <_printf_common+0x3e>
 800e618:	18e1      	adds	r1, r4, r3
 800e61a:	1c5a      	adds	r2, r3, #1
 800e61c:	2030      	movs	r0, #48	@ 0x30
 800e61e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e622:	4422      	add	r2, r4
 800e624:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e628:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e62c:	3302      	adds	r3, #2
 800e62e:	e7c7      	b.n	800e5c0 <_printf_common+0x58>
 800e630:	2301      	movs	r3, #1
 800e632:	4622      	mov	r2, r4
 800e634:	4641      	mov	r1, r8
 800e636:	4638      	mov	r0, r7
 800e638:	47c8      	blx	r9
 800e63a:	3001      	adds	r0, #1
 800e63c:	d0e6      	beq.n	800e60c <_printf_common+0xa4>
 800e63e:	3601      	adds	r6, #1
 800e640:	e7d9      	b.n	800e5f6 <_printf_common+0x8e>
	...

0800e644 <_printf_i>:
 800e644:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e648:	7e0f      	ldrb	r7, [r1, #24]
 800e64a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e64c:	2f78      	cmp	r7, #120	@ 0x78
 800e64e:	4691      	mov	r9, r2
 800e650:	4680      	mov	r8, r0
 800e652:	460c      	mov	r4, r1
 800e654:	469a      	mov	sl, r3
 800e656:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e65a:	d807      	bhi.n	800e66c <_printf_i+0x28>
 800e65c:	2f62      	cmp	r7, #98	@ 0x62
 800e65e:	d80a      	bhi.n	800e676 <_printf_i+0x32>
 800e660:	2f00      	cmp	r7, #0
 800e662:	f000 80d2 	beq.w	800e80a <_printf_i+0x1c6>
 800e666:	2f58      	cmp	r7, #88	@ 0x58
 800e668:	f000 80b9 	beq.w	800e7de <_printf_i+0x19a>
 800e66c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e670:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e674:	e03a      	b.n	800e6ec <_printf_i+0xa8>
 800e676:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e67a:	2b15      	cmp	r3, #21
 800e67c:	d8f6      	bhi.n	800e66c <_printf_i+0x28>
 800e67e:	a101      	add	r1, pc, #4	@ (adr r1, 800e684 <_printf_i+0x40>)
 800e680:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e684:	0800e6dd 	.word	0x0800e6dd
 800e688:	0800e6f1 	.word	0x0800e6f1
 800e68c:	0800e66d 	.word	0x0800e66d
 800e690:	0800e66d 	.word	0x0800e66d
 800e694:	0800e66d 	.word	0x0800e66d
 800e698:	0800e66d 	.word	0x0800e66d
 800e69c:	0800e6f1 	.word	0x0800e6f1
 800e6a0:	0800e66d 	.word	0x0800e66d
 800e6a4:	0800e66d 	.word	0x0800e66d
 800e6a8:	0800e66d 	.word	0x0800e66d
 800e6ac:	0800e66d 	.word	0x0800e66d
 800e6b0:	0800e7f1 	.word	0x0800e7f1
 800e6b4:	0800e71b 	.word	0x0800e71b
 800e6b8:	0800e7ab 	.word	0x0800e7ab
 800e6bc:	0800e66d 	.word	0x0800e66d
 800e6c0:	0800e66d 	.word	0x0800e66d
 800e6c4:	0800e813 	.word	0x0800e813
 800e6c8:	0800e66d 	.word	0x0800e66d
 800e6cc:	0800e71b 	.word	0x0800e71b
 800e6d0:	0800e66d 	.word	0x0800e66d
 800e6d4:	0800e66d 	.word	0x0800e66d
 800e6d8:	0800e7b3 	.word	0x0800e7b3
 800e6dc:	6833      	ldr	r3, [r6, #0]
 800e6de:	1d1a      	adds	r2, r3, #4
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	6032      	str	r2, [r6, #0]
 800e6e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e6e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e6ec:	2301      	movs	r3, #1
 800e6ee:	e09d      	b.n	800e82c <_printf_i+0x1e8>
 800e6f0:	6833      	ldr	r3, [r6, #0]
 800e6f2:	6820      	ldr	r0, [r4, #0]
 800e6f4:	1d19      	adds	r1, r3, #4
 800e6f6:	6031      	str	r1, [r6, #0]
 800e6f8:	0606      	lsls	r6, r0, #24
 800e6fa:	d501      	bpl.n	800e700 <_printf_i+0xbc>
 800e6fc:	681d      	ldr	r5, [r3, #0]
 800e6fe:	e003      	b.n	800e708 <_printf_i+0xc4>
 800e700:	0645      	lsls	r5, r0, #25
 800e702:	d5fb      	bpl.n	800e6fc <_printf_i+0xb8>
 800e704:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e708:	2d00      	cmp	r5, #0
 800e70a:	da03      	bge.n	800e714 <_printf_i+0xd0>
 800e70c:	232d      	movs	r3, #45	@ 0x2d
 800e70e:	426d      	negs	r5, r5
 800e710:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e714:	4859      	ldr	r0, [pc, #356]	@ (800e87c <_printf_i+0x238>)
 800e716:	230a      	movs	r3, #10
 800e718:	e011      	b.n	800e73e <_printf_i+0xfa>
 800e71a:	6821      	ldr	r1, [r4, #0]
 800e71c:	6833      	ldr	r3, [r6, #0]
 800e71e:	0608      	lsls	r0, r1, #24
 800e720:	f853 5b04 	ldr.w	r5, [r3], #4
 800e724:	d402      	bmi.n	800e72c <_printf_i+0xe8>
 800e726:	0649      	lsls	r1, r1, #25
 800e728:	bf48      	it	mi
 800e72a:	b2ad      	uxthmi	r5, r5
 800e72c:	2f6f      	cmp	r7, #111	@ 0x6f
 800e72e:	4853      	ldr	r0, [pc, #332]	@ (800e87c <_printf_i+0x238>)
 800e730:	6033      	str	r3, [r6, #0]
 800e732:	bf14      	ite	ne
 800e734:	230a      	movne	r3, #10
 800e736:	2308      	moveq	r3, #8
 800e738:	2100      	movs	r1, #0
 800e73a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e73e:	6866      	ldr	r6, [r4, #4]
 800e740:	60a6      	str	r6, [r4, #8]
 800e742:	2e00      	cmp	r6, #0
 800e744:	bfa2      	ittt	ge
 800e746:	6821      	ldrge	r1, [r4, #0]
 800e748:	f021 0104 	bicge.w	r1, r1, #4
 800e74c:	6021      	strge	r1, [r4, #0]
 800e74e:	b90d      	cbnz	r5, 800e754 <_printf_i+0x110>
 800e750:	2e00      	cmp	r6, #0
 800e752:	d04b      	beq.n	800e7ec <_printf_i+0x1a8>
 800e754:	4616      	mov	r6, r2
 800e756:	fbb5 f1f3 	udiv	r1, r5, r3
 800e75a:	fb03 5711 	mls	r7, r3, r1, r5
 800e75e:	5dc7      	ldrb	r7, [r0, r7]
 800e760:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e764:	462f      	mov	r7, r5
 800e766:	42bb      	cmp	r3, r7
 800e768:	460d      	mov	r5, r1
 800e76a:	d9f4      	bls.n	800e756 <_printf_i+0x112>
 800e76c:	2b08      	cmp	r3, #8
 800e76e:	d10b      	bne.n	800e788 <_printf_i+0x144>
 800e770:	6823      	ldr	r3, [r4, #0]
 800e772:	07df      	lsls	r7, r3, #31
 800e774:	d508      	bpl.n	800e788 <_printf_i+0x144>
 800e776:	6923      	ldr	r3, [r4, #16]
 800e778:	6861      	ldr	r1, [r4, #4]
 800e77a:	4299      	cmp	r1, r3
 800e77c:	bfde      	ittt	le
 800e77e:	2330      	movle	r3, #48	@ 0x30
 800e780:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e784:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e788:	1b92      	subs	r2, r2, r6
 800e78a:	6122      	str	r2, [r4, #16]
 800e78c:	f8cd a000 	str.w	sl, [sp]
 800e790:	464b      	mov	r3, r9
 800e792:	aa03      	add	r2, sp, #12
 800e794:	4621      	mov	r1, r4
 800e796:	4640      	mov	r0, r8
 800e798:	f7ff fee6 	bl	800e568 <_printf_common>
 800e79c:	3001      	adds	r0, #1
 800e79e:	d14a      	bne.n	800e836 <_printf_i+0x1f2>
 800e7a0:	f04f 30ff 	mov.w	r0, #4294967295
 800e7a4:	b004      	add	sp, #16
 800e7a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7aa:	6823      	ldr	r3, [r4, #0]
 800e7ac:	f043 0320 	orr.w	r3, r3, #32
 800e7b0:	6023      	str	r3, [r4, #0]
 800e7b2:	4833      	ldr	r0, [pc, #204]	@ (800e880 <_printf_i+0x23c>)
 800e7b4:	2778      	movs	r7, #120	@ 0x78
 800e7b6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e7ba:	6823      	ldr	r3, [r4, #0]
 800e7bc:	6831      	ldr	r1, [r6, #0]
 800e7be:	061f      	lsls	r7, r3, #24
 800e7c0:	f851 5b04 	ldr.w	r5, [r1], #4
 800e7c4:	d402      	bmi.n	800e7cc <_printf_i+0x188>
 800e7c6:	065f      	lsls	r7, r3, #25
 800e7c8:	bf48      	it	mi
 800e7ca:	b2ad      	uxthmi	r5, r5
 800e7cc:	6031      	str	r1, [r6, #0]
 800e7ce:	07d9      	lsls	r1, r3, #31
 800e7d0:	bf44      	itt	mi
 800e7d2:	f043 0320 	orrmi.w	r3, r3, #32
 800e7d6:	6023      	strmi	r3, [r4, #0]
 800e7d8:	b11d      	cbz	r5, 800e7e2 <_printf_i+0x19e>
 800e7da:	2310      	movs	r3, #16
 800e7dc:	e7ac      	b.n	800e738 <_printf_i+0xf4>
 800e7de:	4827      	ldr	r0, [pc, #156]	@ (800e87c <_printf_i+0x238>)
 800e7e0:	e7e9      	b.n	800e7b6 <_printf_i+0x172>
 800e7e2:	6823      	ldr	r3, [r4, #0]
 800e7e4:	f023 0320 	bic.w	r3, r3, #32
 800e7e8:	6023      	str	r3, [r4, #0]
 800e7ea:	e7f6      	b.n	800e7da <_printf_i+0x196>
 800e7ec:	4616      	mov	r6, r2
 800e7ee:	e7bd      	b.n	800e76c <_printf_i+0x128>
 800e7f0:	6833      	ldr	r3, [r6, #0]
 800e7f2:	6825      	ldr	r5, [r4, #0]
 800e7f4:	6961      	ldr	r1, [r4, #20]
 800e7f6:	1d18      	adds	r0, r3, #4
 800e7f8:	6030      	str	r0, [r6, #0]
 800e7fa:	062e      	lsls	r6, r5, #24
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	d501      	bpl.n	800e804 <_printf_i+0x1c0>
 800e800:	6019      	str	r1, [r3, #0]
 800e802:	e002      	b.n	800e80a <_printf_i+0x1c6>
 800e804:	0668      	lsls	r0, r5, #25
 800e806:	d5fb      	bpl.n	800e800 <_printf_i+0x1bc>
 800e808:	8019      	strh	r1, [r3, #0]
 800e80a:	2300      	movs	r3, #0
 800e80c:	6123      	str	r3, [r4, #16]
 800e80e:	4616      	mov	r6, r2
 800e810:	e7bc      	b.n	800e78c <_printf_i+0x148>
 800e812:	6833      	ldr	r3, [r6, #0]
 800e814:	1d1a      	adds	r2, r3, #4
 800e816:	6032      	str	r2, [r6, #0]
 800e818:	681e      	ldr	r6, [r3, #0]
 800e81a:	6862      	ldr	r2, [r4, #4]
 800e81c:	2100      	movs	r1, #0
 800e81e:	4630      	mov	r0, r6
 800e820:	f7f1 fcae 	bl	8000180 <memchr>
 800e824:	b108      	cbz	r0, 800e82a <_printf_i+0x1e6>
 800e826:	1b80      	subs	r0, r0, r6
 800e828:	6060      	str	r0, [r4, #4]
 800e82a:	6863      	ldr	r3, [r4, #4]
 800e82c:	6123      	str	r3, [r4, #16]
 800e82e:	2300      	movs	r3, #0
 800e830:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e834:	e7aa      	b.n	800e78c <_printf_i+0x148>
 800e836:	6923      	ldr	r3, [r4, #16]
 800e838:	4632      	mov	r2, r6
 800e83a:	4649      	mov	r1, r9
 800e83c:	4640      	mov	r0, r8
 800e83e:	47d0      	blx	sl
 800e840:	3001      	adds	r0, #1
 800e842:	d0ad      	beq.n	800e7a0 <_printf_i+0x15c>
 800e844:	6823      	ldr	r3, [r4, #0]
 800e846:	079b      	lsls	r3, r3, #30
 800e848:	d413      	bmi.n	800e872 <_printf_i+0x22e>
 800e84a:	68e0      	ldr	r0, [r4, #12]
 800e84c:	9b03      	ldr	r3, [sp, #12]
 800e84e:	4298      	cmp	r0, r3
 800e850:	bfb8      	it	lt
 800e852:	4618      	movlt	r0, r3
 800e854:	e7a6      	b.n	800e7a4 <_printf_i+0x160>
 800e856:	2301      	movs	r3, #1
 800e858:	4632      	mov	r2, r6
 800e85a:	4649      	mov	r1, r9
 800e85c:	4640      	mov	r0, r8
 800e85e:	47d0      	blx	sl
 800e860:	3001      	adds	r0, #1
 800e862:	d09d      	beq.n	800e7a0 <_printf_i+0x15c>
 800e864:	3501      	adds	r5, #1
 800e866:	68e3      	ldr	r3, [r4, #12]
 800e868:	9903      	ldr	r1, [sp, #12]
 800e86a:	1a5b      	subs	r3, r3, r1
 800e86c:	42ab      	cmp	r3, r5
 800e86e:	dcf2      	bgt.n	800e856 <_printf_i+0x212>
 800e870:	e7eb      	b.n	800e84a <_printf_i+0x206>
 800e872:	2500      	movs	r5, #0
 800e874:	f104 0619 	add.w	r6, r4, #25
 800e878:	e7f5      	b.n	800e866 <_printf_i+0x222>
 800e87a:	bf00      	nop
 800e87c:	080140bb 	.word	0x080140bb
 800e880:	080140cc 	.word	0x080140cc

0800e884 <_scanf_float>:
 800e884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e888:	b087      	sub	sp, #28
 800e88a:	4617      	mov	r7, r2
 800e88c:	9303      	str	r3, [sp, #12]
 800e88e:	688b      	ldr	r3, [r1, #8]
 800e890:	1e5a      	subs	r2, r3, #1
 800e892:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800e896:	bf81      	itttt	hi
 800e898:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800e89c:	eb03 0b05 	addhi.w	fp, r3, r5
 800e8a0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800e8a4:	608b      	strhi	r3, [r1, #8]
 800e8a6:	680b      	ldr	r3, [r1, #0]
 800e8a8:	460a      	mov	r2, r1
 800e8aa:	f04f 0500 	mov.w	r5, #0
 800e8ae:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800e8b2:	f842 3b1c 	str.w	r3, [r2], #28
 800e8b6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800e8ba:	4680      	mov	r8, r0
 800e8bc:	460c      	mov	r4, r1
 800e8be:	bf98      	it	ls
 800e8c0:	f04f 0b00 	movls.w	fp, #0
 800e8c4:	9201      	str	r2, [sp, #4]
 800e8c6:	4616      	mov	r6, r2
 800e8c8:	46aa      	mov	sl, r5
 800e8ca:	46a9      	mov	r9, r5
 800e8cc:	9502      	str	r5, [sp, #8]
 800e8ce:	68a2      	ldr	r2, [r4, #8]
 800e8d0:	b152      	cbz	r2, 800e8e8 <_scanf_float+0x64>
 800e8d2:	683b      	ldr	r3, [r7, #0]
 800e8d4:	781b      	ldrb	r3, [r3, #0]
 800e8d6:	2b4e      	cmp	r3, #78	@ 0x4e
 800e8d8:	d864      	bhi.n	800e9a4 <_scanf_float+0x120>
 800e8da:	2b40      	cmp	r3, #64	@ 0x40
 800e8dc:	d83c      	bhi.n	800e958 <_scanf_float+0xd4>
 800e8de:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800e8e2:	b2c8      	uxtb	r0, r1
 800e8e4:	280e      	cmp	r0, #14
 800e8e6:	d93a      	bls.n	800e95e <_scanf_float+0xda>
 800e8e8:	f1b9 0f00 	cmp.w	r9, #0
 800e8ec:	d003      	beq.n	800e8f6 <_scanf_float+0x72>
 800e8ee:	6823      	ldr	r3, [r4, #0]
 800e8f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e8f4:	6023      	str	r3, [r4, #0]
 800e8f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e8fa:	f1ba 0f01 	cmp.w	sl, #1
 800e8fe:	f200 8117 	bhi.w	800eb30 <_scanf_float+0x2ac>
 800e902:	9b01      	ldr	r3, [sp, #4]
 800e904:	429e      	cmp	r6, r3
 800e906:	f200 8108 	bhi.w	800eb1a <_scanf_float+0x296>
 800e90a:	2001      	movs	r0, #1
 800e90c:	b007      	add	sp, #28
 800e90e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e912:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800e916:	2a0d      	cmp	r2, #13
 800e918:	d8e6      	bhi.n	800e8e8 <_scanf_float+0x64>
 800e91a:	a101      	add	r1, pc, #4	@ (adr r1, 800e920 <_scanf_float+0x9c>)
 800e91c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e920:	0800ea67 	.word	0x0800ea67
 800e924:	0800e8e9 	.word	0x0800e8e9
 800e928:	0800e8e9 	.word	0x0800e8e9
 800e92c:	0800e8e9 	.word	0x0800e8e9
 800e930:	0800eac7 	.word	0x0800eac7
 800e934:	0800ea9f 	.word	0x0800ea9f
 800e938:	0800e8e9 	.word	0x0800e8e9
 800e93c:	0800e8e9 	.word	0x0800e8e9
 800e940:	0800ea75 	.word	0x0800ea75
 800e944:	0800e8e9 	.word	0x0800e8e9
 800e948:	0800e8e9 	.word	0x0800e8e9
 800e94c:	0800e8e9 	.word	0x0800e8e9
 800e950:	0800e8e9 	.word	0x0800e8e9
 800e954:	0800ea2d 	.word	0x0800ea2d
 800e958:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800e95c:	e7db      	b.n	800e916 <_scanf_float+0x92>
 800e95e:	290e      	cmp	r1, #14
 800e960:	d8c2      	bhi.n	800e8e8 <_scanf_float+0x64>
 800e962:	a001      	add	r0, pc, #4	@ (adr r0, 800e968 <_scanf_float+0xe4>)
 800e964:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800e968:	0800ea1d 	.word	0x0800ea1d
 800e96c:	0800e8e9 	.word	0x0800e8e9
 800e970:	0800ea1d 	.word	0x0800ea1d
 800e974:	0800eab3 	.word	0x0800eab3
 800e978:	0800e8e9 	.word	0x0800e8e9
 800e97c:	0800e9c5 	.word	0x0800e9c5
 800e980:	0800ea03 	.word	0x0800ea03
 800e984:	0800ea03 	.word	0x0800ea03
 800e988:	0800ea03 	.word	0x0800ea03
 800e98c:	0800ea03 	.word	0x0800ea03
 800e990:	0800ea03 	.word	0x0800ea03
 800e994:	0800ea03 	.word	0x0800ea03
 800e998:	0800ea03 	.word	0x0800ea03
 800e99c:	0800ea03 	.word	0x0800ea03
 800e9a0:	0800ea03 	.word	0x0800ea03
 800e9a4:	2b6e      	cmp	r3, #110	@ 0x6e
 800e9a6:	d809      	bhi.n	800e9bc <_scanf_float+0x138>
 800e9a8:	2b60      	cmp	r3, #96	@ 0x60
 800e9aa:	d8b2      	bhi.n	800e912 <_scanf_float+0x8e>
 800e9ac:	2b54      	cmp	r3, #84	@ 0x54
 800e9ae:	d07b      	beq.n	800eaa8 <_scanf_float+0x224>
 800e9b0:	2b59      	cmp	r3, #89	@ 0x59
 800e9b2:	d199      	bne.n	800e8e8 <_scanf_float+0x64>
 800e9b4:	2d07      	cmp	r5, #7
 800e9b6:	d197      	bne.n	800e8e8 <_scanf_float+0x64>
 800e9b8:	2508      	movs	r5, #8
 800e9ba:	e02c      	b.n	800ea16 <_scanf_float+0x192>
 800e9bc:	2b74      	cmp	r3, #116	@ 0x74
 800e9be:	d073      	beq.n	800eaa8 <_scanf_float+0x224>
 800e9c0:	2b79      	cmp	r3, #121	@ 0x79
 800e9c2:	e7f6      	b.n	800e9b2 <_scanf_float+0x12e>
 800e9c4:	6821      	ldr	r1, [r4, #0]
 800e9c6:	05c8      	lsls	r0, r1, #23
 800e9c8:	d51b      	bpl.n	800ea02 <_scanf_float+0x17e>
 800e9ca:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800e9ce:	6021      	str	r1, [r4, #0]
 800e9d0:	f109 0901 	add.w	r9, r9, #1
 800e9d4:	f1bb 0f00 	cmp.w	fp, #0
 800e9d8:	d003      	beq.n	800e9e2 <_scanf_float+0x15e>
 800e9da:	3201      	adds	r2, #1
 800e9dc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e9e0:	60a2      	str	r2, [r4, #8]
 800e9e2:	68a3      	ldr	r3, [r4, #8]
 800e9e4:	3b01      	subs	r3, #1
 800e9e6:	60a3      	str	r3, [r4, #8]
 800e9e8:	6923      	ldr	r3, [r4, #16]
 800e9ea:	3301      	adds	r3, #1
 800e9ec:	6123      	str	r3, [r4, #16]
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	3b01      	subs	r3, #1
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	607b      	str	r3, [r7, #4]
 800e9f6:	f340 8087 	ble.w	800eb08 <_scanf_float+0x284>
 800e9fa:	683b      	ldr	r3, [r7, #0]
 800e9fc:	3301      	adds	r3, #1
 800e9fe:	603b      	str	r3, [r7, #0]
 800ea00:	e765      	b.n	800e8ce <_scanf_float+0x4a>
 800ea02:	eb1a 0105 	adds.w	r1, sl, r5
 800ea06:	f47f af6f 	bne.w	800e8e8 <_scanf_float+0x64>
 800ea0a:	6822      	ldr	r2, [r4, #0]
 800ea0c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800ea10:	6022      	str	r2, [r4, #0]
 800ea12:	460d      	mov	r5, r1
 800ea14:	468a      	mov	sl, r1
 800ea16:	f806 3b01 	strb.w	r3, [r6], #1
 800ea1a:	e7e2      	b.n	800e9e2 <_scanf_float+0x15e>
 800ea1c:	6822      	ldr	r2, [r4, #0]
 800ea1e:	0610      	lsls	r0, r2, #24
 800ea20:	f57f af62 	bpl.w	800e8e8 <_scanf_float+0x64>
 800ea24:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ea28:	6022      	str	r2, [r4, #0]
 800ea2a:	e7f4      	b.n	800ea16 <_scanf_float+0x192>
 800ea2c:	f1ba 0f00 	cmp.w	sl, #0
 800ea30:	d10e      	bne.n	800ea50 <_scanf_float+0x1cc>
 800ea32:	f1b9 0f00 	cmp.w	r9, #0
 800ea36:	d10e      	bne.n	800ea56 <_scanf_float+0x1d2>
 800ea38:	6822      	ldr	r2, [r4, #0]
 800ea3a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800ea3e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800ea42:	d108      	bne.n	800ea56 <_scanf_float+0x1d2>
 800ea44:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ea48:	6022      	str	r2, [r4, #0]
 800ea4a:	f04f 0a01 	mov.w	sl, #1
 800ea4e:	e7e2      	b.n	800ea16 <_scanf_float+0x192>
 800ea50:	f1ba 0f02 	cmp.w	sl, #2
 800ea54:	d055      	beq.n	800eb02 <_scanf_float+0x27e>
 800ea56:	2d01      	cmp	r5, #1
 800ea58:	d002      	beq.n	800ea60 <_scanf_float+0x1dc>
 800ea5a:	2d04      	cmp	r5, #4
 800ea5c:	f47f af44 	bne.w	800e8e8 <_scanf_float+0x64>
 800ea60:	3501      	adds	r5, #1
 800ea62:	b2ed      	uxtb	r5, r5
 800ea64:	e7d7      	b.n	800ea16 <_scanf_float+0x192>
 800ea66:	f1ba 0f01 	cmp.w	sl, #1
 800ea6a:	f47f af3d 	bne.w	800e8e8 <_scanf_float+0x64>
 800ea6e:	f04f 0a02 	mov.w	sl, #2
 800ea72:	e7d0      	b.n	800ea16 <_scanf_float+0x192>
 800ea74:	b97d      	cbnz	r5, 800ea96 <_scanf_float+0x212>
 800ea76:	f1b9 0f00 	cmp.w	r9, #0
 800ea7a:	f47f af38 	bne.w	800e8ee <_scanf_float+0x6a>
 800ea7e:	6822      	ldr	r2, [r4, #0]
 800ea80:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800ea84:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800ea88:	f040 8108 	bne.w	800ec9c <_scanf_float+0x418>
 800ea8c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ea90:	6022      	str	r2, [r4, #0]
 800ea92:	2501      	movs	r5, #1
 800ea94:	e7bf      	b.n	800ea16 <_scanf_float+0x192>
 800ea96:	2d03      	cmp	r5, #3
 800ea98:	d0e2      	beq.n	800ea60 <_scanf_float+0x1dc>
 800ea9a:	2d05      	cmp	r5, #5
 800ea9c:	e7de      	b.n	800ea5c <_scanf_float+0x1d8>
 800ea9e:	2d02      	cmp	r5, #2
 800eaa0:	f47f af22 	bne.w	800e8e8 <_scanf_float+0x64>
 800eaa4:	2503      	movs	r5, #3
 800eaa6:	e7b6      	b.n	800ea16 <_scanf_float+0x192>
 800eaa8:	2d06      	cmp	r5, #6
 800eaaa:	f47f af1d 	bne.w	800e8e8 <_scanf_float+0x64>
 800eaae:	2507      	movs	r5, #7
 800eab0:	e7b1      	b.n	800ea16 <_scanf_float+0x192>
 800eab2:	6822      	ldr	r2, [r4, #0]
 800eab4:	0591      	lsls	r1, r2, #22
 800eab6:	f57f af17 	bpl.w	800e8e8 <_scanf_float+0x64>
 800eaba:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800eabe:	6022      	str	r2, [r4, #0]
 800eac0:	f8cd 9008 	str.w	r9, [sp, #8]
 800eac4:	e7a7      	b.n	800ea16 <_scanf_float+0x192>
 800eac6:	6822      	ldr	r2, [r4, #0]
 800eac8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800eacc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800ead0:	d006      	beq.n	800eae0 <_scanf_float+0x25c>
 800ead2:	0550      	lsls	r0, r2, #21
 800ead4:	f57f af08 	bpl.w	800e8e8 <_scanf_float+0x64>
 800ead8:	f1b9 0f00 	cmp.w	r9, #0
 800eadc:	f000 80de 	beq.w	800ec9c <_scanf_float+0x418>
 800eae0:	0591      	lsls	r1, r2, #22
 800eae2:	bf58      	it	pl
 800eae4:	9902      	ldrpl	r1, [sp, #8]
 800eae6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800eaea:	bf58      	it	pl
 800eaec:	eba9 0101 	subpl.w	r1, r9, r1
 800eaf0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800eaf4:	bf58      	it	pl
 800eaf6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800eafa:	6022      	str	r2, [r4, #0]
 800eafc:	f04f 0900 	mov.w	r9, #0
 800eb00:	e789      	b.n	800ea16 <_scanf_float+0x192>
 800eb02:	f04f 0a03 	mov.w	sl, #3
 800eb06:	e786      	b.n	800ea16 <_scanf_float+0x192>
 800eb08:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800eb0c:	4639      	mov	r1, r7
 800eb0e:	4640      	mov	r0, r8
 800eb10:	4798      	blx	r3
 800eb12:	2800      	cmp	r0, #0
 800eb14:	f43f aedb 	beq.w	800e8ce <_scanf_float+0x4a>
 800eb18:	e6e6      	b.n	800e8e8 <_scanf_float+0x64>
 800eb1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800eb1e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800eb22:	463a      	mov	r2, r7
 800eb24:	4640      	mov	r0, r8
 800eb26:	4798      	blx	r3
 800eb28:	6923      	ldr	r3, [r4, #16]
 800eb2a:	3b01      	subs	r3, #1
 800eb2c:	6123      	str	r3, [r4, #16]
 800eb2e:	e6e8      	b.n	800e902 <_scanf_float+0x7e>
 800eb30:	1e6b      	subs	r3, r5, #1
 800eb32:	2b06      	cmp	r3, #6
 800eb34:	d824      	bhi.n	800eb80 <_scanf_float+0x2fc>
 800eb36:	2d02      	cmp	r5, #2
 800eb38:	d836      	bhi.n	800eba8 <_scanf_float+0x324>
 800eb3a:	9b01      	ldr	r3, [sp, #4]
 800eb3c:	429e      	cmp	r6, r3
 800eb3e:	f67f aee4 	bls.w	800e90a <_scanf_float+0x86>
 800eb42:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800eb46:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800eb4a:	463a      	mov	r2, r7
 800eb4c:	4640      	mov	r0, r8
 800eb4e:	4798      	blx	r3
 800eb50:	6923      	ldr	r3, [r4, #16]
 800eb52:	3b01      	subs	r3, #1
 800eb54:	6123      	str	r3, [r4, #16]
 800eb56:	e7f0      	b.n	800eb3a <_scanf_float+0x2b6>
 800eb58:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800eb5c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800eb60:	463a      	mov	r2, r7
 800eb62:	4640      	mov	r0, r8
 800eb64:	4798      	blx	r3
 800eb66:	6923      	ldr	r3, [r4, #16]
 800eb68:	3b01      	subs	r3, #1
 800eb6a:	6123      	str	r3, [r4, #16]
 800eb6c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800eb70:	fa5f fa8a 	uxtb.w	sl, sl
 800eb74:	f1ba 0f02 	cmp.w	sl, #2
 800eb78:	d1ee      	bne.n	800eb58 <_scanf_float+0x2d4>
 800eb7a:	3d03      	subs	r5, #3
 800eb7c:	b2ed      	uxtb	r5, r5
 800eb7e:	1b76      	subs	r6, r6, r5
 800eb80:	6823      	ldr	r3, [r4, #0]
 800eb82:	05da      	lsls	r2, r3, #23
 800eb84:	d530      	bpl.n	800ebe8 <_scanf_float+0x364>
 800eb86:	055b      	lsls	r3, r3, #21
 800eb88:	d511      	bpl.n	800ebae <_scanf_float+0x32a>
 800eb8a:	9b01      	ldr	r3, [sp, #4]
 800eb8c:	429e      	cmp	r6, r3
 800eb8e:	f67f aebc 	bls.w	800e90a <_scanf_float+0x86>
 800eb92:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800eb96:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800eb9a:	463a      	mov	r2, r7
 800eb9c:	4640      	mov	r0, r8
 800eb9e:	4798      	blx	r3
 800eba0:	6923      	ldr	r3, [r4, #16]
 800eba2:	3b01      	subs	r3, #1
 800eba4:	6123      	str	r3, [r4, #16]
 800eba6:	e7f0      	b.n	800eb8a <_scanf_float+0x306>
 800eba8:	46aa      	mov	sl, r5
 800ebaa:	46b3      	mov	fp, r6
 800ebac:	e7de      	b.n	800eb6c <_scanf_float+0x2e8>
 800ebae:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ebb2:	6923      	ldr	r3, [r4, #16]
 800ebb4:	2965      	cmp	r1, #101	@ 0x65
 800ebb6:	f103 33ff 	add.w	r3, r3, #4294967295
 800ebba:	f106 35ff 	add.w	r5, r6, #4294967295
 800ebbe:	6123      	str	r3, [r4, #16]
 800ebc0:	d00c      	beq.n	800ebdc <_scanf_float+0x358>
 800ebc2:	2945      	cmp	r1, #69	@ 0x45
 800ebc4:	d00a      	beq.n	800ebdc <_scanf_float+0x358>
 800ebc6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ebca:	463a      	mov	r2, r7
 800ebcc:	4640      	mov	r0, r8
 800ebce:	4798      	blx	r3
 800ebd0:	6923      	ldr	r3, [r4, #16]
 800ebd2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ebd6:	3b01      	subs	r3, #1
 800ebd8:	1eb5      	subs	r5, r6, #2
 800ebda:	6123      	str	r3, [r4, #16]
 800ebdc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ebe0:	463a      	mov	r2, r7
 800ebe2:	4640      	mov	r0, r8
 800ebe4:	4798      	blx	r3
 800ebe6:	462e      	mov	r6, r5
 800ebe8:	6822      	ldr	r2, [r4, #0]
 800ebea:	f012 0210 	ands.w	r2, r2, #16
 800ebee:	d001      	beq.n	800ebf4 <_scanf_float+0x370>
 800ebf0:	2000      	movs	r0, #0
 800ebf2:	e68b      	b.n	800e90c <_scanf_float+0x88>
 800ebf4:	7032      	strb	r2, [r6, #0]
 800ebf6:	6823      	ldr	r3, [r4, #0]
 800ebf8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800ebfc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ec00:	d11c      	bne.n	800ec3c <_scanf_float+0x3b8>
 800ec02:	9b02      	ldr	r3, [sp, #8]
 800ec04:	454b      	cmp	r3, r9
 800ec06:	eba3 0209 	sub.w	r2, r3, r9
 800ec0a:	d123      	bne.n	800ec54 <_scanf_float+0x3d0>
 800ec0c:	9901      	ldr	r1, [sp, #4]
 800ec0e:	2200      	movs	r2, #0
 800ec10:	4640      	mov	r0, r8
 800ec12:	f002 fd29 	bl	8011668 <_strtod_r>
 800ec16:	9b03      	ldr	r3, [sp, #12]
 800ec18:	6821      	ldr	r1, [r4, #0]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	f011 0f02 	tst.w	r1, #2
 800ec20:	ec57 6b10 	vmov	r6, r7, d0
 800ec24:	f103 0204 	add.w	r2, r3, #4
 800ec28:	d01f      	beq.n	800ec6a <_scanf_float+0x3e6>
 800ec2a:	9903      	ldr	r1, [sp, #12]
 800ec2c:	600a      	str	r2, [r1, #0]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	e9c3 6700 	strd	r6, r7, [r3]
 800ec34:	68e3      	ldr	r3, [r4, #12]
 800ec36:	3301      	adds	r3, #1
 800ec38:	60e3      	str	r3, [r4, #12]
 800ec3a:	e7d9      	b.n	800ebf0 <_scanf_float+0x36c>
 800ec3c:	9b04      	ldr	r3, [sp, #16]
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d0e4      	beq.n	800ec0c <_scanf_float+0x388>
 800ec42:	9905      	ldr	r1, [sp, #20]
 800ec44:	230a      	movs	r3, #10
 800ec46:	3101      	adds	r1, #1
 800ec48:	4640      	mov	r0, r8
 800ec4a:	f002 fd8d 	bl	8011768 <_strtol_r>
 800ec4e:	9b04      	ldr	r3, [sp, #16]
 800ec50:	9e05      	ldr	r6, [sp, #20]
 800ec52:	1ac2      	subs	r2, r0, r3
 800ec54:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800ec58:	429e      	cmp	r6, r3
 800ec5a:	bf28      	it	cs
 800ec5c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800ec60:	4910      	ldr	r1, [pc, #64]	@ (800eca4 <_scanf_float+0x420>)
 800ec62:	4630      	mov	r0, r6
 800ec64:	f000 f95c 	bl	800ef20 <siprintf>
 800ec68:	e7d0      	b.n	800ec0c <_scanf_float+0x388>
 800ec6a:	f011 0f04 	tst.w	r1, #4
 800ec6e:	9903      	ldr	r1, [sp, #12]
 800ec70:	600a      	str	r2, [r1, #0]
 800ec72:	d1dc      	bne.n	800ec2e <_scanf_float+0x3aa>
 800ec74:	681d      	ldr	r5, [r3, #0]
 800ec76:	4632      	mov	r2, r6
 800ec78:	463b      	mov	r3, r7
 800ec7a:	4630      	mov	r0, r6
 800ec7c:	4639      	mov	r1, r7
 800ec7e:	f7f1 ff2d 	bl	8000adc <__aeabi_dcmpun>
 800ec82:	b128      	cbz	r0, 800ec90 <_scanf_float+0x40c>
 800ec84:	4808      	ldr	r0, [pc, #32]	@ (800eca8 <_scanf_float+0x424>)
 800ec86:	f000 fae7 	bl	800f258 <nanf>
 800ec8a:	ed85 0a00 	vstr	s0, [r5]
 800ec8e:	e7d1      	b.n	800ec34 <_scanf_float+0x3b0>
 800ec90:	4630      	mov	r0, r6
 800ec92:	4639      	mov	r1, r7
 800ec94:	f7f1 ff80 	bl	8000b98 <__aeabi_d2f>
 800ec98:	6028      	str	r0, [r5, #0]
 800ec9a:	e7cb      	b.n	800ec34 <_scanf_float+0x3b0>
 800ec9c:	f04f 0900 	mov.w	r9, #0
 800eca0:	e629      	b.n	800e8f6 <_scanf_float+0x72>
 800eca2:	bf00      	nop
 800eca4:	080140dd 	.word	0x080140dd
 800eca8:	08014475 	.word	0x08014475

0800ecac <std>:
 800ecac:	2300      	movs	r3, #0
 800ecae:	b510      	push	{r4, lr}
 800ecb0:	4604      	mov	r4, r0
 800ecb2:	e9c0 3300 	strd	r3, r3, [r0]
 800ecb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ecba:	6083      	str	r3, [r0, #8]
 800ecbc:	8181      	strh	r1, [r0, #12]
 800ecbe:	6643      	str	r3, [r0, #100]	@ 0x64
 800ecc0:	81c2      	strh	r2, [r0, #14]
 800ecc2:	6183      	str	r3, [r0, #24]
 800ecc4:	4619      	mov	r1, r3
 800ecc6:	2208      	movs	r2, #8
 800ecc8:	305c      	adds	r0, #92	@ 0x5c
 800ecca:	f000 fa21 	bl	800f110 <memset>
 800ecce:	4b0d      	ldr	r3, [pc, #52]	@ (800ed04 <std+0x58>)
 800ecd0:	6263      	str	r3, [r4, #36]	@ 0x24
 800ecd2:	4b0d      	ldr	r3, [pc, #52]	@ (800ed08 <std+0x5c>)
 800ecd4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ecd6:	4b0d      	ldr	r3, [pc, #52]	@ (800ed0c <std+0x60>)
 800ecd8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ecda:	4b0d      	ldr	r3, [pc, #52]	@ (800ed10 <std+0x64>)
 800ecdc:	6323      	str	r3, [r4, #48]	@ 0x30
 800ecde:	4b0d      	ldr	r3, [pc, #52]	@ (800ed14 <std+0x68>)
 800ece0:	6224      	str	r4, [r4, #32]
 800ece2:	429c      	cmp	r4, r3
 800ece4:	d006      	beq.n	800ecf4 <std+0x48>
 800ece6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ecea:	4294      	cmp	r4, r2
 800ecec:	d002      	beq.n	800ecf4 <std+0x48>
 800ecee:	33d0      	adds	r3, #208	@ 0xd0
 800ecf0:	429c      	cmp	r4, r3
 800ecf2:	d105      	bne.n	800ed00 <std+0x54>
 800ecf4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ecf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ecfc:	f000 ba9a 	b.w	800f234 <__retarget_lock_init_recursive>
 800ed00:	bd10      	pop	{r4, pc}
 800ed02:	bf00      	nop
 800ed04:	0800ef61 	.word	0x0800ef61
 800ed08:	0800ef83 	.word	0x0800ef83
 800ed0c:	0800efbb 	.word	0x0800efbb
 800ed10:	0800efdf 	.word	0x0800efdf
 800ed14:	20003e08 	.word	0x20003e08

0800ed18 <stdio_exit_handler>:
 800ed18:	4a02      	ldr	r2, [pc, #8]	@ (800ed24 <stdio_exit_handler+0xc>)
 800ed1a:	4903      	ldr	r1, [pc, #12]	@ (800ed28 <stdio_exit_handler+0x10>)
 800ed1c:	4803      	ldr	r0, [pc, #12]	@ (800ed2c <stdio_exit_handler+0x14>)
 800ed1e:	f000 b869 	b.w	800edf4 <_fwalk_sglue>
 800ed22:	bf00      	nop
 800ed24:	20000034 	.word	0x20000034
 800ed28:	08011da9 	.word	0x08011da9
 800ed2c:	20000044 	.word	0x20000044

0800ed30 <cleanup_stdio>:
 800ed30:	6841      	ldr	r1, [r0, #4]
 800ed32:	4b0c      	ldr	r3, [pc, #48]	@ (800ed64 <cleanup_stdio+0x34>)
 800ed34:	4299      	cmp	r1, r3
 800ed36:	b510      	push	{r4, lr}
 800ed38:	4604      	mov	r4, r0
 800ed3a:	d001      	beq.n	800ed40 <cleanup_stdio+0x10>
 800ed3c:	f003 f834 	bl	8011da8 <_fflush_r>
 800ed40:	68a1      	ldr	r1, [r4, #8]
 800ed42:	4b09      	ldr	r3, [pc, #36]	@ (800ed68 <cleanup_stdio+0x38>)
 800ed44:	4299      	cmp	r1, r3
 800ed46:	d002      	beq.n	800ed4e <cleanup_stdio+0x1e>
 800ed48:	4620      	mov	r0, r4
 800ed4a:	f003 f82d 	bl	8011da8 <_fflush_r>
 800ed4e:	68e1      	ldr	r1, [r4, #12]
 800ed50:	4b06      	ldr	r3, [pc, #24]	@ (800ed6c <cleanup_stdio+0x3c>)
 800ed52:	4299      	cmp	r1, r3
 800ed54:	d004      	beq.n	800ed60 <cleanup_stdio+0x30>
 800ed56:	4620      	mov	r0, r4
 800ed58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed5c:	f003 b824 	b.w	8011da8 <_fflush_r>
 800ed60:	bd10      	pop	{r4, pc}
 800ed62:	bf00      	nop
 800ed64:	20003e08 	.word	0x20003e08
 800ed68:	20003e70 	.word	0x20003e70
 800ed6c:	20003ed8 	.word	0x20003ed8

0800ed70 <global_stdio_init.part.0>:
 800ed70:	b510      	push	{r4, lr}
 800ed72:	4b0b      	ldr	r3, [pc, #44]	@ (800eda0 <global_stdio_init.part.0+0x30>)
 800ed74:	4c0b      	ldr	r4, [pc, #44]	@ (800eda4 <global_stdio_init.part.0+0x34>)
 800ed76:	4a0c      	ldr	r2, [pc, #48]	@ (800eda8 <global_stdio_init.part.0+0x38>)
 800ed78:	601a      	str	r2, [r3, #0]
 800ed7a:	4620      	mov	r0, r4
 800ed7c:	2200      	movs	r2, #0
 800ed7e:	2104      	movs	r1, #4
 800ed80:	f7ff ff94 	bl	800ecac <std>
 800ed84:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ed88:	2201      	movs	r2, #1
 800ed8a:	2109      	movs	r1, #9
 800ed8c:	f7ff ff8e 	bl	800ecac <std>
 800ed90:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ed94:	2202      	movs	r2, #2
 800ed96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed9a:	2112      	movs	r1, #18
 800ed9c:	f7ff bf86 	b.w	800ecac <std>
 800eda0:	20003f40 	.word	0x20003f40
 800eda4:	20003e08 	.word	0x20003e08
 800eda8:	0800ed19 	.word	0x0800ed19

0800edac <__sfp_lock_acquire>:
 800edac:	4801      	ldr	r0, [pc, #4]	@ (800edb4 <__sfp_lock_acquire+0x8>)
 800edae:	f000 ba42 	b.w	800f236 <__retarget_lock_acquire_recursive>
 800edb2:	bf00      	nop
 800edb4:	20003f49 	.word	0x20003f49

0800edb8 <__sfp_lock_release>:
 800edb8:	4801      	ldr	r0, [pc, #4]	@ (800edc0 <__sfp_lock_release+0x8>)
 800edba:	f000 ba3d 	b.w	800f238 <__retarget_lock_release_recursive>
 800edbe:	bf00      	nop
 800edc0:	20003f49 	.word	0x20003f49

0800edc4 <__sinit>:
 800edc4:	b510      	push	{r4, lr}
 800edc6:	4604      	mov	r4, r0
 800edc8:	f7ff fff0 	bl	800edac <__sfp_lock_acquire>
 800edcc:	6a23      	ldr	r3, [r4, #32]
 800edce:	b11b      	cbz	r3, 800edd8 <__sinit+0x14>
 800edd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800edd4:	f7ff bff0 	b.w	800edb8 <__sfp_lock_release>
 800edd8:	4b04      	ldr	r3, [pc, #16]	@ (800edec <__sinit+0x28>)
 800edda:	6223      	str	r3, [r4, #32]
 800eddc:	4b04      	ldr	r3, [pc, #16]	@ (800edf0 <__sinit+0x2c>)
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d1f5      	bne.n	800edd0 <__sinit+0xc>
 800ede4:	f7ff ffc4 	bl	800ed70 <global_stdio_init.part.0>
 800ede8:	e7f2      	b.n	800edd0 <__sinit+0xc>
 800edea:	bf00      	nop
 800edec:	0800ed31 	.word	0x0800ed31
 800edf0:	20003f40 	.word	0x20003f40

0800edf4 <_fwalk_sglue>:
 800edf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800edf8:	4607      	mov	r7, r0
 800edfa:	4688      	mov	r8, r1
 800edfc:	4614      	mov	r4, r2
 800edfe:	2600      	movs	r6, #0
 800ee00:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ee04:	f1b9 0901 	subs.w	r9, r9, #1
 800ee08:	d505      	bpl.n	800ee16 <_fwalk_sglue+0x22>
 800ee0a:	6824      	ldr	r4, [r4, #0]
 800ee0c:	2c00      	cmp	r4, #0
 800ee0e:	d1f7      	bne.n	800ee00 <_fwalk_sglue+0xc>
 800ee10:	4630      	mov	r0, r6
 800ee12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee16:	89ab      	ldrh	r3, [r5, #12]
 800ee18:	2b01      	cmp	r3, #1
 800ee1a:	d907      	bls.n	800ee2c <_fwalk_sglue+0x38>
 800ee1c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ee20:	3301      	adds	r3, #1
 800ee22:	d003      	beq.n	800ee2c <_fwalk_sglue+0x38>
 800ee24:	4629      	mov	r1, r5
 800ee26:	4638      	mov	r0, r7
 800ee28:	47c0      	blx	r8
 800ee2a:	4306      	orrs	r6, r0
 800ee2c:	3568      	adds	r5, #104	@ 0x68
 800ee2e:	e7e9      	b.n	800ee04 <_fwalk_sglue+0x10>

0800ee30 <iprintf>:
 800ee30:	b40f      	push	{r0, r1, r2, r3}
 800ee32:	b507      	push	{r0, r1, r2, lr}
 800ee34:	4906      	ldr	r1, [pc, #24]	@ (800ee50 <iprintf+0x20>)
 800ee36:	ab04      	add	r3, sp, #16
 800ee38:	6808      	ldr	r0, [r1, #0]
 800ee3a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee3e:	6881      	ldr	r1, [r0, #8]
 800ee40:	9301      	str	r3, [sp, #4]
 800ee42:	f002 fe15 	bl	8011a70 <_vfiprintf_r>
 800ee46:	b003      	add	sp, #12
 800ee48:	f85d eb04 	ldr.w	lr, [sp], #4
 800ee4c:	b004      	add	sp, #16
 800ee4e:	4770      	bx	lr
 800ee50:	20000040 	.word	0x20000040

0800ee54 <putchar>:
 800ee54:	4b02      	ldr	r3, [pc, #8]	@ (800ee60 <putchar+0xc>)
 800ee56:	4601      	mov	r1, r0
 800ee58:	6818      	ldr	r0, [r3, #0]
 800ee5a:	6882      	ldr	r2, [r0, #8]
 800ee5c:	f003 b82e 	b.w	8011ebc <_putc_r>
 800ee60:	20000040 	.word	0x20000040

0800ee64 <_puts_r>:
 800ee64:	6a03      	ldr	r3, [r0, #32]
 800ee66:	b570      	push	{r4, r5, r6, lr}
 800ee68:	6884      	ldr	r4, [r0, #8]
 800ee6a:	4605      	mov	r5, r0
 800ee6c:	460e      	mov	r6, r1
 800ee6e:	b90b      	cbnz	r3, 800ee74 <_puts_r+0x10>
 800ee70:	f7ff ffa8 	bl	800edc4 <__sinit>
 800ee74:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ee76:	07db      	lsls	r3, r3, #31
 800ee78:	d405      	bmi.n	800ee86 <_puts_r+0x22>
 800ee7a:	89a3      	ldrh	r3, [r4, #12]
 800ee7c:	0598      	lsls	r0, r3, #22
 800ee7e:	d402      	bmi.n	800ee86 <_puts_r+0x22>
 800ee80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ee82:	f000 f9d8 	bl	800f236 <__retarget_lock_acquire_recursive>
 800ee86:	89a3      	ldrh	r3, [r4, #12]
 800ee88:	0719      	lsls	r1, r3, #28
 800ee8a:	d502      	bpl.n	800ee92 <_puts_r+0x2e>
 800ee8c:	6923      	ldr	r3, [r4, #16]
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d135      	bne.n	800eefe <_puts_r+0x9a>
 800ee92:	4621      	mov	r1, r4
 800ee94:	4628      	mov	r0, r5
 800ee96:	f000 f8e5 	bl	800f064 <__swsetup_r>
 800ee9a:	b380      	cbz	r0, 800eefe <_puts_r+0x9a>
 800ee9c:	f04f 35ff 	mov.w	r5, #4294967295
 800eea0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800eea2:	07da      	lsls	r2, r3, #31
 800eea4:	d405      	bmi.n	800eeb2 <_puts_r+0x4e>
 800eea6:	89a3      	ldrh	r3, [r4, #12]
 800eea8:	059b      	lsls	r3, r3, #22
 800eeaa:	d402      	bmi.n	800eeb2 <_puts_r+0x4e>
 800eeac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800eeae:	f000 f9c3 	bl	800f238 <__retarget_lock_release_recursive>
 800eeb2:	4628      	mov	r0, r5
 800eeb4:	bd70      	pop	{r4, r5, r6, pc}
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	da04      	bge.n	800eec4 <_puts_r+0x60>
 800eeba:	69a2      	ldr	r2, [r4, #24]
 800eebc:	429a      	cmp	r2, r3
 800eebe:	dc17      	bgt.n	800eef0 <_puts_r+0x8c>
 800eec0:	290a      	cmp	r1, #10
 800eec2:	d015      	beq.n	800eef0 <_puts_r+0x8c>
 800eec4:	6823      	ldr	r3, [r4, #0]
 800eec6:	1c5a      	adds	r2, r3, #1
 800eec8:	6022      	str	r2, [r4, #0]
 800eeca:	7019      	strb	r1, [r3, #0]
 800eecc:	68a3      	ldr	r3, [r4, #8]
 800eece:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800eed2:	3b01      	subs	r3, #1
 800eed4:	60a3      	str	r3, [r4, #8]
 800eed6:	2900      	cmp	r1, #0
 800eed8:	d1ed      	bne.n	800eeb6 <_puts_r+0x52>
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	da11      	bge.n	800ef02 <_puts_r+0x9e>
 800eede:	4622      	mov	r2, r4
 800eee0:	210a      	movs	r1, #10
 800eee2:	4628      	mov	r0, r5
 800eee4:	f000 f87f 	bl	800efe6 <__swbuf_r>
 800eee8:	3001      	adds	r0, #1
 800eeea:	d0d7      	beq.n	800ee9c <_puts_r+0x38>
 800eeec:	250a      	movs	r5, #10
 800eeee:	e7d7      	b.n	800eea0 <_puts_r+0x3c>
 800eef0:	4622      	mov	r2, r4
 800eef2:	4628      	mov	r0, r5
 800eef4:	f000 f877 	bl	800efe6 <__swbuf_r>
 800eef8:	3001      	adds	r0, #1
 800eefa:	d1e7      	bne.n	800eecc <_puts_r+0x68>
 800eefc:	e7ce      	b.n	800ee9c <_puts_r+0x38>
 800eefe:	3e01      	subs	r6, #1
 800ef00:	e7e4      	b.n	800eecc <_puts_r+0x68>
 800ef02:	6823      	ldr	r3, [r4, #0]
 800ef04:	1c5a      	adds	r2, r3, #1
 800ef06:	6022      	str	r2, [r4, #0]
 800ef08:	220a      	movs	r2, #10
 800ef0a:	701a      	strb	r2, [r3, #0]
 800ef0c:	e7ee      	b.n	800eeec <_puts_r+0x88>
	...

0800ef10 <puts>:
 800ef10:	4b02      	ldr	r3, [pc, #8]	@ (800ef1c <puts+0xc>)
 800ef12:	4601      	mov	r1, r0
 800ef14:	6818      	ldr	r0, [r3, #0]
 800ef16:	f7ff bfa5 	b.w	800ee64 <_puts_r>
 800ef1a:	bf00      	nop
 800ef1c:	20000040 	.word	0x20000040

0800ef20 <siprintf>:
 800ef20:	b40e      	push	{r1, r2, r3}
 800ef22:	b500      	push	{lr}
 800ef24:	b09c      	sub	sp, #112	@ 0x70
 800ef26:	ab1d      	add	r3, sp, #116	@ 0x74
 800ef28:	9002      	str	r0, [sp, #8]
 800ef2a:	9006      	str	r0, [sp, #24]
 800ef2c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ef30:	4809      	ldr	r0, [pc, #36]	@ (800ef58 <siprintf+0x38>)
 800ef32:	9107      	str	r1, [sp, #28]
 800ef34:	9104      	str	r1, [sp, #16]
 800ef36:	4909      	ldr	r1, [pc, #36]	@ (800ef5c <siprintf+0x3c>)
 800ef38:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef3c:	9105      	str	r1, [sp, #20]
 800ef3e:	6800      	ldr	r0, [r0, #0]
 800ef40:	9301      	str	r3, [sp, #4]
 800ef42:	a902      	add	r1, sp, #8
 800ef44:	f002 fc6e 	bl	8011824 <_svfiprintf_r>
 800ef48:	9b02      	ldr	r3, [sp, #8]
 800ef4a:	2200      	movs	r2, #0
 800ef4c:	701a      	strb	r2, [r3, #0]
 800ef4e:	b01c      	add	sp, #112	@ 0x70
 800ef50:	f85d eb04 	ldr.w	lr, [sp], #4
 800ef54:	b003      	add	sp, #12
 800ef56:	4770      	bx	lr
 800ef58:	20000040 	.word	0x20000040
 800ef5c:	ffff0208 	.word	0xffff0208

0800ef60 <__sread>:
 800ef60:	b510      	push	{r4, lr}
 800ef62:	460c      	mov	r4, r1
 800ef64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef68:	f000 f916 	bl	800f198 <_read_r>
 800ef6c:	2800      	cmp	r0, #0
 800ef6e:	bfab      	itete	ge
 800ef70:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ef72:	89a3      	ldrhlt	r3, [r4, #12]
 800ef74:	181b      	addge	r3, r3, r0
 800ef76:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ef7a:	bfac      	ite	ge
 800ef7c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ef7e:	81a3      	strhlt	r3, [r4, #12]
 800ef80:	bd10      	pop	{r4, pc}

0800ef82 <__swrite>:
 800ef82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef86:	461f      	mov	r7, r3
 800ef88:	898b      	ldrh	r3, [r1, #12]
 800ef8a:	05db      	lsls	r3, r3, #23
 800ef8c:	4605      	mov	r5, r0
 800ef8e:	460c      	mov	r4, r1
 800ef90:	4616      	mov	r6, r2
 800ef92:	d505      	bpl.n	800efa0 <__swrite+0x1e>
 800ef94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef98:	2302      	movs	r3, #2
 800ef9a:	2200      	movs	r2, #0
 800ef9c:	f000 f8ea 	bl	800f174 <_lseek_r>
 800efa0:	89a3      	ldrh	r3, [r4, #12]
 800efa2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800efa6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800efaa:	81a3      	strh	r3, [r4, #12]
 800efac:	4632      	mov	r2, r6
 800efae:	463b      	mov	r3, r7
 800efb0:	4628      	mov	r0, r5
 800efb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800efb6:	f000 b901 	b.w	800f1bc <_write_r>

0800efba <__sseek>:
 800efba:	b510      	push	{r4, lr}
 800efbc:	460c      	mov	r4, r1
 800efbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800efc2:	f000 f8d7 	bl	800f174 <_lseek_r>
 800efc6:	1c43      	adds	r3, r0, #1
 800efc8:	89a3      	ldrh	r3, [r4, #12]
 800efca:	bf15      	itete	ne
 800efcc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800efce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800efd2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800efd6:	81a3      	strheq	r3, [r4, #12]
 800efd8:	bf18      	it	ne
 800efda:	81a3      	strhne	r3, [r4, #12]
 800efdc:	bd10      	pop	{r4, pc}

0800efde <__sclose>:
 800efde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800efe2:	f000 b8b7 	b.w	800f154 <_close_r>

0800efe6 <__swbuf_r>:
 800efe6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efe8:	460e      	mov	r6, r1
 800efea:	4614      	mov	r4, r2
 800efec:	4605      	mov	r5, r0
 800efee:	b118      	cbz	r0, 800eff8 <__swbuf_r+0x12>
 800eff0:	6a03      	ldr	r3, [r0, #32]
 800eff2:	b90b      	cbnz	r3, 800eff8 <__swbuf_r+0x12>
 800eff4:	f7ff fee6 	bl	800edc4 <__sinit>
 800eff8:	69a3      	ldr	r3, [r4, #24]
 800effa:	60a3      	str	r3, [r4, #8]
 800effc:	89a3      	ldrh	r3, [r4, #12]
 800effe:	071a      	lsls	r2, r3, #28
 800f000:	d501      	bpl.n	800f006 <__swbuf_r+0x20>
 800f002:	6923      	ldr	r3, [r4, #16]
 800f004:	b943      	cbnz	r3, 800f018 <__swbuf_r+0x32>
 800f006:	4621      	mov	r1, r4
 800f008:	4628      	mov	r0, r5
 800f00a:	f000 f82b 	bl	800f064 <__swsetup_r>
 800f00e:	b118      	cbz	r0, 800f018 <__swbuf_r+0x32>
 800f010:	f04f 37ff 	mov.w	r7, #4294967295
 800f014:	4638      	mov	r0, r7
 800f016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f018:	6823      	ldr	r3, [r4, #0]
 800f01a:	6922      	ldr	r2, [r4, #16]
 800f01c:	1a98      	subs	r0, r3, r2
 800f01e:	6963      	ldr	r3, [r4, #20]
 800f020:	b2f6      	uxtb	r6, r6
 800f022:	4283      	cmp	r3, r0
 800f024:	4637      	mov	r7, r6
 800f026:	dc05      	bgt.n	800f034 <__swbuf_r+0x4e>
 800f028:	4621      	mov	r1, r4
 800f02a:	4628      	mov	r0, r5
 800f02c:	f002 febc 	bl	8011da8 <_fflush_r>
 800f030:	2800      	cmp	r0, #0
 800f032:	d1ed      	bne.n	800f010 <__swbuf_r+0x2a>
 800f034:	68a3      	ldr	r3, [r4, #8]
 800f036:	3b01      	subs	r3, #1
 800f038:	60a3      	str	r3, [r4, #8]
 800f03a:	6823      	ldr	r3, [r4, #0]
 800f03c:	1c5a      	adds	r2, r3, #1
 800f03e:	6022      	str	r2, [r4, #0]
 800f040:	701e      	strb	r6, [r3, #0]
 800f042:	6962      	ldr	r2, [r4, #20]
 800f044:	1c43      	adds	r3, r0, #1
 800f046:	429a      	cmp	r2, r3
 800f048:	d004      	beq.n	800f054 <__swbuf_r+0x6e>
 800f04a:	89a3      	ldrh	r3, [r4, #12]
 800f04c:	07db      	lsls	r3, r3, #31
 800f04e:	d5e1      	bpl.n	800f014 <__swbuf_r+0x2e>
 800f050:	2e0a      	cmp	r6, #10
 800f052:	d1df      	bne.n	800f014 <__swbuf_r+0x2e>
 800f054:	4621      	mov	r1, r4
 800f056:	4628      	mov	r0, r5
 800f058:	f002 fea6 	bl	8011da8 <_fflush_r>
 800f05c:	2800      	cmp	r0, #0
 800f05e:	d0d9      	beq.n	800f014 <__swbuf_r+0x2e>
 800f060:	e7d6      	b.n	800f010 <__swbuf_r+0x2a>
	...

0800f064 <__swsetup_r>:
 800f064:	b538      	push	{r3, r4, r5, lr}
 800f066:	4b29      	ldr	r3, [pc, #164]	@ (800f10c <__swsetup_r+0xa8>)
 800f068:	4605      	mov	r5, r0
 800f06a:	6818      	ldr	r0, [r3, #0]
 800f06c:	460c      	mov	r4, r1
 800f06e:	b118      	cbz	r0, 800f078 <__swsetup_r+0x14>
 800f070:	6a03      	ldr	r3, [r0, #32]
 800f072:	b90b      	cbnz	r3, 800f078 <__swsetup_r+0x14>
 800f074:	f7ff fea6 	bl	800edc4 <__sinit>
 800f078:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f07c:	0719      	lsls	r1, r3, #28
 800f07e:	d422      	bmi.n	800f0c6 <__swsetup_r+0x62>
 800f080:	06da      	lsls	r2, r3, #27
 800f082:	d407      	bmi.n	800f094 <__swsetup_r+0x30>
 800f084:	2209      	movs	r2, #9
 800f086:	602a      	str	r2, [r5, #0]
 800f088:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f08c:	81a3      	strh	r3, [r4, #12]
 800f08e:	f04f 30ff 	mov.w	r0, #4294967295
 800f092:	e033      	b.n	800f0fc <__swsetup_r+0x98>
 800f094:	0758      	lsls	r0, r3, #29
 800f096:	d512      	bpl.n	800f0be <__swsetup_r+0x5a>
 800f098:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f09a:	b141      	cbz	r1, 800f0ae <__swsetup_r+0x4a>
 800f09c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f0a0:	4299      	cmp	r1, r3
 800f0a2:	d002      	beq.n	800f0aa <__swsetup_r+0x46>
 800f0a4:	4628      	mov	r0, r5
 800f0a6:	f000 ff2b 	bl	800ff00 <_free_r>
 800f0aa:	2300      	movs	r3, #0
 800f0ac:	6363      	str	r3, [r4, #52]	@ 0x34
 800f0ae:	89a3      	ldrh	r3, [r4, #12]
 800f0b0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f0b4:	81a3      	strh	r3, [r4, #12]
 800f0b6:	2300      	movs	r3, #0
 800f0b8:	6063      	str	r3, [r4, #4]
 800f0ba:	6923      	ldr	r3, [r4, #16]
 800f0bc:	6023      	str	r3, [r4, #0]
 800f0be:	89a3      	ldrh	r3, [r4, #12]
 800f0c0:	f043 0308 	orr.w	r3, r3, #8
 800f0c4:	81a3      	strh	r3, [r4, #12]
 800f0c6:	6923      	ldr	r3, [r4, #16]
 800f0c8:	b94b      	cbnz	r3, 800f0de <__swsetup_r+0x7a>
 800f0ca:	89a3      	ldrh	r3, [r4, #12]
 800f0cc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f0d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f0d4:	d003      	beq.n	800f0de <__swsetup_r+0x7a>
 800f0d6:	4621      	mov	r1, r4
 800f0d8:	4628      	mov	r0, r5
 800f0da:	f002 feb3 	bl	8011e44 <__smakebuf_r>
 800f0de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f0e2:	f013 0201 	ands.w	r2, r3, #1
 800f0e6:	d00a      	beq.n	800f0fe <__swsetup_r+0x9a>
 800f0e8:	2200      	movs	r2, #0
 800f0ea:	60a2      	str	r2, [r4, #8]
 800f0ec:	6962      	ldr	r2, [r4, #20]
 800f0ee:	4252      	negs	r2, r2
 800f0f0:	61a2      	str	r2, [r4, #24]
 800f0f2:	6922      	ldr	r2, [r4, #16]
 800f0f4:	b942      	cbnz	r2, 800f108 <__swsetup_r+0xa4>
 800f0f6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f0fa:	d1c5      	bne.n	800f088 <__swsetup_r+0x24>
 800f0fc:	bd38      	pop	{r3, r4, r5, pc}
 800f0fe:	0799      	lsls	r1, r3, #30
 800f100:	bf58      	it	pl
 800f102:	6962      	ldrpl	r2, [r4, #20]
 800f104:	60a2      	str	r2, [r4, #8]
 800f106:	e7f4      	b.n	800f0f2 <__swsetup_r+0x8e>
 800f108:	2000      	movs	r0, #0
 800f10a:	e7f7      	b.n	800f0fc <__swsetup_r+0x98>
 800f10c:	20000040 	.word	0x20000040

0800f110 <memset>:
 800f110:	4402      	add	r2, r0
 800f112:	4603      	mov	r3, r0
 800f114:	4293      	cmp	r3, r2
 800f116:	d100      	bne.n	800f11a <memset+0xa>
 800f118:	4770      	bx	lr
 800f11a:	f803 1b01 	strb.w	r1, [r3], #1
 800f11e:	e7f9      	b.n	800f114 <memset+0x4>

0800f120 <strrchr>:
 800f120:	b538      	push	{r3, r4, r5, lr}
 800f122:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 800f126:	4603      	mov	r3, r0
 800f128:	d10e      	bne.n	800f148 <strrchr+0x28>
 800f12a:	4621      	mov	r1, r4
 800f12c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f130:	f002 bf12 	b.w	8011f58 <strchr>
 800f134:	1c43      	adds	r3, r0, #1
 800f136:	4605      	mov	r5, r0
 800f138:	4621      	mov	r1, r4
 800f13a:	4618      	mov	r0, r3
 800f13c:	f002 ff0c 	bl	8011f58 <strchr>
 800f140:	2800      	cmp	r0, #0
 800f142:	d1f7      	bne.n	800f134 <strrchr+0x14>
 800f144:	4628      	mov	r0, r5
 800f146:	bd38      	pop	{r3, r4, r5, pc}
 800f148:	2500      	movs	r5, #0
 800f14a:	e7f5      	b.n	800f138 <strrchr+0x18>

0800f14c <_localeconv_r>:
 800f14c:	4800      	ldr	r0, [pc, #0]	@ (800f150 <_localeconv_r+0x4>)
 800f14e:	4770      	bx	lr
 800f150:	20000180 	.word	0x20000180

0800f154 <_close_r>:
 800f154:	b538      	push	{r3, r4, r5, lr}
 800f156:	4d06      	ldr	r5, [pc, #24]	@ (800f170 <_close_r+0x1c>)
 800f158:	2300      	movs	r3, #0
 800f15a:	4604      	mov	r4, r0
 800f15c:	4608      	mov	r0, r1
 800f15e:	602b      	str	r3, [r5, #0]
 800f160:	f7f4 feb8 	bl	8003ed4 <_close>
 800f164:	1c43      	adds	r3, r0, #1
 800f166:	d102      	bne.n	800f16e <_close_r+0x1a>
 800f168:	682b      	ldr	r3, [r5, #0]
 800f16a:	b103      	cbz	r3, 800f16e <_close_r+0x1a>
 800f16c:	6023      	str	r3, [r4, #0]
 800f16e:	bd38      	pop	{r3, r4, r5, pc}
 800f170:	20003f44 	.word	0x20003f44

0800f174 <_lseek_r>:
 800f174:	b538      	push	{r3, r4, r5, lr}
 800f176:	4d07      	ldr	r5, [pc, #28]	@ (800f194 <_lseek_r+0x20>)
 800f178:	4604      	mov	r4, r0
 800f17a:	4608      	mov	r0, r1
 800f17c:	4611      	mov	r1, r2
 800f17e:	2200      	movs	r2, #0
 800f180:	602a      	str	r2, [r5, #0]
 800f182:	461a      	mov	r2, r3
 800f184:	f7f4 fecd 	bl	8003f22 <_lseek>
 800f188:	1c43      	adds	r3, r0, #1
 800f18a:	d102      	bne.n	800f192 <_lseek_r+0x1e>
 800f18c:	682b      	ldr	r3, [r5, #0]
 800f18e:	b103      	cbz	r3, 800f192 <_lseek_r+0x1e>
 800f190:	6023      	str	r3, [r4, #0]
 800f192:	bd38      	pop	{r3, r4, r5, pc}
 800f194:	20003f44 	.word	0x20003f44

0800f198 <_read_r>:
 800f198:	b538      	push	{r3, r4, r5, lr}
 800f19a:	4d07      	ldr	r5, [pc, #28]	@ (800f1b8 <_read_r+0x20>)
 800f19c:	4604      	mov	r4, r0
 800f19e:	4608      	mov	r0, r1
 800f1a0:	4611      	mov	r1, r2
 800f1a2:	2200      	movs	r2, #0
 800f1a4:	602a      	str	r2, [r5, #0]
 800f1a6:	461a      	mov	r2, r3
 800f1a8:	f7f4 fe77 	bl	8003e9a <_read>
 800f1ac:	1c43      	adds	r3, r0, #1
 800f1ae:	d102      	bne.n	800f1b6 <_read_r+0x1e>
 800f1b0:	682b      	ldr	r3, [r5, #0]
 800f1b2:	b103      	cbz	r3, 800f1b6 <_read_r+0x1e>
 800f1b4:	6023      	str	r3, [r4, #0]
 800f1b6:	bd38      	pop	{r3, r4, r5, pc}
 800f1b8:	20003f44 	.word	0x20003f44

0800f1bc <_write_r>:
 800f1bc:	b538      	push	{r3, r4, r5, lr}
 800f1be:	4d07      	ldr	r5, [pc, #28]	@ (800f1dc <_write_r+0x20>)
 800f1c0:	4604      	mov	r4, r0
 800f1c2:	4608      	mov	r0, r1
 800f1c4:	4611      	mov	r1, r2
 800f1c6:	2200      	movs	r2, #0
 800f1c8:	602a      	str	r2, [r5, #0]
 800f1ca:	461a      	mov	r2, r3
 800f1cc:	f7fc fb66 	bl	800b89c <_write>
 800f1d0:	1c43      	adds	r3, r0, #1
 800f1d2:	d102      	bne.n	800f1da <_write_r+0x1e>
 800f1d4:	682b      	ldr	r3, [r5, #0]
 800f1d6:	b103      	cbz	r3, 800f1da <_write_r+0x1e>
 800f1d8:	6023      	str	r3, [r4, #0]
 800f1da:	bd38      	pop	{r3, r4, r5, pc}
 800f1dc:	20003f44 	.word	0x20003f44

0800f1e0 <__errno>:
 800f1e0:	4b01      	ldr	r3, [pc, #4]	@ (800f1e8 <__errno+0x8>)
 800f1e2:	6818      	ldr	r0, [r3, #0]
 800f1e4:	4770      	bx	lr
 800f1e6:	bf00      	nop
 800f1e8:	20000040 	.word	0x20000040

0800f1ec <__libc_init_array>:
 800f1ec:	b570      	push	{r4, r5, r6, lr}
 800f1ee:	4d0d      	ldr	r5, [pc, #52]	@ (800f224 <__libc_init_array+0x38>)
 800f1f0:	4c0d      	ldr	r4, [pc, #52]	@ (800f228 <__libc_init_array+0x3c>)
 800f1f2:	1b64      	subs	r4, r4, r5
 800f1f4:	10a4      	asrs	r4, r4, #2
 800f1f6:	2600      	movs	r6, #0
 800f1f8:	42a6      	cmp	r6, r4
 800f1fa:	d109      	bne.n	800f210 <__libc_init_array+0x24>
 800f1fc:	4d0b      	ldr	r5, [pc, #44]	@ (800f22c <__libc_init_array+0x40>)
 800f1fe:	4c0c      	ldr	r4, [pc, #48]	@ (800f230 <__libc_init_array+0x44>)
 800f200:	f003 fb24 	bl	801284c <_init>
 800f204:	1b64      	subs	r4, r4, r5
 800f206:	10a4      	asrs	r4, r4, #2
 800f208:	2600      	movs	r6, #0
 800f20a:	42a6      	cmp	r6, r4
 800f20c:	d105      	bne.n	800f21a <__libc_init_array+0x2e>
 800f20e:	bd70      	pop	{r4, r5, r6, pc}
 800f210:	f855 3b04 	ldr.w	r3, [r5], #4
 800f214:	4798      	blx	r3
 800f216:	3601      	adds	r6, #1
 800f218:	e7ee      	b.n	800f1f8 <__libc_init_array+0xc>
 800f21a:	f855 3b04 	ldr.w	r3, [r5], #4
 800f21e:	4798      	blx	r3
 800f220:	3601      	adds	r6, #1
 800f222:	e7f2      	b.n	800f20a <__libc_init_array+0x1e>
 800f224:	080144e0 	.word	0x080144e0
 800f228:	080144e0 	.word	0x080144e0
 800f22c:	080144e0 	.word	0x080144e0
 800f230:	080144e4 	.word	0x080144e4

0800f234 <__retarget_lock_init_recursive>:
 800f234:	4770      	bx	lr

0800f236 <__retarget_lock_acquire_recursive>:
 800f236:	4770      	bx	lr

0800f238 <__retarget_lock_release_recursive>:
 800f238:	4770      	bx	lr

0800f23a <memcpy>:
 800f23a:	440a      	add	r2, r1
 800f23c:	4291      	cmp	r1, r2
 800f23e:	f100 33ff 	add.w	r3, r0, #4294967295
 800f242:	d100      	bne.n	800f246 <memcpy+0xc>
 800f244:	4770      	bx	lr
 800f246:	b510      	push	{r4, lr}
 800f248:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f24c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f250:	4291      	cmp	r1, r2
 800f252:	d1f9      	bne.n	800f248 <memcpy+0xe>
 800f254:	bd10      	pop	{r4, pc}
	...

0800f258 <nanf>:
 800f258:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800f260 <nanf+0x8>
 800f25c:	4770      	bx	lr
 800f25e:	bf00      	nop
 800f260:	7fc00000 	.word	0x7fc00000

0800f264 <quorem>:
 800f264:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f268:	6903      	ldr	r3, [r0, #16]
 800f26a:	690c      	ldr	r4, [r1, #16]
 800f26c:	42a3      	cmp	r3, r4
 800f26e:	4607      	mov	r7, r0
 800f270:	db7e      	blt.n	800f370 <quorem+0x10c>
 800f272:	3c01      	subs	r4, #1
 800f274:	f101 0814 	add.w	r8, r1, #20
 800f278:	00a3      	lsls	r3, r4, #2
 800f27a:	f100 0514 	add.w	r5, r0, #20
 800f27e:	9300      	str	r3, [sp, #0]
 800f280:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f284:	9301      	str	r3, [sp, #4]
 800f286:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f28a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f28e:	3301      	adds	r3, #1
 800f290:	429a      	cmp	r2, r3
 800f292:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f296:	fbb2 f6f3 	udiv	r6, r2, r3
 800f29a:	d32e      	bcc.n	800f2fa <quorem+0x96>
 800f29c:	f04f 0a00 	mov.w	sl, #0
 800f2a0:	46c4      	mov	ip, r8
 800f2a2:	46ae      	mov	lr, r5
 800f2a4:	46d3      	mov	fp, sl
 800f2a6:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f2aa:	b298      	uxth	r0, r3
 800f2ac:	fb06 a000 	mla	r0, r6, r0, sl
 800f2b0:	0c02      	lsrs	r2, r0, #16
 800f2b2:	0c1b      	lsrs	r3, r3, #16
 800f2b4:	fb06 2303 	mla	r3, r6, r3, r2
 800f2b8:	f8de 2000 	ldr.w	r2, [lr]
 800f2bc:	b280      	uxth	r0, r0
 800f2be:	b292      	uxth	r2, r2
 800f2c0:	1a12      	subs	r2, r2, r0
 800f2c2:	445a      	add	r2, fp
 800f2c4:	f8de 0000 	ldr.w	r0, [lr]
 800f2c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f2cc:	b29b      	uxth	r3, r3
 800f2ce:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800f2d2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800f2d6:	b292      	uxth	r2, r2
 800f2d8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800f2dc:	45e1      	cmp	r9, ip
 800f2de:	f84e 2b04 	str.w	r2, [lr], #4
 800f2e2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800f2e6:	d2de      	bcs.n	800f2a6 <quorem+0x42>
 800f2e8:	9b00      	ldr	r3, [sp, #0]
 800f2ea:	58eb      	ldr	r3, [r5, r3]
 800f2ec:	b92b      	cbnz	r3, 800f2fa <quorem+0x96>
 800f2ee:	9b01      	ldr	r3, [sp, #4]
 800f2f0:	3b04      	subs	r3, #4
 800f2f2:	429d      	cmp	r5, r3
 800f2f4:	461a      	mov	r2, r3
 800f2f6:	d32f      	bcc.n	800f358 <quorem+0xf4>
 800f2f8:	613c      	str	r4, [r7, #16]
 800f2fa:	4638      	mov	r0, r7
 800f2fc:	f001 f9c4 	bl	8010688 <__mcmp>
 800f300:	2800      	cmp	r0, #0
 800f302:	db25      	blt.n	800f350 <quorem+0xec>
 800f304:	4629      	mov	r1, r5
 800f306:	2000      	movs	r0, #0
 800f308:	f858 2b04 	ldr.w	r2, [r8], #4
 800f30c:	f8d1 c000 	ldr.w	ip, [r1]
 800f310:	fa1f fe82 	uxth.w	lr, r2
 800f314:	fa1f f38c 	uxth.w	r3, ip
 800f318:	eba3 030e 	sub.w	r3, r3, lr
 800f31c:	4403      	add	r3, r0
 800f31e:	0c12      	lsrs	r2, r2, #16
 800f320:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800f324:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800f328:	b29b      	uxth	r3, r3
 800f32a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f32e:	45c1      	cmp	r9, r8
 800f330:	f841 3b04 	str.w	r3, [r1], #4
 800f334:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f338:	d2e6      	bcs.n	800f308 <quorem+0xa4>
 800f33a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f33e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f342:	b922      	cbnz	r2, 800f34e <quorem+0xea>
 800f344:	3b04      	subs	r3, #4
 800f346:	429d      	cmp	r5, r3
 800f348:	461a      	mov	r2, r3
 800f34a:	d30b      	bcc.n	800f364 <quorem+0x100>
 800f34c:	613c      	str	r4, [r7, #16]
 800f34e:	3601      	adds	r6, #1
 800f350:	4630      	mov	r0, r6
 800f352:	b003      	add	sp, #12
 800f354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f358:	6812      	ldr	r2, [r2, #0]
 800f35a:	3b04      	subs	r3, #4
 800f35c:	2a00      	cmp	r2, #0
 800f35e:	d1cb      	bne.n	800f2f8 <quorem+0x94>
 800f360:	3c01      	subs	r4, #1
 800f362:	e7c6      	b.n	800f2f2 <quorem+0x8e>
 800f364:	6812      	ldr	r2, [r2, #0]
 800f366:	3b04      	subs	r3, #4
 800f368:	2a00      	cmp	r2, #0
 800f36a:	d1ef      	bne.n	800f34c <quorem+0xe8>
 800f36c:	3c01      	subs	r4, #1
 800f36e:	e7ea      	b.n	800f346 <quorem+0xe2>
 800f370:	2000      	movs	r0, #0
 800f372:	e7ee      	b.n	800f352 <quorem+0xee>
 800f374:	0000      	movs	r0, r0
	...

0800f378 <_dtoa_r>:
 800f378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f37c:	69c7      	ldr	r7, [r0, #28]
 800f37e:	b099      	sub	sp, #100	@ 0x64
 800f380:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f384:	ec55 4b10 	vmov	r4, r5, d0
 800f388:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800f38a:	9109      	str	r1, [sp, #36]	@ 0x24
 800f38c:	4683      	mov	fp, r0
 800f38e:	920e      	str	r2, [sp, #56]	@ 0x38
 800f390:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f392:	b97f      	cbnz	r7, 800f3b4 <_dtoa_r+0x3c>
 800f394:	2010      	movs	r0, #16
 800f396:	f000 fdfd 	bl	800ff94 <malloc>
 800f39a:	4602      	mov	r2, r0
 800f39c:	f8cb 001c 	str.w	r0, [fp, #28]
 800f3a0:	b920      	cbnz	r0, 800f3ac <_dtoa_r+0x34>
 800f3a2:	4ba7      	ldr	r3, [pc, #668]	@ (800f640 <_dtoa_r+0x2c8>)
 800f3a4:	21ef      	movs	r1, #239	@ 0xef
 800f3a6:	48a7      	ldr	r0, [pc, #668]	@ (800f644 <_dtoa_r+0x2cc>)
 800f3a8:	f002 fe32 	bl	8012010 <__assert_func>
 800f3ac:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800f3b0:	6007      	str	r7, [r0, #0]
 800f3b2:	60c7      	str	r7, [r0, #12]
 800f3b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f3b8:	6819      	ldr	r1, [r3, #0]
 800f3ba:	b159      	cbz	r1, 800f3d4 <_dtoa_r+0x5c>
 800f3bc:	685a      	ldr	r2, [r3, #4]
 800f3be:	604a      	str	r2, [r1, #4]
 800f3c0:	2301      	movs	r3, #1
 800f3c2:	4093      	lsls	r3, r2
 800f3c4:	608b      	str	r3, [r1, #8]
 800f3c6:	4658      	mov	r0, fp
 800f3c8:	f000 feda 	bl	8010180 <_Bfree>
 800f3cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f3d0:	2200      	movs	r2, #0
 800f3d2:	601a      	str	r2, [r3, #0]
 800f3d4:	1e2b      	subs	r3, r5, #0
 800f3d6:	bfb9      	ittee	lt
 800f3d8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800f3dc:	9303      	strlt	r3, [sp, #12]
 800f3de:	2300      	movge	r3, #0
 800f3e0:	6033      	strge	r3, [r6, #0]
 800f3e2:	9f03      	ldr	r7, [sp, #12]
 800f3e4:	4b98      	ldr	r3, [pc, #608]	@ (800f648 <_dtoa_r+0x2d0>)
 800f3e6:	bfbc      	itt	lt
 800f3e8:	2201      	movlt	r2, #1
 800f3ea:	6032      	strlt	r2, [r6, #0]
 800f3ec:	43bb      	bics	r3, r7
 800f3ee:	d112      	bne.n	800f416 <_dtoa_r+0x9e>
 800f3f0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f3f2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800f3f6:	6013      	str	r3, [r2, #0]
 800f3f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f3fc:	4323      	orrs	r3, r4
 800f3fe:	f000 854d 	beq.w	800fe9c <_dtoa_r+0xb24>
 800f402:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f404:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800f65c <_dtoa_r+0x2e4>
 800f408:	2b00      	cmp	r3, #0
 800f40a:	f000 854f 	beq.w	800feac <_dtoa_r+0xb34>
 800f40e:	f10a 0303 	add.w	r3, sl, #3
 800f412:	f000 bd49 	b.w	800fea8 <_dtoa_r+0xb30>
 800f416:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f41a:	2200      	movs	r2, #0
 800f41c:	ec51 0b17 	vmov	r0, r1, d7
 800f420:	2300      	movs	r3, #0
 800f422:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800f426:	f7f1 fb27 	bl	8000a78 <__aeabi_dcmpeq>
 800f42a:	4680      	mov	r8, r0
 800f42c:	b158      	cbz	r0, 800f446 <_dtoa_r+0xce>
 800f42e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f430:	2301      	movs	r3, #1
 800f432:	6013      	str	r3, [r2, #0]
 800f434:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f436:	b113      	cbz	r3, 800f43e <_dtoa_r+0xc6>
 800f438:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800f43a:	4b84      	ldr	r3, [pc, #528]	@ (800f64c <_dtoa_r+0x2d4>)
 800f43c:	6013      	str	r3, [r2, #0]
 800f43e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800f660 <_dtoa_r+0x2e8>
 800f442:	f000 bd33 	b.w	800feac <_dtoa_r+0xb34>
 800f446:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800f44a:	aa16      	add	r2, sp, #88	@ 0x58
 800f44c:	a917      	add	r1, sp, #92	@ 0x5c
 800f44e:	4658      	mov	r0, fp
 800f450:	f001 fa3a 	bl	80108c8 <__d2b>
 800f454:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800f458:	4681      	mov	r9, r0
 800f45a:	2e00      	cmp	r6, #0
 800f45c:	d077      	beq.n	800f54e <_dtoa_r+0x1d6>
 800f45e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f460:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800f464:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f468:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f46c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800f470:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800f474:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800f478:	4619      	mov	r1, r3
 800f47a:	2200      	movs	r2, #0
 800f47c:	4b74      	ldr	r3, [pc, #464]	@ (800f650 <_dtoa_r+0x2d8>)
 800f47e:	f7f0 fedb 	bl	8000238 <__aeabi_dsub>
 800f482:	a369      	add	r3, pc, #420	@ (adr r3, 800f628 <_dtoa_r+0x2b0>)
 800f484:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f488:	f7f1 f88e 	bl	80005a8 <__aeabi_dmul>
 800f48c:	a368      	add	r3, pc, #416	@ (adr r3, 800f630 <_dtoa_r+0x2b8>)
 800f48e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f492:	f7f0 fed3 	bl	800023c <__adddf3>
 800f496:	4604      	mov	r4, r0
 800f498:	4630      	mov	r0, r6
 800f49a:	460d      	mov	r5, r1
 800f49c:	f7f1 f81a 	bl	80004d4 <__aeabi_i2d>
 800f4a0:	a365      	add	r3, pc, #404	@ (adr r3, 800f638 <_dtoa_r+0x2c0>)
 800f4a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4a6:	f7f1 f87f 	bl	80005a8 <__aeabi_dmul>
 800f4aa:	4602      	mov	r2, r0
 800f4ac:	460b      	mov	r3, r1
 800f4ae:	4620      	mov	r0, r4
 800f4b0:	4629      	mov	r1, r5
 800f4b2:	f7f0 fec3 	bl	800023c <__adddf3>
 800f4b6:	4604      	mov	r4, r0
 800f4b8:	460d      	mov	r5, r1
 800f4ba:	f7f1 fb25 	bl	8000b08 <__aeabi_d2iz>
 800f4be:	2200      	movs	r2, #0
 800f4c0:	4607      	mov	r7, r0
 800f4c2:	2300      	movs	r3, #0
 800f4c4:	4620      	mov	r0, r4
 800f4c6:	4629      	mov	r1, r5
 800f4c8:	f7f1 fae0 	bl	8000a8c <__aeabi_dcmplt>
 800f4cc:	b140      	cbz	r0, 800f4e0 <_dtoa_r+0x168>
 800f4ce:	4638      	mov	r0, r7
 800f4d0:	f7f1 f800 	bl	80004d4 <__aeabi_i2d>
 800f4d4:	4622      	mov	r2, r4
 800f4d6:	462b      	mov	r3, r5
 800f4d8:	f7f1 face 	bl	8000a78 <__aeabi_dcmpeq>
 800f4dc:	b900      	cbnz	r0, 800f4e0 <_dtoa_r+0x168>
 800f4de:	3f01      	subs	r7, #1
 800f4e0:	2f16      	cmp	r7, #22
 800f4e2:	d851      	bhi.n	800f588 <_dtoa_r+0x210>
 800f4e4:	4b5b      	ldr	r3, [pc, #364]	@ (800f654 <_dtoa_r+0x2dc>)
 800f4e6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f4ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f4f2:	f7f1 facb 	bl	8000a8c <__aeabi_dcmplt>
 800f4f6:	2800      	cmp	r0, #0
 800f4f8:	d048      	beq.n	800f58c <_dtoa_r+0x214>
 800f4fa:	3f01      	subs	r7, #1
 800f4fc:	2300      	movs	r3, #0
 800f4fe:	9312      	str	r3, [sp, #72]	@ 0x48
 800f500:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f502:	1b9b      	subs	r3, r3, r6
 800f504:	1e5a      	subs	r2, r3, #1
 800f506:	bf44      	itt	mi
 800f508:	f1c3 0801 	rsbmi	r8, r3, #1
 800f50c:	2300      	movmi	r3, #0
 800f50e:	9208      	str	r2, [sp, #32]
 800f510:	bf54      	ite	pl
 800f512:	f04f 0800 	movpl.w	r8, #0
 800f516:	9308      	strmi	r3, [sp, #32]
 800f518:	2f00      	cmp	r7, #0
 800f51a:	db39      	blt.n	800f590 <_dtoa_r+0x218>
 800f51c:	9b08      	ldr	r3, [sp, #32]
 800f51e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800f520:	443b      	add	r3, r7
 800f522:	9308      	str	r3, [sp, #32]
 800f524:	2300      	movs	r3, #0
 800f526:	930a      	str	r3, [sp, #40]	@ 0x28
 800f528:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f52a:	2b09      	cmp	r3, #9
 800f52c:	d864      	bhi.n	800f5f8 <_dtoa_r+0x280>
 800f52e:	2b05      	cmp	r3, #5
 800f530:	bfc4      	itt	gt
 800f532:	3b04      	subgt	r3, #4
 800f534:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800f536:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f538:	f1a3 0302 	sub.w	r3, r3, #2
 800f53c:	bfcc      	ite	gt
 800f53e:	2400      	movgt	r4, #0
 800f540:	2401      	movle	r4, #1
 800f542:	2b03      	cmp	r3, #3
 800f544:	d863      	bhi.n	800f60e <_dtoa_r+0x296>
 800f546:	e8df f003 	tbb	[pc, r3]
 800f54a:	372a      	.short	0x372a
 800f54c:	5535      	.short	0x5535
 800f54e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800f552:	441e      	add	r6, r3
 800f554:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800f558:	2b20      	cmp	r3, #32
 800f55a:	bfc1      	itttt	gt
 800f55c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800f560:	409f      	lslgt	r7, r3
 800f562:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800f566:	fa24 f303 	lsrgt.w	r3, r4, r3
 800f56a:	bfd6      	itet	le
 800f56c:	f1c3 0320 	rsble	r3, r3, #32
 800f570:	ea47 0003 	orrgt.w	r0, r7, r3
 800f574:	fa04 f003 	lslle.w	r0, r4, r3
 800f578:	f7f0 ff9c 	bl	80004b4 <__aeabi_ui2d>
 800f57c:	2201      	movs	r2, #1
 800f57e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800f582:	3e01      	subs	r6, #1
 800f584:	9214      	str	r2, [sp, #80]	@ 0x50
 800f586:	e777      	b.n	800f478 <_dtoa_r+0x100>
 800f588:	2301      	movs	r3, #1
 800f58a:	e7b8      	b.n	800f4fe <_dtoa_r+0x186>
 800f58c:	9012      	str	r0, [sp, #72]	@ 0x48
 800f58e:	e7b7      	b.n	800f500 <_dtoa_r+0x188>
 800f590:	427b      	negs	r3, r7
 800f592:	930a      	str	r3, [sp, #40]	@ 0x28
 800f594:	2300      	movs	r3, #0
 800f596:	eba8 0807 	sub.w	r8, r8, r7
 800f59a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f59c:	e7c4      	b.n	800f528 <_dtoa_r+0x1b0>
 800f59e:	2300      	movs	r3, #0
 800f5a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f5a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	dc35      	bgt.n	800f614 <_dtoa_r+0x29c>
 800f5a8:	2301      	movs	r3, #1
 800f5aa:	9300      	str	r3, [sp, #0]
 800f5ac:	9307      	str	r3, [sp, #28]
 800f5ae:	461a      	mov	r2, r3
 800f5b0:	920e      	str	r2, [sp, #56]	@ 0x38
 800f5b2:	e00b      	b.n	800f5cc <_dtoa_r+0x254>
 800f5b4:	2301      	movs	r3, #1
 800f5b6:	e7f3      	b.n	800f5a0 <_dtoa_r+0x228>
 800f5b8:	2300      	movs	r3, #0
 800f5ba:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f5bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f5be:	18fb      	adds	r3, r7, r3
 800f5c0:	9300      	str	r3, [sp, #0]
 800f5c2:	3301      	adds	r3, #1
 800f5c4:	2b01      	cmp	r3, #1
 800f5c6:	9307      	str	r3, [sp, #28]
 800f5c8:	bfb8      	it	lt
 800f5ca:	2301      	movlt	r3, #1
 800f5cc:	f8db 001c 	ldr.w	r0, [fp, #28]
 800f5d0:	2100      	movs	r1, #0
 800f5d2:	2204      	movs	r2, #4
 800f5d4:	f102 0514 	add.w	r5, r2, #20
 800f5d8:	429d      	cmp	r5, r3
 800f5da:	d91f      	bls.n	800f61c <_dtoa_r+0x2a4>
 800f5dc:	6041      	str	r1, [r0, #4]
 800f5de:	4658      	mov	r0, fp
 800f5e0:	f000 fd8e 	bl	8010100 <_Balloc>
 800f5e4:	4682      	mov	sl, r0
 800f5e6:	2800      	cmp	r0, #0
 800f5e8:	d13c      	bne.n	800f664 <_dtoa_r+0x2ec>
 800f5ea:	4b1b      	ldr	r3, [pc, #108]	@ (800f658 <_dtoa_r+0x2e0>)
 800f5ec:	4602      	mov	r2, r0
 800f5ee:	f240 11af 	movw	r1, #431	@ 0x1af
 800f5f2:	e6d8      	b.n	800f3a6 <_dtoa_r+0x2e>
 800f5f4:	2301      	movs	r3, #1
 800f5f6:	e7e0      	b.n	800f5ba <_dtoa_r+0x242>
 800f5f8:	2401      	movs	r4, #1
 800f5fa:	2300      	movs	r3, #0
 800f5fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800f5fe:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f600:	f04f 33ff 	mov.w	r3, #4294967295
 800f604:	9300      	str	r3, [sp, #0]
 800f606:	9307      	str	r3, [sp, #28]
 800f608:	2200      	movs	r2, #0
 800f60a:	2312      	movs	r3, #18
 800f60c:	e7d0      	b.n	800f5b0 <_dtoa_r+0x238>
 800f60e:	2301      	movs	r3, #1
 800f610:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f612:	e7f5      	b.n	800f600 <_dtoa_r+0x288>
 800f614:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f616:	9300      	str	r3, [sp, #0]
 800f618:	9307      	str	r3, [sp, #28]
 800f61a:	e7d7      	b.n	800f5cc <_dtoa_r+0x254>
 800f61c:	3101      	adds	r1, #1
 800f61e:	0052      	lsls	r2, r2, #1
 800f620:	e7d8      	b.n	800f5d4 <_dtoa_r+0x25c>
 800f622:	bf00      	nop
 800f624:	f3af 8000 	nop.w
 800f628:	636f4361 	.word	0x636f4361
 800f62c:	3fd287a7 	.word	0x3fd287a7
 800f630:	8b60c8b3 	.word	0x8b60c8b3
 800f634:	3fc68a28 	.word	0x3fc68a28
 800f638:	509f79fb 	.word	0x509f79fb
 800f63c:	3fd34413 	.word	0x3fd34413
 800f640:	080140ef 	.word	0x080140ef
 800f644:	08014106 	.word	0x08014106
 800f648:	7ff00000 	.word	0x7ff00000
 800f64c:	080140ba 	.word	0x080140ba
 800f650:	3ff80000 	.word	0x3ff80000
 800f654:	08014200 	.word	0x08014200
 800f658:	0801415e 	.word	0x0801415e
 800f65c:	080140eb 	.word	0x080140eb
 800f660:	080140b9 	.word	0x080140b9
 800f664:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f668:	6018      	str	r0, [r3, #0]
 800f66a:	9b07      	ldr	r3, [sp, #28]
 800f66c:	2b0e      	cmp	r3, #14
 800f66e:	f200 80a4 	bhi.w	800f7ba <_dtoa_r+0x442>
 800f672:	2c00      	cmp	r4, #0
 800f674:	f000 80a1 	beq.w	800f7ba <_dtoa_r+0x442>
 800f678:	2f00      	cmp	r7, #0
 800f67a:	dd33      	ble.n	800f6e4 <_dtoa_r+0x36c>
 800f67c:	4bad      	ldr	r3, [pc, #692]	@ (800f934 <_dtoa_r+0x5bc>)
 800f67e:	f007 020f 	and.w	r2, r7, #15
 800f682:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f686:	ed93 7b00 	vldr	d7, [r3]
 800f68a:	05f8      	lsls	r0, r7, #23
 800f68c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f690:	ea4f 1427 	mov.w	r4, r7, asr #4
 800f694:	d516      	bpl.n	800f6c4 <_dtoa_r+0x34c>
 800f696:	4ba8      	ldr	r3, [pc, #672]	@ (800f938 <_dtoa_r+0x5c0>)
 800f698:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f69c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f6a0:	f7f1 f8ac 	bl	80007fc <__aeabi_ddiv>
 800f6a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f6a8:	f004 040f 	and.w	r4, r4, #15
 800f6ac:	2603      	movs	r6, #3
 800f6ae:	4da2      	ldr	r5, [pc, #648]	@ (800f938 <_dtoa_r+0x5c0>)
 800f6b0:	b954      	cbnz	r4, 800f6c8 <_dtoa_r+0x350>
 800f6b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f6b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f6ba:	f7f1 f89f 	bl	80007fc <__aeabi_ddiv>
 800f6be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f6c2:	e028      	b.n	800f716 <_dtoa_r+0x39e>
 800f6c4:	2602      	movs	r6, #2
 800f6c6:	e7f2      	b.n	800f6ae <_dtoa_r+0x336>
 800f6c8:	07e1      	lsls	r1, r4, #31
 800f6ca:	d508      	bpl.n	800f6de <_dtoa_r+0x366>
 800f6cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f6d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f6d4:	f7f0 ff68 	bl	80005a8 <__aeabi_dmul>
 800f6d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f6dc:	3601      	adds	r6, #1
 800f6de:	1064      	asrs	r4, r4, #1
 800f6e0:	3508      	adds	r5, #8
 800f6e2:	e7e5      	b.n	800f6b0 <_dtoa_r+0x338>
 800f6e4:	f000 80d2 	beq.w	800f88c <_dtoa_r+0x514>
 800f6e8:	427c      	negs	r4, r7
 800f6ea:	4b92      	ldr	r3, [pc, #584]	@ (800f934 <_dtoa_r+0x5bc>)
 800f6ec:	4d92      	ldr	r5, [pc, #584]	@ (800f938 <_dtoa_r+0x5c0>)
 800f6ee:	f004 020f 	and.w	r2, r4, #15
 800f6f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f6f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f6fe:	f7f0 ff53 	bl	80005a8 <__aeabi_dmul>
 800f702:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f706:	1124      	asrs	r4, r4, #4
 800f708:	2300      	movs	r3, #0
 800f70a:	2602      	movs	r6, #2
 800f70c:	2c00      	cmp	r4, #0
 800f70e:	f040 80b2 	bne.w	800f876 <_dtoa_r+0x4fe>
 800f712:	2b00      	cmp	r3, #0
 800f714:	d1d3      	bne.n	800f6be <_dtoa_r+0x346>
 800f716:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f718:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	f000 80b7 	beq.w	800f890 <_dtoa_r+0x518>
 800f722:	4b86      	ldr	r3, [pc, #536]	@ (800f93c <_dtoa_r+0x5c4>)
 800f724:	2200      	movs	r2, #0
 800f726:	4620      	mov	r0, r4
 800f728:	4629      	mov	r1, r5
 800f72a:	f7f1 f9af 	bl	8000a8c <__aeabi_dcmplt>
 800f72e:	2800      	cmp	r0, #0
 800f730:	f000 80ae 	beq.w	800f890 <_dtoa_r+0x518>
 800f734:	9b07      	ldr	r3, [sp, #28]
 800f736:	2b00      	cmp	r3, #0
 800f738:	f000 80aa 	beq.w	800f890 <_dtoa_r+0x518>
 800f73c:	9b00      	ldr	r3, [sp, #0]
 800f73e:	2b00      	cmp	r3, #0
 800f740:	dd37      	ble.n	800f7b2 <_dtoa_r+0x43a>
 800f742:	1e7b      	subs	r3, r7, #1
 800f744:	9304      	str	r3, [sp, #16]
 800f746:	4620      	mov	r0, r4
 800f748:	4b7d      	ldr	r3, [pc, #500]	@ (800f940 <_dtoa_r+0x5c8>)
 800f74a:	2200      	movs	r2, #0
 800f74c:	4629      	mov	r1, r5
 800f74e:	f7f0 ff2b 	bl	80005a8 <__aeabi_dmul>
 800f752:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f756:	9c00      	ldr	r4, [sp, #0]
 800f758:	3601      	adds	r6, #1
 800f75a:	4630      	mov	r0, r6
 800f75c:	f7f0 feba 	bl	80004d4 <__aeabi_i2d>
 800f760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f764:	f7f0 ff20 	bl	80005a8 <__aeabi_dmul>
 800f768:	4b76      	ldr	r3, [pc, #472]	@ (800f944 <_dtoa_r+0x5cc>)
 800f76a:	2200      	movs	r2, #0
 800f76c:	f7f0 fd66 	bl	800023c <__adddf3>
 800f770:	4605      	mov	r5, r0
 800f772:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800f776:	2c00      	cmp	r4, #0
 800f778:	f040 808d 	bne.w	800f896 <_dtoa_r+0x51e>
 800f77c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f780:	4b71      	ldr	r3, [pc, #452]	@ (800f948 <_dtoa_r+0x5d0>)
 800f782:	2200      	movs	r2, #0
 800f784:	f7f0 fd58 	bl	8000238 <__aeabi_dsub>
 800f788:	4602      	mov	r2, r0
 800f78a:	460b      	mov	r3, r1
 800f78c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f790:	462a      	mov	r2, r5
 800f792:	4633      	mov	r3, r6
 800f794:	f7f1 f998 	bl	8000ac8 <__aeabi_dcmpgt>
 800f798:	2800      	cmp	r0, #0
 800f79a:	f040 828b 	bne.w	800fcb4 <_dtoa_r+0x93c>
 800f79e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f7a2:	462a      	mov	r2, r5
 800f7a4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800f7a8:	f7f1 f970 	bl	8000a8c <__aeabi_dcmplt>
 800f7ac:	2800      	cmp	r0, #0
 800f7ae:	f040 8128 	bne.w	800fa02 <_dtoa_r+0x68a>
 800f7b2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800f7b6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800f7ba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	f2c0 815a 	blt.w	800fa76 <_dtoa_r+0x6fe>
 800f7c2:	2f0e      	cmp	r7, #14
 800f7c4:	f300 8157 	bgt.w	800fa76 <_dtoa_r+0x6fe>
 800f7c8:	4b5a      	ldr	r3, [pc, #360]	@ (800f934 <_dtoa_r+0x5bc>)
 800f7ca:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f7ce:	ed93 7b00 	vldr	d7, [r3]
 800f7d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	ed8d 7b00 	vstr	d7, [sp]
 800f7da:	da03      	bge.n	800f7e4 <_dtoa_r+0x46c>
 800f7dc:	9b07      	ldr	r3, [sp, #28]
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	f340 8101 	ble.w	800f9e6 <_dtoa_r+0x66e>
 800f7e4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f7e8:	4656      	mov	r6, sl
 800f7ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f7ee:	4620      	mov	r0, r4
 800f7f0:	4629      	mov	r1, r5
 800f7f2:	f7f1 f803 	bl	80007fc <__aeabi_ddiv>
 800f7f6:	f7f1 f987 	bl	8000b08 <__aeabi_d2iz>
 800f7fa:	4680      	mov	r8, r0
 800f7fc:	f7f0 fe6a 	bl	80004d4 <__aeabi_i2d>
 800f800:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f804:	f7f0 fed0 	bl	80005a8 <__aeabi_dmul>
 800f808:	4602      	mov	r2, r0
 800f80a:	460b      	mov	r3, r1
 800f80c:	4620      	mov	r0, r4
 800f80e:	4629      	mov	r1, r5
 800f810:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800f814:	f7f0 fd10 	bl	8000238 <__aeabi_dsub>
 800f818:	f806 4b01 	strb.w	r4, [r6], #1
 800f81c:	9d07      	ldr	r5, [sp, #28]
 800f81e:	eba6 040a 	sub.w	r4, r6, sl
 800f822:	42a5      	cmp	r5, r4
 800f824:	4602      	mov	r2, r0
 800f826:	460b      	mov	r3, r1
 800f828:	f040 8117 	bne.w	800fa5a <_dtoa_r+0x6e2>
 800f82c:	f7f0 fd06 	bl	800023c <__adddf3>
 800f830:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f834:	4604      	mov	r4, r0
 800f836:	460d      	mov	r5, r1
 800f838:	f7f1 f946 	bl	8000ac8 <__aeabi_dcmpgt>
 800f83c:	2800      	cmp	r0, #0
 800f83e:	f040 80f9 	bne.w	800fa34 <_dtoa_r+0x6bc>
 800f842:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f846:	4620      	mov	r0, r4
 800f848:	4629      	mov	r1, r5
 800f84a:	f7f1 f915 	bl	8000a78 <__aeabi_dcmpeq>
 800f84e:	b118      	cbz	r0, 800f858 <_dtoa_r+0x4e0>
 800f850:	f018 0f01 	tst.w	r8, #1
 800f854:	f040 80ee 	bne.w	800fa34 <_dtoa_r+0x6bc>
 800f858:	4649      	mov	r1, r9
 800f85a:	4658      	mov	r0, fp
 800f85c:	f000 fc90 	bl	8010180 <_Bfree>
 800f860:	2300      	movs	r3, #0
 800f862:	7033      	strb	r3, [r6, #0]
 800f864:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f866:	3701      	adds	r7, #1
 800f868:	601f      	str	r7, [r3, #0]
 800f86a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	f000 831d 	beq.w	800feac <_dtoa_r+0xb34>
 800f872:	601e      	str	r6, [r3, #0]
 800f874:	e31a      	b.n	800feac <_dtoa_r+0xb34>
 800f876:	07e2      	lsls	r2, r4, #31
 800f878:	d505      	bpl.n	800f886 <_dtoa_r+0x50e>
 800f87a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f87e:	f7f0 fe93 	bl	80005a8 <__aeabi_dmul>
 800f882:	3601      	adds	r6, #1
 800f884:	2301      	movs	r3, #1
 800f886:	1064      	asrs	r4, r4, #1
 800f888:	3508      	adds	r5, #8
 800f88a:	e73f      	b.n	800f70c <_dtoa_r+0x394>
 800f88c:	2602      	movs	r6, #2
 800f88e:	e742      	b.n	800f716 <_dtoa_r+0x39e>
 800f890:	9c07      	ldr	r4, [sp, #28]
 800f892:	9704      	str	r7, [sp, #16]
 800f894:	e761      	b.n	800f75a <_dtoa_r+0x3e2>
 800f896:	4b27      	ldr	r3, [pc, #156]	@ (800f934 <_dtoa_r+0x5bc>)
 800f898:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f89a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f89e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f8a2:	4454      	add	r4, sl
 800f8a4:	2900      	cmp	r1, #0
 800f8a6:	d053      	beq.n	800f950 <_dtoa_r+0x5d8>
 800f8a8:	4928      	ldr	r1, [pc, #160]	@ (800f94c <_dtoa_r+0x5d4>)
 800f8aa:	2000      	movs	r0, #0
 800f8ac:	f7f0 ffa6 	bl	80007fc <__aeabi_ddiv>
 800f8b0:	4633      	mov	r3, r6
 800f8b2:	462a      	mov	r2, r5
 800f8b4:	f7f0 fcc0 	bl	8000238 <__aeabi_dsub>
 800f8b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f8bc:	4656      	mov	r6, sl
 800f8be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f8c2:	f7f1 f921 	bl	8000b08 <__aeabi_d2iz>
 800f8c6:	4605      	mov	r5, r0
 800f8c8:	f7f0 fe04 	bl	80004d4 <__aeabi_i2d>
 800f8cc:	4602      	mov	r2, r0
 800f8ce:	460b      	mov	r3, r1
 800f8d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f8d4:	f7f0 fcb0 	bl	8000238 <__aeabi_dsub>
 800f8d8:	3530      	adds	r5, #48	@ 0x30
 800f8da:	4602      	mov	r2, r0
 800f8dc:	460b      	mov	r3, r1
 800f8de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f8e2:	f806 5b01 	strb.w	r5, [r6], #1
 800f8e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f8ea:	f7f1 f8cf 	bl	8000a8c <__aeabi_dcmplt>
 800f8ee:	2800      	cmp	r0, #0
 800f8f0:	d171      	bne.n	800f9d6 <_dtoa_r+0x65e>
 800f8f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f8f6:	4911      	ldr	r1, [pc, #68]	@ (800f93c <_dtoa_r+0x5c4>)
 800f8f8:	2000      	movs	r0, #0
 800f8fa:	f7f0 fc9d 	bl	8000238 <__aeabi_dsub>
 800f8fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f902:	f7f1 f8c3 	bl	8000a8c <__aeabi_dcmplt>
 800f906:	2800      	cmp	r0, #0
 800f908:	f040 8095 	bne.w	800fa36 <_dtoa_r+0x6be>
 800f90c:	42a6      	cmp	r6, r4
 800f90e:	f43f af50 	beq.w	800f7b2 <_dtoa_r+0x43a>
 800f912:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f916:	4b0a      	ldr	r3, [pc, #40]	@ (800f940 <_dtoa_r+0x5c8>)
 800f918:	2200      	movs	r2, #0
 800f91a:	f7f0 fe45 	bl	80005a8 <__aeabi_dmul>
 800f91e:	4b08      	ldr	r3, [pc, #32]	@ (800f940 <_dtoa_r+0x5c8>)
 800f920:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f924:	2200      	movs	r2, #0
 800f926:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f92a:	f7f0 fe3d 	bl	80005a8 <__aeabi_dmul>
 800f92e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f932:	e7c4      	b.n	800f8be <_dtoa_r+0x546>
 800f934:	08014200 	.word	0x08014200
 800f938:	080141d8 	.word	0x080141d8
 800f93c:	3ff00000 	.word	0x3ff00000
 800f940:	40240000 	.word	0x40240000
 800f944:	401c0000 	.word	0x401c0000
 800f948:	40140000 	.word	0x40140000
 800f94c:	3fe00000 	.word	0x3fe00000
 800f950:	4631      	mov	r1, r6
 800f952:	4628      	mov	r0, r5
 800f954:	f7f0 fe28 	bl	80005a8 <__aeabi_dmul>
 800f958:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f95c:	9415      	str	r4, [sp, #84]	@ 0x54
 800f95e:	4656      	mov	r6, sl
 800f960:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f964:	f7f1 f8d0 	bl	8000b08 <__aeabi_d2iz>
 800f968:	4605      	mov	r5, r0
 800f96a:	f7f0 fdb3 	bl	80004d4 <__aeabi_i2d>
 800f96e:	4602      	mov	r2, r0
 800f970:	460b      	mov	r3, r1
 800f972:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f976:	f7f0 fc5f 	bl	8000238 <__aeabi_dsub>
 800f97a:	3530      	adds	r5, #48	@ 0x30
 800f97c:	f806 5b01 	strb.w	r5, [r6], #1
 800f980:	4602      	mov	r2, r0
 800f982:	460b      	mov	r3, r1
 800f984:	42a6      	cmp	r6, r4
 800f986:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f98a:	f04f 0200 	mov.w	r2, #0
 800f98e:	d124      	bne.n	800f9da <_dtoa_r+0x662>
 800f990:	4bac      	ldr	r3, [pc, #688]	@ (800fc44 <_dtoa_r+0x8cc>)
 800f992:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f996:	f7f0 fc51 	bl	800023c <__adddf3>
 800f99a:	4602      	mov	r2, r0
 800f99c:	460b      	mov	r3, r1
 800f99e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f9a2:	f7f1 f891 	bl	8000ac8 <__aeabi_dcmpgt>
 800f9a6:	2800      	cmp	r0, #0
 800f9a8:	d145      	bne.n	800fa36 <_dtoa_r+0x6be>
 800f9aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f9ae:	49a5      	ldr	r1, [pc, #660]	@ (800fc44 <_dtoa_r+0x8cc>)
 800f9b0:	2000      	movs	r0, #0
 800f9b2:	f7f0 fc41 	bl	8000238 <__aeabi_dsub>
 800f9b6:	4602      	mov	r2, r0
 800f9b8:	460b      	mov	r3, r1
 800f9ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f9be:	f7f1 f865 	bl	8000a8c <__aeabi_dcmplt>
 800f9c2:	2800      	cmp	r0, #0
 800f9c4:	f43f aef5 	beq.w	800f7b2 <_dtoa_r+0x43a>
 800f9c8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800f9ca:	1e73      	subs	r3, r6, #1
 800f9cc:	9315      	str	r3, [sp, #84]	@ 0x54
 800f9ce:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f9d2:	2b30      	cmp	r3, #48	@ 0x30
 800f9d4:	d0f8      	beq.n	800f9c8 <_dtoa_r+0x650>
 800f9d6:	9f04      	ldr	r7, [sp, #16]
 800f9d8:	e73e      	b.n	800f858 <_dtoa_r+0x4e0>
 800f9da:	4b9b      	ldr	r3, [pc, #620]	@ (800fc48 <_dtoa_r+0x8d0>)
 800f9dc:	f7f0 fde4 	bl	80005a8 <__aeabi_dmul>
 800f9e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f9e4:	e7bc      	b.n	800f960 <_dtoa_r+0x5e8>
 800f9e6:	d10c      	bne.n	800fa02 <_dtoa_r+0x68a>
 800f9e8:	4b98      	ldr	r3, [pc, #608]	@ (800fc4c <_dtoa_r+0x8d4>)
 800f9ea:	2200      	movs	r2, #0
 800f9ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f9f0:	f7f0 fdda 	bl	80005a8 <__aeabi_dmul>
 800f9f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f9f8:	f7f1 f85c 	bl	8000ab4 <__aeabi_dcmpge>
 800f9fc:	2800      	cmp	r0, #0
 800f9fe:	f000 8157 	beq.w	800fcb0 <_dtoa_r+0x938>
 800fa02:	2400      	movs	r4, #0
 800fa04:	4625      	mov	r5, r4
 800fa06:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fa08:	43db      	mvns	r3, r3
 800fa0a:	9304      	str	r3, [sp, #16]
 800fa0c:	4656      	mov	r6, sl
 800fa0e:	2700      	movs	r7, #0
 800fa10:	4621      	mov	r1, r4
 800fa12:	4658      	mov	r0, fp
 800fa14:	f000 fbb4 	bl	8010180 <_Bfree>
 800fa18:	2d00      	cmp	r5, #0
 800fa1a:	d0dc      	beq.n	800f9d6 <_dtoa_r+0x65e>
 800fa1c:	b12f      	cbz	r7, 800fa2a <_dtoa_r+0x6b2>
 800fa1e:	42af      	cmp	r7, r5
 800fa20:	d003      	beq.n	800fa2a <_dtoa_r+0x6b2>
 800fa22:	4639      	mov	r1, r7
 800fa24:	4658      	mov	r0, fp
 800fa26:	f000 fbab 	bl	8010180 <_Bfree>
 800fa2a:	4629      	mov	r1, r5
 800fa2c:	4658      	mov	r0, fp
 800fa2e:	f000 fba7 	bl	8010180 <_Bfree>
 800fa32:	e7d0      	b.n	800f9d6 <_dtoa_r+0x65e>
 800fa34:	9704      	str	r7, [sp, #16]
 800fa36:	4633      	mov	r3, r6
 800fa38:	461e      	mov	r6, r3
 800fa3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fa3e:	2a39      	cmp	r2, #57	@ 0x39
 800fa40:	d107      	bne.n	800fa52 <_dtoa_r+0x6da>
 800fa42:	459a      	cmp	sl, r3
 800fa44:	d1f8      	bne.n	800fa38 <_dtoa_r+0x6c0>
 800fa46:	9a04      	ldr	r2, [sp, #16]
 800fa48:	3201      	adds	r2, #1
 800fa4a:	9204      	str	r2, [sp, #16]
 800fa4c:	2230      	movs	r2, #48	@ 0x30
 800fa4e:	f88a 2000 	strb.w	r2, [sl]
 800fa52:	781a      	ldrb	r2, [r3, #0]
 800fa54:	3201      	adds	r2, #1
 800fa56:	701a      	strb	r2, [r3, #0]
 800fa58:	e7bd      	b.n	800f9d6 <_dtoa_r+0x65e>
 800fa5a:	4b7b      	ldr	r3, [pc, #492]	@ (800fc48 <_dtoa_r+0x8d0>)
 800fa5c:	2200      	movs	r2, #0
 800fa5e:	f7f0 fda3 	bl	80005a8 <__aeabi_dmul>
 800fa62:	2200      	movs	r2, #0
 800fa64:	2300      	movs	r3, #0
 800fa66:	4604      	mov	r4, r0
 800fa68:	460d      	mov	r5, r1
 800fa6a:	f7f1 f805 	bl	8000a78 <__aeabi_dcmpeq>
 800fa6e:	2800      	cmp	r0, #0
 800fa70:	f43f aebb 	beq.w	800f7ea <_dtoa_r+0x472>
 800fa74:	e6f0      	b.n	800f858 <_dtoa_r+0x4e0>
 800fa76:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800fa78:	2a00      	cmp	r2, #0
 800fa7a:	f000 80db 	beq.w	800fc34 <_dtoa_r+0x8bc>
 800fa7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fa80:	2a01      	cmp	r2, #1
 800fa82:	f300 80bf 	bgt.w	800fc04 <_dtoa_r+0x88c>
 800fa86:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800fa88:	2a00      	cmp	r2, #0
 800fa8a:	f000 80b7 	beq.w	800fbfc <_dtoa_r+0x884>
 800fa8e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800fa92:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800fa94:	4646      	mov	r6, r8
 800fa96:	9a08      	ldr	r2, [sp, #32]
 800fa98:	2101      	movs	r1, #1
 800fa9a:	441a      	add	r2, r3
 800fa9c:	4658      	mov	r0, fp
 800fa9e:	4498      	add	r8, r3
 800faa0:	9208      	str	r2, [sp, #32]
 800faa2:	f000 fc6b 	bl	801037c <__i2b>
 800faa6:	4605      	mov	r5, r0
 800faa8:	b15e      	cbz	r6, 800fac2 <_dtoa_r+0x74a>
 800faaa:	9b08      	ldr	r3, [sp, #32]
 800faac:	2b00      	cmp	r3, #0
 800faae:	dd08      	ble.n	800fac2 <_dtoa_r+0x74a>
 800fab0:	42b3      	cmp	r3, r6
 800fab2:	9a08      	ldr	r2, [sp, #32]
 800fab4:	bfa8      	it	ge
 800fab6:	4633      	movge	r3, r6
 800fab8:	eba8 0803 	sub.w	r8, r8, r3
 800fabc:	1af6      	subs	r6, r6, r3
 800fabe:	1ad3      	subs	r3, r2, r3
 800fac0:	9308      	str	r3, [sp, #32]
 800fac2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fac4:	b1f3      	cbz	r3, 800fb04 <_dtoa_r+0x78c>
 800fac6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fac8:	2b00      	cmp	r3, #0
 800faca:	f000 80b7 	beq.w	800fc3c <_dtoa_r+0x8c4>
 800face:	b18c      	cbz	r4, 800faf4 <_dtoa_r+0x77c>
 800fad0:	4629      	mov	r1, r5
 800fad2:	4622      	mov	r2, r4
 800fad4:	4658      	mov	r0, fp
 800fad6:	f000 fd11 	bl	80104fc <__pow5mult>
 800fada:	464a      	mov	r2, r9
 800fadc:	4601      	mov	r1, r0
 800fade:	4605      	mov	r5, r0
 800fae0:	4658      	mov	r0, fp
 800fae2:	f000 fc61 	bl	80103a8 <__multiply>
 800fae6:	4649      	mov	r1, r9
 800fae8:	9004      	str	r0, [sp, #16]
 800faea:	4658      	mov	r0, fp
 800faec:	f000 fb48 	bl	8010180 <_Bfree>
 800faf0:	9b04      	ldr	r3, [sp, #16]
 800faf2:	4699      	mov	r9, r3
 800faf4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800faf6:	1b1a      	subs	r2, r3, r4
 800faf8:	d004      	beq.n	800fb04 <_dtoa_r+0x78c>
 800fafa:	4649      	mov	r1, r9
 800fafc:	4658      	mov	r0, fp
 800fafe:	f000 fcfd 	bl	80104fc <__pow5mult>
 800fb02:	4681      	mov	r9, r0
 800fb04:	2101      	movs	r1, #1
 800fb06:	4658      	mov	r0, fp
 800fb08:	f000 fc38 	bl	801037c <__i2b>
 800fb0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fb0e:	4604      	mov	r4, r0
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	f000 81cf 	beq.w	800feb4 <_dtoa_r+0xb3c>
 800fb16:	461a      	mov	r2, r3
 800fb18:	4601      	mov	r1, r0
 800fb1a:	4658      	mov	r0, fp
 800fb1c:	f000 fcee 	bl	80104fc <__pow5mult>
 800fb20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb22:	2b01      	cmp	r3, #1
 800fb24:	4604      	mov	r4, r0
 800fb26:	f300 8095 	bgt.w	800fc54 <_dtoa_r+0x8dc>
 800fb2a:	9b02      	ldr	r3, [sp, #8]
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	f040 8087 	bne.w	800fc40 <_dtoa_r+0x8c8>
 800fb32:	9b03      	ldr	r3, [sp, #12]
 800fb34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	f040 8089 	bne.w	800fc50 <_dtoa_r+0x8d8>
 800fb3e:	9b03      	ldr	r3, [sp, #12]
 800fb40:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800fb44:	0d1b      	lsrs	r3, r3, #20
 800fb46:	051b      	lsls	r3, r3, #20
 800fb48:	b12b      	cbz	r3, 800fb56 <_dtoa_r+0x7de>
 800fb4a:	9b08      	ldr	r3, [sp, #32]
 800fb4c:	3301      	adds	r3, #1
 800fb4e:	9308      	str	r3, [sp, #32]
 800fb50:	f108 0801 	add.w	r8, r8, #1
 800fb54:	2301      	movs	r3, #1
 800fb56:	930a      	str	r3, [sp, #40]	@ 0x28
 800fb58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	f000 81b0 	beq.w	800fec0 <_dtoa_r+0xb48>
 800fb60:	6923      	ldr	r3, [r4, #16]
 800fb62:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800fb66:	6918      	ldr	r0, [r3, #16]
 800fb68:	f000 fbbc 	bl	80102e4 <__hi0bits>
 800fb6c:	f1c0 0020 	rsb	r0, r0, #32
 800fb70:	9b08      	ldr	r3, [sp, #32]
 800fb72:	4418      	add	r0, r3
 800fb74:	f010 001f 	ands.w	r0, r0, #31
 800fb78:	d077      	beq.n	800fc6a <_dtoa_r+0x8f2>
 800fb7a:	f1c0 0320 	rsb	r3, r0, #32
 800fb7e:	2b04      	cmp	r3, #4
 800fb80:	dd6b      	ble.n	800fc5a <_dtoa_r+0x8e2>
 800fb82:	9b08      	ldr	r3, [sp, #32]
 800fb84:	f1c0 001c 	rsb	r0, r0, #28
 800fb88:	4403      	add	r3, r0
 800fb8a:	4480      	add	r8, r0
 800fb8c:	4406      	add	r6, r0
 800fb8e:	9308      	str	r3, [sp, #32]
 800fb90:	f1b8 0f00 	cmp.w	r8, #0
 800fb94:	dd05      	ble.n	800fba2 <_dtoa_r+0x82a>
 800fb96:	4649      	mov	r1, r9
 800fb98:	4642      	mov	r2, r8
 800fb9a:	4658      	mov	r0, fp
 800fb9c:	f000 fd08 	bl	80105b0 <__lshift>
 800fba0:	4681      	mov	r9, r0
 800fba2:	9b08      	ldr	r3, [sp, #32]
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	dd05      	ble.n	800fbb4 <_dtoa_r+0x83c>
 800fba8:	4621      	mov	r1, r4
 800fbaa:	461a      	mov	r2, r3
 800fbac:	4658      	mov	r0, fp
 800fbae:	f000 fcff 	bl	80105b0 <__lshift>
 800fbb2:	4604      	mov	r4, r0
 800fbb4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d059      	beq.n	800fc6e <_dtoa_r+0x8f6>
 800fbba:	4621      	mov	r1, r4
 800fbbc:	4648      	mov	r0, r9
 800fbbe:	f000 fd63 	bl	8010688 <__mcmp>
 800fbc2:	2800      	cmp	r0, #0
 800fbc4:	da53      	bge.n	800fc6e <_dtoa_r+0x8f6>
 800fbc6:	1e7b      	subs	r3, r7, #1
 800fbc8:	9304      	str	r3, [sp, #16]
 800fbca:	4649      	mov	r1, r9
 800fbcc:	2300      	movs	r3, #0
 800fbce:	220a      	movs	r2, #10
 800fbd0:	4658      	mov	r0, fp
 800fbd2:	f000 faf7 	bl	80101c4 <__multadd>
 800fbd6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fbd8:	4681      	mov	r9, r0
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	f000 8172 	beq.w	800fec4 <_dtoa_r+0xb4c>
 800fbe0:	2300      	movs	r3, #0
 800fbe2:	4629      	mov	r1, r5
 800fbe4:	220a      	movs	r2, #10
 800fbe6:	4658      	mov	r0, fp
 800fbe8:	f000 faec 	bl	80101c4 <__multadd>
 800fbec:	9b00      	ldr	r3, [sp, #0]
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	4605      	mov	r5, r0
 800fbf2:	dc67      	bgt.n	800fcc4 <_dtoa_r+0x94c>
 800fbf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fbf6:	2b02      	cmp	r3, #2
 800fbf8:	dc41      	bgt.n	800fc7e <_dtoa_r+0x906>
 800fbfa:	e063      	b.n	800fcc4 <_dtoa_r+0x94c>
 800fbfc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800fbfe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800fc02:	e746      	b.n	800fa92 <_dtoa_r+0x71a>
 800fc04:	9b07      	ldr	r3, [sp, #28]
 800fc06:	1e5c      	subs	r4, r3, #1
 800fc08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fc0a:	42a3      	cmp	r3, r4
 800fc0c:	bfbf      	itttt	lt
 800fc0e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800fc10:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800fc12:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800fc14:	1ae3      	sublt	r3, r4, r3
 800fc16:	bfb4      	ite	lt
 800fc18:	18d2      	addlt	r2, r2, r3
 800fc1a:	1b1c      	subge	r4, r3, r4
 800fc1c:	9b07      	ldr	r3, [sp, #28]
 800fc1e:	bfbc      	itt	lt
 800fc20:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800fc22:	2400      	movlt	r4, #0
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	bfb5      	itete	lt
 800fc28:	eba8 0603 	sublt.w	r6, r8, r3
 800fc2c:	9b07      	ldrge	r3, [sp, #28]
 800fc2e:	2300      	movlt	r3, #0
 800fc30:	4646      	movge	r6, r8
 800fc32:	e730      	b.n	800fa96 <_dtoa_r+0x71e>
 800fc34:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800fc36:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800fc38:	4646      	mov	r6, r8
 800fc3a:	e735      	b.n	800faa8 <_dtoa_r+0x730>
 800fc3c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fc3e:	e75c      	b.n	800fafa <_dtoa_r+0x782>
 800fc40:	2300      	movs	r3, #0
 800fc42:	e788      	b.n	800fb56 <_dtoa_r+0x7de>
 800fc44:	3fe00000 	.word	0x3fe00000
 800fc48:	40240000 	.word	0x40240000
 800fc4c:	40140000 	.word	0x40140000
 800fc50:	9b02      	ldr	r3, [sp, #8]
 800fc52:	e780      	b.n	800fb56 <_dtoa_r+0x7de>
 800fc54:	2300      	movs	r3, #0
 800fc56:	930a      	str	r3, [sp, #40]	@ 0x28
 800fc58:	e782      	b.n	800fb60 <_dtoa_r+0x7e8>
 800fc5a:	d099      	beq.n	800fb90 <_dtoa_r+0x818>
 800fc5c:	9a08      	ldr	r2, [sp, #32]
 800fc5e:	331c      	adds	r3, #28
 800fc60:	441a      	add	r2, r3
 800fc62:	4498      	add	r8, r3
 800fc64:	441e      	add	r6, r3
 800fc66:	9208      	str	r2, [sp, #32]
 800fc68:	e792      	b.n	800fb90 <_dtoa_r+0x818>
 800fc6a:	4603      	mov	r3, r0
 800fc6c:	e7f6      	b.n	800fc5c <_dtoa_r+0x8e4>
 800fc6e:	9b07      	ldr	r3, [sp, #28]
 800fc70:	9704      	str	r7, [sp, #16]
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	dc20      	bgt.n	800fcb8 <_dtoa_r+0x940>
 800fc76:	9300      	str	r3, [sp, #0]
 800fc78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fc7a:	2b02      	cmp	r3, #2
 800fc7c:	dd1e      	ble.n	800fcbc <_dtoa_r+0x944>
 800fc7e:	9b00      	ldr	r3, [sp, #0]
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	f47f aec0 	bne.w	800fa06 <_dtoa_r+0x68e>
 800fc86:	4621      	mov	r1, r4
 800fc88:	2205      	movs	r2, #5
 800fc8a:	4658      	mov	r0, fp
 800fc8c:	f000 fa9a 	bl	80101c4 <__multadd>
 800fc90:	4601      	mov	r1, r0
 800fc92:	4604      	mov	r4, r0
 800fc94:	4648      	mov	r0, r9
 800fc96:	f000 fcf7 	bl	8010688 <__mcmp>
 800fc9a:	2800      	cmp	r0, #0
 800fc9c:	f77f aeb3 	ble.w	800fa06 <_dtoa_r+0x68e>
 800fca0:	4656      	mov	r6, sl
 800fca2:	2331      	movs	r3, #49	@ 0x31
 800fca4:	f806 3b01 	strb.w	r3, [r6], #1
 800fca8:	9b04      	ldr	r3, [sp, #16]
 800fcaa:	3301      	adds	r3, #1
 800fcac:	9304      	str	r3, [sp, #16]
 800fcae:	e6ae      	b.n	800fa0e <_dtoa_r+0x696>
 800fcb0:	9c07      	ldr	r4, [sp, #28]
 800fcb2:	9704      	str	r7, [sp, #16]
 800fcb4:	4625      	mov	r5, r4
 800fcb6:	e7f3      	b.n	800fca0 <_dtoa_r+0x928>
 800fcb8:	9b07      	ldr	r3, [sp, #28]
 800fcba:	9300      	str	r3, [sp, #0]
 800fcbc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	f000 8104 	beq.w	800fecc <_dtoa_r+0xb54>
 800fcc4:	2e00      	cmp	r6, #0
 800fcc6:	dd05      	ble.n	800fcd4 <_dtoa_r+0x95c>
 800fcc8:	4629      	mov	r1, r5
 800fcca:	4632      	mov	r2, r6
 800fccc:	4658      	mov	r0, fp
 800fcce:	f000 fc6f 	bl	80105b0 <__lshift>
 800fcd2:	4605      	mov	r5, r0
 800fcd4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d05a      	beq.n	800fd90 <_dtoa_r+0xa18>
 800fcda:	6869      	ldr	r1, [r5, #4]
 800fcdc:	4658      	mov	r0, fp
 800fcde:	f000 fa0f 	bl	8010100 <_Balloc>
 800fce2:	4606      	mov	r6, r0
 800fce4:	b928      	cbnz	r0, 800fcf2 <_dtoa_r+0x97a>
 800fce6:	4b84      	ldr	r3, [pc, #528]	@ (800fef8 <_dtoa_r+0xb80>)
 800fce8:	4602      	mov	r2, r0
 800fcea:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800fcee:	f7ff bb5a 	b.w	800f3a6 <_dtoa_r+0x2e>
 800fcf2:	692a      	ldr	r2, [r5, #16]
 800fcf4:	3202      	adds	r2, #2
 800fcf6:	0092      	lsls	r2, r2, #2
 800fcf8:	f105 010c 	add.w	r1, r5, #12
 800fcfc:	300c      	adds	r0, #12
 800fcfe:	f7ff fa9c 	bl	800f23a <memcpy>
 800fd02:	2201      	movs	r2, #1
 800fd04:	4631      	mov	r1, r6
 800fd06:	4658      	mov	r0, fp
 800fd08:	f000 fc52 	bl	80105b0 <__lshift>
 800fd0c:	f10a 0301 	add.w	r3, sl, #1
 800fd10:	9307      	str	r3, [sp, #28]
 800fd12:	9b00      	ldr	r3, [sp, #0]
 800fd14:	4453      	add	r3, sl
 800fd16:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fd18:	9b02      	ldr	r3, [sp, #8]
 800fd1a:	f003 0301 	and.w	r3, r3, #1
 800fd1e:	462f      	mov	r7, r5
 800fd20:	930a      	str	r3, [sp, #40]	@ 0x28
 800fd22:	4605      	mov	r5, r0
 800fd24:	9b07      	ldr	r3, [sp, #28]
 800fd26:	4621      	mov	r1, r4
 800fd28:	3b01      	subs	r3, #1
 800fd2a:	4648      	mov	r0, r9
 800fd2c:	9300      	str	r3, [sp, #0]
 800fd2e:	f7ff fa99 	bl	800f264 <quorem>
 800fd32:	4639      	mov	r1, r7
 800fd34:	9002      	str	r0, [sp, #8]
 800fd36:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800fd3a:	4648      	mov	r0, r9
 800fd3c:	f000 fca4 	bl	8010688 <__mcmp>
 800fd40:	462a      	mov	r2, r5
 800fd42:	9008      	str	r0, [sp, #32]
 800fd44:	4621      	mov	r1, r4
 800fd46:	4658      	mov	r0, fp
 800fd48:	f000 fcba 	bl	80106c0 <__mdiff>
 800fd4c:	68c2      	ldr	r2, [r0, #12]
 800fd4e:	4606      	mov	r6, r0
 800fd50:	bb02      	cbnz	r2, 800fd94 <_dtoa_r+0xa1c>
 800fd52:	4601      	mov	r1, r0
 800fd54:	4648      	mov	r0, r9
 800fd56:	f000 fc97 	bl	8010688 <__mcmp>
 800fd5a:	4602      	mov	r2, r0
 800fd5c:	4631      	mov	r1, r6
 800fd5e:	4658      	mov	r0, fp
 800fd60:	920e      	str	r2, [sp, #56]	@ 0x38
 800fd62:	f000 fa0d 	bl	8010180 <_Bfree>
 800fd66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fd68:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fd6a:	9e07      	ldr	r6, [sp, #28]
 800fd6c:	ea43 0102 	orr.w	r1, r3, r2
 800fd70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fd72:	4319      	orrs	r1, r3
 800fd74:	d110      	bne.n	800fd98 <_dtoa_r+0xa20>
 800fd76:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800fd7a:	d029      	beq.n	800fdd0 <_dtoa_r+0xa58>
 800fd7c:	9b08      	ldr	r3, [sp, #32]
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	dd02      	ble.n	800fd88 <_dtoa_r+0xa10>
 800fd82:	9b02      	ldr	r3, [sp, #8]
 800fd84:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800fd88:	9b00      	ldr	r3, [sp, #0]
 800fd8a:	f883 8000 	strb.w	r8, [r3]
 800fd8e:	e63f      	b.n	800fa10 <_dtoa_r+0x698>
 800fd90:	4628      	mov	r0, r5
 800fd92:	e7bb      	b.n	800fd0c <_dtoa_r+0x994>
 800fd94:	2201      	movs	r2, #1
 800fd96:	e7e1      	b.n	800fd5c <_dtoa_r+0x9e4>
 800fd98:	9b08      	ldr	r3, [sp, #32]
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	db04      	blt.n	800fda8 <_dtoa_r+0xa30>
 800fd9e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800fda0:	430b      	orrs	r3, r1
 800fda2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800fda4:	430b      	orrs	r3, r1
 800fda6:	d120      	bne.n	800fdea <_dtoa_r+0xa72>
 800fda8:	2a00      	cmp	r2, #0
 800fdaa:	dded      	ble.n	800fd88 <_dtoa_r+0xa10>
 800fdac:	4649      	mov	r1, r9
 800fdae:	2201      	movs	r2, #1
 800fdb0:	4658      	mov	r0, fp
 800fdb2:	f000 fbfd 	bl	80105b0 <__lshift>
 800fdb6:	4621      	mov	r1, r4
 800fdb8:	4681      	mov	r9, r0
 800fdba:	f000 fc65 	bl	8010688 <__mcmp>
 800fdbe:	2800      	cmp	r0, #0
 800fdc0:	dc03      	bgt.n	800fdca <_dtoa_r+0xa52>
 800fdc2:	d1e1      	bne.n	800fd88 <_dtoa_r+0xa10>
 800fdc4:	f018 0f01 	tst.w	r8, #1
 800fdc8:	d0de      	beq.n	800fd88 <_dtoa_r+0xa10>
 800fdca:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800fdce:	d1d8      	bne.n	800fd82 <_dtoa_r+0xa0a>
 800fdd0:	9a00      	ldr	r2, [sp, #0]
 800fdd2:	2339      	movs	r3, #57	@ 0x39
 800fdd4:	7013      	strb	r3, [r2, #0]
 800fdd6:	4633      	mov	r3, r6
 800fdd8:	461e      	mov	r6, r3
 800fdda:	3b01      	subs	r3, #1
 800fddc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800fde0:	2a39      	cmp	r2, #57	@ 0x39
 800fde2:	d052      	beq.n	800fe8a <_dtoa_r+0xb12>
 800fde4:	3201      	adds	r2, #1
 800fde6:	701a      	strb	r2, [r3, #0]
 800fde8:	e612      	b.n	800fa10 <_dtoa_r+0x698>
 800fdea:	2a00      	cmp	r2, #0
 800fdec:	dd07      	ble.n	800fdfe <_dtoa_r+0xa86>
 800fdee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800fdf2:	d0ed      	beq.n	800fdd0 <_dtoa_r+0xa58>
 800fdf4:	9a00      	ldr	r2, [sp, #0]
 800fdf6:	f108 0301 	add.w	r3, r8, #1
 800fdfa:	7013      	strb	r3, [r2, #0]
 800fdfc:	e608      	b.n	800fa10 <_dtoa_r+0x698>
 800fdfe:	9b07      	ldr	r3, [sp, #28]
 800fe00:	9a07      	ldr	r2, [sp, #28]
 800fe02:	f803 8c01 	strb.w	r8, [r3, #-1]
 800fe06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fe08:	4293      	cmp	r3, r2
 800fe0a:	d028      	beq.n	800fe5e <_dtoa_r+0xae6>
 800fe0c:	4649      	mov	r1, r9
 800fe0e:	2300      	movs	r3, #0
 800fe10:	220a      	movs	r2, #10
 800fe12:	4658      	mov	r0, fp
 800fe14:	f000 f9d6 	bl	80101c4 <__multadd>
 800fe18:	42af      	cmp	r7, r5
 800fe1a:	4681      	mov	r9, r0
 800fe1c:	f04f 0300 	mov.w	r3, #0
 800fe20:	f04f 020a 	mov.w	r2, #10
 800fe24:	4639      	mov	r1, r7
 800fe26:	4658      	mov	r0, fp
 800fe28:	d107      	bne.n	800fe3a <_dtoa_r+0xac2>
 800fe2a:	f000 f9cb 	bl	80101c4 <__multadd>
 800fe2e:	4607      	mov	r7, r0
 800fe30:	4605      	mov	r5, r0
 800fe32:	9b07      	ldr	r3, [sp, #28]
 800fe34:	3301      	adds	r3, #1
 800fe36:	9307      	str	r3, [sp, #28]
 800fe38:	e774      	b.n	800fd24 <_dtoa_r+0x9ac>
 800fe3a:	f000 f9c3 	bl	80101c4 <__multadd>
 800fe3e:	4629      	mov	r1, r5
 800fe40:	4607      	mov	r7, r0
 800fe42:	2300      	movs	r3, #0
 800fe44:	220a      	movs	r2, #10
 800fe46:	4658      	mov	r0, fp
 800fe48:	f000 f9bc 	bl	80101c4 <__multadd>
 800fe4c:	4605      	mov	r5, r0
 800fe4e:	e7f0      	b.n	800fe32 <_dtoa_r+0xaba>
 800fe50:	9b00      	ldr	r3, [sp, #0]
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	bfcc      	ite	gt
 800fe56:	461e      	movgt	r6, r3
 800fe58:	2601      	movle	r6, #1
 800fe5a:	4456      	add	r6, sl
 800fe5c:	2700      	movs	r7, #0
 800fe5e:	4649      	mov	r1, r9
 800fe60:	2201      	movs	r2, #1
 800fe62:	4658      	mov	r0, fp
 800fe64:	f000 fba4 	bl	80105b0 <__lshift>
 800fe68:	4621      	mov	r1, r4
 800fe6a:	4681      	mov	r9, r0
 800fe6c:	f000 fc0c 	bl	8010688 <__mcmp>
 800fe70:	2800      	cmp	r0, #0
 800fe72:	dcb0      	bgt.n	800fdd6 <_dtoa_r+0xa5e>
 800fe74:	d102      	bne.n	800fe7c <_dtoa_r+0xb04>
 800fe76:	f018 0f01 	tst.w	r8, #1
 800fe7a:	d1ac      	bne.n	800fdd6 <_dtoa_r+0xa5e>
 800fe7c:	4633      	mov	r3, r6
 800fe7e:	461e      	mov	r6, r3
 800fe80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fe84:	2a30      	cmp	r2, #48	@ 0x30
 800fe86:	d0fa      	beq.n	800fe7e <_dtoa_r+0xb06>
 800fe88:	e5c2      	b.n	800fa10 <_dtoa_r+0x698>
 800fe8a:	459a      	cmp	sl, r3
 800fe8c:	d1a4      	bne.n	800fdd8 <_dtoa_r+0xa60>
 800fe8e:	9b04      	ldr	r3, [sp, #16]
 800fe90:	3301      	adds	r3, #1
 800fe92:	9304      	str	r3, [sp, #16]
 800fe94:	2331      	movs	r3, #49	@ 0x31
 800fe96:	f88a 3000 	strb.w	r3, [sl]
 800fe9a:	e5b9      	b.n	800fa10 <_dtoa_r+0x698>
 800fe9c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fe9e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800fefc <_dtoa_r+0xb84>
 800fea2:	b11b      	cbz	r3, 800feac <_dtoa_r+0xb34>
 800fea4:	f10a 0308 	add.w	r3, sl, #8
 800fea8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800feaa:	6013      	str	r3, [r2, #0]
 800feac:	4650      	mov	r0, sl
 800feae:	b019      	add	sp, #100	@ 0x64
 800feb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800feb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800feb6:	2b01      	cmp	r3, #1
 800feb8:	f77f ae37 	ble.w	800fb2a <_dtoa_r+0x7b2>
 800febc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800febe:	930a      	str	r3, [sp, #40]	@ 0x28
 800fec0:	2001      	movs	r0, #1
 800fec2:	e655      	b.n	800fb70 <_dtoa_r+0x7f8>
 800fec4:	9b00      	ldr	r3, [sp, #0]
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	f77f aed6 	ble.w	800fc78 <_dtoa_r+0x900>
 800fecc:	4656      	mov	r6, sl
 800fece:	4621      	mov	r1, r4
 800fed0:	4648      	mov	r0, r9
 800fed2:	f7ff f9c7 	bl	800f264 <quorem>
 800fed6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800feda:	f806 8b01 	strb.w	r8, [r6], #1
 800fede:	9b00      	ldr	r3, [sp, #0]
 800fee0:	eba6 020a 	sub.w	r2, r6, sl
 800fee4:	4293      	cmp	r3, r2
 800fee6:	ddb3      	ble.n	800fe50 <_dtoa_r+0xad8>
 800fee8:	4649      	mov	r1, r9
 800feea:	2300      	movs	r3, #0
 800feec:	220a      	movs	r2, #10
 800feee:	4658      	mov	r0, fp
 800fef0:	f000 f968 	bl	80101c4 <__multadd>
 800fef4:	4681      	mov	r9, r0
 800fef6:	e7ea      	b.n	800fece <_dtoa_r+0xb56>
 800fef8:	0801415e 	.word	0x0801415e
 800fefc:	080140e2 	.word	0x080140e2

0800ff00 <_free_r>:
 800ff00:	b538      	push	{r3, r4, r5, lr}
 800ff02:	4605      	mov	r5, r0
 800ff04:	2900      	cmp	r1, #0
 800ff06:	d041      	beq.n	800ff8c <_free_r+0x8c>
 800ff08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ff0c:	1f0c      	subs	r4, r1, #4
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	bfb8      	it	lt
 800ff12:	18e4      	addlt	r4, r4, r3
 800ff14:	f000 f8e8 	bl	80100e8 <__malloc_lock>
 800ff18:	4a1d      	ldr	r2, [pc, #116]	@ (800ff90 <_free_r+0x90>)
 800ff1a:	6813      	ldr	r3, [r2, #0]
 800ff1c:	b933      	cbnz	r3, 800ff2c <_free_r+0x2c>
 800ff1e:	6063      	str	r3, [r4, #4]
 800ff20:	6014      	str	r4, [r2, #0]
 800ff22:	4628      	mov	r0, r5
 800ff24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ff28:	f000 b8e4 	b.w	80100f4 <__malloc_unlock>
 800ff2c:	42a3      	cmp	r3, r4
 800ff2e:	d908      	bls.n	800ff42 <_free_r+0x42>
 800ff30:	6820      	ldr	r0, [r4, #0]
 800ff32:	1821      	adds	r1, r4, r0
 800ff34:	428b      	cmp	r3, r1
 800ff36:	bf01      	itttt	eq
 800ff38:	6819      	ldreq	r1, [r3, #0]
 800ff3a:	685b      	ldreq	r3, [r3, #4]
 800ff3c:	1809      	addeq	r1, r1, r0
 800ff3e:	6021      	streq	r1, [r4, #0]
 800ff40:	e7ed      	b.n	800ff1e <_free_r+0x1e>
 800ff42:	461a      	mov	r2, r3
 800ff44:	685b      	ldr	r3, [r3, #4]
 800ff46:	b10b      	cbz	r3, 800ff4c <_free_r+0x4c>
 800ff48:	42a3      	cmp	r3, r4
 800ff4a:	d9fa      	bls.n	800ff42 <_free_r+0x42>
 800ff4c:	6811      	ldr	r1, [r2, #0]
 800ff4e:	1850      	adds	r0, r2, r1
 800ff50:	42a0      	cmp	r0, r4
 800ff52:	d10b      	bne.n	800ff6c <_free_r+0x6c>
 800ff54:	6820      	ldr	r0, [r4, #0]
 800ff56:	4401      	add	r1, r0
 800ff58:	1850      	adds	r0, r2, r1
 800ff5a:	4283      	cmp	r3, r0
 800ff5c:	6011      	str	r1, [r2, #0]
 800ff5e:	d1e0      	bne.n	800ff22 <_free_r+0x22>
 800ff60:	6818      	ldr	r0, [r3, #0]
 800ff62:	685b      	ldr	r3, [r3, #4]
 800ff64:	6053      	str	r3, [r2, #4]
 800ff66:	4408      	add	r0, r1
 800ff68:	6010      	str	r0, [r2, #0]
 800ff6a:	e7da      	b.n	800ff22 <_free_r+0x22>
 800ff6c:	d902      	bls.n	800ff74 <_free_r+0x74>
 800ff6e:	230c      	movs	r3, #12
 800ff70:	602b      	str	r3, [r5, #0]
 800ff72:	e7d6      	b.n	800ff22 <_free_r+0x22>
 800ff74:	6820      	ldr	r0, [r4, #0]
 800ff76:	1821      	adds	r1, r4, r0
 800ff78:	428b      	cmp	r3, r1
 800ff7a:	bf04      	itt	eq
 800ff7c:	6819      	ldreq	r1, [r3, #0]
 800ff7e:	685b      	ldreq	r3, [r3, #4]
 800ff80:	6063      	str	r3, [r4, #4]
 800ff82:	bf04      	itt	eq
 800ff84:	1809      	addeq	r1, r1, r0
 800ff86:	6021      	streq	r1, [r4, #0]
 800ff88:	6054      	str	r4, [r2, #4]
 800ff8a:	e7ca      	b.n	800ff22 <_free_r+0x22>
 800ff8c:	bd38      	pop	{r3, r4, r5, pc}
 800ff8e:	bf00      	nop
 800ff90:	20003f50 	.word	0x20003f50

0800ff94 <malloc>:
 800ff94:	4b02      	ldr	r3, [pc, #8]	@ (800ffa0 <malloc+0xc>)
 800ff96:	4601      	mov	r1, r0
 800ff98:	6818      	ldr	r0, [r3, #0]
 800ff9a:	f000 b825 	b.w	800ffe8 <_malloc_r>
 800ff9e:	bf00      	nop
 800ffa0:	20000040 	.word	0x20000040

0800ffa4 <sbrk_aligned>:
 800ffa4:	b570      	push	{r4, r5, r6, lr}
 800ffa6:	4e0f      	ldr	r6, [pc, #60]	@ (800ffe4 <sbrk_aligned+0x40>)
 800ffa8:	460c      	mov	r4, r1
 800ffaa:	6831      	ldr	r1, [r6, #0]
 800ffac:	4605      	mov	r5, r0
 800ffae:	b911      	cbnz	r1, 800ffb6 <sbrk_aligned+0x12>
 800ffb0:	f002 f814 	bl	8011fdc <_sbrk_r>
 800ffb4:	6030      	str	r0, [r6, #0]
 800ffb6:	4621      	mov	r1, r4
 800ffb8:	4628      	mov	r0, r5
 800ffba:	f002 f80f 	bl	8011fdc <_sbrk_r>
 800ffbe:	1c43      	adds	r3, r0, #1
 800ffc0:	d103      	bne.n	800ffca <sbrk_aligned+0x26>
 800ffc2:	f04f 34ff 	mov.w	r4, #4294967295
 800ffc6:	4620      	mov	r0, r4
 800ffc8:	bd70      	pop	{r4, r5, r6, pc}
 800ffca:	1cc4      	adds	r4, r0, #3
 800ffcc:	f024 0403 	bic.w	r4, r4, #3
 800ffd0:	42a0      	cmp	r0, r4
 800ffd2:	d0f8      	beq.n	800ffc6 <sbrk_aligned+0x22>
 800ffd4:	1a21      	subs	r1, r4, r0
 800ffd6:	4628      	mov	r0, r5
 800ffd8:	f002 f800 	bl	8011fdc <_sbrk_r>
 800ffdc:	3001      	adds	r0, #1
 800ffde:	d1f2      	bne.n	800ffc6 <sbrk_aligned+0x22>
 800ffe0:	e7ef      	b.n	800ffc2 <sbrk_aligned+0x1e>
 800ffe2:	bf00      	nop
 800ffe4:	20003f4c 	.word	0x20003f4c

0800ffe8 <_malloc_r>:
 800ffe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ffec:	1ccd      	adds	r5, r1, #3
 800ffee:	f025 0503 	bic.w	r5, r5, #3
 800fff2:	3508      	adds	r5, #8
 800fff4:	2d0c      	cmp	r5, #12
 800fff6:	bf38      	it	cc
 800fff8:	250c      	movcc	r5, #12
 800fffa:	2d00      	cmp	r5, #0
 800fffc:	4606      	mov	r6, r0
 800fffe:	db01      	blt.n	8010004 <_malloc_r+0x1c>
 8010000:	42a9      	cmp	r1, r5
 8010002:	d904      	bls.n	801000e <_malloc_r+0x26>
 8010004:	230c      	movs	r3, #12
 8010006:	6033      	str	r3, [r6, #0]
 8010008:	2000      	movs	r0, #0
 801000a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801000e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80100e4 <_malloc_r+0xfc>
 8010012:	f000 f869 	bl	80100e8 <__malloc_lock>
 8010016:	f8d8 3000 	ldr.w	r3, [r8]
 801001a:	461c      	mov	r4, r3
 801001c:	bb44      	cbnz	r4, 8010070 <_malloc_r+0x88>
 801001e:	4629      	mov	r1, r5
 8010020:	4630      	mov	r0, r6
 8010022:	f7ff ffbf 	bl	800ffa4 <sbrk_aligned>
 8010026:	1c43      	adds	r3, r0, #1
 8010028:	4604      	mov	r4, r0
 801002a:	d158      	bne.n	80100de <_malloc_r+0xf6>
 801002c:	f8d8 4000 	ldr.w	r4, [r8]
 8010030:	4627      	mov	r7, r4
 8010032:	2f00      	cmp	r7, #0
 8010034:	d143      	bne.n	80100be <_malloc_r+0xd6>
 8010036:	2c00      	cmp	r4, #0
 8010038:	d04b      	beq.n	80100d2 <_malloc_r+0xea>
 801003a:	6823      	ldr	r3, [r4, #0]
 801003c:	4639      	mov	r1, r7
 801003e:	4630      	mov	r0, r6
 8010040:	eb04 0903 	add.w	r9, r4, r3
 8010044:	f001 ffca 	bl	8011fdc <_sbrk_r>
 8010048:	4581      	cmp	r9, r0
 801004a:	d142      	bne.n	80100d2 <_malloc_r+0xea>
 801004c:	6821      	ldr	r1, [r4, #0]
 801004e:	1a6d      	subs	r5, r5, r1
 8010050:	4629      	mov	r1, r5
 8010052:	4630      	mov	r0, r6
 8010054:	f7ff ffa6 	bl	800ffa4 <sbrk_aligned>
 8010058:	3001      	adds	r0, #1
 801005a:	d03a      	beq.n	80100d2 <_malloc_r+0xea>
 801005c:	6823      	ldr	r3, [r4, #0]
 801005e:	442b      	add	r3, r5
 8010060:	6023      	str	r3, [r4, #0]
 8010062:	f8d8 3000 	ldr.w	r3, [r8]
 8010066:	685a      	ldr	r2, [r3, #4]
 8010068:	bb62      	cbnz	r2, 80100c4 <_malloc_r+0xdc>
 801006a:	f8c8 7000 	str.w	r7, [r8]
 801006e:	e00f      	b.n	8010090 <_malloc_r+0xa8>
 8010070:	6822      	ldr	r2, [r4, #0]
 8010072:	1b52      	subs	r2, r2, r5
 8010074:	d420      	bmi.n	80100b8 <_malloc_r+0xd0>
 8010076:	2a0b      	cmp	r2, #11
 8010078:	d917      	bls.n	80100aa <_malloc_r+0xc2>
 801007a:	1961      	adds	r1, r4, r5
 801007c:	42a3      	cmp	r3, r4
 801007e:	6025      	str	r5, [r4, #0]
 8010080:	bf18      	it	ne
 8010082:	6059      	strne	r1, [r3, #4]
 8010084:	6863      	ldr	r3, [r4, #4]
 8010086:	bf08      	it	eq
 8010088:	f8c8 1000 	streq.w	r1, [r8]
 801008c:	5162      	str	r2, [r4, r5]
 801008e:	604b      	str	r3, [r1, #4]
 8010090:	4630      	mov	r0, r6
 8010092:	f000 f82f 	bl	80100f4 <__malloc_unlock>
 8010096:	f104 000b 	add.w	r0, r4, #11
 801009a:	1d23      	adds	r3, r4, #4
 801009c:	f020 0007 	bic.w	r0, r0, #7
 80100a0:	1ac2      	subs	r2, r0, r3
 80100a2:	bf1c      	itt	ne
 80100a4:	1a1b      	subne	r3, r3, r0
 80100a6:	50a3      	strne	r3, [r4, r2]
 80100a8:	e7af      	b.n	801000a <_malloc_r+0x22>
 80100aa:	6862      	ldr	r2, [r4, #4]
 80100ac:	42a3      	cmp	r3, r4
 80100ae:	bf0c      	ite	eq
 80100b0:	f8c8 2000 	streq.w	r2, [r8]
 80100b4:	605a      	strne	r2, [r3, #4]
 80100b6:	e7eb      	b.n	8010090 <_malloc_r+0xa8>
 80100b8:	4623      	mov	r3, r4
 80100ba:	6864      	ldr	r4, [r4, #4]
 80100bc:	e7ae      	b.n	801001c <_malloc_r+0x34>
 80100be:	463c      	mov	r4, r7
 80100c0:	687f      	ldr	r7, [r7, #4]
 80100c2:	e7b6      	b.n	8010032 <_malloc_r+0x4a>
 80100c4:	461a      	mov	r2, r3
 80100c6:	685b      	ldr	r3, [r3, #4]
 80100c8:	42a3      	cmp	r3, r4
 80100ca:	d1fb      	bne.n	80100c4 <_malloc_r+0xdc>
 80100cc:	2300      	movs	r3, #0
 80100ce:	6053      	str	r3, [r2, #4]
 80100d0:	e7de      	b.n	8010090 <_malloc_r+0xa8>
 80100d2:	230c      	movs	r3, #12
 80100d4:	6033      	str	r3, [r6, #0]
 80100d6:	4630      	mov	r0, r6
 80100d8:	f000 f80c 	bl	80100f4 <__malloc_unlock>
 80100dc:	e794      	b.n	8010008 <_malloc_r+0x20>
 80100de:	6005      	str	r5, [r0, #0]
 80100e0:	e7d6      	b.n	8010090 <_malloc_r+0xa8>
 80100e2:	bf00      	nop
 80100e4:	20003f50 	.word	0x20003f50

080100e8 <__malloc_lock>:
 80100e8:	4801      	ldr	r0, [pc, #4]	@ (80100f0 <__malloc_lock+0x8>)
 80100ea:	f7ff b8a4 	b.w	800f236 <__retarget_lock_acquire_recursive>
 80100ee:	bf00      	nop
 80100f0:	20003f48 	.word	0x20003f48

080100f4 <__malloc_unlock>:
 80100f4:	4801      	ldr	r0, [pc, #4]	@ (80100fc <__malloc_unlock+0x8>)
 80100f6:	f7ff b89f 	b.w	800f238 <__retarget_lock_release_recursive>
 80100fa:	bf00      	nop
 80100fc:	20003f48 	.word	0x20003f48

08010100 <_Balloc>:
 8010100:	b570      	push	{r4, r5, r6, lr}
 8010102:	69c6      	ldr	r6, [r0, #28]
 8010104:	4604      	mov	r4, r0
 8010106:	460d      	mov	r5, r1
 8010108:	b976      	cbnz	r6, 8010128 <_Balloc+0x28>
 801010a:	2010      	movs	r0, #16
 801010c:	f7ff ff42 	bl	800ff94 <malloc>
 8010110:	4602      	mov	r2, r0
 8010112:	61e0      	str	r0, [r4, #28]
 8010114:	b920      	cbnz	r0, 8010120 <_Balloc+0x20>
 8010116:	4b18      	ldr	r3, [pc, #96]	@ (8010178 <_Balloc+0x78>)
 8010118:	4818      	ldr	r0, [pc, #96]	@ (801017c <_Balloc+0x7c>)
 801011a:	216b      	movs	r1, #107	@ 0x6b
 801011c:	f001 ff78 	bl	8012010 <__assert_func>
 8010120:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010124:	6006      	str	r6, [r0, #0]
 8010126:	60c6      	str	r6, [r0, #12]
 8010128:	69e6      	ldr	r6, [r4, #28]
 801012a:	68f3      	ldr	r3, [r6, #12]
 801012c:	b183      	cbz	r3, 8010150 <_Balloc+0x50>
 801012e:	69e3      	ldr	r3, [r4, #28]
 8010130:	68db      	ldr	r3, [r3, #12]
 8010132:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010136:	b9b8      	cbnz	r0, 8010168 <_Balloc+0x68>
 8010138:	2101      	movs	r1, #1
 801013a:	fa01 f605 	lsl.w	r6, r1, r5
 801013e:	1d72      	adds	r2, r6, #5
 8010140:	0092      	lsls	r2, r2, #2
 8010142:	4620      	mov	r0, r4
 8010144:	f001 ff82 	bl	801204c <_calloc_r>
 8010148:	b160      	cbz	r0, 8010164 <_Balloc+0x64>
 801014a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801014e:	e00e      	b.n	801016e <_Balloc+0x6e>
 8010150:	2221      	movs	r2, #33	@ 0x21
 8010152:	2104      	movs	r1, #4
 8010154:	4620      	mov	r0, r4
 8010156:	f001 ff79 	bl	801204c <_calloc_r>
 801015a:	69e3      	ldr	r3, [r4, #28]
 801015c:	60f0      	str	r0, [r6, #12]
 801015e:	68db      	ldr	r3, [r3, #12]
 8010160:	2b00      	cmp	r3, #0
 8010162:	d1e4      	bne.n	801012e <_Balloc+0x2e>
 8010164:	2000      	movs	r0, #0
 8010166:	bd70      	pop	{r4, r5, r6, pc}
 8010168:	6802      	ldr	r2, [r0, #0]
 801016a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801016e:	2300      	movs	r3, #0
 8010170:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010174:	e7f7      	b.n	8010166 <_Balloc+0x66>
 8010176:	bf00      	nop
 8010178:	080140ef 	.word	0x080140ef
 801017c:	0801416f 	.word	0x0801416f

08010180 <_Bfree>:
 8010180:	b570      	push	{r4, r5, r6, lr}
 8010182:	69c6      	ldr	r6, [r0, #28]
 8010184:	4605      	mov	r5, r0
 8010186:	460c      	mov	r4, r1
 8010188:	b976      	cbnz	r6, 80101a8 <_Bfree+0x28>
 801018a:	2010      	movs	r0, #16
 801018c:	f7ff ff02 	bl	800ff94 <malloc>
 8010190:	4602      	mov	r2, r0
 8010192:	61e8      	str	r0, [r5, #28]
 8010194:	b920      	cbnz	r0, 80101a0 <_Bfree+0x20>
 8010196:	4b09      	ldr	r3, [pc, #36]	@ (80101bc <_Bfree+0x3c>)
 8010198:	4809      	ldr	r0, [pc, #36]	@ (80101c0 <_Bfree+0x40>)
 801019a:	218f      	movs	r1, #143	@ 0x8f
 801019c:	f001 ff38 	bl	8012010 <__assert_func>
 80101a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80101a4:	6006      	str	r6, [r0, #0]
 80101a6:	60c6      	str	r6, [r0, #12]
 80101a8:	b13c      	cbz	r4, 80101ba <_Bfree+0x3a>
 80101aa:	69eb      	ldr	r3, [r5, #28]
 80101ac:	6862      	ldr	r2, [r4, #4]
 80101ae:	68db      	ldr	r3, [r3, #12]
 80101b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80101b4:	6021      	str	r1, [r4, #0]
 80101b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80101ba:	bd70      	pop	{r4, r5, r6, pc}
 80101bc:	080140ef 	.word	0x080140ef
 80101c0:	0801416f 	.word	0x0801416f

080101c4 <__multadd>:
 80101c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101c8:	690d      	ldr	r5, [r1, #16]
 80101ca:	4607      	mov	r7, r0
 80101cc:	460c      	mov	r4, r1
 80101ce:	461e      	mov	r6, r3
 80101d0:	f101 0c14 	add.w	ip, r1, #20
 80101d4:	2000      	movs	r0, #0
 80101d6:	f8dc 3000 	ldr.w	r3, [ip]
 80101da:	b299      	uxth	r1, r3
 80101dc:	fb02 6101 	mla	r1, r2, r1, r6
 80101e0:	0c1e      	lsrs	r6, r3, #16
 80101e2:	0c0b      	lsrs	r3, r1, #16
 80101e4:	fb02 3306 	mla	r3, r2, r6, r3
 80101e8:	b289      	uxth	r1, r1
 80101ea:	3001      	adds	r0, #1
 80101ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80101f0:	4285      	cmp	r5, r0
 80101f2:	f84c 1b04 	str.w	r1, [ip], #4
 80101f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80101fa:	dcec      	bgt.n	80101d6 <__multadd+0x12>
 80101fc:	b30e      	cbz	r6, 8010242 <__multadd+0x7e>
 80101fe:	68a3      	ldr	r3, [r4, #8]
 8010200:	42ab      	cmp	r3, r5
 8010202:	dc19      	bgt.n	8010238 <__multadd+0x74>
 8010204:	6861      	ldr	r1, [r4, #4]
 8010206:	4638      	mov	r0, r7
 8010208:	3101      	adds	r1, #1
 801020a:	f7ff ff79 	bl	8010100 <_Balloc>
 801020e:	4680      	mov	r8, r0
 8010210:	b928      	cbnz	r0, 801021e <__multadd+0x5a>
 8010212:	4602      	mov	r2, r0
 8010214:	4b0c      	ldr	r3, [pc, #48]	@ (8010248 <__multadd+0x84>)
 8010216:	480d      	ldr	r0, [pc, #52]	@ (801024c <__multadd+0x88>)
 8010218:	21ba      	movs	r1, #186	@ 0xba
 801021a:	f001 fef9 	bl	8012010 <__assert_func>
 801021e:	6922      	ldr	r2, [r4, #16]
 8010220:	3202      	adds	r2, #2
 8010222:	f104 010c 	add.w	r1, r4, #12
 8010226:	0092      	lsls	r2, r2, #2
 8010228:	300c      	adds	r0, #12
 801022a:	f7ff f806 	bl	800f23a <memcpy>
 801022e:	4621      	mov	r1, r4
 8010230:	4638      	mov	r0, r7
 8010232:	f7ff ffa5 	bl	8010180 <_Bfree>
 8010236:	4644      	mov	r4, r8
 8010238:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801023c:	3501      	adds	r5, #1
 801023e:	615e      	str	r6, [r3, #20]
 8010240:	6125      	str	r5, [r4, #16]
 8010242:	4620      	mov	r0, r4
 8010244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010248:	0801415e 	.word	0x0801415e
 801024c:	0801416f 	.word	0x0801416f

08010250 <__s2b>:
 8010250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010254:	460c      	mov	r4, r1
 8010256:	4615      	mov	r5, r2
 8010258:	461f      	mov	r7, r3
 801025a:	2209      	movs	r2, #9
 801025c:	3308      	adds	r3, #8
 801025e:	4606      	mov	r6, r0
 8010260:	fb93 f3f2 	sdiv	r3, r3, r2
 8010264:	2100      	movs	r1, #0
 8010266:	2201      	movs	r2, #1
 8010268:	429a      	cmp	r2, r3
 801026a:	db09      	blt.n	8010280 <__s2b+0x30>
 801026c:	4630      	mov	r0, r6
 801026e:	f7ff ff47 	bl	8010100 <_Balloc>
 8010272:	b940      	cbnz	r0, 8010286 <__s2b+0x36>
 8010274:	4602      	mov	r2, r0
 8010276:	4b19      	ldr	r3, [pc, #100]	@ (80102dc <__s2b+0x8c>)
 8010278:	4819      	ldr	r0, [pc, #100]	@ (80102e0 <__s2b+0x90>)
 801027a:	21d3      	movs	r1, #211	@ 0xd3
 801027c:	f001 fec8 	bl	8012010 <__assert_func>
 8010280:	0052      	lsls	r2, r2, #1
 8010282:	3101      	adds	r1, #1
 8010284:	e7f0      	b.n	8010268 <__s2b+0x18>
 8010286:	9b08      	ldr	r3, [sp, #32]
 8010288:	6143      	str	r3, [r0, #20]
 801028a:	2d09      	cmp	r5, #9
 801028c:	f04f 0301 	mov.w	r3, #1
 8010290:	6103      	str	r3, [r0, #16]
 8010292:	dd16      	ble.n	80102c2 <__s2b+0x72>
 8010294:	f104 0909 	add.w	r9, r4, #9
 8010298:	46c8      	mov	r8, r9
 801029a:	442c      	add	r4, r5
 801029c:	f818 3b01 	ldrb.w	r3, [r8], #1
 80102a0:	4601      	mov	r1, r0
 80102a2:	3b30      	subs	r3, #48	@ 0x30
 80102a4:	220a      	movs	r2, #10
 80102a6:	4630      	mov	r0, r6
 80102a8:	f7ff ff8c 	bl	80101c4 <__multadd>
 80102ac:	45a0      	cmp	r8, r4
 80102ae:	d1f5      	bne.n	801029c <__s2b+0x4c>
 80102b0:	f1a5 0408 	sub.w	r4, r5, #8
 80102b4:	444c      	add	r4, r9
 80102b6:	1b2d      	subs	r5, r5, r4
 80102b8:	1963      	adds	r3, r4, r5
 80102ba:	42bb      	cmp	r3, r7
 80102bc:	db04      	blt.n	80102c8 <__s2b+0x78>
 80102be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80102c2:	340a      	adds	r4, #10
 80102c4:	2509      	movs	r5, #9
 80102c6:	e7f6      	b.n	80102b6 <__s2b+0x66>
 80102c8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80102cc:	4601      	mov	r1, r0
 80102ce:	3b30      	subs	r3, #48	@ 0x30
 80102d0:	220a      	movs	r2, #10
 80102d2:	4630      	mov	r0, r6
 80102d4:	f7ff ff76 	bl	80101c4 <__multadd>
 80102d8:	e7ee      	b.n	80102b8 <__s2b+0x68>
 80102da:	bf00      	nop
 80102dc:	0801415e 	.word	0x0801415e
 80102e0:	0801416f 	.word	0x0801416f

080102e4 <__hi0bits>:
 80102e4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80102e8:	4603      	mov	r3, r0
 80102ea:	bf36      	itet	cc
 80102ec:	0403      	lslcc	r3, r0, #16
 80102ee:	2000      	movcs	r0, #0
 80102f0:	2010      	movcc	r0, #16
 80102f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80102f6:	bf3c      	itt	cc
 80102f8:	021b      	lslcc	r3, r3, #8
 80102fa:	3008      	addcc	r0, #8
 80102fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010300:	bf3c      	itt	cc
 8010302:	011b      	lslcc	r3, r3, #4
 8010304:	3004      	addcc	r0, #4
 8010306:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801030a:	bf3c      	itt	cc
 801030c:	009b      	lslcc	r3, r3, #2
 801030e:	3002      	addcc	r0, #2
 8010310:	2b00      	cmp	r3, #0
 8010312:	db05      	blt.n	8010320 <__hi0bits+0x3c>
 8010314:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010318:	f100 0001 	add.w	r0, r0, #1
 801031c:	bf08      	it	eq
 801031e:	2020      	moveq	r0, #32
 8010320:	4770      	bx	lr

08010322 <__lo0bits>:
 8010322:	6803      	ldr	r3, [r0, #0]
 8010324:	4602      	mov	r2, r0
 8010326:	f013 0007 	ands.w	r0, r3, #7
 801032a:	d00b      	beq.n	8010344 <__lo0bits+0x22>
 801032c:	07d9      	lsls	r1, r3, #31
 801032e:	d421      	bmi.n	8010374 <__lo0bits+0x52>
 8010330:	0798      	lsls	r0, r3, #30
 8010332:	bf49      	itett	mi
 8010334:	085b      	lsrmi	r3, r3, #1
 8010336:	089b      	lsrpl	r3, r3, #2
 8010338:	2001      	movmi	r0, #1
 801033a:	6013      	strmi	r3, [r2, #0]
 801033c:	bf5c      	itt	pl
 801033e:	6013      	strpl	r3, [r2, #0]
 8010340:	2002      	movpl	r0, #2
 8010342:	4770      	bx	lr
 8010344:	b299      	uxth	r1, r3
 8010346:	b909      	cbnz	r1, 801034c <__lo0bits+0x2a>
 8010348:	0c1b      	lsrs	r3, r3, #16
 801034a:	2010      	movs	r0, #16
 801034c:	b2d9      	uxtb	r1, r3
 801034e:	b909      	cbnz	r1, 8010354 <__lo0bits+0x32>
 8010350:	3008      	adds	r0, #8
 8010352:	0a1b      	lsrs	r3, r3, #8
 8010354:	0719      	lsls	r1, r3, #28
 8010356:	bf04      	itt	eq
 8010358:	091b      	lsreq	r3, r3, #4
 801035a:	3004      	addeq	r0, #4
 801035c:	0799      	lsls	r1, r3, #30
 801035e:	bf04      	itt	eq
 8010360:	089b      	lsreq	r3, r3, #2
 8010362:	3002      	addeq	r0, #2
 8010364:	07d9      	lsls	r1, r3, #31
 8010366:	d403      	bmi.n	8010370 <__lo0bits+0x4e>
 8010368:	085b      	lsrs	r3, r3, #1
 801036a:	f100 0001 	add.w	r0, r0, #1
 801036e:	d003      	beq.n	8010378 <__lo0bits+0x56>
 8010370:	6013      	str	r3, [r2, #0]
 8010372:	4770      	bx	lr
 8010374:	2000      	movs	r0, #0
 8010376:	4770      	bx	lr
 8010378:	2020      	movs	r0, #32
 801037a:	4770      	bx	lr

0801037c <__i2b>:
 801037c:	b510      	push	{r4, lr}
 801037e:	460c      	mov	r4, r1
 8010380:	2101      	movs	r1, #1
 8010382:	f7ff febd 	bl	8010100 <_Balloc>
 8010386:	4602      	mov	r2, r0
 8010388:	b928      	cbnz	r0, 8010396 <__i2b+0x1a>
 801038a:	4b05      	ldr	r3, [pc, #20]	@ (80103a0 <__i2b+0x24>)
 801038c:	4805      	ldr	r0, [pc, #20]	@ (80103a4 <__i2b+0x28>)
 801038e:	f240 1145 	movw	r1, #325	@ 0x145
 8010392:	f001 fe3d 	bl	8012010 <__assert_func>
 8010396:	2301      	movs	r3, #1
 8010398:	6144      	str	r4, [r0, #20]
 801039a:	6103      	str	r3, [r0, #16]
 801039c:	bd10      	pop	{r4, pc}
 801039e:	bf00      	nop
 80103a0:	0801415e 	.word	0x0801415e
 80103a4:	0801416f 	.word	0x0801416f

080103a8 <__multiply>:
 80103a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103ac:	4614      	mov	r4, r2
 80103ae:	690a      	ldr	r2, [r1, #16]
 80103b0:	6923      	ldr	r3, [r4, #16]
 80103b2:	429a      	cmp	r2, r3
 80103b4:	bfa8      	it	ge
 80103b6:	4623      	movge	r3, r4
 80103b8:	460f      	mov	r7, r1
 80103ba:	bfa4      	itt	ge
 80103bc:	460c      	movge	r4, r1
 80103be:	461f      	movge	r7, r3
 80103c0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80103c4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80103c8:	68a3      	ldr	r3, [r4, #8]
 80103ca:	6861      	ldr	r1, [r4, #4]
 80103cc:	eb0a 0609 	add.w	r6, sl, r9
 80103d0:	42b3      	cmp	r3, r6
 80103d2:	b085      	sub	sp, #20
 80103d4:	bfb8      	it	lt
 80103d6:	3101      	addlt	r1, #1
 80103d8:	f7ff fe92 	bl	8010100 <_Balloc>
 80103dc:	b930      	cbnz	r0, 80103ec <__multiply+0x44>
 80103de:	4602      	mov	r2, r0
 80103e0:	4b44      	ldr	r3, [pc, #272]	@ (80104f4 <__multiply+0x14c>)
 80103e2:	4845      	ldr	r0, [pc, #276]	@ (80104f8 <__multiply+0x150>)
 80103e4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80103e8:	f001 fe12 	bl	8012010 <__assert_func>
 80103ec:	f100 0514 	add.w	r5, r0, #20
 80103f0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80103f4:	462b      	mov	r3, r5
 80103f6:	2200      	movs	r2, #0
 80103f8:	4543      	cmp	r3, r8
 80103fa:	d321      	bcc.n	8010440 <__multiply+0x98>
 80103fc:	f107 0114 	add.w	r1, r7, #20
 8010400:	f104 0214 	add.w	r2, r4, #20
 8010404:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8010408:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801040c:	9302      	str	r3, [sp, #8]
 801040e:	1b13      	subs	r3, r2, r4
 8010410:	3b15      	subs	r3, #21
 8010412:	f023 0303 	bic.w	r3, r3, #3
 8010416:	3304      	adds	r3, #4
 8010418:	f104 0715 	add.w	r7, r4, #21
 801041c:	42ba      	cmp	r2, r7
 801041e:	bf38      	it	cc
 8010420:	2304      	movcc	r3, #4
 8010422:	9301      	str	r3, [sp, #4]
 8010424:	9b02      	ldr	r3, [sp, #8]
 8010426:	9103      	str	r1, [sp, #12]
 8010428:	428b      	cmp	r3, r1
 801042a:	d80c      	bhi.n	8010446 <__multiply+0x9e>
 801042c:	2e00      	cmp	r6, #0
 801042e:	dd03      	ble.n	8010438 <__multiply+0x90>
 8010430:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010434:	2b00      	cmp	r3, #0
 8010436:	d05b      	beq.n	80104f0 <__multiply+0x148>
 8010438:	6106      	str	r6, [r0, #16]
 801043a:	b005      	add	sp, #20
 801043c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010440:	f843 2b04 	str.w	r2, [r3], #4
 8010444:	e7d8      	b.n	80103f8 <__multiply+0x50>
 8010446:	f8b1 a000 	ldrh.w	sl, [r1]
 801044a:	f1ba 0f00 	cmp.w	sl, #0
 801044e:	d024      	beq.n	801049a <__multiply+0xf2>
 8010450:	f104 0e14 	add.w	lr, r4, #20
 8010454:	46a9      	mov	r9, r5
 8010456:	f04f 0c00 	mov.w	ip, #0
 801045a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801045e:	f8d9 3000 	ldr.w	r3, [r9]
 8010462:	fa1f fb87 	uxth.w	fp, r7
 8010466:	b29b      	uxth	r3, r3
 8010468:	fb0a 330b 	mla	r3, sl, fp, r3
 801046c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8010470:	f8d9 7000 	ldr.w	r7, [r9]
 8010474:	4463      	add	r3, ip
 8010476:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801047a:	fb0a c70b 	mla	r7, sl, fp, ip
 801047e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8010482:	b29b      	uxth	r3, r3
 8010484:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010488:	4572      	cmp	r2, lr
 801048a:	f849 3b04 	str.w	r3, [r9], #4
 801048e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8010492:	d8e2      	bhi.n	801045a <__multiply+0xb2>
 8010494:	9b01      	ldr	r3, [sp, #4]
 8010496:	f845 c003 	str.w	ip, [r5, r3]
 801049a:	9b03      	ldr	r3, [sp, #12]
 801049c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80104a0:	3104      	adds	r1, #4
 80104a2:	f1b9 0f00 	cmp.w	r9, #0
 80104a6:	d021      	beq.n	80104ec <__multiply+0x144>
 80104a8:	682b      	ldr	r3, [r5, #0]
 80104aa:	f104 0c14 	add.w	ip, r4, #20
 80104ae:	46ae      	mov	lr, r5
 80104b0:	f04f 0a00 	mov.w	sl, #0
 80104b4:	f8bc b000 	ldrh.w	fp, [ip]
 80104b8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80104bc:	fb09 770b 	mla	r7, r9, fp, r7
 80104c0:	4457      	add	r7, sl
 80104c2:	b29b      	uxth	r3, r3
 80104c4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80104c8:	f84e 3b04 	str.w	r3, [lr], #4
 80104cc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80104d0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80104d4:	f8be 3000 	ldrh.w	r3, [lr]
 80104d8:	fb09 330a 	mla	r3, r9, sl, r3
 80104dc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80104e0:	4562      	cmp	r2, ip
 80104e2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80104e6:	d8e5      	bhi.n	80104b4 <__multiply+0x10c>
 80104e8:	9f01      	ldr	r7, [sp, #4]
 80104ea:	51eb      	str	r3, [r5, r7]
 80104ec:	3504      	adds	r5, #4
 80104ee:	e799      	b.n	8010424 <__multiply+0x7c>
 80104f0:	3e01      	subs	r6, #1
 80104f2:	e79b      	b.n	801042c <__multiply+0x84>
 80104f4:	0801415e 	.word	0x0801415e
 80104f8:	0801416f 	.word	0x0801416f

080104fc <__pow5mult>:
 80104fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010500:	4615      	mov	r5, r2
 8010502:	f012 0203 	ands.w	r2, r2, #3
 8010506:	4607      	mov	r7, r0
 8010508:	460e      	mov	r6, r1
 801050a:	d007      	beq.n	801051c <__pow5mult+0x20>
 801050c:	4c25      	ldr	r4, [pc, #148]	@ (80105a4 <__pow5mult+0xa8>)
 801050e:	3a01      	subs	r2, #1
 8010510:	2300      	movs	r3, #0
 8010512:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010516:	f7ff fe55 	bl	80101c4 <__multadd>
 801051a:	4606      	mov	r6, r0
 801051c:	10ad      	asrs	r5, r5, #2
 801051e:	d03d      	beq.n	801059c <__pow5mult+0xa0>
 8010520:	69fc      	ldr	r4, [r7, #28]
 8010522:	b97c      	cbnz	r4, 8010544 <__pow5mult+0x48>
 8010524:	2010      	movs	r0, #16
 8010526:	f7ff fd35 	bl	800ff94 <malloc>
 801052a:	4602      	mov	r2, r0
 801052c:	61f8      	str	r0, [r7, #28]
 801052e:	b928      	cbnz	r0, 801053c <__pow5mult+0x40>
 8010530:	4b1d      	ldr	r3, [pc, #116]	@ (80105a8 <__pow5mult+0xac>)
 8010532:	481e      	ldr	r0, [pc, #120]	@ (80105ac <__pow5mult+0xb0>)
 8010534:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8010538:	f001 fd6a 	bl	8012010 <__assert_func>
 801053c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010540:	6004      	str	r4, [r0, #0]
 8010542:	60c4      	str	r4, [r0, #12]
 8010544:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8010548:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801054c:	b94c      	cbnz	r4, 8010562 <__pow5mult+0x66>
 801054e:	f240 2171 	movw	r1, #625	@ 0x271
 8010552:	4638      	mov	r0, r7
 8010554:	f7ff ff12 	bl	801037c <__i2b>
 8010558:	2300      	movs	r3, #0
 801055a:	f8c8 0008 	str.w	r0, [r8, #8]
 801055e:	4604      	mov	r4, r0
 8010560:	6003      	str	r3, [r0, #0]
 8010562:	f04f 0900 	mov.w	r9, #0
 8010566:	07eb      	lsls	r3, r5, #31
 8010568:	d50a      	bpl.n	8010580 <__pow5mult+0x84>
 801056a:	4631      	mov	r1, r6
 801056c:	4622      	mov	r2, r4
 801056e:	4638      	mov	r0, r7
 8010570:	f7ff ff1a 	bl	80103a8 <__multiply>
 8010574:	4631      	mov	r1, r6
 8010576:	4680      	mov	r8, r0
 8010578:	4638      	mov	r0, r7
 801057a:	f7ff fe01 	bl	8010180 <_Bfree>
 801057e:	4646      	mov	r6, r8
 8010580:	106d      	asrs	r5, r5, #1
 8010582:	d00b      	beq.n	801059c <__pow5mult+0xa0>
 8010584:	6820      	ldr	r0, [r4, #0]
 8010586:	b938      	cbnz	r0, 8010598 <__pow5mult+0x9c>
 8010588:	4622      	mov	r2, r4
 801058a:	4621      	mov	r1, r4
 801058c:	4638      	mov	r0, r7
 801058e:	f7ff ff0b 	bl	80103a8 <__multiply>
 8010592:	6020      	str	r0, [r4, #0]
 8010594:	f8c0 9000 	str.w	r9, [r0]
 8010598:	4604      	mov	r4, r0
 801059a:	e7e4      	b.n	8010566 <__pow5mult+0x6a>
 801059c:	4630      	mov	r0, r6
 801059e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80105a2:	bf00      	nop
 80105a4:	080141c8 	.word	0x080141c8
 80105a8:	080140ef 	.word	0x080140ef
 80105ac:	0801416f 	.word	0x0801416f

080105b0 <__lshift>:
 80105b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80105b4:	460c      	mov	r4, r1
 80105b6:	6849      	ldr	r1, [r1, #4]
 80105b8:	6923      	ldr	r3, [r4, #16]
 80105ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80105be:	68a3      	ldr	r3, [r4, #8]
 80105c0:	4607      	mov	r7, r0
 80105c2:	4691      	mov	r9, r2
 80105c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80105c8:	f108 0601 	add.w	r6, r8, #1
 80105cc:	42b3      	cmp	r3, r6
 80105ce:	db0b      	blt.n	80105e8 <__lshift+0x38>
 80105d0:	4638      	mov	r0, r7
 80105d2:	f7ff fd95 	bl	8010100 <_Balloc>
 80105d6:	4605      	mov	r5, r0
 80105d8:	b948      	cbnz	r0, 80105ee <__lshift+0x3e>
 80105da:	4602      	mov	r2, r0
 80105dc:	4b28      	ldr	r3, [pc, #160]	@ (8010680 <__lshift+0xd0>)
 80105de:	4829      	ldr	r0, [pc, #164]	@ (8010684 <__lshift+0xd4>)
 80105e0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80105e4:	f001 fd14 	bl	8012010 <__assert_func>
 80105e8:	3101      	adds	r1, #1
 80105ea:	005b      	lsls	r3, r3, #1
 80105ec:	e7ee      	b.n	80105cc <__lshift+0x1c>
 80105ee:	2300      	movs	r3, #0
 80105f0:	f100 0114 	add.w	r1, r0, #20
 80105f4:	f100 0210 	add.w	r2, r0, #16
 80105f8:	4618      	mov	r0, r3
 80105fa:	4553      	cmp	r3, sl
 80105fc:	db33      	blt.n	8010666 <__lshift+0xb6>
 80105fe:	6920      	ldr	r0, [r4, #16]
 8010600:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010604:	f104 0314 	add.w	r3, r4, #20
 8010608:	f019 091f 	ands.w	r9, r9, #31
 801060c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010610:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010614:	d02b      	beq.n	801066e <__lshift+0xbe>
 8010616:	f1c9 0e20 	rsb	lr, r9, #32
 801061a:	468a      	mov	sl, r1
 801061c:	2200      	movs	r2, #0
 801061e:	6818      	ldr	r0, [r3, #0]
 8010620:	fa00 f009 	lsl.w	r0, r0, r9
 8010624:	4310      	orrs	r0, r2
 8010626:	f84a 0b04 	str.w	r0, [sl], #4
 801062a:	f853 2b04 	ldr.w	r2, [r3], #4
 801062e:	459c      	cmp	ip, r3
 8010630:	fa22 f20e 	lsr.w	r2, r2, lr
 8010634:	d8f3      	bhi.n	801061e <__lshift+0x6e>
 8010636:	ebac 0304 	sub.w	r3, ip, r4
 801063a:	3b15      	subs	r3, #21
 801063c:	f023 0303 	bic.w	r3, r3, #3
 8010640:	3304      	adds	r3, #4
 8010642:	f104 0015 	add.w	r0, r4, #21
 8010646:	4584      	cmp	ip, r0
 8010648:	bf38      	it	cc
 801064a:	2304      	movcc	r3, #4
 801064c:	50ca      	str	r2, [r1, r3]
 801064e:	b10a      	cbz	r2, 8010654 <__lshift+0xa4>
 8010650:	f108 0602 	add.w	r6, r8, #2
 8010654:	3e01      	subs	r6, #1
 8010656:	4638      	mov	r0, r7
 8010658:	612e      	str	r6, [r5, #16]
 801065a:	4621      	mov	r1, r4
 801065c:	f7ff fd90 	bl	8010180 <_Bfree>
 8010660:	4628      	mov	r0, r5
 8010662:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010666:	f842 0f04 	str.w	r0, [r2, #4]!
 801066a:	3301      	adds	r3, #1
 801066c:	e7c5      	b.n	80105fa <__lshift+0x4a>
 801066e:	3904      	subs	r1, #4
 8010670:	f853 2b04 	ldr.w	r2, [r3], #4
 8010674:	f841 2f04 	str.w	r2, [r1, #4]!
 8010678:	459c      	cmp	ip, r3
 801067a:	d8f9      	bhi.n	8010670 <__lshift+0xc0>
 801067c:	e7ea      	b.n	8010654 <__lshift+0xa4>
 801067e:	bf00      	nop
 8010680:	0801415e 	.word	0x0801415e
 8010684:	0801416f 	.word	0x0801416f

08010688 <__mcmp>:
 8010688:	690a      	ldr	r2, [r1, #16]
 801068a:	4603      	mov	r3, r0
 801068c:	6900      	ldr	r0, [r0, #16]
 801068e:	1a80      	subs	r0, r0, r2
 8010690:	b530      	push	{r4, r5, lr}
 8010692:	d10e      	bne.n	80106b2 <__mcmp+0x2a>
 8010694:	3314      	adds	r3, #20
 8010696:	3114      	adds	r1, #20
 8010698:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801069c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80106a0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80106a4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80106a8:	4295      	cmp	r5, r2
 80106aa:	d003      	beq.n	80106b4 <__mcmp+0x2c>
 80106ac:	d205      	bcs.n	80106ba <__mcmp+0x32>
 80106ae:	f04f 30ff 	mov.w	r0, #4294967295
 80106b2:	bd30      	pop	{r4, r5, pc}
 80106b4:	42a3      	cmp	r3, r4
 80106b6:	d3f3      	bcc.n	80106a0 <__mcmp+0x18>
 80106b8:	e7fb      	b.n	80106b2 <__mcmp+0x2a>
 80106ba:	2001      	movs	r0, #1
 80106bc:	e7f9      	b.n	80106b2 <__mcmp+0x2a>
	...

080106c0 <__mdiff>:
 80106c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106c4:	4689      	mov	r9, r1
 80106c6:	4606      	mov	r6, r0
 80106c8:	4611      	mov	r1, r2
 80106ca:	4648      	mov	r0, r9
 80106cc:	4614      	mov	r4, r2
 80106ce:	f7ff ffdb 	bl	8010688 <__mcmp>
 80106d2:	1e05      	subs	r5, r0, #0
 80106d4:	d112      	bne.n	80106fc <__mdiff+0x3c>
 80106d6:	4629      	mov	r1, r5
 80106d8:	4630      	mov	r0, r6
 80106da:	f7ff fd11 	bl	8010100 <_Balloc>
 80106de:	4602      	mov	r2, r0
 80106e0:	b928      	cbnz	r0, 80106ee <__mdiff+0x2e>
 80106e2:	4b3f      	ldr	r3, [pc, #252]	@ (80107e0 <__mdiff+0x120>)
 80106e4:	f240 2137 	movw	r1, #567	@ 0x237
 80106e8:	483e      	ldr	r0, [pc, #248]	@ (80107e4 <__mdiff+0x124>)
 80106ea:	f001 fc91 	bl	8012010 <__assert_func>
 80106ee:	2301      	movs	r3, #1
 80106f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80106f4:	4610      	mov	r0, r2
 80106f6:	b003      	add	sp, #12
 80106f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106fc:	bfbc      	itt	lt
 80106fe:	464b      	movlt	r3, r9
 8010700:	46a1      	movlt	r9, r4
 8010702:	4630      	mov	r0, r6
 8010704:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010708:	bfba      	itte	lt
 801070a:	461c      	movlt	r4, r3
 801070c:	2501      	movlt	r5, #1
 801070e:	2500      	movge	r5, #0
 8010710:	f7ff fcf6 	bl	8010100 <_Balloc>
 8010714:	4602      	mov	r2, r0
 8010716:	b918      	cbnz	r0, 8010720 <__mdiff+0x60>
 8010718:	4b31      	ldr	r3, [pc, #196]	@ (80107e0 <__mdiff+0x120>)
 801071a:	f240 2145 	movw	r1, #581	@ 0x245
 801071e:	e7e3      	b.n	80106e8 <__mdiff+0x28>
 8010720:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010724:	6926      	ldr	r6, [r4, #16]
 8010726:	60c5      	str	r5, [r0, #12]
 8010728:	f109 0310 	add.w	r3, r9, #16
 801072c:	f109 0514 	add.w	r5, r9, #20
 8010730:	f104 0e14 	add.w	lr, r4, #20
 8010734:	f100 0b14 	add.w	fp, r0, #20
 8010738:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801073c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8010740:	9301      	str	r3, [sp, #4]
 8010742:	46d9      	mov	r9, fp
 8010744:	f04f 0c00 	mov.w	ip, #0
 8010748:	9b01      	ldr	r3, [sp, #4]
 801074a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801074e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8010752:	9301      	str	r3, [sp, #4]
 8010754:	fa1f f38a 	uxth.w	r3, sl
 8010758:	4619      	mov	r1, r3
 801075a:	b283      	uxth	r3, r0
 801075c:	1acb      	subs	r3, r1, r3
 801075e:	0c00      	lsrs	r0, r0, #16
 8010760:	4463      	add	r3, ip
 8010762:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8010766:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801076a:	b29b      	uxth	r3, r3
 801076c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8010770:	4576      	cmp	r6, lr
 8010772:	f849 3b04 	str.w	r3, [r9], #4
 8010776:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801077a:	d8e5      	bhi.n	8010748 <__mdiff+0x88>
 801077c:	1b33      	subs	r3, r6, r4
 801077e:	3b15      	subs	r3, #21
 8010780:	f023 0303 	bic.w	r3, r3, #3
 8010784:	3415      	adds	r4, #21
 8010786:	3304      	adds	r3, #4
 8010788:	42a6      	cmp	r6, r4
 801078a:	bf38      	it	cc
 801078c:	2304      	movcc	r3, #4
 801078e:	441d      	add	r5, r3
 8010790:	445b      	add	r3, fp
 8010792:	461e      	mov	r6, r3
 8010794:	462c      	mov	r4, r5
 8010796:	4544      	cmp	r4, r8
 8010798:	d30e      	bcc.n	80107b8 <__mdiff+0xf8>
 801079a:	f108 0103 	add.w	r1, r8, #3
 801079e:	1b49      	subs	r1, r1, r5
 80107a0:	f021 0103 	bic.w	r1, r1, #3
 80107a4:	3d03      	subs	r5, #3
 80107a6:	45a8      	cmp	r8, r5
 80107a8:	bf38      	it	cc
 80107aa:	2100      	movcc	r1, #0
 80107ac:	440b      	add	r3, r1
 80107ae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80107b2:	b191      	cbz	r1, 80107da <__mdiff+0x11a>
 80107b4:	6117      	str	r7, [r2, #16]
 80107b6:	e79d      	b.n	80106f4 <__mdiff+0x34>
 80107b8:	f854 1b04 	ldr.w	r1, [r4], #4
 80107bc:	46e6      	mov	lr, ip
 80107be:	0c08      	lsrs	r0, r1, #16
 80107c0:	fa1c fc81 	uxtah	ip, ip, r1
 80107c4:	4471      	add	r1, lr
 80107c6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80107ca:	b289      	uxth	r1, r1
 80107cc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80107d0:	f846 1b04 	str.w	r1, [r6], #4
 80107d4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80107d8:	e7dd      	b.n	8010796 <__mdiff+0xd6>
 80107da:	3f01      	subs	r7, #1
 80107dc:	e7e7      	b.n	80107ae <__mdiff+0xee>
 80107de:	bf00      	nop
 80107e0:	0801415e 	.word	0x0801415e
 80107e4:	0801416f 	.word	0x0801416f

080107e8 <__ulp>:
 80107e8:	b082      	sub	sp, #8
 80107ea:	ed8d 0b00 	vstr	d0, [sp]
 80107ee:	9a01      	ldr	r2, [sp, #4]
 80107f0:	4b0f      	ldr	r3, [pc, #60]	@ (8010830 <__ulp+0x48>)
 80107f2:	4013      	ands	r3, r2
 80107f4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	dc08      	bgt.n	801080e <__ulp+0x26>
 80107fc:	425b      	negs	r3, r3
 80107fe:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8010802:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010806:	da04      	bge.n	8010812 <__ulp+0x2a>
 8010808:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801080c:	4113      	asrs	r3, r2
 801080e:	2200      	movs	r2, #0
 8010810:	e008      	b.n	8010824 <__ulp+0x3c>
 8010812:	f1a2 0314 	sub.w	r3, r2, #20
 8010816:	2b1e      	cmp	r3, #30
 8010818:	bfda      	itte	le
 801081a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801081e:	40da      	lsrle	r2, r3
 8010820:	2201      	movgt	r2, #1
 8010822:	2300      	movs	r3, #0
 8010824:	4619      	mov	r1, r3
 8010826:	4610      	mov	r0, r2
 8010828:	ec41 0b10 	vmov	d0, r0, r1
 801082c:	b002      	add	sp, #8
 801082e:	4770      	bx	lr
 8010830:	7ff00000 	.word	0x7ff00000

08010834 <__b2d>:
 8010834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010838:	6906      	ldr	r6, [r0, #16]
 801083a:	f100 0814 	add.w	r8, r0, #20
 801083e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8010842:	1f37      	subs	r7, r6, #4
 8010844:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010848:	4610      	mov	r0, r2
 801084a:	f7ff fd4b 	bl	80102e4 <__hi0bits>
 801084e:	f1c0 0320 	rsb	r3, r0, #32
 8010852:	280a      	cmp	r0, #10
 8010854:	600b      	str	r3, [r1, #0]
 8010856:	491b      	ldr	r1, [pc, #108]	@ (80108c4 <__b2d+0x90>)
 8010858:	dc15      	bgt.n	8010886 <__b2d+0x52>
 801085a:	f1c0 0c0b 	rsb	ip, r0, #11
 801085e:	fa22 f30c 	lsr.w	r3, r2, ip
 8010862:	45b8      	cmp	r8, r7
 8010864:	ea43 0501 	orr.w	r5, r3, r1
 8010868:	bf34      	ite	cc
 801086a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801086e:	2300      	movcs	r3, #0
 8010870:	3015      	adds	r0, #21
 8010872:	fa02 f000 	lsl.w	r0, r2, r0
 8010876:	fa23 f30c 	lsr.w	r3, r3, ip
 801087a:	4303      	orrs	r3, r0
 801087c:	461c      	mov	r4, r3
 801087e:	ec45 4b10 	vmov	d0, r4, r5
 8010882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010886:	45b8      	cmp	r8, r7
 8010888:	bf3a      	itte	cc
 801088a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801088e:	f1a6 0708 	subcc.w	r7, r6, #8
 8010892:	2300      	movcs	r3, #0
 8010894:	380b      	subs	r0, #11
 8010896:	d012      	beq.n	80108be <__b2d+0x8a>
 8010898:	f1c0 0120 	rsb	r1, r0, #32
 801089c:	fa23 f401 	lsr.w	r4, r3, r1
 80108a0:	4082      	lsls	r2, r0
 80108a2:	4322      	orrs	r2, r4
 80108a4:	4547      	cmp	r7, r8
 80108a6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80108aa:	bf8c      	ite	hi
 80108ac:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80108b0:	2200      	movls	r2, #0
 80108b2:	4083      	lsls	r3, r0
 80108b4:	40ca      	lsrs	r2, r1
 80108b6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80108ba:	4313      	orrs	r3, r2
 80108bc:	e7de      	b.n	801087c <__b2d+0x48>
 80108be:	ea42 0501 	orr.w	r5, r2, r1
 80108c2:	e7db      	b.n	801087c <__b2d+0x48>
 80108c4:	3ff00000 	.word	0x3ff00000

080108c8 <__d2b>:
 80108c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80108cc:	460f      	mov	r7, r1
 80108ce:	2101      	movs	r1, #1
 80108d0:	ec59 8b10 	vmov	r8, r9, d0
 80108d4:	4616      	mov	r6, r2
 80108d6:	f7ff fc13 	bl	8010100 <_Balloc>
 80108da:	4604      	mov	r4, r0
 80108dc:	b930      	cbnz	r0, 80108ec <__d2b+0x24>
 80108de:	4602      	mov	r2, r0
 80108e0:	4b23      	ldr	r3, [pc, #140]	@ (8010970 <__d2b+0xa8>)
 80108e2:	4824      	ldr	r0, [pc, #144]	@ (8010974 <__d2b+0xac>)
 80108e4:	f240 310f 	movw	r1, #783	@ 0x30f
 80108e8:	f001 fb92 	bl	8012010 <__assert_func>
 80108ec:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80108f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80108f4:	b10d      	cbz	r5, 80108fa <__d2b+0x32>
 80108f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80108fa:	9301      	str	r3, [sp, #4]
 80108fc:	f1b8 0300 	subs.w	r3, r8, #0
 8010900:	d023      	beq.n	801094a <__d2b+0x82>
 8010902:	4668      	mov	r0, sp
 8010904:	9300      	str	r3, [sp, #0]
 8010906:	f7ff fd0c 	bl	8010322 <__lo0bits>
 801090a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801090e:	b1d0      	cbz	r0, 8010946 <__d2b+0x7e>
 8010910:	f1c0 0320 	rsb	r3, r0, #32
 8010914:	fa02 f303 	lsl.w	r3, r2, r3
 8010918:	430b      	orrs	r3, r1
 801091a:	40c2      	lsrs	r2, r0
 801091c:	6163      	str	r3, [r4, #20]
 801091e:	9201      	str	r2, [sp, #4]
 8010920:	9b01      	ldr	r3, [sp, #4]
 8010922:	61a3      	str	r3, [r4, #24]
 8010924:	2b00      	cmp	r3, #0
 8010926:	bf0c      	ite	eq
 8010928:	2201      	moveq	r2, #1
 801092a:	2202      	movne	r2, #2
 801092c:	6122      	str	r2, [r4, #16]
 801092e:	b1a5      	cbz	r5, 801095a <__d2b+0x92>
 8010930:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010934:	4405      	add	r5, r0
 8010936:	603d      	str	r5, [r7, #0]
 8010938:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801093c:	6030      	str	r0, [r6, #0]
 801093e:	4620      	mov	r0, r4
 8010940:	b003      	add	sp, #12
 8010942:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010946:	6161      	str	r1, [r4, #20]
 8010948:	e7ea      	b.n	8010920 <__d2b+0x58>
 801094a:	a801      	add	r0, sp, #4
 801094c:	f7ff fce9 	bl	8010322 <__lo0bits>
 8010950:	9b01      	ldr	r3, [sp, #4]
 8010952:	6163      	str	r3, [r4, #20]
 8010954:	3020      	adds	r0, #32
 8010956:	2201      	movs	r2, #1
 8010958:	e7e8      	b.n	801092c <__d2b+0x64>
 801095a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801095e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8010962:	6038      	str	r0, [r7, #0]
 8010964:	6918      	ldr	r0, [r3, #16]
 8010966:	f7ff fcbd 	bl	80102e4 <__hi0bits>
 801096a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801096e:	e7e5      	b.n	801093c <__d2b+0x74>
 8010970:	0801415e 	.word	0x0801415e
 8010974:	0801416f 	.word	0x0801416f

08010978 <__ratio>:
 8010978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801097c:	b085      	sub	sp, #20
 801097e:	e9cd 1000 	strd	r1, r0, [sp]
 8010982:	a902      	add	r1, sp, #8
 8010984:	f7ff ff56 	bl	8010834 <__b2d>
 8010988:	9800      	ldr	r0, [sp, #0]
 801098a:	a903      	add	r1, sp, #12
 801098c:	ec55 4b10 	vmov	r4, r5, d0
 8010990:	f7ff ff50 	bl	8010834 <__b2d>
 8010994:	9b01      	ldr	r3, [sp, #4]
 8010996:	6919      	ldr	r1, [r3, #16]
 8010998:	9b00      	ldr	r3, [sp, #0]
 801099a:	691b      	ldr	r3, [r3, #16]
 801099c:	1ac9      	subs	r1, r1, r3
 801099e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80109a2:	1a9b      	subs	r3, r3, r2
 80109a4:	ec5b ab10 	vmov	sl, fp, d0
 80109a8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	bfce      	itee	gt
 80109b0:	462a      	movgt	r2, r5
 80109b2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80109b6:	465a      	movle	r2, fp
 80109b8:	462f      	mov	r7, r5
 80109ba:	46d9      	mov	r9, fp
 80109bc:	bfcc      	ite	gt
 80109be:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80109c2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80109c6:	464b      	mov	r3, r9
 80109c8:	4652      	mov	r2, sl
 80109ca:	4620      	mov	r0, r4
 80109cc:	4639      	mov	r1, r7
 80109ce:	f7ef ff15 	bl	80007fc <__aeabi_ddiv>
 80109d2:	ec41 0b10 	vmov	d0, r0, r1
 80109d6:	b005      	add	sp, #20
 80109d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080109dc <__copybits>:
 80109dc:	3901      	subs	r1, #1
 80109de:	b570      	push	{r4, r5, r6, lr}
 80109e0:	1149      	asrs	r1, r1, #5
 80109e2:	6914      	ldr	r4, [r2, #16]
 80109e4:	3101      	adds	r1, #1
 80109e6:	f102 0314 	add.w	r3, r2, #20
 80109ea:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80109ee:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80109f2:	1f05      	subs	r5, r0, #4
 80109f4:	42a3      	cmp	r3, r4
 80109f6:	d30c      	bcc.n	8010a12 <__copybits+0x36>
 80109f8:	1aa3      	subs	r3, r4, r2
 80109fa:	3b11      	subs	r3, #17
 80109fc:	f023 0303 	bic.w	r3, r3, #3
 8010a00:	3211      	adds	r2, #17
 8010a02:	42a2      	cmp	r2, r4
 8010a04:	bf88      	it	hi
 8010a06:	2300      	movhi	r3, #0
 8010a08:	4418      	add	r0, r3
 8010a0a:	2300      	movs	r3, #0
 8010a0c:	4288      	cmp	r0, r1
 8010a0e:	d305      	bcc.n	8010a1c <__copybits+0x40>
 8010a10:	bd70      	pop	{r4, r5, r6, pc}
 8010a12:	f853 6b04 	ldr.w	r6, [r3], #4
 8010a16:	f845 6f04 	str.w	r6, [r5, #4]!
 8010a1a:	e7eb      	b.n	80109f4 <__copybits+0x18>
 8010a1c:	f840 3b04 	str.w	r3, [r0], #4
 8010a20:	e7f4      	b.n	8010a0c <__copybits+0x30>

08010a22 <__any_on>:
 8010a22:	f100 0214 	add.w	r2, r0, #20
 8010a26:	6900      	ldr	r0, [r0, #16]
 8010a28:	114b      	asrs	r3, r1, #5
 8010a2a:	4298      	cmp	r0, r3
 8010a2c:	b510      	push	{r4, lr}
 8010a2e:	db11      	blt.n	8010a54 <__any_on+0x32>
 8010a30:	dd0a      	ble.n	8010a48 <__any_on+0x26>
 8010a32:	f011 011f 	ands.w	r1, r1, #31
 8010a36:	d007      	beq.n	8010a48 <__any_on+0x26>
 8010a38:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010a3c:	fa24 f001 	lsr.w	r0, r4, r1
 8010a40:	fa00 f101 	lsl.w	r1, r0, r1
 8010a44:	428c      	cmp	r4, r1
 8010a46:	d10b      	bne.n	8010a60 <__any_on+0x3e>
 8010a48:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010a4c:	4293      	cmp	r3, r2
 8010a4e:	d803      	bhi.n	8010a58 <__any_on+0x36>
 8010a50:	2000      	movs	r0, #0
 8010a52:	bd10      	pop	{r4, pc}
 8010a54:	4603      	mov	r3, r0
 8010a56:	e7f7      	b.n	8010a48 <__any_on+0x26>
 8010a58:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010a5c:	2900      	cmp	r1, #0
 8010a5e:	d0f5      	beq.n	8010a4c <__any_on+0x2a>
 8010a60:	2001      	movs	r0, #1
 8010a62:	e7f6      	b.n	8010a52 <__any_on+0x30>

08010a64 <sulp>:
 8010a64:	b570      	push	{r4, r5, r6, lr}
 8010a66:	4604      	mov	r4, r0
 8010a68:	460d      	mov	r5, r1
 8010a6a:	ec45 4b10 	vmov	d0, r4, r5
 8010a6e:	4616      	mov	r6, r2
 8010a70:	f7ff feba 	bl	80107e8 <__ulp>
 8010a74:	ec51 0b10 	vmov	r0, r1, d0
 8010a78:	b17e      	cbz	r6, 8010a9a <sulp+0x36>
 8010a7a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010a7e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	dd09      	ble.n	8010a9a <sulp+0x36>
 8010a86:	051b      	lsls	r3, r3, #20
 8010a88:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8010a8c:	2400      	movs	r4, #0
 8010a8e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8010a92:	4622      	mov	r2, r4
 8010a94:	462b      	mov	r3, r5
 8010a96:	f7ef fd87 	bl	80005a8 <__aeabi_dmul>
 8010a9a:	ec41 0b10 	vmov	d0, r0, r1
 8010a9e:	bd70      	pop	{r4, r5, r6, pc}

08010aa0 <_strtod_l>:
 8010aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010aa4:	b09f      	sub	sp, #124	@ 0x7c
 8010aa6:	460c      	mov	r4, r1
 8010aa8:	9217      	str	r2, [sp, #92]	@ 0x5c
 8010aaa:	2200      	movs	r2, #0
 8010aac:	921a      	str	r2, [sp, #104]	@ 0x68
 8010aae:	9005      	str	r0, [sp, #20]
 8010ab0:	f04f 0a00 	mov.w	sl, #0
 8010ab4:	f04f 0b00 	mov.w	fp, #0
 8010ab8:	460a      	mov	r2, r1
 8010aba:	9219      	str	r2, [sp, #100]	@ 0x64
 8010abc:	7811      	ldrb	r1, [r2, #0]
 8010abe:	292b      	cmp	r1, #43	@ 0x2b
 8010ac0:	d04a      	beq.n	8010b58 <_strtod_l+0xb8>
 8010ac2:	d838      	bhi.n	8010b36 <_strtod_l+0x96>
 8010ac4:	290d      	cmp	r1, #13
 8010ac6:	d832      	bhi.n	8010b2e <_strtod_l+0x8e>
 8010ac8:	2908      	cmp	r1, #8
 8010aca:	d832      	bhi.n	8010b32 <_strtod_l+0x92>
 8010acc:	2900      	cmp	r1, #0
 8010ace:	d03b      	beq.n	8010b48 <_strtod_l+0xa8>
 8010ad0:	2200      	movs	r2, #0
 8010ad2:	920b      	str	r2, [sp, #44]	@ 0x2c
 8010ad4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8010ad6:	782a      	ldrb	r2, [r5, #0]
 8010ad8:	2a30      	cmp	r2, #48	@ 0x30
 8010ada:	f040 80b3 	bne.w	8010c44 <_strtod_l+0x1a4>
 8010ade:	786a      	ldrb	r2, [r5, #1]
 8010ae0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8010ae4:	2a58      	cmp	r2, #88	@ 0x58
 8010ae6:	d16e      	bne.n	8010bc6 <_strtod_l+0x126>
 8010ae8:	9302      	str	r3, [sp, #8]
 8010aea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010aec:	9301      	str	r3, [sp, #4]
 8010aee:	ab1a      	add	r3, sp, #104	@ 0x68
 8010af0:	9300      	str	r3, [sp, #0]
 8010af2:	4a8e      	ldr	r2, [pc, #568]	@ (8010d2c <_strtod_l+0x28c>)
 8010af4:	9805      	ldr	r0, [sp, #20]
 8010af6:	ab1b      	add	r3, sp, #108	@ 0x6c
 8010af8:	a919      	add	r1, sp, #100	@ 0x64
 8010afa:	f001 fb23 	bl	8012144 <__gethex>
 8010afe:	f010 060f 	ands.w	r6, r0, #15
 8010b02:	4604      	mov	r4, r0
 8010b04:	d005      	beq.n	8010b12 <_strtod_l+0x72>
 8010b06:	2e06      	cmp	r6, #6
 8010b08:	d128      	bne.n	8010b5c <_strtod_l+0xbc>
 8010b0a:	3501      	adds	r5, #1
 8010b0c:	2300      	movs	r3, #0
 8010b0e:	9519      	str	r5, [sp, #100]	@ 0x64
 8010b10:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010b12:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	f040 858e 	bne.w	8011636 <_strtod_l+0xb96>
 8010b1a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010b1c:	b1cb      	cbz	r3, 8010b52 <_strtod_l+0xb2>
 8010b1e:	4652      	mov	r2, sl
 8010b20:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8010b24:	ec43 2b10 	vmov	d0, r2, r3
 8010b28:	b01f      	add	sp, #124	@ 0x7c
 8010b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b2e:	2920      	cmp	r1, #32
 8010b30:	d1ce      	bne.n	8010ad0 <_strtod_l+0x30>
 8010b32:	3201      	adds	r2, #1
 8010b34:	e7c1      	b.n	8010aba <_strtod_l+0x1a>
 8010b36:	292d      	cmp	r1, #45	@ 0x2d
 8010b38:	d1ca      	bne.n	8010ad0 <_strtod_l+0x30>
 8010b3a:	2101      	movs	r1, #1
 8010b3c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8010b3e:	1c51      	adds	r1, r2, #1
 8010b40:	9119      	str	r1, [sp, #100]	@ 0x64
 8010b42:	7852      	ldrb	r2, [r2, #1]
 8010b44:	2a00      	cmp	r2, #0
 8010b46:	d1c5      	bne.n	8010ad4 <_strtod_l+0x34>
 8010b48:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8010b4a:	9419      	str	r4, [sp, #100]	@ 0x64
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	f040 8570 	bne.w	8011632 <_strtod_l+0xb92>
 8010b52:	4652      	mov	r2, sl
 8010b54:	465b      	mov	r3, fp
 8010b56:	e7e5      	b.n	8010b24 <_strtod_l+0x84>
 8010b58:	2100      	movs	r1, #0
 8010b5a:	e7ef      	b.n	8010b3c <_strtod_l+0x9c>
 8010b5c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8010b5e:	b13a      	cbz	r2, 8010b70 <_strtod_l+0xd0>
 8010b60:	2135      	movs	r1, #53	@ 0x35
 8010b62:	a81c      	add	r0, sp, #112	@ 0x70
 8010b64:	f7ff ff3a 	bl	80109dc <__copybits>
 8010b68:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010b6a:	9805      	ldr	r0, [sp, #20]
 8010b6c:	f7ff fb08 	bl	8010180 <_Bfree>
 8010b70:	3e01      	subs	r6, #1
 8010b72:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8010b74:	2e04      	cmp	r6, #4
 8010b76:	d806      	bhi.n	8010b86 <_strtod_l+0xe6>
 8010b78:	e8df f006 	tbb	[pc, r6]
 8010b7c:	201d0314 	.word	0x201d0314
 8010b80:	14          	.byte	0x14
 8010b81:	00          	.byte	0x00
 8010b82:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8010b86:	05e1      	lsls	r1, r4, #23
 8010b88:	bf48      	it	mi
 8010b8a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8010b8e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010b92:	0d1b      	lsrs	r3, r3, #20
 8010b94:	051b      	lsls	r3, r3, #20
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d1bb      	bne.n	8010b12 <_strtod_l+0x72>
 8010b9a:	f7fe fb21 	bl	800f1e0 <__errno>
 8010b9e:	2322      	movs	r3, #34	@ 0x22
 8010ba0:	6003      	str	r3, [r0, #0]
 8010ba2:	e7b6      	b.n	8010b12 <_strtod_l+0x72>
 8010ba4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8010ba8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8010bac:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8010bb0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8010bb4:	e7e7      	b.n	8010b86 <_strtod_l+0xe6>
 8010bb6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8010d34 <_strtod_l+0x294>
 8010bba:	e7e4      	b.n	8010b86 <_strtod_l+0xe6>
 8010bbc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8010bc0:	f04f 3aff 	mov.w	sl, #4294967295
 8010bc4:	e7df      	b.n	8010b86 <_strtod_l+0xe6>
 8010bc6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010bc8:	1c5a      	adds	r2, r3, #1
 8010bca:	9219      	str	r2, [sp, #100]	@ 0x64
 8010bcc:	785b      	ldrb	r3, [r3, #1]
 8010bce:	2b30      	cmp	r3, #48	@ 0x30
 8010bd0:	d0f9      	beq.n	8010bc6 <_strtod_l+0x126>
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d09d      	beq.n	8010b12 <_strtod_l+0x72>
 8010bd6:	2301      	movs	r3, #1
 8010bd8:	9309      	str	r3, [sp, #36]	@ 0x24
 8010bda:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010bdc:	930c      	str	r3, [sp, #48]	@ 0x30
 8010bde:	2300      	movs	r3, #0
 8010be0:	9308      	str	r3, [sp, #32]
 8010be2:	930a      	str	r3, [sp, #40]	@ 0x28
 8010be4:	461f      	mov	r7, r3
 8010be6:	220a      	movs	r2, #10
 8010be8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8010bea:	7805      	ldrb	r5, [r0, #0]
 8010bec:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8010bf0:	b2d9      	uxtb	r1, r3
 8010bf2:	2909      	cmp	r1, #9
 8010bf4:	d928      	bls.n	8010c48 <_strtod_l+0x1a8>
 8010bf6:	494e      	ldr	r1, [pc, #312]	@ (8010d30 <_strtod_l+0x290>)
 8010bf8:	2201      	movs	r2, #1
 8010bfa:	f001 f9ba 	bl	8011f72 <strncmp>
 8010bfe:	2800      	cmp	r0, #0
 8010c00:	d032      	beq.n	8010c68 <_strtod_l+0x1c8>
 8010c02:	2000      	movs	r0, #0
 8010c04:	462a      	mov	r2, r5
 8010c06:	4681      	mov	r9, r0
 8010c08:	463d      	mov	r5, r7
 8010c0a:	4603      	mov	r3, r0
 8010c0c:	2a65      	cmp	r2, #101	@ 0x65
 8010c0e:	d001      	beq.n	8010c14 <_strtod_l+0x174>
 8010c10:	2a45      	cmp	r2, #69	@ 0x45
 8010c12:	d114      	bne.n	8010c3e <_strtod_l+0x19e>
 8010c14:	b91d      	cbnz	r5, 8010c1e <_strtod_l+0x17e>
 8010c16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010c18:	4302      	orrs	r2, r0
 8010c1a:	d095      	beq.n	8010b48 <_strtod_l+0xa8>
 8010c1c:	2500      	movs	r5, #0
 8010c1e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8010c20:	1c62      	adds	r2, r4, #1
 8010c22:	9219      	str	r2, [sp, #100]	@ 0x64
 8010c24:	7862      	ldrb	r2, [r4, #1]
 8010c26:	2a2b      	cmp	r2, #43	@ 0x2b
 8010c28:	d077      	beq.n	8010d1a <_strtod_l+0x27a>
 8010c2a:	2a2d      	cmp	r2, #45	@ 0x2d
 8010c2c:	d07b      	beq.n	8010d26 <_strtod_l+0x286>
 8010c2e:	f04f 0c00 	mov.w	ip, #0
 8010c32:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8010c36:	2909      	cmp	r1, #9
 8010c38:	f240 8082 	bls.w	8010d40 <_strtod_l+0x2a0>
 8010c3c:	9419      	str	r4, [sp, #100]	@ 0x64
 8010c3e:	f04f 0800 	mov.w	r8, #0
 8010c42:	e0a2      	b.n	8010d8a <_strtod_l+0x2ea>
 8010c44:	2300      	movs	r3, #0
 8010c46:	e7c7      	b.n	8010bd8 <_strtod_l+0x138>
 8010c48:	2f08      	cmp	r7, #8
 8010c4a:	bfd5      	itete	le
 8010c4c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8010c4e:	9908      	ldrgt	r1, [sp, #32]
 8010c50:	fb02 3301 	mlale	r3, r2, r1, r3
 8010c54:	fb02 3301 	mlagt	r3, r2, r1, r3
 8010c58:	f100 0001 	add.w	r0, r0, #1
 8010c5c:	bfd4      	ite	le
 8010c5e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8010c60:	9308      	strgt	r3, [sp, #32]
 8010c62:	3701      	adds	r7, #1
 8010c64:	9019      	str	r0, [sp, #100]	@ 0x64
 8010c66:	e7bf      	b.n	8010be8 <_strtod_l+0x148>
 8010c68:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010c6a:	1c5a      	adds	r2, r3, #1
 8010c6c:	9219      	str	r2, [sp, #100]	@ 0x64
 8010c6e:	785a      	ldrb	r2, [r3, #1]
 8010c70:	b37f      	cbz	r7, 8010cd2 <_strtod_l+0x232>
 8010c72:	4681      	mov	r9, r0
 8010c74:	463d      	mov	r5, r7
 8010c76:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8010c7a:	2b09      	cmp	r3, #9
 8010c7c:	d912      	bls.n	8010ca4 <_strtod_l+0x204>
 8010c7e:	2301      	movs	r3, #1
 8010c80:	e7c4      	b.n	8010c0c <_strtod_l+0x16c>
 8010c82:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010c84:	1c5a      	adds	r2, r3, #1
 8010c86:	9219      	str	r2, [sp, #100]	@ 0x64
 8010c88:	785a      	ldrb	r2, [r3, #1]
 8010c8a:	3001      	adds	r0, #1
 8010c8c:	2a30      	cmp	r2, #48	@ 0x30
 8010c8e:	d0f8      	beq.n	8010c82 <_strtod_l+0x1e2>
 8010c90:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8010c94:	2b08      	cmp	r3, #8
 8010c96:	f200 84d3 	bhi.w	8011640 <_strtod_l+0xba0>
 8010c9a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010c9c:	930c      	str	r3, [sp, #48]	@ 0x30
 8010c9e:	4681      	mov	r9, r0
 8010ca0:	2000      	movs	r0, #0
 8010ca2:	4605      	mov	r5, r0
 8010ca4:	3a30      	subs	r2, #48	@ 0x30
 8010ca6:	f100 0301 	add.w	r3, r0, #1
 8010caa:	d02a      	beq.n	8010d02 <_strtod_l+0x262>
 8010cac:	4499      	add	r9, r3
 8010cae:	eb00 0c05 	add.w	ip, r0, r5
 8010cb2:	462b      	mov	r3, r5
 8010cb4:	210a      	movs	r1, #10
 8010cb6:	4563      	cmp	r3, ip
 8010cb8:	d10d      	bne.n	8010cd6 <_strtod_l+0x236>
 8010cba:	1c69      	adds	r1, r5, #1
 8010cbc:	4401      	add	r1, r0
 8010cbe:	4428      	add	r0, r5
 8010cc0:	2808      	cmp	r0, #8
 8010cc2:	dc16      	bgt.n	8010cf2 <_strtod_l+0x252>
 8010cc4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010cc6:	230a      	movs	r3, #10
 8010cc8:	fb03 2300 	mla	r3, r3, r0, r2
 8010ccc:	930a      	str	r3, [sp, #40]	@ 0x28
 8010cce:	2300      	movs	r3, #0
 8010cd0:	e018      	b.n	8010d04 <_strtod_l+0x264>
 8010cd2:	4638      	mov	r0, r7
 8010cd4:	e7da      	b.n	8010c8c <_strtod_l+0x1ec>
 8010cd6:	2b08      	cmp	r3, #8
 8010cd8:	f103 0301 	add.w	r3, r3, #1
 8010cdc:	dc03      	bgt.n	8010ce6 <_strtod_l+0x246>
 8010cde:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8010ce0:	434e      	muls	r6, r1
 8010ce2:	960a      	str	r6, [sp, #40]	@ 0x28
 8010ce4:	e7e7      	b.n	8010cb6 <_strtod_l+0x216>
 8010ce6:	2b10      	cmp	r3, #16
 8010ce8:	bfde      	ittt	le
 8010cea:	9e08      	ldrle	r6, [sp, #32]
 8010cec:	434e      	mulle	r6, r1
 8010cee:	9608      	strle	r6, [sp, #32]
 8010cf0:	e7e1      	b.n	8010cb6 <_strtod_l+0x216>
 8010cf2:	280f      	cmp	r0, #15
 8010cf4:	dceb      	bgt.n	8010cce <_strtod_l+0x22e>
 8010cf6:	9808      	ldr	r0, [sp, #32]
 8010cf8:	230a      	movs	r3, #10
 8010cfa:	fb03 2300 	mla	r3, r3, r0, r2
 8010cfe:	9308      	str	r3, [sp, #32]
 8010d00:	e7e5      	b.n	8010cce <_strtod_l+0x22e>
 8010d02:	4629      	mov	r1, r5
 8010d04:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010d06:	1c50      	adds	r0, r2, #1
 8010d08:	9019      	str	r0, [sp, #100]	@ 0x64
 8010d0a:	7852      	ldrb	r2, [r2, #1]
 8010d0c:	4618      	mov	r0, r3
 8010d0e:	460d      	mov	r5, r1
 8010d10:	e7b1      	b.n	8010c76 <_strtod_l+0x1d6>
 8010d12:	f04f 0900 	mov.w	r9, #0
 8010d16:	2301      	movs	r3, #1
 8010d18:	e77d      	b.n	8010c16 <_strtod_l+0x176>
 8010d1a:	f04f 0c00 	mov.w	ip, #0
 8010d1e:	1ca2      	adds	r2, r4, #2
 8010d20:	9219      	str	r2, [sp, #100]	@ 0x64
 8010d22:	78a2      	ldrb	r2, [r4, #2]
 8010d24:	e785      	b.n	8010c32 <_strtod_l+0x192>
 8010d26:	f04f 0c01 	mov.w	ip, #1
 8010d2a:	e7f8      	b.n	8010d1e <_strtod_l+0x27e>
 8010d2c:	080142e0 	.word	0x080142e0
 8010d30:	080142c8 	.word	0x080142c8
 8010d34:	7ff00000 	.word	0x7ff00000
 8010d38:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010d3a:	1c51      	adds	r1, r2, #1
 8010d3c:	9119      	str	r1, [sp, #100]	@ 0x64
 8010d3e:	7852      	ldrb	r2, [r2, #1]
 8010d40:	2a30      	cmp	r2, #48	@ 0x30
 8010d42:	d0f9      	beq.n	8010d38 <_strtod_l+0x298>
 8010d44:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8010d48:	2908      	cmp	r1, #8
 8010d4a:	f63f af78 	bhi.w	8010c3e <_strtod_l+0x19e>
 8010d4e:	3a30      	subs	r2, #48	@ 0x30
 8010d50:	920e      	str	r2, [sp, #56]	@ 0x38
 8010d52:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010d54:	920f      	str	r2, [sp, #60]	@ 0x3c
 8010d56:	f04f 080a 	mov.w	r8, #10
 8010d5a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010d5c:	1c56      	adds	r6, r2, #1
 8010d5e:	9619      	str	r6, [sp, #100]	@ 0x64
 8010d60:	7852      	ldrb	r2, [r2, #1]
 8010d62:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8010d66:	f1be 0f09 	cmp.w	lr, #9
 8010d6a:	d939      	bls.n	8010de0 <_strtod_l+0x340>
 8010d6c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8010d6e:	1a76      	subs	r6, r6, r1
 8010d70:	2e08      	cmp	r6, #8
 8010d72:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8010d76:	dc03      	bgt.n	8010d80 <_strtod_l+0x2e0>
 8010d78:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8010d7a:	4588      	cmp	r8, r1
 8010d7c:	bfa8      	it	ge
 8010d7e:	4688      	movge	r8, r1
 8010d80:	f1bc 0f00 	cmp.w	ip, #0
 8010d84:	d001      	beq.n	8010d8a <_strtod_l+0x2ea>
 8010d86:	f1c8 0800 	rsb	r8, r8, #0
 8010d8a:	2d00      	cmp	r5, #0
 8010d8c:	d14e      	bne.n	8010e2c <_strtod_l+0x38c>
 8010d8e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010d90:	4308      	orrs	r0, r1
 8010d92:	f47f aebe 	bne.w	8010b12 <_strtod_l+0x72>
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	f47f aed6 	bne.w	8010b48 <_strtod_l+0xa8>
 8010d9c:	2a69      	cmp	r2, #105	@ 0x69
 8010d9e:	d028      	beq.n	8010df2 <_strtod_l+0x352>
 8010da0:	dc25      	bgt.n	8010dee <_strtod_l+0x34e>
 8010da2:	2a49      	cmp	r2, #73	@ 0x49
 8010da4:	d025      	beq.n	8010df2 <_strtod_l+0x352>
 8010da6:	2a4e      	cmp	r2, #78	@ 0x4e
 8010da8:	f47f aece 	bne.w	8010b48 <_strtod_l+0xa8>
 8010dac:	499b      	ldr	r1, [pc, #620]	@ (801101c <_strtod_l+0x57c>)
 8010dae:	a819      	add	r0, sp, #100	@ 0x64
 8010db0:	f001 fbea 	bl	8012588 <__match>
 8010db4:	2800      	cmp	r0, #0
 8010db6:	f43f aec7 	beq.w	8010b48 <_strtod_l+0xa8>
 8010dba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010dbc:	781b      	ldrb	r3, [r3, #0]
 8010dbe:	2b28      	cmp	r3, #40	@ 0x28
 8010dc0:	d12e      	bne.n	8010e20 <_strtod_l+0x380>
 8010dc2:	4997      	ldr	r1, [pc, #604]	@ (8011020 <_strtod_l+0x580>)
 8010dc4:	aa1c      	add	r2, sp, #112	@ 0x70
 8010dc6:	a819      	add	r0, sp, #100	@ 0x64
 8010dc8:	f001 fbf2 	bl	80125b0 <__hexnan>
 8010dcc:	2805      	cmp	r0, #5
 8010dce:	d127      	bne.n	8010e20 <_strtod_l+0x380>
 8010dd0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010dd2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8010dd6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8010dda:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8010dde:	e698      	b.n	8010b12 <_strtod_l+0x72>
 8010de0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8010de2:	fb08 2101 	mla	r1, r8, r1, r2
 8010de6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8010dea:	920e      	str	r2, [sp, #56]	@ 0x38
 8010dec:	e7b5      	b.n	8010d5a <_strtod_l+0x2ba>
 8010dee:	2a6e      	cmp	r2, #110	@ 0x6e
 8010df0:	e7da      	b.n	8010da8 <_strtod_l+0x308>
 8010df2:	498c      	ldr	r1, [pc, #560]	@ (8011024 <_strtod_l+0x584>)
 8010df4:	a819      	add	r0, sp, #100	@ 0x64
 8010df6:	f001 fbc7 	bl	8012588 <__match>
 8010dfa:	2800      	cmp	r0, #0
 8010dfc:	f43f aea4 	beq.w	8010b48 <_strtod_l+0xa8>
 8010e00:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010e02:	4989      	ldr	r1, [pc, #548]	@ (8011028 <_strtod_l+0x588>)
 8010e04:	3b01      	subs	r3, #1
 8010e06:	a819      	add	r0, sp, #100	@ 0x64
 8010e08:	9319      	str	r3, [sp, #100]	@ 0x64
 8010e0a:	f001 fbbd 	bl	8012588 <__match>
 8010e0e:	b910      	cbnz	r0, 8010e16 <_strtod_l+0x376>
 8010e10:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010e12:	3301      	adds	r3, #1
 8010e14:	9319      	str	r3, [sp, #100]	@ 0x64
 8010e16:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8011038 <_strtod_l+0x598>
 8010e1a:	f04f 0a00 	mov.w	sl, #0
 8010e1e:	e678      	b.n	8010b12 <_strtod_l+0x72>
 8010e20:	4882      	ldr	r0, [pc, #520]	@ (801102c <_strtod_l+0x58c>)
 8010e22:	f001 f8ed 	bl	8012000 <nan>
 8010e26:	ec5b ab10 	vmov	sl, fp, d0
 8010e2a:	e672      	b.n	8010b12 <_strtod_l+0x72>
 8010e2c:	eba8 0309 	sub.w	r3, r8, r9
 8010e30:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010e32:	9309      	str	r3, [sp, #36]	@ 0x24
 8010e34:	2f00      	cmp	r7, #0
 8010e36:	bf08      	it	eq
 8010e38:	462f      	moveq	r7, r5
 8010e3a:	2d10      	cmp	r5, #16
 8010e3c:	462c      	mov	r4, r5
 8010e3e:	bfa8      	it	ge
 8010e40:	2410      	movge	r4, #16
 8010e42:	f7ef fb37 	bl	80004b4 <__aeabi_ui2d>
 8010e46:	2d09      	cmp	r5, #9
 8010e48:	4682      	mov	sl, r0
 8010e4a:	468b      	mov	fp, r1
 8010e4c:	dc13      	bgt.n	8010e76 <_strtod_l+0x3d6>
 8010e4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	f43f ae5e 	beq.w	8010b12 <_strtod_l+0x72>
 8010e56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010e58:	dd78      	ble.n	8010f4c <_strtod_l+0x4ac>
 8010e5a:	2b16      	cmp	r3, #22
 8010e5c:	dc5f      	bgt.n	8010f1e <_strtod_l+0x47e>
 8010e5e:	4974      	ldr	r1, [pc, #464]	@ (8011030 <_strtod_l+0x590>)
 8010e60:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010e64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010e68:	4652      	mov	r2, sl
 8010e6a:	465b      	mov	r3, fp
 8010e6c:	f7ef fb9c 	bl	80005a8 <__aeabi_dmul>
 8010e70:	4682      	mov	sl, r0
 8010e72:	468b      	mov	fp, r1
 8010e74:	e64d      	b.n	8010b12 <_strtod_l+0x72>
 8010e76:	4b6e      	ldr	r3, [pc, #440]	@ (8011030 <_strtod_l+0x590>)
 8010e78:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010e7c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8010e80:	f7ef fb92 	bl	80005a8 <__aeabi_dmul>
 8010e84:	4682      	mov	sl, r0
 8010e86:	9808      	ldr	r0, [sp, #32]
 8010e88:	468b      	mov	fp, r1
 8010e8a:	f7ef fb13 	bl	80004b4 <__aeabi_ui2d>
 8010e8e:	4602      	mov	r2, r0
 8010e90:	460b      	mov	r3, r1
 8010e92:	4650      	mov	r0, sl
 8010e94:	4659      	mov	r1, fp
 8010e96:	f7ef f9d1 	bl	800023c <__adddf3>
 8010e9a:	2d0f      	cmp	r5, #15
 8010e9c:	4682      	mov	sl, r0
 8010e9e:	468b      	mov	fp, r1
 8010ea0:	ddd5      	ble.n	8010e4e <_strtod_l+0x3ae>
 8010ea2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ea4:	1b2c      	subs	r4, r5, r4
 8010ea6:	441c      	add	r4, r3
 8010ea8:	2c00      	cmp	r4, #0
 8010eaa:	f340 8096 	ble.w	8010fda <_strtod_l+0x53a>
 8010eae:	f014 030f 	ands.w	r3, r4, #15
 8010eb2:	d00a      	beq.n	8010eca <_strtod_l+0x42a>
 8010eb4:	495e      	ldr	r1, [pc, #376]	@ (8011030 <_strtod_l+0x590>)
 8010eb6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010eba:	4652      	mov	r2, sl
 8010ebc:	465b      	mov	r3, fp
 8010ebe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010ec2:	f7ef fb71 	bl	80005a8 <__aeabi_dmul>
 8010ec6:	4682      	mov	sl, r0
 8010ec8:	468b      	mov	fp, r1
 8010eca:	f034 040f 	bics.w	r4, r4, #15
 8010ece:	d073      	beq.n	8010fb8 <_strtod_l+0x518>
 8010ed0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8010ed4:	dd48      	ble.n	8010f68 <_strtod_l+0x4c8>
 8010ed6:	2400      	movs	r4, #0
 8010ed8:	46a0      	mov	r8, r4
 8010eda:	940a      	str	r4, [sp, #40]	@ 0x28
 8010edc:	46a1      	mov	r9, r4
 8010ede:	9a05      	ldr	r2, [sp, #20]
 8010ee0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8011038 <_strtod_l+0x598>
 8010ee4:	2322      	movs	r3, #34	@ 0x22
 8010ee6:	6013      	str	r3, [r2, #0]
 8010ee8:	f04f 0a00 	mov.w	sl, #0
 8010eec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	f43f ae0f 	beq.w	8010b12 <_strtod_l+0x72>
 8010ef4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010ef6:	9805      	ldr	r0, [sp, #20]
 8010ef8:	f7ff f942 	bl	8010180 <_Bfree>
 8010efc:	9805      	ldr	r0, [sp, #20]
 8010efe:	4649      	mov	r1, r9
 8010f00:	f7ff f93e 	bl	8010180 <_Bfree>
 8010f04:	9805      	ldr	r0, [sp, #20]
 8010f06:	4641      	mov	r1, r8
 8010f08:	f7ff f93a 	bl	8010180 <_Bfree>
 8010f0c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010f0e:	9805      	ldr	r0, [sp, #20]
 8010f10:	f7ff f936 	bl	8010180 <_Bfree>
 8010f14:	9805      	ldr	r0, [sp, #20]
 8010f16:	4621      	mov	r1, r4
 8010f18:	f7ff f932 	bl	8010180 <_Bfree>
 8010f1c:	e5f9      	b.n	8010b12 <_strtod_l+0x72>
 8010f1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010f20:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8010f24:	4293      	cmp	r3, r2
 8010f26:	dbbc      	blt.n	8010ea2 <_strtod_l+0x402>
 8010f28:	4c41      	ldr	r4, [pc, #260]	@ (8011030 <_strtod_l+0x590>)
 8010f2a:	f1c5 050f 	rsb	r5, r5, #15
 8010f2e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8010f32:	4652      	mov	r2, sl
 8010f34:	465b      	mov	r3, fp
 8010f36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010f3a:	f7ef fb35 	bl	80005a8 <__aeabi_dmul>
 8010f3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010f40:	1b5d      	subs	r5, r3, r5
 8010f42:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8010f46:	e9d4 2300 	ldrd	r2, r3, [r4]
 8010f4a:	e78f      	b.n	8010e6c <_strtod_l+0x3cc>
 8010f4c:	3316      	adds	r3, #22
 8010f4e:	dba8      	blt.n	8010ea2 <_strtod_l+0x402>
 8010f50:	4b37      	ldr	r3, [pc, #220]	@ (8011030 <_strtod_l+0x590>)
 8010f52:	eba9 0808 	sub.w	r8, r9, r8
 8010f56:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8010f5a:	e9d8 2300 	ldrd	r2, r3, [r8]
 8010f5e:	4650      	mov	r0, sl
 8010f60:	4659      	mov	r1, fp
 8010f62:	f7ef fc4b 	bl	80007fc <__aeabi_ddiv>
 8010f66:	e783      	b.n	8010e70 <_strtod_l+0x3d0>
 8010f68:	4b32      	ldr	r3, [pc, #200]	@ (8011034 <_strtod_l+0x594>)
 8010f6a:	9308      	str	r3, [sp, #32]
 8010f6c:	2300      	movs	r3, #0
 8010f6e:	1124      	asrs	r4, r4, #4
 8010f70:	4650      	mov	r0, sl
 8010f72:	4659      	mov	r1, fp
 8010f74:	461e      	mov	r6, r3
 8010f76:	2c01      	cmp	r4, #1
 8010f78:	dc21      	bgt.n	8010fbe <_strtod_l+0x51e>
 8010f7a:	b10b      	cbz	r3, 8010f80 <_strtod_l+0x4e0>
 8010f7c:	4682      	mov	sl, r0
 8010f7e:	468b      	mov	fp, r1
 8010f80:	492c      	ldr	r1, [pc, #176]	@ (8011034 <_strtod_l+0x594>)
 8010f82:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8010f86:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8010f8a:	4652      	mov	r2, sl
 8010f8c:	465b      	mov	r3, fp
 8010f8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010f92:	f7ef fb09 	bl	80005a8 <__aeabi_dmul>
 8010f96:	4b28      	ldr	r3, [pc, #160]	@ (8011038 <_strtod_l+0x598>)
 8010f98:	460a      	mov	r2, r1
 8010f9a:	400b      	ands	r3, r1
 8010f9c:	4927      	ldr	r1, [pc, #156]	@ (801103c <_strtod_l+0x59c>)
 8010f9e:	428b      	cmp	r3, r1
 8010fa0:	4682      	mov	sl, r0
 8010fa2:	d898      	bhi.n	8010ed6 <_strtod_l+0x436>
 8010fa4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8010fa8:	428b      	cmp	r3, r1
 8010faa:	bf86      	itte	hi
 8010fac:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8011040 <_strtod_l+0x5a0>
 8010fb0:	f04f 3aff 	movhi.w	sl, #4294967295
 8010fb4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8010fb8:	2300      	movs	r3, #0
 8010fba:	9308      	str	r3, [sp, #32]
 8010fbc:	e07a      	b.n	80110b4 <_strtod_l+0x614>
 8010fbe:	07e2      	lsls	r2, r4, #31
 8010fc0:	d505      	bpl.n	8010fce <_strtod_l+0x52e>
 8010fc2:	9b08      	ldr	r3, [sp, #32]
 8010fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fc8:	f7ef faee 	bl	80005a8 <__aeabi_dmul>
 8010fcc:	2301      	movs	r3, #1
 8010fce:	9a08      	ldr	r2, [sp, #32]
 8010fd0:	3208      	adds	r2, #8
 8010fd2:	3601      	adds	r6, #1
 8010fd4:	1064      	asrs	r4, r4, #1
 8010fd6:	9208      	str	r2, [sp, #32]
 8010fd8:	e7cd      	b.n	8010f76 <_strtod_l+0x4d6>
 8010fda:	d0ed      	beq.n	8010fb8 <_strtod_l+0x518>
 8010fdc:	4264      	negs	r4, r4
 8010fde:	f014 020f 	ands.w	r2, r4, #15
 8010fe2:	d00a      	beq.n	8010ffa <_strtod_l+0x55a>
 8010fe4:	4b12      	ldr	r3, [pc, #72]	@ (8011030 <_strtod_l+0x590>)
 8010fe6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010fea:	4650      	mov	r0, sl
 8010fec:	4659      	mov	r1, fp
 8010fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ff2:	f7ef fc03 	bl	80007fc <__aeabi_ddiv>
 8010ff6:	4682      	mov	sl, r0
 8010ff8:	468b      	mov	fp, r1
 8010ffa:	1124      	asrs	r4, r4, #4
 8010ffc:	d0dc      	beq.n	8010fb8 <_strtod_l+0x518>
 8010ffe:	2c1f      	cmp	r4, #31
 8011000:	dd20      	ble.n	8011044 <_strtod_l+0x5a4>
 8011002:	2400      	movs	r4, #0
 8011004:	46a0      	mov	r8, r4
 8011006:	940a      	str	r4, [sp, #40]	@ 0x28
 8011008:	46a1      	mov	r9, r4
 801100a:	9a05      	ldr	r2, [sp, #20]
 801100c:	2322      	movs	r3, #34	@ 0x22
 801100e:	f04f 0a00 	mov.w	sl, #0
 8011012:	f04f 0b00 	mov.w	fp, #0
 8011016:	6013      	str	r3, [r2, #0]
 8011018:	e768      	b.n	8010eec <_strtod_l+0x44c>
 801101a:	bf00      	nop
 801101c:	080140b6 	.word	0x080140b6
 8011020:	080142cc 	.word	0x080142cc
 8011024:	080140ae 	.word	0x080140ae
 8011028:	080140e5 	.word	0x080140e5
 801102c:	08014475 	.word	0x08014475
 8011030:	08014200 	.word	0x08014200
 8011034:	080141d8 	.word	0x080141d8
 8011038:	7ff00000 	.word	0x7ff00000
 801103c:	7ca00000 	.word	0x7ca00000
 8011040:	7fefffff 	.word	0x7fefffff
 8011044:	f014 0310 	ands.w	r3, r4, #16
 8011048:	bf18      	it	ne
 801104a:	236a      	movne	r3, #106	@ 0x6a
 801104c:	4ea9      	ldr	r6, [pc, #676]	@ (80112f4 <_strtod_l+0x854>)
 801104e:	9308      	str	r3, [sp, #32]
 8011050:	4650      	mov	r0, sl
 8011052:	4659      	mov	r1, fp
 8011054:	2300      	movs	r3, #0
 8011056:	07e2      	lsls	r2, r4, #31
 8011058:	d504      	bpl.n	8011064 <_strtod_l+0x5c4>
 801105a:	e9d6 2300 	ldrd	r2, r3, [r6]
 801105e:	f7ef faa3 	bl	80005a8 <__aeabi_dmul>
 8011062:	2301      	movs	r3, #1
 8011064:	1064      	asrs	r4, r4, #1
 8011066:	f106 0608 	add.w	r6, r6, #8
 801106a:	d1f4      	bne.n	8011056 <_strtod_l+0x5b6>
 801106c:	b10b      	cbz	r3, 8011072 <_strtod_l+0x5d2>
 801106e:	4682      	mov	sl, r0
 8011070:	468b      	mov	fp, r1
 8011072:	9b08      	ldr	r3, [sp, #32]
 8011074:	b1b3      	cbz	r3, 80110a4 <_strtod_l+0x604>
 8011076:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801107a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 801107e:	2b00      	cmp	r3, #0
 8011080:	4659      	mov	r1, fp
 8011082:	dd0f      	ble.n	80110a4 <_strtod_l+0x604>
 8011084:	2b1f      	cmp	r3, #31
 8011086:	dd55      	ble.n	8011134 <_strtod_l+0x694>
 8011088:	2b34      	cmp	r3, #52	@ 0x34
 801108a:	bfde      	ittt	le
 801108c:	f04f 33ff 	movle.w	r3, #4294967295
 8011090:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8011094:	4093      	lslle	r3, r2
 8011096:	f04f 0a00 	mov.w	sl, #0
 801109a:	bfcc      	ite	gt
 801109c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80110a0:	ea03 0b01 	andle.w	fp, r3, r1
 80110a4:	2200      	movs	r2, #0
 80110a6:	2300      	movs	r3, #0
 80110a8:	4650      	mov	r0, sl
 80110aa:	4659      	mov	r1, fp
 80110ac:	f7ef fce4 	bl	8000a78 <__aeabi_dcmpeq>
 80110b0:	2800      	cmp	r0, #0
 80110b2:	d1a6      	bne.n	8011002 <_strtod_l+0x562>
 80110b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80110b6:	9300      	str	r3, [sp, #0]
 80110b8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80110ba:	9805      	ldr	r0, [sp, #20]
 80110bc:	462b      	mov	r3, r5
 80110be:	463a      	mov	r2, r7
 80110c0:	f7ff f8c6 	bl	8010250 <__s2b>
 80110c4:	900a      	str	r0, [sp, #40]	@ 0x28
 80110c6:	2800      	cmp	r0, #0
 80110c8:	f43f af05 	beq.w	8010ed6 <_strtod_l+0x436>
 80110cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80110ce:	2a00      	cmp	r2, #0
 80110d0:	eba9 0308 	sub.w	r3, r9, r8
 80110d4:	bfa8      	it	ge
 80110d6:	2300      	movge	r3, #0
 80110d8:	9312      	str	r3, [sp, #72]	@ 0x48
 80110da:	2400      	movs	r4, #0
 80110dc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80110e0:	9316      	str	r3, [sp, #88]	@ 0x58
 80110e2:	46a0      	mov	r8, r4
 80110e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80110e6:	9805      	ldr	r0, [sp, #20]
 80110e8:	6859      	ldr	r1, [r3, #4]
 80110ea:	f7ff f809 	bl	8010100 <_Balloc>
 80110ee:	4681      	mov	r9, r0
 80110f0:	2800      	cmp	r0, #0
 80110f2:	f43f aef4 	beq.w	8010ede <_strtod_l+0x43e>
 80110f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80110f8:	691a      	ldr	r2, [r3, #16]
 80110fa:	3202      	adds	r2, #2
 80110fc:	f103 010c 	add.w	r1, r3, #12
 8011100:	0092      	lsls	r2, r2, #2
 8011102:	300c      	adds	r0, #12
 8011104:	f7fe f899 	bl	800f23a <memcpy>
 8011108:	ec4b ab10 	vmov	d0, sl, fp
 801110c:	9805      	ldr	r0, [sp, #20]
 801110e:	aa1c      	add	r2, sp, #112	@ 0x70
 8011110:	a91b      	add	r1, sp, #108	@ 0x6c
 8011112:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8011116:	f7ff fbd7 	bl	80108c8 <__d2b>
 801111a:	901a      	str	r0, [sp, #104]	@ 0x68
 801111c:	2800      	cmp	r0, #0
 801111e:	f43f aede 	beq.w	8010ede <_strtod_l+0x43e>
 8011122:	9805      	ldr	r0, [sp, #20]
 8011124:	2101      	movs	r1, #1
 8011126:	f7ff f929 	bl	801037c <__i2b>
 801112a:	4680      	mov	r8, r0
 801112c:	b948      	cbnz	r0, 8011142 <_strtod_l+0x6a2>
 801112e:	f04f 0800 	mov.w	r8, #0
 8011132:	e6d4      	b.n	8010ede <_strtod_l+0x43e>
 8011134:	f04f 32ff 	mov.w	r2, #4294967295
 8011138:	fa02 f303 	lsl.w	r3, r2, r3
 801113c:	ea03 0a0a 	and.w	sl, r3, sl
 8011140:	e7b0      	b.n	80110a4 <_strtod_l+0x604>
 8011142:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8011144:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8011146:	2d00      	cmp	r5, #0
 8011148:	bfab      	itete	ge
 801114a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 801114c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 801114e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8011150:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8011152:	bfac      	ite	ge
 8011154:	18ef      	addge	r7, r5, r3
 8011156:	1b5e      	sublt	r6, r3, r5
 8011158:	9b08      	ldr	r3, [sp, #32]
 801115a:	1aed      	subs	r5, r5, r3
 801115c:	4415      	add	r5, r2
 801115e:	4b66      	ldr	r3, [pc, #408]	@ (80112f8 <_strtod_l+0x858>)
 8011160:	3d01      	subs	r5, #1
 8011162:	429d      	cmp	r5, r3
 8011164:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8011168:	da50      	bge.n	801120c <_strtod_l+0x76c>
 801116a:	1b5b      	subs	r3, r3, r5
 801116c:	2b1f      	cmp	r3, #31
 801116e:	eba2 0203 	sub.w	r2, r2, r3
 8011172:	f04f 0101 	mov.w	r1, #1
 8011176:	dc3d      	bgt.n	80111f4 <_strtod_l+0x754>
 8011178:	fa01 f303 	lsl.w	r3, r1, r3
 801117c:	9313      	str	r3, [sp, #76]	@ 0x4c
 801117e:	2300      	movs	r3, #0
 8011180:	9310      	str	r3, [sp, #64]	@ 0x40
 8011182:	18bd      	adds	r5, r7, r2
 8011184:	9b08      	ldr	r3, [sp, #32]
 8011186:	42af      	cmp	r7, r5
 8011188:	4416      	add	r6, r2
 801118a:	441e      	add	r6, r3
 801118c:	463b      	mov	r3, r7
 801118e:	bfa8      	it	ge
 8011190:	462b      	movge	r3, r5
 8011192:	42b3      	cmp	r3, r6
 8011194:	bfa8      	it	ge
 8011196:	4633      	movge	r3, r6
 8011198:	2b00      	cmp	r3, #0
 801119a:	bfc2      	ittt	gt
 801119c:	1aed      	subgt	r5, r5, r3
 801119e:	1af6      	subgt	r6, r6, r3
 80111a0:	1aff      	subgt	r7, r7, r3
 80111a2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	dd16      	ble.n	80111d6 <_strtod_l+0x736>
 80111a8:	4641      	mov	r1, r8
 80111aa:	9805      	ldr	r0, [sp, #20]
 80111ac:	461a      	mov	r2, r3
 80111ae:	f7ff f9a5 	bl	80104fc <__pow5mult>
 80111b2:	4680      	mov	r8, r0
 80111b4:	2800      	cmp	r0, #0
 80111b6:	d0ba      	beq.n	801112e <_strtod_l+0x68e>
 80111b8:	4601      	mov	r1, r0
 80111ba:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80111bc:	9805      	ldr	r0, [sp, #20]
 80111be:	f7ff f8f3 	bl	80103a8 <__multiply>
 80111c2:	900e      	str	r0, [sp, #56]	@ 0x38
 80111c4:	2800      	cmp	r0, #0
 80111c6:	f43f ae8a 	beq.w	8010ede <_strtod_l+0x43e>
 80111ca:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80111cc:	9805      	ldr	r0, [sp, #20]
 80111ce:	f7fe ffd7 	bl	8010180 <_Bfree>
 80111d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80111d4:	931a      	str	r3, [sp, #104]	@ 0x68
 80111d6:	2d00      	cmp	r5, #0
 80111d8:	dc1d      	bgt.n	8011216 <_strtod_l+0x776>
 80111da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80111dc:	2b00      	cmp	r3, #0
 80111de:	dd23      	ble.n	8011228 <_strtod_l+0x788>
 80111e0:	4649      	mov	r1, r9
 80111e2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80111e4:	9805      	ldr	r0, [sp, #20]
 80111e6:	f7ff f989 	bl	80104fc <__pow5mult>
 80111ea:	4681      	mov	r9, r0
 80111ec:	b9e0      	cbnz	r0, 8011228 <_strtod_l+0x788>
 80111ee:	f04f 0900 	mov.w	r9, #0
 80111f2:	e674      	b.n	8010ede <_strtod_l+0x43e>
 80111f4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80111f8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80111fc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8011200:	35e2      	adds	r5, #226	@ 0xe2
 8011202:	fa01 f305 	lsl.w	r3, r1, r5
 8011206:	9310      	str	r3, [sp, #64]	@ 0x40
 8011208:	9113      	str	r1, [sp, #76]	@ 0x4c
 801120a:	e7ba      	b.n	8011182 <_strtod_l+0x6e2>
 801120c:	2300      	movs	r3, #0
 801120e:	9310      	str	r3, [sp, #64]	@ 0x40
 8011210:	2301      	movs	r3, #1
 8011212:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011214:	e7b5      	b.n	8011182 <_strtod_l+0x6e2>
 8011216:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011218:	9805      	ldr	r0, [sp, #20]
 801121a:	462a      	mov	r2, r5
 801121c:	f7ff f9c8 	bl	80105b0 <__lshift>
 8011220:	901a      	str	r0, [sp, #104]	@ 0x68
 8011222:	2800      	cmp	r0, #0
 8011224:	d1d9      	bne.n	80111da <_strtod_l+0x73a>
 8011226:	e65a      	b.n	8010ede <_strtod_l+0x43e>
 8011228:	2e00      	cmp	r6, #0
 801122a:	dd07      	ble.n	801123c <_strtod_l+0x79c>
 801122c:	4649      	mov	r1, r9
 801122e:	9805      	ldr	r0, [sp, #20]
 8011230:	4632      	mov	r2, r6
 8011232:	f7ff f9bd 	bl	80105b0 <__lshift>
 8011236:	4681      	mov	r9, r0
 8011238:	2800      	cmp	r0, #0
 801123a:	d0d8      	beq.n	80111ee <_strtod_l+0x74e>
 801123c:	2f00      	cmp	r7, #0
 801123e:	dd08      	ble.n	8011252 <_strtod_l+0x7b2>
 8011240:	4641      	mov	r1, r8
 8011242:	9805      	ldr	r0, [sp, #20]
 8011244:	463a      	mov	r2, r7
 8011246:	f7ff f9b3 	bl	80105b0 <__lshift>
 801124a:	4680      	mov	r8, r0
 801124c:	2800      	cmp	r0, #0
 801124e:	f43f ae46 	beq.w	8010ede <_strtod_l+0x43e>
 8011252:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011254:	9805      	ldr	r0, [sp, #20]
 8011256:	464a      	mov	r2, r9
 8011258:	f7ff fa32 	bl	80106c0 <__mdiff>
 801125c:	4604      	mov	r4, r0
 801125e:	2800      	cmp	r0, #0
 8011260:	f43f ae3d 	beq.w	8010ede <_strtod_l+0x43e>
 8011264:	68c3      	ldr	r3, [r0, #12]
 8011266:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011268:	2300      	movs	r3, #0
 801126a:	60c3      	str	r3, [r0, #12]
 801126c:	4641      	mov	r1, r8
 801126e:	f7ff fa0b 	bl	8010688 <__mcmp>
 8011272:	2800      	cmp	r0, #0
 8011274:	da46      	bge.n	8011304 <_strtod_l+0x864>
 8011276:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011278:	ea53 030a 	orrs.w	r3, r3, sl
 801127c:	d16c      	bne.n	8011358 <_strtod_l+0x8b8>
 801127e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011282:	2b00      	cmp	r3, #0
 8011284:	d168      	bne.n	8011358 <_strtod_l+0x8b8>
 8011286:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801128a:	0d1b      	lsrs	r3, r3, #20
 801128c:	051b      	lsls	r3, r3, #20
 801128e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8011292:	d961      	bls.n	8011358 <_strtod_l+0x8b8>
 8011294:	6963      	ldr	r3, [r4, #20]
 8011296:	b913      	cbnz	r3, 801129e <_strtod_l+0x7fe>
 8011298:	6923      	ldr	r3, [r4, #16]
 801129a:	2b01      	cmp	r3, #1
 801129c:	dd5c      	ble.n	8011358 <_strtod_l+0x8b8>
 801129e:	4621      	mov	r1, r4
 80112a0:	2201      	movs	r2, #1
 80112a2:	9805      	ldr	r0, [sp, #20]
 80112a4:	f7ff f984 	bl	80105b0 <__lshift>
 80112a8:	4641      	mov	r1, r8
 80112aa:	4604      	mov	r4, r0
 80112ac:	f7ff f9ec 	bl	8010688 <__mcmp>
 80112b0:	2800      	cmp	r0, #0
 80112b2:	dd51      	ble.n	8011358 <_strtod_l+0x8b8>
 80112b4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80112b8:	9a08      	ldr	r2, [sp, #32]
 80112ba:	0d1b      	lsrs	r3, r3, #20
 80112bc:	051b      	lsls	r3, r3, #20
 80112be:	2a00      	cmp	r2, #0
 80112c0:	d06b      	beq.n	801139a <_strtod_l+0x8fa>
 80112c2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80112c6:	d868      	bhi.n	801139a <_strtod_l+0x8fa>
 80112c8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80112cc:	f67f ae9d 	bls.w	801100a <_strtod_l+0x56a>
 80112d0:	4b0a      	ldr	r3, [pc, #40]	@ (80112fc <_strtod_l+0x85c>)
 80112d2:	4650      	mov	r0, sl
 80112d4:	4659      	mov	r1, fp
 80112d6:	2200      	movs	r2, #0
 80112d8:	f7ef f966 	bl	80005a8 <__aeabi_dmul>
 80112dc:	4b08      	ldr	r3, [pc, #32]	@ (8011300 <_strtod_l+0x860>)
 80112de:	400b      	ands	r3, r1
 80112e0:	4682      	mov	sl, r0
 80112e2:	468b      	mov	fp, r1
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	f47f ae05 	bne.w	8010ef4 <_strtod_l+0x454>
 80112ea:	9a05      	ldr	r2, [sp, #20]
 80112ec:	2322      	movs	r3, #34	@ 0x22
 80112ee:	6013      	str	r3, [r2, #0]
 80112f0:	e600      	b.n	8010ef4 <_strtod_l+0x454>
 80112f2:	bf00      	nop
 80112f4:	080142f8 	.word	0x080142f8
 80112f8:	fffffc02 	.word	0xfffffc02
 80112fc:	39500000 	.word	0x39500000
 8011300:	7ff00000 	.word	0x7ff00000
 8011304:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8011308:	d165      	bne.n	80113d6 <_strtod_l+0x936>
 801130a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801130c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011310:	b35a      	cbz	r2, 801136a <_strtod_l+0x8ca>
 8011312:	4a9f      	ldr	r2, [pc, #636]	@ (8011590 <_strtod_l+0xaf0>)
 8011314:	4293      	cmp	r3, r2
 8011316:	d12b      	bne.n	8011370 <_strtod_l+0x8d0>
 8011318:	9b08      	ldr	r3, [sp, #32]
 801131a:	4651      	mov	r1, sl
 801131c:	b303      	cbz	r3, 8011360 <_strtod_l+0x8c0>
 801131e:	4b9d      	ldr	r3, [pc, #628]	@ (8011594 <_strtod_l+0xaf4>)
 8011320:	465a      	mov	r2, fp
 8011322:	4013      	ands	r3, r2
 8011324:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8011328:	f04f 32ff 	mov.w	r2, #4294967295
 801132c:	d81b      	bhi.n	8011366 <_strtod_l+0x8c6>
 801132e:	0d1b      	lsrs	r3, r3, #20
 8011330:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8011334:	fa02 f303 	lsl.w	r3, r2, r3
 8011338:	4299      	cmp	r1, r3
 801133a:	d119      	bne.n	8011370 <_strtod_l+0x8d0>
 801133c:	4b96      	ldr	r3, [pc, #600]	@ (8011598 <_strtod_l+0xaf8>)
 801133e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011340:	429a      	cmp	r2, r3
 8011342:	d102      	bne.n	801134a <_strtod_l+0x8aa>
 8011344:	3101      	adds	r1, #1
 8011346:	f43f adca 	beq.w	8010ede <_strtod_l+0x43e>
 801134a:	4b92      	ldr	r3, [pc, #584]	@ (8011594 <_strtod_l+0xaf4>)
 801134c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801134e:	401a      	ands	r2, r3
 8011350:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8011354:	f04f 0a00 	mov.w	sl, #0
 8011358:	9b08      	ldr	r3, [sp, #32]
 801135a:	2b00      	cmp	r3, #0
 801135c:	d1b8      	bne.n	80112d0 <_strtod_l+0x830>
 801135e:	e5c9      	b.n	8010ef4 <_strtod_l+0x454>
 8011360:	f04f 33ff 	mov.w	r3, #4294967295
 8011364:	e7e8      	b.n	8011338 <_strtod_l+0x898>
 8011366:	4613      	mov	r3, r2
 8011368:	e7e6      	b.n	8011338 <_strtod_l+0x898>
 801136a:	ea53 030a 	orrs.w	r3, r3, sl
 801136e:	d0a1      	beq.n	80112b4 <_strtod_l+0x814>
 8011370:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011372:	b1db      	cbz	r3, 80113ac <_strtod_l+0x90c>
 8011374:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011376:	4213      	tst	r3, r2
 8011378:	d0ee      	beq.n	8011358 <_strtod_l+0x8b8>
 801137a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801137c:	9a08      	ldr	r2, [sp, #32]
 801137e:	4650      	mov	r0, sl
 8011380:	4659      	mov	r1, fp
 8011382:	b1bb      	cbz	r3, 80113b4 <_strtod_l+0x914>
 8011384:	f7ff fb6e 	bl	8010a64 <sulp>
 8011388:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801138c:	ec53 2b10 	vmov	r2, r3, d0
 8011390:	f7ee ff54 	bl	800023c <__adddf3>
 8011394:	4682      	mov	sl, r0
 8011396:	468b      	mov	fp, r1
 8011398:	e7de      	b.n	8011358 <_strtod_l+0x8b8>
 801139a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801139e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80113a2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80113a6:	f04f 3aff 	mov.w	sl, #4294967295
 80113aa:	e7d5      	b.n	8011358 <_strtod_l+0x8b8>
 80113ac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80113ae:	ea13 0f0a 	tst.w	r3, sl
 80113b2:	e7e1      	b.n	8011378 <_strtod_l+0x8d8>
 80113b4:	f7ff fb56 	bl	8010a64 <sulp>
 80113b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80113bc:	ec53 2b10 	vmov	r2, r3, d0
 80113c0:	f7ee ff3a 	bl	8000238 <__aeabi_dsub>
 80113c4:	2200      	movs	r2, #0
 80113c6:	2300      	movs	r3, #0
 80113c8:	4682      	mov	sl, r0
 80113ca:	468b      	mov	fp, r1
 80113cc:	f7ef fb54 	bl	8000a78 <__aeabi_dcmpeq>
 80113d0:	2800      	cmp	r0, #0
 80113d2:	d0c1      	beq.n	8011358 <_strtod_l+0x8b8>
 80113d4:	e619      	b.n	801100a <_strtod_l+0x56a>
 80113d6:	4641      	mov	r1, r8
 80113d8:	4620      	mov	r0, r4
 80113da:	f7ff facd 	bl	8010978 <__ratio>
 80113de:	ec57 6b10 	vmov	r6, r7, d0
 80113e2:	2200      	movs	r2, #0
 80113e4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80113e8:	4630      	mov	r0, r6
 80113ea:	4639      	mov	r1, r7
 80113ec:	f7ef fb58 	bl	8000aa0 <__aeabi_dcmple>
 80113f0:	2800      	cmp	r0, #0
 80113f2:	d06f      	beq.n	80114d4 <_strtod_l+0xa34>
 80113f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d17a      	bne.n	80114f0 <_strtod_l+0xa50>
 80113fa:	f1ba 0f00 	cmp.w	sl, #0
 80113fe:	d158      	bne.n	80114b2 <_strtod_l+0xa12>
 8011400:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011402:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011406:	2b00      	cmp	r3, #0
 8011408:	d15a      	bne.n	80114c0 <_strtod_l+0xa20>
 801140a:	4b64      	ldr	r3, [pc, #400]	@ (801159c <_strtod_l+0xafc>)
 801140c:	2200      	movs	r2, #0
 801140e:	4630      	mov	r0, r6
 8011410:	4639      	mov	r1, r7
 8011412:	f7ef fb3b 	bl	8000a8c <__aeabi_dcmplt>
 8011416:	2800      	cmp	r0, #0
 8011418:	d159      	bne.n	80114ce <_strtod_l+0xa2e>
 801141a:	4630      	mov	r0, r6
 801141c:	4639      	mov	r1, r7
 801141e:	4b60      	ldr	r3, [pc, #384]	@ (80115a0 <_strtod_l+0xb00>)
 8011420:	2200      	movs	r2, #0
 8011422:	f7ef f8c1 	bl	80005a8 <__aeabi_dmul>
 8011426:	4606      	mov	r6, r0
 8011428:	460f      	mov	r7, r1
 801142a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 801142e:	9606      	str	r6, [sp, #24]
 8011430:	9307      	str	r3, [sp, #28]
 8011432:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011436:	4d57      	ldr	r5, [pc, #348]	@ (8011594 <_strtod_l+0xaf4>)
 8011438:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801143c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801143e:	401d      	ands	r5, r3
 8011440:	4b58      	ldr	r3, [pc, #352]	@ (80115a4 <_strtod_l+0xb04>)
 8011442:	429d      	cmp	r5, r3
 8011444:	f040 80b2 	bne.w	80115ac <_strtod_l+0xb0c>
 8011448:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801144a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 801144e:	ec4b ab10 	vmov	d0, sl, fp
 8011452:	f7ff f9c9 	bl	80107e8 <__ulp>
 8011456:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801145a:	ec51 0b10 	vmov	r0, r1, d0
 801145e:	f7ef f8a3 	bl	80005a8 <__aeabi_dmul>
 8011462:	4652      	mov	r2, sl
 8011464:	465b      	mov	r3, fp
 8011466:	f7ee fee9 	bl	800023c <__adddf3>
 801146a:	460b      	mov	r3, r1
 801146c:	4949      	ldr	r1, [pc, #292]	@ (8011594 <_strtod_l+0xaf4>)
 801146e:	4a4e      	ldr	r2, [pc, #312]	@ (80115a8 <_strtod_l+0xb08>)
 8011470:	4019      	ands	r1, r3
 8011472:	4291      	cmp	r1, r2
 8011474:	4682      	mov	sl, r0
 8011476:	d942      	bls.n	80114fe <_strtod_l+0xa5e>
 8011478:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801147a:	4b47      	ldr	r3, [pc, #284]	@ (8011598 <_strtod_l+0xaf8>)
 801147c:	429a      	cmp	r2, r3
 801147e:	d103      	bne.n	8011488 <_strtod_l+0x9e8>
 8011480:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011482:	3301      	adds	r3, #1
 8011484:	f43f ad2b 	beq.w	8010ede <_strtod_l+0x43e>
 8011488:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8011598 <_strtod_l+0xaf8>
 801148c:	f04f 3aff 	mov.w	sl, #4294967295
 8011490:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011492:	9805      	ldr	r0, [sp, #20]
 8011494:	f7fe fe74 	bl	8010180 <_Bfree>
 8011498:	9805      	ldr	r0, [sp, #20]
 801149a:	4649      	mov	r1, r9
 801149c:	f7fe fe70 	bl	8010180 <_Bfree>
 80114a0:	9805      	ldr	r0, [sp, #20]
 80114a2:	4641      	mov	r1, r8
 80114a4:	f7fe fe6c 	bl	8010180 <_Bfree>
 80114a8:	9805      	ldr	r0, [sp, #20]
 80114aa:	4621      	mov	r1, r4
 80114ac:	f7fe fe68 	bl	8010180 <_Bfree>
 80114b0:	e618      	b.n	80110e4 <_strtod_l+0x644>
 80114b2:	f1ba 0f01 	cmp.w	sl, #1
 80114b6:	d103      	bne.n	80114c0 <_strtod_l+0xa20>
 80114b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	f43f ada5 	beq.w	801100a <_strtod_l+0x56a>
 80114c0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8011570 <_strtod_l+0xad0>
 80114c4:	4f35      	ldr	r7, [pc, #212]	@ (801159c <_strtod_l+0xafc>)
 80114c6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80114ca:	2600      	movs	r6, #0
 80114cc:	e7b1      	b.n	8011432 <_strtod_l+0x992>
 80114ce:	4f34      	ldr	r7, [pc, #208]	@ (80115a0 <_strtod_l+0xb00>)
 80114d0:	2600      	movs	r6, #0
 80114d2:	e7aa      	b.n	801142a <_strtod_l+0x98a>
 80114d4:	4b32      	ldr	r3, [pc, #200]	@ (80115a0 <_strtod_l+0xb00>)
 80114d6:	4630      	mov	r0, r6
 80114d8:	4639      	mov	r1, r7
 80114da:	2200      	movs	r2, #0
 80114dc:	f7ef f864 	bl	80005a8 <__aeabi_dmul>
 80114e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80114e2:	4606      	mov	r6, r0
 80114e4:	460f      	mov	r7, r1
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d09f      	beq.n	801142a <_strtod_l+0x98a>
 80114ea:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80114ee:	e7a0      	b.n	8011432 <_strtod_l+0x992>
 80114f0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8011578 <_strtod_l+0xad8>
 80114f4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80114f8:	ec57 6b17 	vmov	r6, r7, d7
 80114fc:	e799      	b.n	8011432 <_strtod_l+0x992>
 80114fe:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8011502:	9b08      	ldr	r3, [sp, #32]
 8011504:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8011508:	2b00      	cmp	r3, #0
 801150a:	d1c1      	bne.n	8011490 <_strtod_l+0x9f0>
 801150c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011510:	0d1b      	lsrs	r3, r3, #20
 8011512:	051b      	lsls	r3, r3, #20
 8011514:	429d      	cmp	r5, r3
 8011516:	d1bb      	bne.n	8011490 <_strtod_l+0x9f0>
 8011518:	4630      	mov	r0, r6
 801151a:	4639      	mov	r1, r7
 801151c:	f7ef fba4 	bl	8000c68 <__aeabi_d2lz>
 8011520:	f7ef f814 	bl	800054c <__aeabi_l2d>
 8011524:	4602      	mov	r2, r0
 8011526:	460b      	mov	r3, r1
 8011528:	4630      	mov	r0, r6
 801152a:	4639      	mov	r1, r7
 801152c:	f7ee fe84 	bl	8000238 <__aeabi_dsub>
 8011530:	460b      	mov	r3, r1
 8011532:	4602      	mov	r2, r0
 8011534:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8011538:	f3cb 0613 	ubfx	r6, fp, #0, #20
 801153c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801153e:	ea46 060a 	orr.w	r6, r6, sl
 8011542:	431e      	orrs	r6, r3
 8011544:	d06f      	beq.n	8011626 <_strtod_l+0xb86>
 8011546:	a30e      	add	r3, pc, #56	@ (adr r3, 8011580 <_strtod_l+0xae0>)
 8011548:	e9d3 2300 	ldrd	r2, r3, [r3]
 801154c:	f7ef fa9e 	bl	8000a8c <__aeabi_dcmplt>
 8011550:	2800      	cmp	r0, #0
 8011552:	f47f accf 	bne.w	8010ef4 <_strtod_l+0x454>
 8011556:	a30c      	add	r3, pc, #48	@ (adr r3, 8011588 <_strtod_l+0xae8>)
 8011558:	e9d3 2300 	ldrd	r2, r3, [r3]
 801155c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011560:	f7ef fab2 	bl	8000ac8 <__aeabi_dcmpgt>
 8011564:	2800      	cmp	r0, #0
 8011566:	d093      	beq.n	8011490 <_strtod_l+0x9f0>
 8011568:	e4c4      	b.n	8010ef4 <_strtod_l+0x454>
 801156a:	bf00      	nop
 801156c:	f3af 8000 	nop.w
 8011570:	00000000 	.word	0x00000000
 8011574:	bff00000 	.word	0xbff00000
 8011578:	00000000 	.word	0x00000000
 801157c:	3ff00000 	.word	0x3ff00000
 8011580:	94a03595 	.word	0x94a03595
 8011584:	3fdfffff 	.word	0x3fdfffff
 8011588:	35afe535 	.word	0x35afe535
 801158c:	3fe00000 	.word	0x3fe00000
 8011590:	000fffff 	.word	0x000fffff
 8011594:	7ff00000 	.word	0x7ff00000
 8011598:	7fefffff 	.word	0x7fefffff
 801159c:	3ff00000 	.word	0x3ff00000
 80115a0:	3fe00000 	.word	0x3fe00000
 80115a4:	7fe00000 	.word	0x7fe00000
 80115a8:	7c9fffff 	.word	0x7c9fffff
 80115ac:	9b08      	ldr	r3, [sp, #32]
 80115ae:	b323      	cbz	r3, 80115fa <_strtod_l+0xb5a>
 80115b0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80115b4:	d821      	bhi.n	80115fa <_strtod_l+0xb5a>
 80115b6:	a328      	add	r3, pc, #160	@ (adr r3, 8011658 <_strtod_l+0xbb8>)
 80115b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115bc:	4630      	mov	r0, r6
 80115be:	4639      	mov	r1, r7
 80115c0:	f7ef fa6e 	bl	8000aa0 <__aeabi_dcmple>
 80115c4:	b1a0      	cbz	r0, 80115f0 <_strtod_l+0xb50>
 80115c6:	4639      	mov	r1, r7
 80115c8:	4630      	mov	r0, r6
 80115ca:	f7ef fac5 	bl	8000b58 <__aeabi_d2uiz>
 80115ce:	2801      	cmp	r0, #1
 80115d0:	bf38      	it	cc
 80115d2:	2001      	movcc	r0, #1
 80115d4:	f7ee ff6e 	bl	80004b4 <__aeabi_ui2d>
 80115d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80115da:	4606      	mov	r6, r0
 80115dc:	460f      	mov	r7, r1
 80115de:	b9fb      	cbnz	r3, 8011620 <_strtod_l+0xb80>
 80115e0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80115e4:	9014      	str	r0, [sp, #80]	@ 0x50
 80115e6:	9315      	str	r3, [sp, #84]	@ 0x54
 80115e8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80115ec:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80115f0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80115f2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80115f6:	1b5b      	subs	r3, r3, r5
 80115f8:	9311      	str	r3, [sp, #68]	@ 0x44
 80115fa:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80115fe:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8011602:	f7ff f8f1 	bl	80107e8 <__ulp>
 8011606:	4650      	mov	r0, sl
 8011608:	ec53 2b10 	vmov	r2, r3, d0
 801160c:	4659      	mov	r1, fp
 801160e:	f7ee ffcb 	bl	80005a8 <__aeabi_dmul>
 8011612:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8011616:	f7ee fe11 	bl	800023c <__adddf3>
 801161a:	4682      	mov	sl, r0
 801161c:	468b      	mov	fp, r1
 801161e:	e770      	b.n	8011502 <_strtod_l+0xa62>
 8011620:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8011624:	e7e0      	b.n	80115e8 <_strtod_l+0xb48>
 8011626:	a30e      	add	r3, pc, #56	@ (adr r3, 8011660 <_strtod_l+0xbc0>)
 8011628:	e9d3 2300 	ldrd	r2, r3, [r3]
 801162c:	f7ef fa2e 	bl	8000a8c <__aeabi_dcmplt>
 8011630:	e798      	b.n	8011564 <_strtod_l+0xac4>
 8011632:	2300      	movs	r3, #0
 8011634:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011636:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8011638:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801163a:	6013      	str	r3, [r2, #0]
 801163c:	f7ff ba6d 	b.w	8010b1a <_strtod_l+0x7a>
 8011640:	2a65      	cmp	r2, #101	@ 0x65
 8011642:	f43f ab66 	beq.w	8010d12 <_strtod_l+0x272>
 8011646:	2a45      	cmp	r2, #69	@ 0x45
 8011648:	f43f ab63 	beq.w	8010d12 <_strtod_l+0x272>
 801164c:	2301      	movs	r3, #1
 801164e:	f7ff bb9e 	b.w	8010d8e <_strtod_l+0x2ee>
 8011652:	bf00      	nop
 8011654:	f3af 8000 	nop.w
 8011658:	ffc00000 	.word	0xffc00000
 801165c:	41dfffff 	.word	0x41dfffff
 8011660:	94a03595 	.word	0x94a03595
 8011664:	3fcfffff 	.word	0x3fcfffff

08011668 <_strtod_r>:
 8011668:	4b01      	ldr	r3, [pc, #4]	@ (8011670 <_strtod_r+0x8>)
 801166a:	f7ff ba19 	b.w	8010aa0 <_strtod_l>
 801166e:	bf00      	nop
 8011670:	20000090 	.word	0x20000090

08011674 <_strtol_l.constprop.0>:
 8011674:	2b24      	cmp	r3, #36	@ 0x24
 8011676:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801167a:	4686      	mov	lr, r0
 801167c:	4690      	mov	r8, r2
 801167e:	d801      	bhi.n	8011684 <_strtol_l.constprop.0+0x10>
 8011680:	2b01      	cmp	r3, #1
 8011682:	d106      	bne.n	8011692 <_strtol_l.constprop.0+0x1e>
 8011684:	f7fd fdac 	bl	800f1e0 <__errno>
 8011688:	2316      	movs	r3, #22
 801168a:	6003      	str	r3, [r0, #0]
 801168c:	2000      	movs	r0, #0
 801168e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011692:	4834      	ldr	r0, [pc, #208]	@ (8011764 <_strtol_l.constprop.0+0xf0>)
 8011694:	460d      	mov	r5, r1
 8011696:	462a      	mov	r2, r5
 8011698:	f815 4b01 	ldrb.w	r4, [r5], #1
 801169c:	5d06      	ldrb	r6, [r0, r4]
 801169e:	f016 0608 	ands.w	r6, r6, #8
 80116a2:	d1f8      	bne.n	8011696 <_strtol_l.constprop.0+0x22>
 80116a4:	2c2d      	cmp	r4, #45	@ 0x2d
 80116a6:	d12d      	bne.n	8011704 <_strtol_l.constprop.0+0x90>
 80116a8:	782c      	ldrb	r4, [r5, #0]
 80116aa:	2601      	movs	r6, #1
 80116ac:	1c95      	adds	r5, r2, #2
 80116ae:	f033 0210 	bics.w	r2, r3, #16
 80116b2:	d109      	bne.n	80116c8 <_strtol_l.constprop.0+0x54>
 80116b4:	2c30      	cmp	r4, #48	@ 0x30
 80116b6:	d12a      	bne.n	801170e <_strtol_l.constprop.0+0x9a>
 80116b8:	782a      	ldrb	r2, [r5, #0]
 80116ba:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80116be:	2a58      	cmp	r2, #88	@ 0x58
 80116c0:	d125      	bne.n	801170e <_strtol_l.constprop.0+0x9a>
 80116c2:	786c      	ldrb	r4, [r5, #1]
 80116c4:	2310      	movs	r3, #16
 80116c6:	3502      	adds	r5, #2
 80116c8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80116cc:	f10c 3cff 	add.w	ip, ip, #4294967295
 80116d0:	2200      	movs	r2, #0
 80116d2:	fbbc f9f3 	udiv	r9, ip, r3
 80116d6:	4610      	mov	r0, r2
 80116d8:	fb03 ca19 	mls	sl, r3, r9, ip
 80116dc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80116e0:	2f09      	cmp	r7, #9
 80116e2:	d81b      	bhi.n	801171c <_strtol_l.constprop.0+0xa8>
 80116e4:	463c      	mov	r4, r7
 80116e6:	42a3      	cmp	r3, r4
 80116e8:	dd27      	ble.n	801173a <_strtol_l.constprop.0+0xc6>
 80116ea:	1c57      	adds	r7, r2, #1
 80116ec:	d007      	beq.n	80116fe <_strtol_l.constprop.0+0x8a>
 80116ee:	4581      	cmp	r9, r0
 80116f0:	d320      	bcc.n	8011734 <_strtol_l.constprop.0+0xc0>
 80116f2:	d101      	bne.n	80116f8 <_strtol_l.constprop.0+0x84>
 80116f4:	45a2      	cmp	sl, r4
 80116f6:	db1d      	blt.n	8011734 <_strtol_l.constprop.0+0xc0>
 80116f8:	fb00 4003 	mla	r0, r0, r3, r4
 80116fc:	2201      	movs	r2, #1
 80116fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011702:	e7eb      	b.n	80116dc <_strtol_l.constprop.0+0x68>
 8011704:	2c2b      	cmp	r4, #43	@ 0x2b
 8011706:	bf04      	itt	eq
 8011708:	782c      	ldrbeq	r4, [r5, #0]
 801170a:	1c95      	addeq	r5, r2, #2
 801170c:	e7cf      	b.n	80116ae <_strtol_l.constprop.0+0x3a>
 801170e:	2b00      	cmp	r3, #0
 8011710:	d1da      	bne.n	80116c8 <_strtol_l.constprop.0+0x54>
 8011712:	2c30      	cmp	r4, #48	@ 0x30
 8011714:	bf0c      	ite	eq
 8011716:	2308      	moveq	r3, #8
 8011718:	230a      	movne	r3, #10
 801171a:	e7d5      	b.n	80116c8 <_strtol_l.constprop.0+0x54>
 801171c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8011720:	2f19      	cmp	r7, #25
 8011722:	d801      	bhi.n	8011728 <_strtol_l.constprop.0+0xb4>
 8011724:	3c37      	subs	r4, #55	@ 0x37
 8011726:	e7de      	b.n	80116e6 <_strtol_l.constprop.0+0x72>
 8011728:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801172c:	2f19      	cmp	r7, #25
 801172e:	d804      	bhi.n	801173a <_strtol_l.constprop.0+0xc6>
 8011730:	3c57      	subs	r4, #87	@ 0x57
 8011732:	e7d8      	b.n	80116e6 <_strtol_l.constprop.0+0x72>
 8011734:	f04f 32ff 	mov.w	r2, #4294967295
 8011738:	e7e1      	b.n	80116fe <_strtol_l.constprop.0+0x8a>
 801173a:	1c53      	adds	r3, r2, #1
 801173c:	d108      	bne.n	8011750 <_strtol_l.constprop.0+0xdc>
 801173e:	2322      	movs	r3, #34	@ 0x22
 8011740:	f8ce 3000 	str.w	r3, [lr]
 8011744:	4660      	mov	r0, ip
 8011746:	f1b8 0f00 	cmp.w	r8, #0
 801174a:	d0a0      	beq.n	801168e <_strtol_l.constprop.0+0x1a>
 801174c:	1e69      	subs	r1, r5, #1
 801174e:	e006      	b.n	801175e <_strtol_l.constprop.0+0xea>
 8011750:	b106      	cbz	r6, 8011754 <_strtol_l.constprop.0+0xe0>
 8011752:	4240      	negs	r0, r0
 8011754:	f1b8 0f00 	cmp.w	r8, #0
 8011758:	d099      	beq.n	801168e <_strtol_l.constprop.0+0x1a>
 801175a:	2a00      	cmp	r2, #0
 801175c:	d1f6      	bne.n	801174c <_strtol_l.constprop.0+0xd8>
 801175e:	f8c8 1000 	str.w	r1, [r8]
 8011762:	e794      	b.n	801168e <_strtol_l.constprop.0+0x1a>
 8011764:	08014321 	.word	0x08014321

08011768 <_strtol_r>:
 8011768:	f7ff bf84 	b.w	8011674 <_strtol_l.constprop.0>

0801176c <__ssputs_r>:
 801176c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011770:	688e      	ldr	r6, [r1, #8]
 8011772:	461f      	mov	r7, r3
 8011774:	42be      	cmp	r6, r7
 8011776:	680b      	ldr	r3, [r1, #0]
 8011778:	4682      	mov	sl, r0
 801177a:	460c      	mov	r4, r1
 801177c:	4690      	mov	r8, r2
 801177e:	d82d      	bhi.n	80117dc <__ssputs_r+0x70>
 8011780:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011784:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011788:	d026      	beq.n	80117d8 <__ssputs_r+0x6c>
 801178a:	6965      	ldr	r5, [r4, #20]
 801178c:	6909      	ldr	r1, [r1, #16]
 801178e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011792:	eba3 0901 	sub.w	r9, r3, r1
 8011796:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801179a:	1c7b      	adds	r3, r7, #1
 801179c:	444b      	add	r3, r9
 801179e:	106d      	asrs	r5, r5, #1
 80117a0:	429d      	cmp	r5, r3
 80117a2:	bf38      	it	cc
 80117a4:	461d      	movcc	r5, r3
 80117a6:	0553      	lsls	r3, r2, #21
 80117a8:	d527      	bpl.n	80117fa <__ssputs_r+0x8e>
 80117aa:	4629      	mov	r1, r5
 80117ac:	f7fe fc1c 	bl	800ffe8 <_malloc_r>
 80117b0:	4606      	mov	r6, r0
 80117b2:	b360      	cbz	r0, 801180e <__ssputs_r+0xa2>
 80117b4:	6921      	ldr	r1, [r4, #16]
 80117b6:	464a      	mov	r2, r9
 80117b8:	f7fd fd3f 	bl	800f23a <memcpy>
 80117bc:	89a3      	ldrh	r3, [r4, #12]
 80117be:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80117c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80117c6:	81a3      	strh	r3, [r4, #12]
 80117c8:	6126      	str	r6, [r4, #16]
 80117ca:	6165      	str	r5, [r4, #20]
 80117cc:	444e      	add	r6, r9
 80117ce:	eba5 0509 	sub.w	r5, r5, r9
 80117d2:	6026      	str	r6, [r4, #0]
 80117d4:	60a5      	str	r5, [r4, #8]
 80117d6:	463e      	mov	r6, r7
 80117d8:	42be      	cmp	r6, r7
 80117da:	d900      	bls.n	80117de <__ssputs_r+0x72>
 80117dc:	463e      	mov	r6, r7
 80117de:	6820      	ldr	r0, [r4, #0]
 80117e0:	4632      	mov	r2, r6
 80117e2:	4641      	mov	r1, r8
 80117e4:	f000 fb9e 	bl	8011f24 <memmove>
 80117e8:	68a3      	ldr	r3, [r4, #8]
 80117ea:	1b9b      	subs	r3, r3, r6
 80117ec:	60a3      	str	r3, [r4, #8]
 80117ee:	6823      	ldr	r3, [r4, #0]
 80117f0:	4433      	add	r3, r6
 80117f2:	6023      	str	r3, [r4, #0]
 80117f4:	2000      	movs	r0, #0
 80117f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80117fa:	462a      	mov	r2, r5
 80117fc:	f000 ff85 	bl	801270a <_realloc_r>
 8011800:	4606      	mov	r6, r0
 8011802:	2800      	cmp	r0, #0
 8011804:	d1e0      	bne.n	80117c8 <__ssputs_r+0x5c>
 8011806:	6921      	ldr	r1, [r4, #16]
 8011808:	4650      	mov	r0, sl
 801180a:	f7fe fb79 	bl	800ff00 <_free_r>
 801180e:	230c      	movs	r3, #12
 8011810:	f8ca 3000 	str.w	r3, [sl]
 8011814:	89a3      	ldrh	r3, [r4, #12]
 8011816:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801181a:	81a3      	strh	r3, [r4, #12]
 801181c:	f04f 30ff 	mov.w	r0, #4294967295
 8011820:	e7e9      	b.n	80117f6 <__ssputs_r+0x8a>
	...

08011824 <_svfiprintf_r>:
 8011824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011828:	4698      	mov	r8, r3
 801182a:	898b      	ldrh	r3, [r1, #12]
 801182c:	061b      	lsls	r3, r3, #24
 801182e:	b09d      	sub	sp, #116	@ 0x74
 8011830:	4607      	mov	r7, r0
 8011832:	460d      	mov	r5, r1
 8011834:	4614      	mov	r4, r2
 8011836:	d510      	bpl.n	801185a <_svfiprintf_r+0x36>
 8011838:	690b      	ldr	r3, [r1, #16]
 801183a:	b973      	cbnz	r3, 801185a <_svfiprintf_r+0x36>
 801183c:	2140      	movs	r1, #64	@ 0x40
 801183e:	f7fe fbd3 	bl	800ffe8 <_malloc_r>
 8011842:	6028      	str	r0, [r5, #0]
 8011844:	6128      	str	r0, [r5, #16]
 8011846:	b930      	cbnz	r0, 8011856 <_svfiprintf_r+0x32>
 8011848:	230c      	movs	r3, #12
 801184a:	603b      	str	r3, [r7, #0]
 801184c:	f04f 30ff 	mov.w	r0, #4294967295
 8011850:	b01d      	add	sp, #116	@ 0x74
 8011852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011856:	2340      	movs	r3, #64	@ 0x40
 8011858:	616b      	str	r3, [r5, #20]
 801185a:	2300      	movs	r3, #0
 801185c:	9309      	str	r3, [sp, #36]	@ 0x24
 801185e:	2320      	movs	r3, #32
 8011860:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011864:	f8cd 800c 	str.w	r8, [sp, #12]
 8011868:	2330      	movs	r3, #48	@ 0x30
 801186a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011a08 <_svfiprintf_r+0x1e4>
 801186e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011872:	f04f 0901 	mov.w	r9, #1
 8011876:	4623      	mov	r3, r4
 8011878:	469a      	mov	sl, r3
 801187a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801187e:	b10a      	cbz	r2, 8011884 <_svfiprintf_r+0x60>
 8011880:	2a25      	cmp	r2, #37	@ 0x25
 8011882:	d1f9      	bne.n	8011878 <_svfiprintf_r+0x54>
 8011884:	ebba 0b04 	subs.w	fp, sl, r4
 8011888:	d00b      	beq.n	80118a2 <_svfiprintf_r+0x7e>
 801188a:	465b      	mov	r3, fp
 801188c:	4622      	mov	r2, r4
 801188e:	4629      	mov	r1, r5
 8011890:	4638      	mov	r0, r7
 8011892:	f7ff ff6b 	bl	801176c <__ssputs_r>
 8011896:	3001      	adds	r0, #1
 8011898:	f000 80a7 	beq.w	80119ea <_svfiprintf_r+0x1c6>
 801189c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801189e:	445a      	add	r2, fp
 80118a0:	9209      	str	r2, [sp, #36]	@ 0x24
 80118a2:	f89a 3000 	ldrb.w	r3, [sl]
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	f000 809f 	beq.w	80119ea <_svfiprintf_r+0x1c6>
 80118ac:	2300      	movs	r3, #0
 80118ae:	f04f 32ff 	mov.w	r2, #4294967295
 80118b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80118b6:	f10a 0a01 	add.w	sl, sl, #1
 80118ba:	9304      	str	r3, [sp, #16]
 80118bc:	9307      	str	r3, [sp, #28]
 80118be:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80118c2:	931a      	str	r3, [sp, #104]	@ 0x68
 80118c4:	4654      	mov	r4, sl
 80118c6:	2205      	movs	r2, #5
 80118c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80118cc:	484e      	ldr	r0, [pc, #312]	@ (8011a08 <_svfiprintf_r+0x1e4>)
 80118ce:	f7ee fc57 	bl	8000180 <memchr>
 80118d2:	9a04      	ldr	r2, [sp, #16]
 80118d4:	b9d8      	cbnz	r0, 801190e <_svfiprintf_r+0xea>
 80118d6:	06d0      	lsls	r0, r2, #27
 80118d8:	bf44      	itt	mi
 80118da:	2320      	movmi	r3, #32
 80118dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80118e0:	0711      	lsls	r1, r2, #28
 80118e2:	bf44      	itt	mi
 80118e4:	232b      	movmi	r3, #43	@ 0x2b
 80118e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80118ea:	f89a 3000 	ldrb.w	r3, [sl]
 80118ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80118f0:	d015      	beq.n	801191e <_svfiprintf_r+0xfa>
 80118f2:	9a07      	ldr	r2, [sp, #28]
 80118f4:	4654      	mov	r4, sl
 80118f6:	2000      	movs	r0, #0
 80118f8:	f04f 0c0a 	mov.w	ip, #10
 80118fc:	4621      	mov	r1, r4
 80118fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011902:	3b30      	subs	r3, #48	@ 0x30
 8011904:	2b09      	cmp	r3, #9
 8011906:	d94b      	bls.n	80119a0 <_svfiprintf_r+0x17c>
 8011908:	b1b0      	cbz	r0, 8011938 <_svfiprintf_r+0x114>
 801190a:	9207      	str	r2, [sp, #28]
 801190c:	e014      	b.n	8011938 <_svfiprintf_r+0x114>
 801190e:	eba0 0308 	sub.w	r3, r0, r8
 8011912:	fa09 f303 	lsl.w	r3, r9, r3
 8011916:	4313      	orrs	r3, r2
 8011918:	9304      	str	r3, [sp, #16]
 801191a:	46a2      	mov	sl, r4
 801191c:	e7d2      	b.n	80118c4 <_svfiprintf_r+0xa0>
 801191e:	9b03      	ldr	r3, [sp, #12]
 8011920:	1d19      	adds	r1, r3, #4
 8011922:	681b      	ldr	r3, [r3, #0]
 8011924:	9103      	str	r1, [sp, #12]
 8011926:	2b00      	cmp	r3, #0
 8011928:	bfbb      	ittet	lt
 801192a:	425b      	neglt	r3, r3
 801192c:	f042 0202 	orrlt.w	r2, r2, #2
 8011930:	9307      	strge	r3, [sp, #28]
 8011932:	9307      	strlt	r3, [sp, #28]
 8011934:	bfb8      	it	lt
 8011936:	9204      	strlt	r2, [sp, #16]
 8011938:	7823      	ldrb	r3, [r4, #0]
 801193a:	2b2e      	cmp	r3, #46	@ 0x2e
 801193c:	d10a      	bne.n	8011954 <_svfiprintf_r+0x130>
 801193e:	7863      	ldrb	r3, [r4, #1]
 8011940:	2b2a      	cmp	r3, #42	@ 0x2a
 8011942:	d132      	bne.n	80119aa <_svfiprintf_r+0x186>
 8011944:	9b03      	ldr	r3, [sp, #12]
 8011946:	1d1a      	adds	r2, r3, #4
 8011948:	681b      	ldr	r3, [r3, #0]
 801194a:	9203      	str	r2, [sp, #12]
 801194c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011950:	3402      	adds	r4, #2
 8011952:	9305      	str	r3, [sp, #20]
 8011954:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011a18 <_svfiprintf_r+0x1f4>
 8011958:	7821      	ldrb	r1, [r4, #0]
 801195a:	2203      	movs	r2, #3
 801195c:	4650      	mov	r0, sl
 801195e:	f7ee fc0f 	bl	8000180 <memchr>
 8011962:	b138      	cbz	r0, 8011974 <_svfiprintf_r+0x150>
 8011964:	9b04      	ldr	r3, [sp, #16]
 8011966:	eba0 000a 	sub.w	r0, r0, sl
 801196a:	2240      	movs	r2, #64	@ 0x40
 801196c:	4082      	lsls	r2, r0
 801196e:	4313      	orrs	r3, r2
 8011970:	3401      	adds	r4, #1
 8011972:	9304      	str	r3, [sp, #16]
 8011974:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011978:	4824      	ldr	r0, [pc, #144]	@ (8011a0c <_svfiprintf_r+0x1e8>)
 801197a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801197e:	2206      	movs	r2, #6
 8011980:	f7ee fbfe 	bl	8000180 <memchr>
 8011984:	2800      	cmp	r0, #0
 8011986:	d036      	beq.n	80119f6 <_svfiprintf_r+0x1d2>
 8011988:	4b21      	ldr	r3, [pc, #132]	@ (8011a10 <_svfiprintf_r+0x1ec>)
 801198a:	bb1b      	cbnz	r3, 80119d4 <_svfiprintf_r+0x1b0>
 801198c:	9b03      	ldr	r3, [sp, #12]
 801198e:	3307      	adds	r3, #7
 8011990:	f023 0307 	bic.w	r3, r3, #7
 8011994:	3308      	adds	r3, #8
 8011996:	9303      	str	r3, [sp, #12]
 8011998:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801199a:	4433      	add	r3, r6
 801199c:	9309      	str	r3, [sp, #36]	@ 0x24
 801199e:	e76a      	b.n	8011876 <_svfiprintf_r+0x52>
 80119a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80119a4:	460c      	mov	r4, r1
 80119a6:	2001      	movs	r0, #1
 80119a8:	e7a8      	b.n	80118fc <_svfiprintf_r+0xd8>
 80119aa:	2300      	movs	r3, #0
 80119ac:	3401      	adds	r4, #1
 80119ae:	9305      	str	r3, [sp, #20]
 80119b0:	4619      	mov	r1, r3
 80119b2:	f04f 0c0a 	mov.w	ip, #10
 80119b6:	4620      	mov	r0, r4
 80119b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80119bc:	3a30      	subs	r2, #48	@ 0x30
 80119be:	2a09      	cmp	r2, #9
 80119c0:	d903      	bls.n	80119ca <_svfiprintf_r+0x1a6>
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	d0c6      	beq.n	8011954 <_svfiprintf_r+0x130>
 80119c6:	9105      	str	r1, [sp, #20]
 80119c8:	e7c4      	b.n	8011954 <_svfiprintf_r+0x130>
 80119ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80119ce:	4604      	mov	r4, r0
 80119d0:	2301      	movs	r3, #1
 80119d2:	e7f0      	b.n	80119b6 <_svfiprintf_r+0x192>
 80119d4:	ab03      	add	r3, sp, #12
 80119d6:	9300      	str	r3, [sp, #0]
 80119d8:	462a      	mov	r2, r5
 80119da:	4b0e      	ldr	r3, [pc, #56]	@ (8011a14 <_svfiprintf_r+0x1f0>)
 80119dc:	a904      	add	r1, sp, #16
 80119de:	4638      	mov	r0, r7
 80119e0:	f7fc fb98 	bl	800e114 <_printf_float>
 80119e4:	1c42      	adds	r2, r0, #1
 80119e6:	4606      	mov	r6, r0
 80119e8:	d1d6      	bne.n	8011998 <_svfiprintf_r+0x174>
 80119ea:	89ab      	ldrh	r3, [r5, #12]
 80119ec:	065b      	lsls	r3, r3, #25
 80119ee:	f53f af2d 	bmi.w	801184c <_svfiprintf_r+0x28>
 80119f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80119f4:	e72c      	b.n	8011850 <_svfiprintf_r+0x2c>
 80119f6:	ab03      	add	r3, sp, #12
 80119f8:	9300      	str	r3, [sp, #0]
 80119fa:	462a      	mov	r2, r5
 80119fc:	4b05      	ldr	r3, [pc, #20]	@ (8011a14 <_svfiprintf_r+0x1f0>)
 80119fe:	a904      	add	r1, sp, #16
 8011a00:	4638      	mov	r0, r7
 8011a02:	f7fc fe1f 	bl	800e644 <_printf_i>
 8011a06:	e7ed      	b.n	80119e4 <_svfiprintf_r+0x1c0>
 8011a08:	08014421 	.word	0x08014421
 8011a0c:	0801442b 	.word	0x0801442b
 8011a10:	0800e115 	.word	0x0800e115
 8011a14:	0801176d 	.word	0x0801176d
 8011a18:	08014427 	.word	0x08014427

08011a1c <__sfputc_r>:
 8011a1c:	6893      	ldr	r3, [r2, #8]
 8011a1e:	3b01      	subs	r3, #1
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	b410      	push	{r4}
 8011a24:	6093      	str	r3, [r2, #8]
 8011a26:	da08      	bge.n	8011a3a <__sfputc_r+0x1e>
 8011a28:	6994      	ldr	r4, [r2, #24]
 8011a2a:	42a3      	cmp	r3, r4
 8011a2c:	db01      	blt.n	8011a32 <__sfputc_r+0x16>
 8011a2e:	290a      	cmp	r1, #10
 8011a30:	d103      	bne.n	8011a3a <__sfputc_r+0x1e>
 8011a32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011a36:	f7fd bad6 	b.w	800efe6 <__swbuf_r>
 8011a3a:	6813      	ldr	r3, [r2, #0]
 8011a3c:	1c58      	adds	r0, r3, #1
 8011a3e:	6010      	str	r0, [r2, #0]
 8011a40:	7019      	strb	r1, [r3, #0]
 8011a42:	4608      	mov	r0, r1
 8011a44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011a48:	4770      	bx	lr

08011a4a <__sfputs_r>:
 8011a4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a4c:	4606      	mov	r6, r0
 8011a4e:	460f      	mov	r7, r1
 8011a50:	4614      	mov	r4, r2
 8011a52:	18d5      	adds	r5, r2, r3
 8011a54:	42ac      	cmp	r4, r5
 8011a56:	d101      	bne.n	8011a5c <__sfputs_r+0x12>
 8011a58:	2000      	movs	r0, #0
 8011a5a:	e007      	b.n	8011a6c <__sfputs_r+0x22>
 8011a5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011a60:	463a      	mov	r2, r7
 8011a62:	4630      	mov	r0, r6
 8011a64:	f7ff ffda 	bl	8011a1c <__sfputc_r>
 8011a68:	1c43      	adds	r3, r0, #1
 8011a6a:	d1f3      	bne.n	8011a54 <__sfputs_r+0xa>
 8011a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011a70 <_vfiprintf_r>:
 8011a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a74:	460d      	mov	r5, r1
 8011a76:	b09d      	sub	sp, #116	@ 0x74
 8011a78:	4614      	mov	r4, r2
 8011a7a:	4698      	mov	r8, r3
 8011a7c:	4606      	mov	r6, r0
 8011a7e:	b118      	cbz	r0, 8011a88 <_vfiprintf_r+0x18>
 8011a80:	6a03      	ldr	r3, [r0, #32]
 8011a82:	b90b      	cbnz	r3, 8011a88 <_vfiprintf_r+0x18>
 8011a84:	f7fd f99e 	bl	800edc4 <__sinit>
 8011a88:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011a8a:	07d9      	lsls	r1, r3, #31
 8011a8c:	d405      	bmi.n	8011a9a <_vfiprintf_r+0x2a>
 8011a8e:	89ab      	ldrh	r3, [r5, #12]
 8011a90:	059a      	lsls	r2, r3, #22
 8011a92:	d402      	bmi.n	8011a9a <_vfiprintf_r+0x2a>
 8011a94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011a96:	f7fd fbce 	bl	800f236 <__retarget_lock_acquire_recursive>
 8011a9a:	89ab      	ldrh	r3, [r5, #12]
 8011a9c:	071b      	lsls	r3, r3, #28
 8011a9e:	d501      	bpl.n	8011aa4 <_vfiprintf_r+0x34>
 8011aa0:	692b      	ldr	r3, [r5, #16]
 8011aa2:	b99b      	cbnz	r3, 8011acc <_vfiprintf_r+0x5c>
 8011aa4:	4629      	mov	r1, r5
 8011aa6:	4630      	mov	r0, r6
 8011aa8:	f7fd fadc 	bl	800f064 <__swsetup_r>
 8011aac:	b170      	cbz	r0, 8011acc <_vfiprintf_r+0x5c>
 8011aae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011ab0:	07dc      	lsls	r4, r3, #31
 8011ab2:	d504      	bpl.n	8011abe <_vfiprintf_r+0x4e>
 8011ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8011ab8:	b01d      	add	sp, #116	@ 0x74
 8011aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011abe:	89ab      	ldrh	r3, [r5, #12]
 8011ac0:	0598      	lsls	r0, r3, #22
 8011ac2:	d4f7      	bmi.n	8011ab4 <_vfiprintf_r+0x44>
 8011ac4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011ac6:	f7fd fbb7 	bl	800f238 <__retarget_lock_release_recursive>
 8011aca:	e7f3      	b.n	8011ab4 <_vfiprintf_r+0x44>
 8011acc:	2300      	movs	r3, #0
 8011ace:	9309      	str	r3, [sp, #36]	@ 0x24
 8011ad0:	2320      	movs	r3, #32
 8011ad2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011ad6:	f8cd 800c 	str.w	r8, [sp, #12]
 8011ada:	2330      	movs	r3, #48	@ 0x30
 8011adc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011c8c <_vfiprintf_r+0x21c>
 8011ae0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011ae4:	f04f 0901 	mov.w	r9, #1
 8011ae8:	4623      	mov	r3, r4
 8011aea:	469a      	mov	sl, r3
 8011aec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011af0:	b10a      	cbz	r2, 8011af6 <_vfiprintf_r+0x86>
 8011af2:	2a25      	cmp	r2, #37	@ 0x25
 8011af4:	d1f9      	bne.n	8011aea <_vfiprintf_r+0x7a>
 8011af6:	ebba 0b04 	subs.w	fp, sl, r4
 8011afa:	d00b      	beq.n	8011b14 <_vfiprintf_r+0xa4>
 8011afc:	465b      	mov	r3, fp
 8011afe:	4622      	mov	r2, r4
 8011b00:	4629      	mov	r1, r5
 8011b02:	4630      	mov	r0, r6
 8011b04:	f7ff ffa1 	bl	8011a4a <__sfputs_r>
 8011b08:	3001      	adds	r0, #1
 8011b0a:	f000 80a7 	beq.w	8011c5c <_vfiprintf_r+0x1ec>
 8011b0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011b10:	445a      	add	r2, fp
 8011b12:	9209      	str	r2, [sp, #36]	@ 0x24
 8011b14:	f89a 3000 	ldrb.w	r3, [sl]
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	f000 809f 	beq.w	8011c5c <_vfiprintf_r+0x1ec>
 8011b1e:	2300      	movs	r3, #0
 8011b20:	f04f 32ff 	mov.w	r2, #4294967295
 8011b24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011b28:	f10a 0a01 	add.w	sl, sl, #1
 8011b2c:	9304      	str	r3, [sp, #16]
 8011b2e:	9307      	str	r3, [sp, #28]
 8011b30:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011b34:	931a      	str	r3, [sp, #104]	@ 0x68
 8011b36:	4654      	mov	r4, sl
 8011b38:	2205      	movs	r2, #5
 8011b3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011b3e:	4853      	ldr	r0, [pc, #332]	@ (8011c8c <_vfiprintf_r+0x21c>)
 8011b40:	f7ee fb1e 	bl	8000180 <memchr>
 8011b44:	9a04      	ldr	r2, [sp, #16]
 8011b46:	b9d8      	cbnz	r0, 8011b80 <_vfiprintf_r+0x110>
 8011b48:	06d1      	lsls	r1, r2, #27
 8011b4a:	bf44      	itt	mi
 8011b4c:	2320      	movmi	r3, #32
 8011b4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011b52:	0713      	lsls	r3, r2, #28
 8011b54:	bf44      	itt	mi
 8011b56:	232b      	movmi	r3, #43	@ 0x2b
 8011b58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011b5c:	f89a 3000 	ldrb.w	r3, [sl]
 8011b60:	2b2a      	cmp	r3, #42	@ 0x2a
 8011b62:	d015      	beq.n	8011b90 <_vfiprintf_r+0x120>
 8011b64:	9a07      	ldr	r2, [sp, #28]
 8011b66:	4654      	mov	r4, sl
 8011b68:	2000      	movs	r0, #0
 8011b6a:	f04f 0c0a 	mov.w	ip, #10
 8011b6e:	4621      	mov	r1, r4
 8011b70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011b74:	3b30      	subs	r3, #48	@ 0x30
 8011b76:	2b09      	cmp	r3, #9
 8011b78:	d94b      	bls.n	8011c12 <_vfiprintf_r+0x1a2>
 8011b7a:	b1b0      	cbz	r0, 8011baa <_vfiprintf_r+0x13a>
 8011b7c:	9207      	str	r2, [sp, #28]
 8011b7e:	e014      	b.n	8011baa <_vfiprintf_r+0x13a>
 8011b80:	eba0 0308 	sub.w	r3, r0, r8
 8011b84:	fa09 f303 	lsl.w	r3, r9, r3
 8011b88:	4313      	orrs	r3, r2
 8011b8a:	9304      	str	r3, [sp, #16]
 8011b8c:	46a2      	mov	sl, r4
 8011b8e:	e7d2      	b.n	8011b36 <_vfiprintf_r+0xc6>
 8011b90:	9b03      	ldr	r3, [sp, #12]
 8011b92:	1d19      	adds	r1, r3, #4
 8011b94:	681b      	ldr	r3, [r3, #0]
 8011b96:	9103      	str	r1, [sp, #12]
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	bfbb      	ittet	lt
 8011b9c:	425b      	neglt	r3, r3
 8011b9e:	f042 0202 	orrlt.w	r2, r2, #2
 8011ba2:	9307      	strge	r3, [sp, #28]
 8011ba4:	9307      	strlt	r3, [sp, #28]
 8011ba6:	bfb8      	it	lt
 8011ba8:	9204      	strlt	r2, [sp, #16]
 8011baa:	7823      	ldrb	r3, [r4, #0]
 8011bac:	2b2e      	cmp	r3, #46	@ 0x2e
 8011bae:	d10a      	bne.n	8011bc6 <_vfiprintf_r+0x156>
 8011bb0:	7863      	ldrb	r3, [r4, #1]
 8011bb2:	2b2a      	cmp	r3, #42	@ 0x2a
 8011bb4:	d132      	bne.n	8011c1c <_vfiprintf_r+0x1ac>
 8011bb6:	9b03      	ldr	r3, [sp, #12]
 8011bb8:	1d1a      	adds	r2, r3, #4
 8011bba:	681b      	ldr	r3, [r3, #0]
 8011bbc:	9203      	str	r2, [sp, #12]
 8011bbe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011bc2:	3402      	adds	r4, #2
 8011bc4:	9305      	str	r3, [sp, #20]
 8011bc6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011c9c <_vfiprintf_r+0x22c>
 8011bca:	7821      	ldrb	r1, [r4, #0]
 8011bcc:	2203      	movs	r2, #3
 8011bce:	4650      	mov	r0, sl
 8011bd0:	f7ee fad6 	bl	8000180 <memchr>
 8011bd4:	b138      	cbz	r0, 8011be6 <_vfiprintf_r+0x176>
 8011bd6:	9b04      	ldr	r3, [sp, #16]
 8011bd8:	eba0 000a 	sub.w	r0, r0, sl
 8011bdc:	2240      	movs	r2, #64	@ 0x40
 8011bde:	4082      	lsls	r2, r0
 8011be0:	4313      	orrs	r3, r2
 8011be2:	3401      	adds	r4, #1
 8011be4:	9304      	str	r3, [sp, #16]
 8011be6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011bea:	4829      	ldr	r0, [pc, #164]	@ (8011c90 <_vfiprintf_r+0x220>)
 8011bec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011bf0:	2206      	movs	r2, #6
 8011bf2:	f7ee fac5 	bl	8000180 <memchr>
 8011bf6:	2800      	cmp	r0, #0
 8011bf8:	d03f      	beq.n	8011c7a <_vfiprintf_r+0x20a>
 8011bfa:	4b26      	ldr	r3, [pc, #152]	@ (8011c94 <_vfiprintf_r+0x224>)
 8011bfc:	bb1b      	cbnz	r3, 8011c46 <_vfiprintf_r+0x1d6>
 8011bfe:	9b03      	ldr	r3, [sp, #12]
 8011c00:	3307      	adds	r3, #7
 8011c02:	f023 0307 	bic.w	r3, r3, #7
 8011c06:	3308      	adds	r3, #8
 8011c08:	9303      	str	r3, [sp, #12]
 8011c0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011c0c:	443b      	add	r3, r7
 8011c0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8011c10:	e76a      	b.n	8011ae8 <_vfiprintf_r+0x78>
 8011c12:	fb0c 3202 	mla	r2, ip, r2, r3
 8011c16:	460c      	mov	r4, r1
 8011c18:	2001      	movs	r0, #1
 8011c1a:	e7a8      	b.n	8011b6e <_vfiprintf_r+0xfe>
 8011c1c:	2300      	movs	r3, #0
 8011c1e:	3401      	adds	r4, #1
 8011c20:	9305      	str	r3, [sp, #20]
 8011c22:	4619      	mov	r1, r3
 8011c24:	f04f 0c0a 	mov.w	ip, #10
 8011c28:	4620      	mov	r0, r4
 8011c2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011c2e:	3a30      	subs	r2, #48	@ 0x30
 8011c30:	2a09      	cmp	r2, #9
 8011c32:	d903      	bls.n	8011c3c <_vfiprintf_r+0x1cc>
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d0c6      	beq.n	8011bc6 <_vfiprintf_r+0x156>
 8011c38:	9105      	str	r1, [sp, #20]
 8011c3a:	e7c4      	b.n	8011bc6 <_vfiprintf_r+0x156>
 8011c3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8011c40:	4604      	mov	r4, r0
 8011c42:	2301      	movs	r3, #1
 8011c44:	e7f0      	b.n	8011c28 <_vfiprintf_r+0x1b8>
 8011c46:	ab03      	add	r3, sp, #12
 8011c48:	9300      	str	r3, [sp, #0]
 8011c4a:	462a      	mov	r2, r5
 8011c4c:	4b12      	ldr	r3, [pc, #72]	@ (8011c98 <_vfiprintf_r+0x228>)
 8011c4e:	a904      	add	r1, sp, #16
 8011c50:	4630      	mov	r0, r6
 8011c52:	f7fc fa5f 	bl	800e114 <_printf_float>
 8011c56:	4607      	mov	r7, r0
 8011c58:	1c78      	adds	r0, r7, #1
 8011c5a:	d1d6      	bne.n	8011c0a <_vfiprintf_r+0x19a>
 8011c5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011c5e:	07d9      	lsls	r1, r3, #31
 8011c60:	d405      	bmi.n	8011c6e <_vfiprintf_r+0x1fe>
 8011c62:	89ab      	ldrh	r3, [r5, #12]
 8011c64:	059a      	lsls	r2, r3, #22
 8011c66:	d402      	bmi.n	8011c6e <_vfiprintf_r+0x1fe>
 8011c68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011c6a:	f7fd fae5 	bl	800f238 <__retarget_lock_release_recursive>
 8011c6e:	89ab      	ldrh	r3, [r5, #12]
 8011c70:	065b      	lsls	r3, r3, #25
 8011c72:	f53f af1f 	bmi.w	8011ab4 <_vfiprintf_r+0x44>
 8011c76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011c78:	e71e      	b.n	8011ab8 <_vfiprintf_r+0x48>
 8011c7a:	ab03      	add	r3, sp, #12
 8011c7c:	9300      	str	r3, [sp, #0]
 8011c7e:	462a      	mov	r2, r5
 8011c80:	4b05      	ldr	r3, [pc, #20]	@ (8011c98 <_vfiprintf_r+0x228>)
 8011c82:	a904      	add	r1, sp, #16
 8011c84:	4630      	mov	r0, r6
 8011c86:	f7fc fcdd 	bl	800e644 <_printf_i>
 8011c8a:	e7e4      	b.n	8011c56 <_vfiprintf_r+0x1e6>
 8011c8c:	08014421 	.word	0x08014421
 8011c90:	0801442b 	.word	0x0801442b
 8011c94:	0800e115 	.word	0x0800e115
 8011c98:	08011a4b 	.word	0x08011a4b
 8011c9c:	08014427 	.word	0x08014427

08011ca0 <__sflush_r>:
 8011ca0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ca8:	0716      	lsls	r6, r2, #28
 8011caa:	4605      	mov	r5, r0
 8011cac:	460c      	mov	r4, r1
 8011cae:	d454      	bmi.n	8011d5a <__sflush_r+0xba>
 8011cb0:	684b      	ldr	r3, [r1, #4]
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	dc02      	bgt.n	8011cbc <__sflush_r+0x1c>
 8011cb6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	dd48      	ble.n	8011d4e <__sflush_r+0xae>
 8011cbc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011cbe:	2e00      	cmp	r6, #0
 8011cc0:	d045      	beq.n	8011d4e <__sflush_r+0xae>
 8011cc2:	2300      	movs	r3, #0
 8011cc4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011cc8:	682f      	ldr	r7, [r5, #0]
 8011cca:	6a21      	ldr	r1, [r4, #32]
 8011ccc:	602b      	str	r3, [r5, #0]
 8011cce:	d030      	beq.n	8011d32 <__sflush_r+0x92>
 8011cd0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011cd2:	89a3      	ldrh	r3, [r4, #12]
 8011cd4:	0759      	lsls	r1, r3, #29
 8011cd6:	d505      	bpl.n	8011ce4 <__sflush_r+0x44>
 8011cd8:	6863      	ldr	r3, [r4, #4]
 8011cda:	1ad2      	subs	r2, r2, r3
 8011cdc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011cde:	b10b      	cbz	r3, 8011ce4 <__sflush_r+0x44>
 8011ce0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011ce2:	1ad2      	subs	r2, r2, r3
 8011ce4:	2300      	movs	r3, #0
 8011ce6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011ce8:	6a21      	ldr	r1, [r4, #32]
 8011cea:	4628      	mov	r0, r5
 8011cec:	47b0      	blx	r6
 8011cee:	1c43      	adds	r3, r0, #1
 8011cf0:	89a3      	ldrh	r3, [r4, #12]
 8011cf2:	d106      	bne.n	8011d02 <__sflush_r+0x62>
 8011cf4:	6829      	ldr	r1, [r5, #0]
 8011cf6:	291d      	cmp	r1, #29
 8011cf8:	d82b      	bhi.n	8011d52 <__sflush_r+0xb2>
 8011cfa:	4a2a      	ldr	r2, [pc, #168]	@ (8011da4 <__sflush_r+0x104>)
 8011cfc:	410a      	asrs	r2, r1
 8011cfe:	07d6      	lsls	r6, r2, #31
 8011d00:	d427      	bmi.n	8011d52 <__sflush_r+0xb2>
 8011d02:	2200      	movs	r2, #0
 8011d04:	6062      	str	r2, [r4, #4]
 8011d06:	04d9      	lsls	r1, r3, #19
 8011d08:	6922      	ldr	r2, [r4, #16]
 8011d0a:	6022      	str	r2, [r4, #0]
 8011d0c:	d504      	bpl.n	8011d18 <__sflush_r+0x78>
 8011d0e:	1c42      	adds	r2, r0, #1
 8011d10:	d101      	bne.n	8011d16 <__sflush_r+0x76>
 8011d12:	682b      	ldr	r3, [r5, #0]
 8011d14:	b903      	cbnz	r3, 8011d18 <__sflush_r+0x78>
 8011d16:	6560      	str	r0, [r4, #84]	@ 0x54
 8011d18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011d1a:	602f      	str	r7, [r5, #0]
 8011d1c:	b1b9      	cbz	r1, 8011d4e <__sflush_r+0xae>
 8011d1e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011d22:	4299      	cmp	r1, r3
 8011d24:	d002      	beq.n	8011d2c <__sflush_r+0x8c>
 8011d26:	4628      	mov	r0, r5
 8011d28:	f7fe f8ea 	bl	800ff00 <_free_r>
 8011d2c:	2300      	movs	r3, #0
 8011d2e:	6363      	str	r3, [r4, #52]	@ 0x34
 8011d30:	e00d      	b.n	8011d4e <__sflush_r+0xae>
 8011d32:	2301      	movs	r3, #1
 8011d34:	4628      	mov	r0, r5
 8011d36:	47b0      	blx	r6
 8011d38:	4602      	mov	r2, r0
 8011d3a:	1c50      	adds	r0, r2, #1
 8011d3c:	d1c9      	bne.n	8011cd2 <__sflush_r+0x32>
 8011d3e:	682b      	ldr	r3, [r5, #0]
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d0c6      	beq.n	8011cd2 <__sflush_r+0x32>
 8011d44:	2b1d      	cmp	r3, #29
 8011d46:	d001      	beq.n	8011d4c <__sflush_r+0xac>
 8011d48:	2b16      	cmp	r3, #22
 8011d4a:	d11e      	bne.n	8011d8a <__sflush_r+0xea>
 8011d4c:	602f      	str	r7, [r5, #0]
 8011d4e:	2000      	movs	r0, #0
 8011d50:	e022      	b.n	8011d98 <__sflush_r+0xf8>
 8011d52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011d56:	b21b      	sxth	r3, r3
 8011d58:	e01b      	b.n	8011d92 <__sflush_r+0xf2>
 8011d5a:	690f      	ldr	r7, [r1, #16]
 8011d5c:	2f00      	cmp	r7, #0
 8011d5e:	d0f6      	beq.n	8011d4e <__sflush_r+0xae>
 8011d60:	0793      	lsls	r3, r2, #30
 8011d62:	680e      	ldr	r6, [r1, #0]
 8011d64:	bf08      	it	eq
 8011d66:	694b      	ldreq	r3, [r1, #20]
 8011d68:	600f      	str	r7, [r1, #0]
 8011d6a:	bf18      	it	ne
 8011d6c:	2300      	movne	r3, #0
 8011d6e:	eba6 0807 	sub.w	r8, r6, r7
 8011d72:	608b      	str	r3, [r1, #8]
 8011d74:	f1b8 0f00 	cmp.w	r8, #0
 8011d78:	dde9      	ble.n	8011d4e <__sflush_r+0xae>
 8011d7a:	6a21      	ldr	r1, [r4, #32]
 8011d7c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011d7e:	4643      	mov	r3, r8
 8011d80:	463a      	mov	r2, r7
 8011d82:	4628      	mov	r0, r5
 8011d84:	47b0      	blx	r6
 8011d86:	2800      	cmp	r0, #0
 8011d88:	dc08      	bgt.n	8011d9c <__sflush_r+0xfc>
 8011d8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011d8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011d92:	81a3      	strh	r3, [r4, #12]
 8011d94:	f04f 30ff 	mov.w	r0, #4294967295
 8011d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d9c:	4407      	add	r7, r0
 8011d9e:	eba8 0800 	sub.w	r8, r8, r0
 8011da2:	e7e7      	b.n	8011d74 <__sflush_r+0xd4>
 8011da4:	dfbffffe 	.word	0xdfbffffe

08011da8 <_fflush_r>:
 8011da8:	b538      	push	{r3, r4, r5, lr}
 8011daa:	690b      	ldr	r3, [r1, #16]
 8011dac:	4605      	mov	r5, r0
 8011dae:	460c      	mov	r4, r1
 8011db0:	b913      	cbnz	r3, 8011db8 <_fflush_r+0x10>
 8011db2:	2500      	movs	r5, #0
 8011db4:	4628      	mov	r0, r5
 8011db6:	bd38      	pop	{r3, r4, r5, pc}
 8011db8:	b118      	cbz	r0, 8011dc2 <_fflush_r+0x1a>
 8011dba:	6a03      	ldr	r3, [r0, #32]
 8011dbc:	b90b      	cbnz	r3, 8011dc2 <_fflush_r+0x1a>
 8011dbe:	f7fd f801 	bl	800edc4 <__sinit>
 8011dc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d0f3      	beq.n	8011db2 <_fflush_r+0xa>
 8011dca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011dcc:	07d0      	lsls	r0, r2, #31
 8011dce:	d404      	bmi.n	8011dda <_fflush_r+0x32>
 8011dd0:	0599      	lsls	r1, r3, #22
 8011dd2:	d402      	bmi.n	8011dda <_fflush_r+0x32>
 8011dd4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011dd6:	f7fd fa2e 	bl	800f236 <__retarget_lock_acquire_recursive>
 8011dda:	4628      	mov	r0, r5
 8011ddc:	4621      	mov	r1, r4
 8011dde:	f7ff ff5f 	bl	8011ca0 <__sflush_r>
 8011de2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011de4:	07da      	lsls	r2, r3, #31
 8011de6:	4605      	mov	r5, r0
 8011de8:	d4e4      	bmi.n	8011db4 <_fflush_r+0xc>
 8011dea:	89a3      	ldrh	r3, [r4, #12]
 8011dec:	059b      	lsls	r3, r3, #22
 8011dee:	d4e1      	bmi.n	8011db4 <_fflush_r+0xc>
 8011df0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011df2:	f7fd fa21 	bl	800f238 <__retarget_lock_release_recursive>
 8011df6:	e7dd      	b.n	8011db4 <_fflush_r+0xc>

08011df8 <__swhatbuf_r>:
 8011df8:	b570      	push	{r4, r5, r6, lr}
 8011dfa:	460c      	mov	r4, r1
 8011dfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011e00:	2900      	cmp	r1, #0
 8011e02:	b096      	sub	sp, #88	@ 0x58
 8011e04:	4615      	mov	r5, r2
 8011e06:	461e      	mov	r6, r3
 8011e08:	da0d      	bge.n	8011e26 <__swhatbuf_r+0x2e>
 8011e0a:	89a3      	ldrh	r3, [r4, #12]
 8011e0c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011e10:	f04f 0100 	mov.w	r1, #0
 8011e14:	bf14      	ite	ne
 8011e16:	2340      	movne	r3, #64	@ 0x40
 8011e18:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011e1c:	2000      	movs	r0, #0
 8011e1e:	6031      	str	r1, [r6, #0]
 8011e20:	602b      	str	r3, [r5, #0]
 8011e22:	b016      	add	sp, #88	@ 0x58
 8011e24:	bd70      	pop	{r4, r5, r6, pc}
 8011e26:	466a      	mov	r2, sp
 8011e28:	f000 f8b6 	bl	8011f98 <_fstat_r>
 8011e2c:	2800      	cmp	r0, #0
 8011e2e:	dbec      	blt.n	8011e0a <__swhatbuf_r+0x12>
 8011e30:	9901      	ldr	r1, [sp, #4]
 8011e32:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011e36:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011e3a:	4259      	negs	r1, r3
 8011e3c:	4159      	adcs	r1, r3
 8011e3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011e42:	e7eb      	b.n	8011e1c <__swhatbuf_r+0x24>

08011e44 <__smakebuf_r>:
 8011e44:	898b      	ldrh	r3, [r1, #12]
 8011e46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011e48:	079d      	lsls	r5, r3, #30
 8011e4a:	4606      	mov	r6, r0
 8011e4c:	460c      	mov	r4, r1
 8011e4e:	d507      	bpl.n	8011e60 <__smakebuf_r+0x1c>
 8011e50:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011e54:	6023      	str	r3, [r4, #0]
 8011e56:	6123      	str	r3, [r4, #16]
 8011e58:	2301      	movs	r3, #1
 8011e5a:	6163      	str	r3, [r4, #20]
 8011e5c:	b003      	add	sp, #12
 8011e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011e60:	ab01      	add	r3, sp, #4
 8011e62:	466a      	mov	r2, sp
 8011e64:	f7ff ffc8 	bl	8011df8 <__swhatbuf_r>
 8011e68:	9f00      	ldr	r7, [sp, #0]
 8011e6a:	4605      	mov	r5, r0
 8011e6c:	4639      	mov	r1, r7
 8011e6e:	4630      	mov	r0, r6
 8011e70:	f7fe f8ba 	bl	800ffe8 <_malloc_r>
 8011e74:	b948      	cbnz	r0, 8011e8a <__smakebuf_r+0x46>
 8011e76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011e7a:	059a      	lsls	r2, r3, #22
 8011e7c:	d4ee      	bmi.n	8011e5c <__smakebuf_r+0x18>
 8011e7e:	f023 0303 	bic.w	r3, r3, #3
 8011e82:	f043 0302 	orr.w	r3, r3, #2
 8011e86:	81a3      	strh	r3, [r4, #12]
 8011e88:	e7e2      	b.n	8011e50 <__smakebuf_r+0xc>
 8011e8a:	89a3      	ldrh	r3, [r4, #12]
 8011e8c:	6020      	str	r0, [r4, #0]
 8011e8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011e92:	81a3      	strh	r3, [r4, #12]
 8011e94:	9b01      	ldr	r3, [sp, #4]
 8011e96:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011e9a:	b15b      	cbz	r3, 8011eb4 <__smakebuf_r+0x70>
 8011e9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011ea0:	4630      	mov	r0, r6
 8011ea2:	f000 f88b 	bl	8011fbc <_isatty_r>
 8011ea6:	b128      	cbz	r0, 8011eb4 <__smakebuf_r+0x70>
 8011ea8:	89a3      	ldrh	r3, [r4, #12]
 8011eaa:	f023 0303 	bic.w	r3, r3, #3
 8011eae:	f043 0301 	orr.w	r3, r3, #1
 8011eb2:	81a3      	strh	r3, [r4, #12]
 8011eb4:	89a3      	ldrh	r3, [r4, #12]
 8011eb6:	431d      	orrs	r5, r3
 8011eb8:	81a5      	strh	r5, [r4, #12]
 8011eba:	e7cf      	b.n	8011e5c <__smakebuf_r+0x18>

08011ebc <_putc_r>:
 8011ebc:	b570      	push	{r4, r5, r6, lr}
 8011ebe:	460d      	mov	r5, r1
 8011ec0:	4614      	mov	r4, r2
 8011ec2:	4606      	mov	r6, r0
 8011ec4:	b118      	cbz	r0, 8011ece <_putc_r+0x12>
 8011ec6:	6a03      	ldr	r3, [r0, #32]
 8011ec8:	b90b      	cbnz	r3, 8011ece <_putc_r+0x12>
 8011eca:	f7fc ff7b 	bl	800edc4 <__sinit>
 8011ece:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011ed0:	07d8      	lsls	r0, r3, #31
 8011ed2:	d405      	bmi.n	8011ee0 <_putc_r+0x24>
 8011ed4:	89a3      	ldrh	r3, [r4, #12]
 8011ed6:	0599      	lsls	r1, r3, #22
 8011ed8:	d402      	bmi.n	8011ee0 <_putc_r+0x24>
 8011eda:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011edc:	f7fd f9ab 	bl	800f236 <__retarget_lock_acquire_recursive>
 8011ee0:	68a3      	ldr	r3, [r4, #8]
 8011ee2:	3b01      	subs	r3, #1
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	60a3      	str	r3, [r4, #8]
 8011ee8:	da05      	bge.n	8011ef6 <_putc_r+0x3a>
 8011eea:	69a2      	ldr	r2, [r4, #24]
 8011eec:	4293      	cmp	r3, r2
 8011eee:	db12      	blt.n	8011f16 <_putc_r+0x5a>
 8011ef0:	b2eb      	uxtb	r3, r5
 8011ef2:	2b0a      	cmp	r3, #10
 8011ef4:	d00f      	beq.n	8011f16 <_putc_r+0x5a>
 8011ef6:	6823      	ldr	r3, [r4, #0]
 8011ef8:	1c5a      	adds	r2, r3, #1
 8011efa:	6022      	str	r2, [r4, #0]
 8011efc:	701d      	strb	r5, [r3, #0]
 8011efe:	b2ed      	uxtb	r5, r5
 8011f00:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011f02:	07da      	lsls	r2, r3, #31
 8011f04:	d405      	bmi.n	8011f12 <_putc_r+0x56>
 8011f06:	89a3      	ldrh	r3, [r4, #12]
 8011f08:	059b      	lsls	r3, r3, #22
 8011f0a:	d402      	bmi.n	8011f12 <_putc_r+0x56>
 8011f0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011f0e:	f7fd f993 	bl	800f238 <__retarget_lock_release_recursive>
 8011f12:	4628      	mov	r0, r5
 8011f14:	bd70      	pop	{r4, r5, r6, pc}
 8011f16:	4629      	mov	r1, r5
 8011f18:	4622      	mov	r2, r4
 8011f1a:	4630      	mov	r0, r6
 8011f1c:	f7fd f863 	bl	800efe6 <__swbuf_r>
 8011f20:	4605      	mov	r5, r0
 8011f22:	e7ed      	b.n	8011f00 <_putc_r+0x44>

08011f24 <memmove>:
 8011f24:	4288      	cmp	r0, r1
 8011f26:	b510      	push	{r4, lr}
 8011f28:	eb01 0402 	add.w	r4, r1, r2
 8011f2c:	d902      	bls.n	8011f34 <memmove+0x10>
 8011f2e:	4284      	cmp	r4, r0
 8011f30:	4623      	mov	r3, r4
 8011f32:	d807      	bhi.n	8011f44 <memmove+0x20>
 8011f34:	1e43      	subs	r3, r0, #1
 8011f36:	42a1      	cmp	r1, r4
 8011f38:	d008      	beq.n	8011f4c <memmove+0x28>
 8011f3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011f3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011f42:	e7f8      	b.n	8011f36 <memmove+0x12>
 8011f44:	4402      	add	r2, r0
 8011f46:	4601      	mov	r1, r0
 8011f48:	428a      	cmp	r2, r1
 8011f4a:	d100      	bne.n	8011f4e <memmove+0x2a>
 8011f4c:	bd10      	pop	{r4, pc}
 8011f4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011f52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011f56:	e7f7      	b.n	8011f48 <memmove+0x24>

08011f58 <strchr>:
 8011f58:	b2c9      	uxtb	r1, r1
 8011f5a:	4603      	mov	r3, r0
 8011f5c:	4618      	mov	r0, r3
 8011f5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011f62:	b112      	cbz	r2, 8011f6a <strchr+0x12>
 8011f64:	428a      	cmp	r2, r1
 8011f66:	d1f9      	bne.n	8011f5c <strchr+0x4>
 8011f68:	4770      	bx	lr
 8011f6a:	2900      	cmp	r1, #0
 8011f6c:	bf18      	it	ne
 8011f6e:	2000      	movne	r0, #0
 8011f70:	4770      	bx	lr

08011f72 <strncmp>:
 8011f72:	b510      	push	{r4, lr}
 8011f74:	b16a      	cbz	r2, 8011f92 <strncmp+0x20>
 8011f76:	3901      	subs	r1, #1
 8011f78:	1884      	adds	r4, r0, r2
 8011f7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011f7e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011f82:	429a      	cmp	r2, r3
 8011f84:	d103      	bne.n	8011f8e <strncmp+0x1c>
 8011f86:	42a0      	cmp	r0, r4
 8011f88:	d001      	beq.n	8011f8e <strncmp+0x1c>
 8011f8a:	2a00      	cmp	r2, #0
 8011f8c:	d1f5      	bne.n	8011f7a <strncmp+0x8>
 8011f8e:	1ad0      	subs	r0, r2, r3
 8011f90:	bd10      	pop	{r4, pc}
 8011f92:	4610      	mov	r0, r2
 8011f94:	e7fc      	b.n	8011f90 <strncmp+0x1e>
	...

08011f98 <_fstat_r>:
 8011f98:	b538      	push	{r3, r4, r5, lr}
 8011f9a:	4d07      	ldr	r5, [pc, #28]	@ (8011fb8 <_fstat_r+0x20>)
 8011f9c:	2300      	movs	r3, #0
 8011f9e:	4604      	mov	r4, r0
 8011fa0:	4608      	mov	r0, r1
 8011fa2:	4611      	mov	r1, r2
 8011fa4:	602b      	str	r3, [r5, #0]
 8011fa6:	f7f1 ffa1 	bl	8003eec <_fstat>
 8011faa:	1c43      	adds	r3, r0, #1
 8011fac:	d102      	bne.n	8011fb4 <_fstat_r+0x1c>
 8011fae:	682b      	ldr	r3, [r5, #0]
 8011fb0:	b103      	cbz	r3, 8011fb4 <_fstat_r+0x1c>
 8011fb2:	6023      	str	r3, [r4, #0]
 8011fb4:	bd38      	pop	{r3, r4, r5, pc}
 8011fb6:	bf00      	nop
 8011fb8:	20003f44 	.word	0x20003f44

08011fbc <_isatty_r>:
 8011fbc:	b538      	push	{r3, r4, r5, lr}
 8011fbe:	4d06      	ldr	r5, [pc, #24]	@ (8011fd8 <_isatty_r+0x1c>)
 8011fc0:	2300      	movs	r3, #0
 8011fc2:	4604      	mov	r4, r0
 8011fc4:	4608      	mov	r0, r1
 8011fc6:	602b      	str	r3, [r5, #0]
 8011fc8:	f7f1 ffa0 	bl	8003f0c <_isatty>
 8011fcc:	1c43      	adds	r3, r0, #1
 8011fce:	d102      	bne.n	8011fd6 <_isatty_r+0x1a>
 8011fd0:	682b      	ldr	r3, [r5, #0]
 8011fd2:	b103      	cbz	r3, 8011fd6 <_isatty_r+0x1a>
 8011fd4:	6023      	str	r3, [r4, #0]
 8011fd6:	bd38      	pop	{r3, r4, r5, pc}
 8011fd8:	20003f44 	.word	0x20003f44

08011fdc <_sbrk_r>:
 8011fdc:	b538      	push	{r3, r4, r5, lr}
 8011fde:	4d06      	ldr	r5, [pc, #24]	@ (8011ff8 <_sbrk_r+0x1c>)
 8011fe0:	2300      	movs	r3, #0
 8011fe2:	4604      	mov	r4, r0
 8011fe4:	4608      	mov	r0, r1
 8011fe6:	602b      	str	r3, [r5, #0]
 8011fe8:	f7f1 ffa8 	bl	8003f3c <_sbrk>
 8011fec:	1c43      	adds	r3, r0, #1
 8011fee:	d102      	bne.n	8011ff6 <_sbrk_r+0x1a>
 8011ff0:	682b      	ldr	r3, [r5, #0]
 8011ff2:	b103      	cbz	r3, 8011ff6 <_sbrk_r+0x1a>
 8011ff4:	6023      	str	r3, [r4, #0]
 8011ff6:	bd38      	pop	{r3, r4, r5, pc}
 8011ff8:	20003f44 	.word	0x20003f44
 8011ffc:	00000000 	.word	0x00000000

08012000 <nan>:
 8012000:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8012008 <nan+0x8>
 8012004:	4770      	bx	lr
 8012006:	bf00      	nop
 8012008:	00000000 	.word	0x00000000
 801200c:	7ff80000 	.word	0x7ff80000

08012010 <__assert_func>:
 8012010:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012012:	4614      	mov	r4, r2
 8012014:	461a      	mov	r2, r3
 8012016:	4b09      	ldr	r3, [pc, #36]	@ (801203c <__assert_func+0x2c>)
 8012018:	681b      	ldr	r3, [r3, #0]
 801201a:	4605      	mov	r5, r0
 801201c:	68d8      	ldr	r0, [r3, #12]
 801201e:	b954      	cbnz	r4, 8012036 <__assert_func+0x26>
 8012020:	4b07      	ldr	r3, [pc, #28]	@ (8012040 <__assert_func+0x30>)
 8012022:	461c      	mov	r4, r3
 8012024:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012028:	9100      	str	r1, [sp, #0]
 801202a:	462b      	mov	r3, r5
 801202c:	4905      	ldr	r1, [pc, #20]	@ (8012044 <__assert_func+0x34>)
 801202e:	f000 fba7 	bl	8012780 <fiprintf>
 8012032:	f000 fbb7 	bl	80127a4 <abort>
 8012036:	4b04      	ldr	r3, [pc, #16]	@ (8012048 <__assert_func+0x38>)
 8012038:	e7f4      	b.n	8012024 <__assert_func+0x14>
 801203a:	bf00      	nop
 801203c:	20000040 	.word	0x20000040
 8012040:	08014475 	.word	0x08014475
 8012044:	08014447 	.word	0x08014447
 8012048:	0801443a 	.word	0x0801443a

0801204c <_calloc_r>:
 801204c:	b570      	push	{r4, r5, r6, lr}
 801204e:	fba1 5402 	umull	r5, r4, r1, r2
 8012052:	b93c      	cbnz	r4, 8012064 <_calloc_r+0x18>
 8012054:	4629      	mov	r1, r5
 8012056:	f7fd ffc7 	bl	800ffe8 <_malloc_r>
 801205a:	4606      	mov	r6, r0
 801205c:	b928      	cbnz	r0, 801206a <_calloc_r+0x1e>
 801205e:	2600      	movs	r6, #0
 8012060:	4630      	mov	r0, r6
 8012062:	bd70      	pop	{r4, r5, r6, pc}
 8012064:	220c      	movs	r2, #12
 8012066:	6002      	str	r2, [r0, #0]
 8012068:	e7f9      	b.n	801205e <_calloc_r+0x12>
 801206a:	462a      	mov	r2, r5
 801206c:	4621      	mov	r1, r4
 801206e:	f7fd f84f 	bl	800f110 <memset>
 8012072:	e7f5      	b.n	8012060 <_calloc_r+0x14>

08012074 <rshift>:
 8012074:	6903      	ldr	r3, [r0, #16]
 8012076:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801207a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801207e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8012082:	f100 0414 	add.w	r4, r0, #20
 8012086:	dd45      	ble.n	8012114 <rshift+0xa0>
 8012088:	f011 011f 	ands.w	r1, r1, #31
 801208c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8012090:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8012094:	d10c      	bne.n	80120b0 <rshift+0x3c>
 8012096:	f100 0710 	add.w	r7, r0, #16
 801209a:	4629      	mov	r1, r5
 801209c:	42b1      	cmp	r1, r6
 801209e:	d334      	bcc.n	801210a <rshift+0x96>
 80120a0:	1a9b      	subs	r3, r3, r2
 80120a2:	009b      	lsls	r3, r3, #2
 80120a4:	1eea      	subs	r2, r5, #3
 80120a6:	4296      	cmp	r6, r2
 80120a8:	bf38      	it	cc
 80120aa:	2300      	movcc	r3, #0
 80120ac:	4423      	add	r3, r4
 80120ae:	e015      	b.n	80120dc <rshift+0x68>
 80120b0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80120b4:	f1c1 0820 	rsb	r8, r1, #32
 80120b8:	40cf      	lsrs	r7, r1
 80120ba:	f105 0e04 	add.w	lr, r5, #4
 80120be:	46a1      	mov	r9, r4
 80120c0:	4576      	cmp	r6, lr
 80120c2:	46f4      	mov	ip, lr
 80120c4:	d815      	bhi.n	80120f2 <rshift+0x7e>
 80120c6:	1a9a      	subs	r2, r3, r2
 80120c8:	0092      	lsls	r2, r2, #2
 80120ca:	3a04      	subs	r2, #4
 80120cc:	3501      	adds	r5, #1
 80120ce:	42ae      	cmp	r6, r5
 80120d0:	bf38      	it	cc
 80120d2:	2200      	movcc	r2, #0
 80120d4:	18a3      	adds	r3, r4, r2
 80120d6:	50a7      	str	r7, [r4, r2]
 80120d8:	b107      	cbz	r7, 80120dc <rshift+0x68>
 80120da:	3304      	adds	r3, #4
 80120dc:	1b1a      	subs	r2, r3, r4
 80120de:	42a3      	cmp	r3, r4
 80120e0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80120e4:	bf08      	it	eq
 80120e6:	2300      	moveq	r3, #0
 80120e8:	6102      	str	r2, [r0, #16]
 80120ea:	bf08      	it	eq
 80120ec:	6143      	streq	r3, [r0, #20]
 80120ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80120f2:	f8dc c000 	ldr.w	ip, [ip]
 80120f6:	fa0c fc08 	lsl.w	ip, ip, r8
 80120fa:	ea4c 0707 	orr.w	r7, ip, r7
 80120fe:	f849 7b04 	str.w	r7, [r9], #4
 8012102:	f85e 7b04 	ldr.w	r7, [lr], #4
 8012106:	40cf      	lsrs	r7, r1
 8012108:	e7da      	b.n	80120c0 <rshift+0x4c>
 801210a:	f851 cb04 	ldr.w	ip, [r1], #4
 801210e:	f847 cf04 	str.w	ip, [r7, #4]!
 8012112:	e7c3      	b.n	801209c <rshift+0x28>
 8012114:	4623      	mov	r3, r4
 8012116:	e7e1      	b.n	80120dc <rshift+0x68>

08012118 <__hexdig_fun>:
 8012118:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801211c:	2b09      	cmp	r3, #9
 801211e:	d802      	bhi.n	8012126 <__hexdig_fun+0xe>
 8012120:	3820      	subs	r0, #32
 8012122:	b2c0      	uxtb	r0, r0
 8012124:	4770      	bx	lr
 8012126:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801212a:	2b05      	cmp	r3, #5
 801212c:	d801      	bhi.n	8012132 <__hexdig_fun+0x1a>
 801212e:	3847      	subs	r0, #71	@ 0x47
 8012130:	e7f7      	b.n	8012122 <__hexdig_fun+0xa>
 8012132:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8012136:	2b05      	cmp	r3, #5
 8012138:	d801      	bhi.n	801213e <__hexdig_fun+0x26>
 801213a:	3827      	subs	r0, #39	@ 0x27
 801213c:	e7f1      	b.n	8012122 <__hexdig_fun+0xa>
 801213e:	2000      	movs	r0, #0
 8012140:	4770      	bx	lr
	...

08012144 <__gethex>:
 8012144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012148:	b085      	sub	sp, #20
 801214a:	468a      	mov	sl, r1
 801214c:	9302      	str	r3, [sp, #8]
 801214e:	680b      	ldr	r3, [r1, #0]
 8012150:	9001      	str	r0, [sp, #4]
 8012152:	4690      	mov	r8, r2
 8012154:	1c9c      	adds	r4, r3, #2
 8012156:	46a1      	mov	r9, r4
 8012158:	f814 0b01 	ldrb.w	r0, [r4], #1
 801215c:	2830      	cmp	r0, #48	@ 0x30
 801215e:	d0fa      	beq.n	8012156 <__gethex+0x12>
 8012160:	eba9 0303 	sub.w	r3, r9, r3
 8012164:	f1a3 0b02 	sub.w	fp, r3, #2
 8012168:	f7ff ffd6 	bl	8012118 <__hexdig_fun>
 801216c:	4605      	mov	r5, r0
 801216e:	2800      	cmp	r0, #0
 8012170:	d168      	bne.n	8012244 <__gethex+0x100>
 8012172:	49a0      	ldr	r1, [pc, #640]	@ (80123f4 <__gethex+0x2b0>)
 8012174:	2201      	movs	r2, #1
 8012176:	4648      	mov	r0, r9
 8012178:	f7ff fefb 	bl	8011f72 <strncmp>
 801217c:	4607      	mov	r7, r0
 801217e:	2800      	cmp	r0, #0
 8012180:	d167      	bne.n	8012252 <__gethex+0x10e>
 8012182:	f899 0001 	ldrb.w	r0, [r9, #1]
 8012186:	4626      	mov	r6, r4
 8012188:	f7ff ffc6 	bl	8012118 <__hexdig_fun>
 801218c:	2800      	cmp	r0, #0
 801218e:	d062      	beq.n	8012256 <__gethex+0x112>
 8012190:	4623      	mov	r3, r4
 8012192:	7818      	ldrb	r0, [r3, #0]
 8012194:	2830      	cmp	r0, #48	@ 0x30
 8012196:	4699      	mov	r9, r3
 8012198:	f103 0301 	add.w	r3, r3, #1
 801219c:	d0f9      	beq.n	8012192 <__gethex+0x4e>
 801219e:	f7ff ffbb 	bl	8012118 <__hexdig_fun>
 80121a2:	fab0 f580 	clz	r5, r0
 80121a6:	096d      	lsrs	r5, r5, #5
 80121a8:	f04f 0b01 	mov.w	fp, #1
 80121ac:	464a      	mov	r2, r9
 80121ae:	4616      	mov	r6, r2
 80121b0:	3201      	adds	r2, #1
 80121b2:	7830      	ldrb	r0, [r6, #0]
 80121b4:	f7ff ffb0 	bl	8012118 <__hexdig_fun>
 80121b8:	2800      	cmp	r0, #0
 80121ba:	d1f8      	bne.n	80121ae <__gethex+0x6a>
 80121bc:	498d      	ldr	r1, [pc, #564]	@ (80123f4 <__gethex+0x2b0>)
 80121be:	2201      	movs	r2, #1
 80121c0:	4630      	mov	r0, r6
 80121c2:	f7ff fed6 	bl	8011f72 <strncmp>
 80121c6:	2800      	cmp	r0, #0
 80121c8:	d13f      	bne.n	801224a <__gethex+0x106>
 80121ca:	b944      	cbnz	r4, 80121de <__gethex+0x9a>
 80121cc:	1c74      	adds	r4, r6, #1
 80121ce:	4622      	mov	r2, r4
 80121d0:	4616      	mov	r6, r2
 80121d2:	3201      	adds	r2, #1
 80121d4:	7830      	ldrb	r0, [r6, #0]
 80121d6:	f7ff ff9f 	bl	8012118 <__hexdig_fun>
 80121da:	2800      	cmp	r0, #0
 80121dc:	d1f8      	bne.n	80121d0 <__gethex+0x8c>
 80121de:	1ba4      	subs	r4, r4, r6
 80121e0:	00a7      	lsls	r7, r4, #2
 80121e2:	7833      	ldrb	r3, [r6, #0]
 80121e4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80121e8:	2b50      	cmp	r3, #80	@ 0x50
 80121ea:	d13e      	bne.n	801226a <__gethex+0x126>
 80121ec:	7873      	ldrb	r3, [r6, #1]
 80121ee:	2b2b      	cmp	r3, #43	@ 0x2b
 80121f0:	d033      	beq.n	801225a <__gethex+0x116>
 80121f2:	2b2d      	cmp	r3, #45	@ 0x2d
 80121f4:	d034      	beq.n	8012260 <__gethex+0x11c>
 80121f6:	1c71      	adds	r1, r6, #1
 80121f8:	2400      	movs	r4, #0
 80121fa:	7808      	ldrb	r0, [r1, #0]
 80121fc:	f7ff ff8c 	bl	8012118 <__hexdig_fun>
 8012200:	1e43      	subs	r3, r0, #1
 8012202:	b2db      	uxtb	r3, r3
 8012204:	2b18      	cmp	r3, #24
 8012206:	d830      	bhi.n	801226a <__gethex+0x126>
 8012208:	f1a0 0210 	sub.w	r2, r0, #16
 801220c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012210:	f7ff ff82 	bl	8012118 <__hexdig_fun>
 8012214:	f100 3cff 	add.w	ip, r0, #4294967295
 8012218:	fa5f fc8c 	uxtb.w	ip, ip
 801221c:	f1bc 0f18 	cmp.w	ip, #24
 8012220:	f04f 030a 	mov.w	r3, #10
 8012224:	d91e      	bls.n	8012264 <__gethex+0x120>
 8012226:	b104      	cbz	r4, 801222a <__gethex+0xe6>
 8012228:	4252      	negs	r2, r2
 801222a:	4417      	add	r7, r2
 801222c:	f8ca 1000 	str.w	r1, [sl]
 8012230:	b1ed      	cbz	r5, 801226e <__gethex+0x12a>
 8012232:	f1bb 0f00 	cmp.w	fp, #0
 8012236:	bf0c      	ite	eq
 8012238:	2506      	moveq	r5, #6
 801223a:	2500      	movne	r5, #0
 801223c:	4628      	mov	r0, r5
 801223e:	b005      	add	sp, #20
 8012240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012244:	2500      	movs	r5, #0
 8012246:	462c      	mov	r4, r5
 8012248:	e7b0      	b.n	80121ac <__gethex+0x68>
 801224a:	2c00      	cmp	r4, #0
 801224c:	d1c7      	bne.n	80121de <__gethex+0x9a>
 801224e:	4627      	mov	r7, r4
 8012250:	e7c7      	b.n	80121e2 <__gethex+0x9e>
 8012252:	464e      	mov	r6, r9
 8012254:	462f      	mov	r7, r5
 8012256:	2501      	movs	r5, #1
 8012258:	e7c3      	b.n	80121e2 <__gethex+0x9e>
 801225a:	2400      	movs	r4, #0
 801225c:	1cb1      	adds	r1, r6, #2
 801225e:	e7cc      	b.n	80121fa <__gethex+0xb6>
 8012260:	2401      	movs	r4, #1
 8012262:	e7fb      	b.n	801225c <__gethex+0x118>
 8012264:	fb03 0002 	mla	r0, r3, r2, r0
 8012268:	e7ce      	b.n	8012208 <__gethex+0xc4>
 801226a:	4631      	mov	r1, r6
 801226c:	e7de      	b.n	801222c <__gethex+0xe8>
 801226e:	eba6 0309 	sub.w	r3, r6, r9
 8012272:	3b01      	subs	r3, #1
 8012274:	4629      	mov	r1, r5
 8012276:	2b07      	cmp	r3, #7
 8012278:	dc0a      	bgt.n	8012290 <__gethex+0x14c>
 801227a:	9801      	ldr	r0, [sp, #4]
 801227c:	f7fd ff40 	bl	8010100 <_Balloc>
 8012280:	4604      	mov	r4, r0
 8012282:	b940      	cbnz	r0, 8012296 <__gethex+0x152>
 8012284:	4b5c      	ldr	r3, [pc, #368]	@ (80123f8 <__gethex+0x2b4>)
 8012286:	4602      	mov	r2, r0
 8012288:	21e4      	movs	r1, #228	@ 0xe4
 801228a:	485c      	ldr	r0, [pc, #368]	@ (80123fc <__gethex+0x2b8>)
 801228c:	f7ff fec0 	bl	8012010 <__assert_func>
 8012290:	3101      	adds	r1, #1
 8012292:	105b      	asrs	r3, r3, #1
 8012294:	e7ef      	b.n	8012276 <__gethex+0x132>
 8012296:	f100 0a14 	add.w	sl, r0, #20
 801229a:	2300      	movs	r3, #0
 801229c:	4655      	mov	r5, sl
 801229e:	469b      	mov	fp, r3
 80122a0:	45b1      	cmp	r9, r6
 80122a2:	d337      	bcc.n	8012314 <__gethex+0x1d0>
 80122a4:	f845 bb04 	str.w	fp, [r5], #4
 80122a8:	eba5 050a 	sub.w	r5, r5, sl
 80122ac:	10ad      	asrs	r5, r5, #2
 80122ae:	6125      	str	r5, [r4, #16]
 80122b0:	4658      	mov	r0, fp
 80122b2:	f7fe f817 	bl	80102e4 <__hi0bits>
 80122b6:	016d      	lsls	r5, r5, #5
 80122b8:	f8d8 6000 	ldr.w	r6, [r8]
 80122bc:	1a2d      	subs	r5, r5, r0
 80122be:	42b5      	cmp	r5, r6
 80122c0:	dd54      	ble.n	801236c <__gethex+0x228>
 80122c2:	1bad      	subs	r5, r5, r6
 80122c4:	4629      	mov	r1, r5
 80122c6:	4620      	mov	r0, r4
 80122c8:	f7fe fbab 	bl	8010a22 <__any_on>
 80122cc:	4681      	mov	r9, r0
 80122ce:	b178      	cbz	r0, 80122f0 <__gethex+0x1ac>
 80122d0:	1e6b      	subs	r3, r5, #1
 80122d2:	1159      	asrs	r1, r3, #5
 80122d4:	f003 021f 	and.w	r2, r3, #31
 80122d8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80122dc:	f04f 0901 	mov.w	r9, #1
 80122e0:	fa09 f202 	lsl.w	r2, r9, r2
 80122e4:	420a      	tst	r2, r1
 80122e6:	d003      	beq.n	80122f0 <__gethex+0x1ac>
 80122e8:	454b      	cmp	r3, r9
 80122ea:	dc36      	bgt.n	801235a <__gethex+0x216>
 80122ec:	f04f 0902 	mov.w	r9, #2
 80122f0:	4629      	mov	r1, r5
 80122f2:	4620      	mov	r0, r4
 80122f4:	f7ff febe 	bl	8012074 <rshift>
 80122f8:	442f      	add	r7, r5
 80122fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80122fe:	42bb      	cmp	r3, r7
 8012300:	da42      	bge.n	8012388 <__gethex+0x244>
 8012302:	9801      	ldr	r0, [sp, #4]
 8012304:	4621      	mov	r1, r4
 8012306:	f7fd ff3b 	bl	8010180 <_Bfree>
 801230a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801230c:	2300      	movs	r3, #0
 801230e:	6013      	str	r3, [r2, #0]
 8012310:	25a3      	movs	r5, #163	@ 0xa3
 8012312:	e793      	b.n	801223c <__gethex+0xf8>
 8012314:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8012318:	2a2e      	cmp	r2, #46	@ 0x2e
 801231a:	d012      	beq.n	8012342 <__gethex+0x1fe>
 801231c:	2b20      	cmp	r3, #32
 801231e:	d104      	bne.n	801232a <__gethex+0x1e6>
 8012320:	f845 bb04 	str.w	fp, [r5], #4
 8012324:	f04f 0b00 	mov.w	fp, #0
 8012328:	465b      	mov	r3, fp
 801232a:	7830      	ldrb	r0, [r6, #0]
 801232c:	9303      	str	r3, [sp, #12]
 801232e:	f7ff fef3 	bl	8012118 <__hexdig_fun>
 8012332:	9b03      	ldr	r3, [sp, #12]
 8012334:	f000 000f 	and.w	r0, r0, #15
 8012338:	4098      	lsls	r0, r3
 801233a:	ea4b 0b00 	orr.w	fp, fp, r0
 801233e:	3304      	adds	r3, #4
 8012340:	e7ae      	b.n	80122a0 <__gethex+0x15c>
 8012342:	45b1      	cmp	r9, r6
 8012344:	d8ea      	bhi.n	801231c <__gethex+0x1d8>
 8012346:	492b      	ldr	r1, [pc, #172]	@ (80123f4 <__gethex+0x2b0>)
 8012348:	9303      	str	r3, [sp, #12]
 801234a:	2201      	movs	r2, #1
 801234c:	4630      	mov	r0, r6
 801234e:	f7ff fe10 	bl	8011f72 <strncmp>
 8012352:	9b03      	ldr	r3, [sp, #12]
 8012354:	2800      	cmp	r0, #0
 8012356:	d1e1      	bne.n	801231c <__gethex+0x1d8>
 8012358:	e7a2      	b.n	80122a0 <__gethex+0x15c>
 801235a:	1ea9      	subs	r1, r5, #2
 801235c:	4620      	mov	r0, r4
 801235e:	f7fe fb60 	bl	8010a22 <__any_on>
 8012362:	2800      	cmp	r0, #0
 8012364:	d0c2      	beq.n	80122ec <__gethex+0x1a8>
 8012366:	f04f 0903 	mov.w	r9, #3
 801236a:	e7c1      	b.n	80122f0 <__gethex+0x1ac>
 801236c:	da09      	bge.n	8012382 <__gethex+0x23e>
 801236e:	1b75      	subs	r5, r6, r5
 8012370:	4621      	mov	r1, r4
 8012372:	9801      	ldr	r0, [sp, #4]
 8012374:	462a      	mov	r2, r5
 8012376:	f7fe f91b 	bl	80105b0 <__lshift>
 801237a:	1b7f      	subs	r7, r7, r5
 801237c:	4604      	mov	r4, r0
 801237e:	f100 0a14 	add.w	sl, r0, #20
 8012382:	f04f 0900 	mov.w	r9, #0
 8012386:	e7b8      	b.n	80122fa <__gethex+0x1b6>
 8012388:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801238c:	42bd      	cmp	r5, r7
 801238e:	dd6f      	ble.n	8012470 <__gethex+0x32c>
 8012390:	1bed      	subs	r5, r5, r7
 8012392:	42ae      	cmp	r6, r5
 8012394:	dc34      	bgt.n	8012400 <__gethex+0x2bc>
 8012396:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801239a:	2b02      	cmp	r3, #2
 801239c:	d022      	beq.n	80123e4 <__gethex+0x2a0>
 801239e:	2b03      	cmp	r3, #3
 80123a0:	d024      	beq.n	80123ec <__gethex+0x2a8>
 80123a2:	2b01      	cmp	r3, #1
 80123a4:	d115      	bne.n	80123d2 <__gethex+0x28e>
 80123a6:	42ae      	cmp	r6, r5
 80123a8:	d113      	bne.n	80123d2 <__gethex+0x28e>
 80123aa:	2e01      	cmp	r6, #1
 80123ac:	d10b      	bne.n	80123c6 <__gethex+0x282>
 80123ae:	9a02      	ldr	r2, [sp, #8]
 80123b0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80123b4:	6013      	str	r3, [r2, #0]
 80123b6:	2301      	movs	r3, #1
 80123b8:	6123      	str	r3, [r4, #16]
 80123ba:	f8ca 3000 	str.w	r3, [sl]
 80123be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80123c0:	2562      	movs	r5, #98	@ 0x62
 80123c2:	601c      	str	r4, [r3, #0]
 80123c4:	e73a      	b.n	801223c <__gethex+0xf8>
 80123c6:	1e71      	subs	r1, r6, #1
 80123c8:	4620      	mov	r0, r4
 80123ca:	f7fe fb2a 	bl	8010a22 <__any_on>
 80123ce:	2800      	cmp	r0, #0
 80123d0:	d1ed      	bne.n	80123ae <__gethex+0x26a>
 80123d2:	9801      	ldr	r0, [sp, #4]
 80123d4:	4621      	mov	r1, r4
 80123d6:	f7fd fed3 	bl	8010180 <_Bfree>
 80123da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80123dc:	2300      	movs	r3, #0
 80123de:	6013      	str	r3, [r2, #0]
 80123e0:	2550      	movs	r5, #80	@ 0x50
 80123e2:	e72b      	b.n	801223c <__gethex+0xf8>
 80123e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	d1f3      	bne.n	80123d2 <__gethex+0x28e>
 80123ea:	e7e0      	b.n	80123ae <__gethex+0x26a>
 80123ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d1dd      	bne.n	80123ae <__gethex+0x26a>
 80123f2:	e7ee      	b.n	80123d2 <__gethex+0x28e>
 80123f4:	080142c8 	.word	0x080142c8
 80123f8:	0801415e 	.word	0x0801415e
 80123fc:	08014476 	.word	0x08014476
 8012400:	1e6f      	subs	r7, r5, #1
 8012402:	f1b9 0f00 	cmp.w	r9, #0
 8012406:	d130      	bne.n	801246a <__gethex+0x326>
 8012408:	b127      	cbz	r7, 8012414 <__gethex+0x2d0>
 801240a:	4639      	mov	r1, r7
 801240c:	4620      	mov	r0, r4
 801240e:	f7fe fb08 	bl	8010a22 <__any_on>
 8012412:	4681      	mov	r9, r0
 8012414:	117a      	asrs	r2, r7, #5
 8012416:	2301      	movs	r3, #1
 8012418:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801241c:	f007 071f 	and.w	r7, r7, #31
 8012420:	40bb      	lsls	r3, r7
 8012422:	4213      	tst	r3, r2
 8012424:	4629      	mov	r1, r5
 8012426:	4620      	mov	r0, r4
 8012428:	bf18      	it	ne
 801242a:	f049 0902 	orrne.w	r9, r9, #2
 801242e:	f7ff fe21 	bl	8012074 <rshift>
 8012432:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8012436:	1b76      	subs	r6, r6, r5
 8012438:	2502      	movs	r5, #2
 801243a:	f1b9 0f00 	cmp.w	r9, #0
 801243e:	d047      	beq.n	80124d0 <__gethex+0x38c>
 8012440:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012444:	2b02      	cmp	r3, #2
 8012446:	d015      	beq.n	8012474 <__gethex+0x330>
 8012448:	2b03      	cmp	r3, #3
 801244a:	d017      	beq.n	801247c <__gethex+0x338>
 801244c:	2b01      	cmp	r3, #1
 801244e:	d109      	bne.n	8012464 <__gethex+0x320>
 8012450:	f019 0f02 	tst.w	r9, #2
 8012454:	d006      	beq.n	8012464 <__gethex+0x320>
 8012456:	f8da 3000 	ldr.w	r3, [sl]
 801245a:	ea49 0903 	orr.w	r9, r9, r3
 801245e:	f019 0f01 	tst.w	r9, #1
 8012462:	d10e      	bne.n	8012482 <__gethex+0x33e>
 8012464:	f045 0510 	orr.w	r5, r5, #16
 8012468:	e032      	b.n	80124d0 <__gethex+0x38c>
 801246a:	f04f 0901 	mov.w	r9, #1
 801246e:	e7d1      	b.n	8012414 <__gethex+0x2d0>
 8012470:	2501      	movs	r5, #1
 8012472:	e7e2      	b.n	801243a <__gethex+0x2f6>
 8012474:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012476:	f1c3 0301 	rsb	r3, r3, #1
 801247a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801247c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801247e:	2b00      	cmp	r3, #0
 8012480:	d0f0      	beq.n	8012464 <__gethex+0x320>
 8012482:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8012486:	f104 0314 	add.w	r3, r4, #20
 801248a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801248e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8012492:	f04f 0c00 	mov.w	ip, #0
 8012496:	4618      	mov	r0, r3
 8012498:	f853 2b04 	ldr.w	r2, [r3], #4
 801249c:	f1b2 3fff 	cmp.w	r2, #4294967295
 80124a0:	d01b      	beq.n	80124da <__gethex+0x396>
 80124a2:	3201      	adds	r2, #1
 80124a4:	6002      	str	r2, [r0, #0]
 80124a6:	2d02      	cmp	r5, #2
 80124a8:	f104 0314 	add.w	r3, r4, #20
 80124ac:	d13c      	bne.n	8012528 <__gethex+0x3e4>
 80124ae:	f8d8 2000 	ldr.w	r2, [r8]
 80124b2:	3a01      	subs	r2, #1
 80124b4:	42b2      	cmp	r2, r6
 80124b6:	d109      	bne.n	80124cc <__gethex+0x388>
 80124b8:	1171      	asrs	r1, r6, #5
 80124ba:	2201      	movs	r2, #1
 80124bc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80124c0:	f006 061f 	and.w	r6, r6, #31
 80124c4:	fa02 f606 	lsl.w	r6, r2, r6
 80124c8:	421e      	tst	r6, r3
 80124ca:	d13a      	bne.n	8012542 <__gethex+0x3fe>
 80124cc:	f045 0520 	orr.w	r5, r5, #32
 80124d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80124d2:	601c      	str	r4, [r3, #0]
 80124d4:	9b02      	ldr	r3, [sp, #8]
 80124d6:	601f      	str	r7, [r3, #0]
 80124d8:	e6b0      	b.n	801223c <__gethex+0xf8>
 80124da:	4299      	cmp	r1, r3
 80124dc:	f843 cc04 	str.w	ip, [r3, #-4]
 80124e0:	d8d9      	bhi.n	8012496 <__gethex+0x352>
 80124e2:	68a3      	ldr	r3, [r4, #8]
 80124e4:	459b      	cmp	fp, r3
 80124e6:	db17      	blt.n	8012518 <__gethex+0x3d4>
 80124e8:	6861      	ldr	r1, [r4, #4]
 80124ea:	9801      	ldr	r0, [sp, #4]
 80124ec:	3101      	adds	r1, #1
 80124ee:	f7fd fe07 	bl	8010100 <_Balloc>
 80124f2:	4681      	mov	r9, r0
 80124f4:	b918      	cbnz	r0, 80124fe <__gethex+0x3ba>
 80124f6:	4b1a      	ldr	r3, [pc, #104]	@ (8012560 <__gethex+0x41c>)
 80124f8:	4602      	mov	r2, r0
 80124fa:	2184      	movs	r1, #132	@ 0x84
 80124fc:	e6c5      	b.n	801228a <__gethex+0x146>
 80124fe:	6922      	ldr	r2, [r4, #16]
 8012500:	3202      	adds	r2, #2
 8012502:	f104 010c 	add.w	r1, r4, #12
 8012506:	0092      	lsls	r2, r2, #2
 8012508:	300c      	adds	r0, #12
 801250a:	f7fc fe96 	bl	800f23a <memcpy>
 801250e:	4621      	mov	r1, r4
 8012510:	9801      	ldr	r0, [sp, #4]
 8012512:	f7fd fe35 	bl	8010180 <_Bfree>
 8012516:	464c      	mov	r4, r9
 8012518:	6923      	ldr	r3, [r4, #16]
 801251a:	1c5a      	adds	r2, r3, #1
 801251c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012520:	6122      	str	r2, [r4, #16]
 8012522:	2201      	movs	r2, #1
 8012524:	615a      	str	r2, [r3, #20]
 8012526:	e7be      	b.n	80124a6 <__gethex+0x362>
 8012528:	6922      	ldr	r2, [r4, #16]
 801252a:	455a      	cmp	r2, fp
 801252c:	dd0b      	ble.n	8012546 <__gethex+0x402>
 801252e:	2101      	movs	r1, #1
 8012530:	4620      	mov	r0, r4
 8012532:	f7ff fd9f 	bl	8012074 <rshift>
 8012536:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801253a:	3701      	adds	r7, #1
 801253c:	42bb      	cmp	r3, r7
 801253e:	f6ff aee0 	blt.w	8012302 <__gethex+0x1be>
 8012542:	2501      	movs	r5, #1
 8012544:	e7c2      	b.n	80124cc <__gethex+0x388>
 8012546:	f016 061f 	ands.w	r6, r6, #31
 801254a:	d0fa      	beq.n	8012542 <__gethex+0x3fe>
 801254c:	4453      	add	r3, sl
 801254e:	f1c6 0620 	rsb	r6, r6, #32
 8012552:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8012556:	f7fd fec5 	bl	80102e4 <__hi0bits>
 801255a:	42b0      	cmp	r0, r6
 801255c:	dbe7      	blt.n	801252e <__gethex+0x3ea>
 801255e:	e7f0      	b.n	8012542 <__gethex+0x3fe>
 8012560:	0801415e 	.word	0x0801415e

08012564 <L_shift>:
 8012564:	f1c2 0208 	rsb	r2, r2, #8
 8012568:	0092      	lsls	r2, r2, #2
 801256a:	b570      	push	{r4, r5, r6, lr}
 801256c:	f1c2 0620 	rsb	r6, r2, #32
 8012570:	6843      	ldr	r3, [r0, #4]
 8012572:	6804      	ldr	r4, [r0, #0]
 8012574:	fa03 f506 	lsl.w	r5, r3, r6
 8012578:	432c      	orrs	r4, r5
 801257a:	40d3      	lsrs	r3, r2
 801257c:	6004      	str	r4, [r0, #0]
 801257e:	f840 3f04 	str.w	r3, [r0, #4]!
 8012582:	4288      	cmp	r0, r1
 8012584:	d3f4      	bcc.n	8012570 <L_shift+0xc>
 8012586:	bd70      	pop	{r4, r5, r6, pc}

08012588 <__match>:
 8012588:	b530      	push	{r4, r5, lr}
 801258a:	6803      	ldr	r3, [r0, #0]
 801258c:	3301      	adds	r3, #1
 801258e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012592:	b914      	cbnz	r4, 801259a <__match+0x12>
 8012594:	6003      	str	r3, [r0, #0]
 8012596:	2001      	movs	r0, #1
 8012598:	bd30      	pop	{r4, r5, pc}
 801259a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801259e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80125a2:	2d19      	cmp	r5, #25
 80125a4:	bf98      	it	ls
 80125a6:	3220      	addls	r2, #32
 80125a8:	42a2      	cmp	r2, r4
 80125aa:	d0f0      	beq.n	801258e <__match+0x6>
 80125ac:	2000      	movs	r0, #0
 80125ae:	e7f3      	b.n	8012598 <__match+0x10>

080125b0 <__hexnan>:
 80125b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125b4:	680b      	ldr	r3, [r1, #0]
 80125b6:	6801      	ldr	r1, [r0, #0]
 80125b8:	115e      	asrs	r6, r3, #5
 80125ba:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80125be:	f013 031f 	ands.w	r3, r3, #31
 80125c2:	b087      	sub	sp, #28
 80125c4:	bf18      	it	ne
 80125c6:	3604      	addne	r6, #4
 80125c8:	2500      	movs	r5, #0
 80125ca:	1f37      	subs	r7, r6, #4
 80125cc:	4682      	mov	sl, r0
 80125ce:	4690      	mov	r8, r2
 80125d0:	9301      	str	r3, [sp, #4]
 80125d2:	f846 5c04 	str.w	r5, [r6, #-4]
 80125d6:	46b9      	mov	r9, r7
 80125d8:	463c      	mov	r4, r7
 80125da:	9502      	str	r5, [sp, #8]
 80125dc:	46ab      	mov	fp, r5
 80125de:	784a      	ldrb	r2, [r1, #1]
 80125e0:	1c4b      	adds	r3, r1, #1
 80125e2:	9303      	str	r3, [sp, #12]
 80125e4:	b342      	cbz	r2, 8012638 <__hexnan+0x88>
 80125e6:	4610      	mov	r0, r2
 80125e8:	9105      	str	r1, [sp, #20]
 80125ea:	9204      	str	r2, [sp, #16]
 80125ec:	f7ff fd94 	bl	8012118 <__hexdig_fun>
 80125f0:	2800      	cmp	r0, #0
 80125f2:	d151      	bne.n	8012698 <__hexnan+0xe8>
 80125f4:	9a04      	ldr	r2, [sp, #16]
 80125f6:	9905      	ldr	r1, [sp, #20]
 80125f8:	2a20      	cmp	r2, #32
 80125fa:	d818      	bhi.n	801262e <__hexnan+0x7e>
 80125fc:	9b02      	ldr	r3, [sp, #8]
 80125fe:	459b      	cmp	fp, r3
 8012600:	dd13      	ble.n	801262a <__hexnan+0x7a>
 8012602:	454c      	cmp	r4, r9
 8012604:	d206      	bcs.n	8012614 <__hexnan+0x64>
 8012606:	2d07      	cmp	r5, #7
 8012608:	dc04      	bgt.n	8012614 <__hexnan+0x64>
 801260a:	462a      	mov	r2, r5
 801260c:	4649      	mov	r1, r9
 801260e:	4620      	mov	r0, r4
 8012610:	f7ff ffa8 	bl	8012564 <L_shift>
 8012614:	4544      	cmp	r4, r8
 8012616:	d952      	bls.n	80126be <__hexnan+0x10e>
 8012618:	2300      	movs	r3, #0
 801261a:	f1a4 0904 	sub.w	r9, r4, #4
 801261e:	f844 3c04 	str.w	r3, [r4, #-4]
 8012622:	f8cd b008 	str.w	fp, [sp, #8]
 8012626:	464c      	mov	r4, r9
 8012628:	461d      	mov	r5, r3
 801262a:	9903      	ldr	r1, [sp, #12]
 801262c:	e7d7      	b.n	80125de <__hexnan+0x2e>
 801262e:	2a29      	cmp	r2, #41	@ 0x29
 8012630:	d157      	bne.n	80126e2 <__hexnan+0x132>
 8012632:	3102      	adds	r1, #2
 8012634:	f8ca 1000 	str.w	r1, [sl]
 8012638:	f1bb 0f00 	cmp.w	fp, #0
 801263c:	d051      	beq.n	80126e2 <__hexnan+0x132>
 801263e:	454c      	cmp	r4, r9
 8012640:	d206      	bcs.n	8012650 <__hexnan+0xa0>
 8012642:	2d07      	cmp	r5, #7
 8012644:	dc04      	bgt.n	8012650 <__hexnan+0xa0>
 8012646:	462a      	mov	r2, r5
 8012648:	4649      	mov	r1, r9
 801264a:	4620      	mov	r0, r4
 801264c:	f7ff ff8a 	bl	8012564 <L_shift>
 8012650:	4544      	cmp	r4, r8
 8012652:	d936      	bls.n	80126c2 <__hexnan+0x112>
 8012654:	f1a8 0204 	sub.w	r2, r8, #4
 8012658:	4623      	mov	r3, r4
 801265a:	f853 1b04 	ldr.w	r1, [r3], #4
 801265e:	f842 1f04 	str.w	r1, [r2, #4]!
 8012662:	429f      	cmp	r7, r3
 8012664:	d2f9      	bcs.n	801265a <__hexnan+0xaa>
 8012666:	1b3b      	subs	r3, r7, r4
 8012668:	f023 0303 	bic.w	r3, r3, #3
 801266c:	3304      	adds	r3, #4
 801266e:	3401      	adds	r4, #1
 8012670:	3e03      	subs	r6, #3
 8012672:	42b4      	cmp	r4, r6
 8012674:	bf88      	it	hi
 8012676:	2304      	movhi	r3, #4
 8012678:	4443      	add	r3, r8
 801267a:	2200      	movs	r2, #0
 801267c:	f843 2b04 	str.w	r2, [r3], #4
 8012680:	429f      	cmp	r7, r3
 8012682:	d2fb      	bcs.n	801267c <__hexnan+0xcc>
 8012684:	683b      	ldr	r3, [r7, #0]
 8012686:	b91b      	cbnz	r3, 8012690 <__hexnan+0xe0>
 8012688:	4547      	cmp	r7, r8
 801268a:	d128      	bne.n	80126de <__hexnan+0x12e>
 801268c:	2301      	movs	r3, #1
 801268e:	603b      	str	r3, [r7, #0]
 8012690:	2005      	movs	r0, #5
 8012692:	b007      	add	sp, #28
 8012694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012698:	3501      	adds	r5, #1
 801269a:	2d08      	cmp	r5, #8
 801269c:	f10b 0b01 	add.w	fp, fp, #1
 80126a0:	dd06      	ble.n	80126b0 <__hexnan+0x100>
 80126a2:	4544      	cmp	r4, r8
 80126a4:	d9c1      	bls.n	801262a <__hexnan+0x7a>
 80126a6:	2300      	movs	r3, #0
 80126a8:	f844 3c04 	str.w	r3, [r4, #-4]
 80126ac:	2501      	movs	r5, #1
 80126ae:	3c04      	subs	r4, #4
 80126b0:	6822      	ldr	r2, [r4, #0]
 80126b2:	f000 000f 	and.w	r0, r0, #15
 80126b6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80126ba:	6020      	str	r0, [r4, #0]
 80126bc:	e7b5      	b.n	801262a <__hexnan+0x7a>
 80126be:	2508      	movs	r5, #8
 80126c0:	e7b3      	b.n	801262a <__hexnan+0x7a>
 80126c2:	9b01      	ldr	r3, [sp, #4]
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	d0dd      	beq.n	8012684 <__hexnan+0xd4>
 80126c8:	f1c3 0320 	rsb	r3, r3, #32
 80126cc:	f04f 32ff 	mov.w	r2, #4294967295
 80126d0:	40da      	lsrs	r2, r3
 80126d2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80126d6:	4013      	ands	r3, r2
 80126d8:	f846 3c04 	str.w	r3, [r6, #-4]
 80126dc:	e7d2      	b.n	8012684 <__hexnan+0xd4>
 80126de:	3f04      	subs	r7, #4
 80126e0:	e7d0      	b.n	8012684 <__hexnan+0xd4>
 80126e2:	2004      	movs	r0, #4
 80126e4:	e7d5      	b.n	8012692 <__hexnan+0xe2>

080126e6 <__ascii_mbtowc>:
 80126e6:	b082      	sub	sp, #8
 80126e8:	b901      	cbnz	r1, 80126ec <__ascii_mbtowc+0x6>
 80126ea:	a901      	add	r1, sp, #4
 80126ec:	b142      	cbz	r2, 8012700 <__ascii_mbtowc+0x1a>
 80126ee:	b14b      	cbz	r3, 8012704 <__ascii_mbtowc+0x1e>
 80126f0:	7813      	ldrb	r3, [r2, #0]
 80126f2:	600b      	str	r3, [r1, #0]
 80126f4:	7812      	ldrb	r2, [r2, #0]
 80126f6:	1e10      	subs	r0, r2, #0
 80126f8:	bf18      	it	ne
 80126fa:	2001      	movne	r0, #1
 80126fc:	b002      	add	sp, #8
 80126fe:	4770      	bx	lr
 8012700:	4610      	mov	r0, r2
 8012702:	e7fb      	b.n	80126fc <__ascii_mbtowc+0x16>
 8012704:	f06f 0001 	mvn.w	r0, #1
 8012708:	e7f8      	b.n	80126fc <__ascii_mbtowc+0x16>

0801270a <_realloc_r>:
 801270a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801270e:	4680      	mov	r8, r0
 8012710:	4615      	mov	r5, r2
 8012712:	460c      	mov	r4, r1
 8012714:	b921      	cbnz	r1, 8012720 <_realloc_r+0x16>
 8012716:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801271a:	4611      	mov	r1, r2
 801271c:	f7fd bc64 	b.w	800ffe8 <_malloc_r>
 8012720:	b92a      	cbnz	r2, 801272e <_realloc_r+0x24>
 8012722:	f7fd fbed 	bl	800ff00 <_free_r>
 8012726:	2400      	movs	r4, #0
 8012728:	4620      	mov	r0, r4
 801272a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801272e:	f000 f840 	bl	80127b2 <_malloc_usable_size_r>
 8012732:	4285      	cmp	r5, r0
 8012734:	4606      	mov	r6, r0
 8012736:	d802      	bhi.n	801273e <_realloc_r+0x34>
 8012738:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801273c:	d8f4      	bhi.n	8012728 <_realloc_r+0x1e>
 801273e:	4629      	mov	r1, r5
 8012740:	4640      	mov	r0, r8
 8012742:	f7fd fc51 	bl	800ffe8 <_malloc_r>
 8012746:	4607      	mov	r7, r0
 8012748:	2800      	cmp	r0, #0
 801274a:	d0ec      	beq.n	8012726 <_realloc_r+0x1c>
 801274c:	42b5      	cmp	r5, r6
 801274e:	462a      	mov	r2, r5
 8012750:	4621      	mov	r1, r4
 8012752:	bf28      	it	cs
 8012754:	4632      	movcs	r2, r6
 8012756:	f7fc fd70 	bl	800f23a <memcpy>
 801275a:	4621      	mov	r1, r4
 801275c:	4640      	mov	r0, r8
 801275e:	f7fd fbcf 	bl	800ff00 <_free_r>
 8012762:	463c      	mov	r4, r7
 8012764:	e7e0      	b.n	8012728 <_realloc_r+0x1e>

08012766 <__ascii_wctomb>:
 8012766:	4603      	mov	r3, r0
 8012768:	4608      	mov	r0, r1
 801276a:	b141      	cbz	r1, 801277e <__ascii_wctomb+0x18>
 801276c:	2aff      	cmp	r2, #255	@ 0xff
 801276e:	d904      	bls.n	801277a <__ascii_wctomb+0x14>
 8012770:	228a      	movs	r2, #138	@ 0x8a
 8012772:	601a      	str	r2, [r3, #0]
 8012774:	f04f 30ff 	mov.w	r0, #4294967295
 8012778:	4770      	bx	lr
 801277a:	700a      	strb	r2, [r1, #0]
 801277c:	2001      	movs	r0, #1
 801277e:	4770      	bx	lr

08012780 <fiprintf>:
 8012780:	b40e      	push	{r1, r2, r3}
 8012782:	b503      	push	{r0, r1, lr}
 8012784:	4601      	mov	r1, r0
 8012786:	ab03      	add	r3, sp, #12
 8012788:	4805      	ldr	r0, [pc, #20]	@ (80127a0 <fiprintf+0x20>)
 801278a:	f853 2b04 	ldr.w	r2, [r3], #4
 801278e:	6800      	ldr	r0, [r0, #0]
 8012790:	9301      	str	r3, [sp, #4]
 8012792:	f7ff f96d 	bl	8011a70 <_vfiprintf_r>
 8012796:	b002      	add	sp, #8
 8012798:	f85d eb04 	ldr.w	lr, [sp], #4
 801279c:	b003      	add	sp, #12
 801279e:	4770      	bx	lr
 80127a0:	20000040 	.word	0x20000040

080127a4 <abort>:
 80127a4:	b508      	push	{r3, lr}
 80127a6:	2006      	movs	r0, #6
 80127a8:	f000 f834 	bl	8012814 <raise>
 80127ac:	2001      	movs	r0, #1
 80127ae:	f7f1 fb69 	bl	8003e84 <_exit>

080127b2 <_malloc_usable_size_r>:
 80127b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80127b6:	1f18      	subs	r0, r3, #4
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	bfbc      	itt	lt
 80127bc:	580b      	ldrlt	r3, [r1, r0]
 80127be:	18c0      	addlt	r0, r0, r3
 80127c0:	4770      	bx	lr

080127c2 <_raise_r>:
 80127c2:	291f      	cmp	r1, #31
 80127c4:	b538      	push	{r3, r4, r5, lr}
 80127c6:	4605      	mov	r5, r0
 80127c8:	460c      	mov	r4, r1
 80127ca:	d904      	bls.n	80127d6 <_raise_r+0x14>
 80127cc:	2316      	movs	r3, #22
 80127ce:	6003      	str	r3, [r0, #0]
 80127d0:	f04f 30ff 	mov.w	r0, #4294967295
 80127d4:	bd38      	pop	{r3, r4, r5, pc}
 80127d6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80127d8:	b112      	cbz	r2, 80127e0 <_raise_r+0x1e>
 80127da:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80127de:	b94b      	cbnz	r3, 80127f4 <_raise_r+0x32>
 80127e0:	4628      	mov	r0, r5
 80127e2:	f000 f831 	bl	8012848 <_getpid_r>
 80127e6:	4622      	mov	r2, r4
 80127e8:	4601      	mov	r1, r0
 80127ea:	4628      	mov	r0, r5
 80127ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80127f0:	f000 b818 	b.w	8012824 <_kill_r>
 80127f4:	2b01      	cmp	r3, #1
 80127f6:	d00a      	beq.n	801280e <_raise_r+0x4c>
 80127f8:	1c59      	adds	r1, r3, #1
 80127fa:	d103      	bne.n	8012804 <_raise_r+0x42>
 80127fc:	2316      	movs	r3, #22
 80127fe:	6003      	str	r3, [r0, #0]
 8012800:	2001      	movs	r0, #1
 8012802:	e7e7      	b.n	80127d4 <_raise_r+0x12>
 8012804:	2100      	movs	r1, #0
 8012806:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801280a:	4620      	mov	r0, r4
 801280c:	4798      	blx	r3
 801280e:	2000      	movs	r0, #0
 8012810:	e7e0      	b.n	80127d4 <_raise_r+0x12>
	...

08012814 <raise>:
 8012814:	4b02      	ldr	r3, [pc, #8]	@ (8012820 <raise+0xc>)
 8012816:	4601      	mov	r1, r0
 8012818:	6818      	ldr	r0, [r3, #0]
 801281a:	f7ff bfd2 	b.w	80127c2 <_raise_r>
 801281e:	bf00      	nop
 8012820:	20000040 	.word	0x20000040

08012824 <_kill_r>:
 8012824:	b538      	push	{r3, r4, r5, lr}
 8012826:	4d07      	ldr	r5, [pc, #28]	@ (8012844 <_kill_r+0x20>)
 8012828:	2300      	movs	r3, #0
 801282a:	4604      	mov	r4, r0
 801282c:	4608      	mov	r0, r1
 801282e:	4611      	mov	r1, r2
 8012830:	602b      	str	r3, [r5, #0]
 8012832:	f7f1 fb17 	bl	8003e64 <_kill>
 8012836:	1c43      	adds	r3, r0, #1
 8012838:	d102      	bne.n	8012840 <_kill_r+0x1c>
 801283a:	682b      	ldr	r3, [r5, #0]
 801283c:	b103      	cbz	r3, 8012840 <_kill_r+0x1c>
 801283e:	6023      	str	r3, [r4, #0]
 8012840:	bd38      	pop	{r3, r4, r5, pc}
 8012842:	bf00      	nop
 8012844:	20003f44 	.word	0x20003f44

08012848 <_getpid_r>:
 8012848:	f7f1 bb04 	b.w	8003e54 <_getpid>

0801284c <_init>:
 801284c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801284e:	bf00      	nop
 8012850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012852:	bc08      	pop	{r3}
 8012854:	469e      	mov	lr, r3
 8012856:	4770      	bx	lr

08012858 <_fini>:
 8012858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801285a:	bf00      	nop
 801285c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801285e:	bc08      	pop	{r3}
 8012860:	469e      	mov	lr, r3
 8012862:	4770      	bx	lr
