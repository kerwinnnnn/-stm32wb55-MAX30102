
BLE_PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011fc4  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b88  08012108  08012108  00013108  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08013c90  08013c90  00014c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08013c98  08013c98  00014c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08013c9c  08013c9c  00014c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001f0  20000008  08013ca0  00015008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  200001f8  08013e90  000151f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000230  08013ec5  00015230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000353c  20000244  08013ed6  00015244  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003780  08013ed6  00015780  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00016a67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00017000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00017000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  08013ed6  000161e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   00032ca0  00000000  00000000  00016a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000076db  00000000  00000000  00049737  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002ca8  00000000  00000000  00050e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000221b  00000000  00000000  00053ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00030372  00000000  00000000  00055cdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00039a36  00000000  00000000  0008604d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000fd989  00000000  00000000  000bfa83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  001bd40c  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000ce48  00000000  00000000  001bd450  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000054  00000000  00000000  001ca298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000244 	.word	0x20000244
 800015c:	00000000 	.word	0x00000000
 8000160:	080120ec 	.word	0x080120ec

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000248 	.word	0x20000248
 800017c:	080120ec 	.word	0x080120ec

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b9a0 	b.w	8000f90 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f83c 	bl	8000cd4 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_d2lz>:
 8000c68:	b538      	push	{r3, r4, r5, lr}
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	4604      	mov	r4, r0
 8000c70:	460d      	mov	r5, r1
 8000c72:	f7ff ff0b 	bl	8000a8c <__aeabi_dcmplt>
 8000c76:	b928      	cbnz	r0, 8000c84 <__aeabi_d2lz+0x1c>
 8000c78:	4620      	mov	r0, r4
 8000c7a:	4629      	mov	r1, r5
 8000c7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c80:	f000 b80a 	b.w	8000c98 <__aeabi_d2ulz>
 8000c84:	4620      	mov	r0, r4
 8000c86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c8a:	f000 f805 	bl	8000c98 <__aeabi_d2ulz>
 8000c8e:	4240      	negs	r0, r0
 8000c90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c94:	bd38      	pop	{r3, r4, r5, pc}
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2ulz>:
 8000c98:	b5d0      	push	{r4, r6, r7, lr}
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000ccc <__aeabi_d2ulz+0x34>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	4606      	mov	r6, r0
 8000ca0:	460f      	mov	r7, r1
 8000ca2:	f7ff fc81 	bl	80005a8 <__aeabi_dmul>
 8000ca6:	f7ff ff57 	bl	8000b58 <__aeabi_d2uiz>
 8000caa:	4604      	mov	r4, r0
 8000cac:	f7ff fc02 	bl	80004b4 <__aeabi_ui2d>
 8000cb0:	4b07      	ldr	r3, [pc, #28]	@ (8000cd0 <__aeabi_d2ulz+0x38>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f7ff fc78 	bl	80005a8 <__aeabi_dmul>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	460b      	mov	r3, r1
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	4639      	mov	r1, r7
 8000cc0:	f7ff faba 	bl	8000238 <__aeabi_dsub>
 8000cc4:	f7ff ff48 	bl	8000b58 <__aeabi_d2uiz>
 8000cc8:	4621      	mov	r1, r4
 8000cca:	bdd0      	pop	{r4, r6, r7, pc}
 8000ccc:	3df00000 	.word	0x3df00000
 8000cd0:	41f00000 	.word	0x41f00000

08000cd4 <__udivmoddi4>:
 8000cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd8:	9d08      	ldr	r5, [sp, #32]
 8000cda:	460c      	mov	r4, r1
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d14e      	bne.n	8000d7e <__udivmoddi4+0xaa>
 8000ce0:	4694      	mov	ip, r2
 8000ce2:	458c      	cmp	ip, r1
 8000ce4:	4686      	mov	lr, r0
 8000ce6:	fab2 f282 	clz	r2, r2
 8000cea:	d962      	bls.n	8000db2 <__udivmoddi4+0xde>
 8000cec:	b14a      	cbz	r2, 8000d02 <__udivmoddi4+0x2e>
 8000cee:	f1c2 0320 	rsb	r3, r2, #32
 8000cf2:	4091      	lsls	r1, r2
 8000cf4:	fa20 f303 	lsr.w	r3, r0, r3
 8000cf8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cfc:	4319      	orrs	r1, r3
 8000cfe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f f68c 	uxth.w	r6, ip
 8000d0a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb07 1114 	mls	r1, r7, r4, r1
 8000d16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1a:	fb04 f106 	mul.w	r1, r4, r6
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	d90a      	bls.n	8000d38 <__udivmoddi4+0x64>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d2a:	f080 8112 	bcs.w	8000f52 <__udivmoddi4+0x27e>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 810f 	bls.w	8000f52 <__udivmoddi4+0x27e>
 8000d34:	3c02      	subs	r4, #2
 8000d36:	4463      	add	r3, ip
 8000d38:	1a59      	subs	r1, r3, r1
 8000d3a:	fa1f f38e 	uxth.w	r3, lr
 8000d3e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d42:	fb07 1110 	mls	r1, r7, r0, r1
 8000d46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4a:	fb00 f606 	mul.w	r6, r0, r6
 8000d4e:	429e      	cmp	r6, r3
 8000d50:	d90a      	bls.n	8000d68 <__udivmoddi4+0x94>
 8000d52:	eb1c 0303 	adds.w	r3, ip, r3
 8000d56:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d5a:	f080 80fc 	bcs.w	8000f56 <__udivmoddi4+0x282>
 8000d5e:	429e      	cmp	r6, r3
 8000d60:	f240 80f9 	bls.w	8000f56 <__udivmoddi4+0x282>
 8000d64:	4463      	add	r3, ip
 8000d66:	3802      	subs	r0, #2
 8000d68:	1b9b      	subs	r3, r3, r6
 8000d6a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d6e:	2100      	movs	r1, #0
 8000d70:	b11d      	cbz	r5, 8000d7a <__udivmoddi4+0xa6>
 8000d72:	40d3      	lsrs	r3, r2
 8000d74:	2200      	movs	r2, #0
 8000d76:	e9c5 3200 	strd	r3, r2, [r5]
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d905      	bls.n	8000d8e <__udivmoddi4+0xba>
 8000d82:	b10d      	cbz	r5, 8000d88 <__udivmoddi4+0xb4>
 8000d84:	e9c5 0100 	strd	r0, r1, [r5]
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4608      	mov	r0, r1
 8000d8c:	e7f5      	b.n	8000d7a <__udivmoddi4+0xa6>
 8000d8e:	fab3 f183 	clz	r1, r3
 8000d92:	2900      	cmp	r1, #0
 8000d94:	d146      	bne.n	8000e24 <__udivmoddi4+0x150>
 8000d96:	42a3      	cmp	r3, r4
 8000d98:	d302      	bcc.n	8000da0 <__udivmoddi4+0xcc>
 8000d9a:	4290      	cmp	r0, r2
 8000d9c:	f0c0 80f0 	bcc.w	8000f80 <__udivmoddi4+0x2ac>
 8000da0:	1a86      	subs	r6, r0, r2
 8000da2:	eb64 0303 	sbc.w	r3, r4, r3
 8000da6:	2001      	movs	r0, #1
 8000da8:	2d00      	cmp	r5, #0
 8000daa:	d0e6      	beq.n	8000d7a <__udivmoddi4+0xa6>
 8000dac:	e9c5 6300 	strd	r6, r3, [r5]
 8000db0:	e7e3      	b.n	8000d7a <__udivmoddi4+0xa6>
 8000db2:	2a00      	cmp	r2, #0
 8000db4:	f040 8090 	bne.w	8000ed8 <__udivmoddi4+0x204>
 8000db8:	eba1 040c 	sub.w	r4, r1, ip
 8000dbc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dc0:	fa1f f78c 	uxth.w	r7, ip
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dce:	fb08 4416 	mls	r4, r8, r6, r4
 8000dd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dd6:	fb07 f006 	mul.w	r0, r7, r6
 8000dda:	4298      	cmp	r0, r3
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0x11c>
 8000dde:	eb1c 0303 	adds.w	r3, ip, r3
 8000de2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000de6:	d202      	bcs.n	8000dee <__udivmoddi4+0x11a>
 8000de8:	4298      	cmp	r0, r3
 8000dea:	f200 80cd 	bhi.w	8000f88 <__udivmoddi4+0x2b4>
 8000dee:	4626      	mov	r6, r4
 8000df0:	1a1c      	subs	r4, r3, r0
 8000df2:	fa1f f38e 	uxth.w	r3, lr
 8000df6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dfa:	fb08 4410 	mls	r4, r8, r0, r4
 8000dfe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e02:	fb00 f707 	mul.w	r7, r0, r7
 8000e06:	429f      	cmp	r7, r3
 8000e08:	d908      	bls.n	8000e1c <__udivmoddi4+0x148>
 8000e0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e0e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x146>
 8000e14:	429f      	cmp	r7, r3
 8000e16:	f200 80b0 	bhi.w	8000f7a <__udivmoddi4+0x2a6>
 8000e1a:	4620      	mov	r0, r4
 8000e1c:	1bdb      	subs	r3, r3, r7
 8000e1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e22:	e7a5      	b.n	8000d70 <__udivmoddi4+0x9c>
 8000e24:	f1c1 0620 	rsb	r6, r1, #32
 8000e28:	408b      	lsls	r3, r1
 8000e2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e2e:	431f      	orrs	r7, r3
 8000e30:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e34:	fa04 f301 	lsl.w	r3, r4, r1
 8000e38:	ea43 030c 	orr.w	r3, r3, ip
 8000e3c:	40f4      	lsrs	r4, r6
 8000e3e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e42:	0c38      	lsrs	r0, r7, #16
 8000e44:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e48:	fbb4 fef0 	udiv	lr, r4, r0
 8000e4c:	fa1f fc87 	uxth.w	ip, r7
 8000e50:	fb00 441e 	mls	r4, r0, lr, r4
 8000e54:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e58:	fb0e f90c 	mul.w	r9, lr, ip
 8000e5c:	45a1      	cmp	r9, r4
 8000e5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e62:	d90a      	bls.n	8000e7a <__udivmoddi4+0x1a6>
 8000e64:	193c      	adds	r4, r7, r4
 8000e66:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e6a:	f080 8084 	bcs.w	8000f76 <__udivmoddi4+0x2a2>
 8000e6e:	45a1      	cmp	r9, r4
 8000e70:	f240 8081 	bls.w	8000f76 <__udivmoddi4+0x2a2>
 8000e74:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e78:	443c      	add	r4, r7
 8000e7a:	eba4 0409 	sub.w	r4, r4, r9
 8000e7e:	fa1f f983 	uxth.w	r9, r3
 8000e82:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e86:	fb00 4413 	mls	r4, r0, r3, r4
 8000e8a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e8e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e92:	45a4      	cmp	ip, r4
 8000e94:	d907      	bls.n	8000ea6 <__udivmoddi4+0x1d2>
 8000e96:	193c      	adds	r4, r7, r4
 8000e98:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e9c:	d267      	bcs.n	8000f6e <__udivmoddi4+0x29a>
 8000e9e:	45a4      	cmp	ip, r4
 8000ea0:	d965      	bls.n	8000f6e <__udivmoddi4+0x29a>
 8000ea2:	3b02      	subs	r3, #2
 8000ea4:	443c      	add	r4, r7
 8000ea6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000eaa:	fba0 9302 	umull	r9, r3, r0, r2
 8000eae:	eba4 040c 	sub.w	r4, r4, ip
 8000eb2:	429c      	cmp	r4, r3
 8000eb4:	46ce      	mov	lr, r9
 8000eb6:	469c      	mov	ip, r3
 8000eb8:	d351      	bcc.n	8000f5e <__udivmoddi4+0x28a>
 8000eba:	d04e      	beq.n	8000f5a <__udivmoddi4+0x286>
 8000ebc:	b155      	cbz	r5, 8000ed4 <__udivmoddi4+0x200>
 8000ebe:	ebb8 030e 	subs.w	r3, r8, lr
 8000ec2:	eb64 040c 	sbc.w	r4, r4, ip
 8000ec6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eca:	40cb      	lsrs	r3, r1
 8000ecc:	431e      	orrs	r6, r3
 8000ece:	40cc      	lsrs	r4, r1
 8000ed0:	e9c5 6400 	strd	r6, r4, [r5]
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	e750      	b.n	8000d7a <__udivmoddi4+0xa6>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f103 	lsr.w	r1, r0, r3
 8000ee0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ee4:	fa24 f303 	lsr.w	r3, r4, r3
 8000ee8:	4094      	lsls	r4, r2
 8000eea:	430c      	orrs	r4, r1
 8000eec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ef0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ef4:	fa1f f78c 	uxth.w	r7, ip
 8000ef8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000efc:	fb08 3110 	mls	r1, r8, r0, r3
 8000f00:	0c23      	lsrs	r3, r4, #16
 8000f02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f06:	fb00 f107 	mul.w	r1, r0, r7
 8000f0a:	4299      	cmp	r1, r3
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x24c>
 8000f0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f12:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f16:	d22c      	bcs.n	8000f72 <__udivmoddi4+0x29e>
 8000f18:	4299      	cmp	r1, r3
 8000f1a:	d92a      	bls.n	8000f72 <__udivmoddi4+0x29e>
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	4463      	add	r3, ip
 8000f20:	1a5b      	subs	r3, r3, r1
 8000f22:	b2a4      	uxth	r4, r4
 8000f24:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f28:	fb08 3311 	mls	r3, r8, r1, r3
 8000f2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f30:	fb01 f307 	mul.w	r3, r1, r7
 8000f34:	42a3      	cmp	r3, r4
 8000f36:	d908      	bls.n	8000f4a <__udivmoddi4+0x276>
 8000f38:	eb1c 0404 	adds.w	r4, ip, r4
 8000f3c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f40:	d213      	bcs.n	8000f6a <__udivmoddi4+0x296>
 8000f42:	42a3      	cmp	r3, r4
 8000f44:	d911      	bls.n	8000f6a <__udivmoddi4+0x296>
 8000f46:	3902      	subs	r1, #2
 8000f48:	4464      	add	r4, ip
 8000f4a:	1ae4      	subs	r4, r4, r3
 8000f4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f50:	e739      	b.n	8000dc6 <__udivmoddi4+0xf2>
 8000f52:	4604      	mov	r4, r0
 8000f54:	e6f0      	b.n	8000d38 <__udivmoddi4+0x64>
 8000f56:	4608      	mov	r0, r1
 8000f58:	e706      	b.n	8000d68 <__udivmoddi4+0x94>
 8000f5a:	45c8      	cmp	r8, r9
 8000f5c:	d2ae      	bcs.n	8000ebc <__udivmoddi4+0x1e8>
 8000f5e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f62:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f66:	3801      	subs	r0, #1
 8000f68:	e7a8      	b.n	8000ebc <__udivmoddi4+0x1e8>
 8000f6a:	4631      	mov	r1, r6
 8000f6c:	e7ed      	b.n	8000f4a <__udivmoddi4+0x276>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	e799      	b.n	8000ea6 <__udivmoddi4+0x1d2>
 8000f72:	4630      	mov	r0, r6
 8000f74:	e7d4      	b.n	8000f20 <__udivmoddi4+0x24c>
 8000f76:	46d6      	mov	lr, sl
 8000f78:	e77f      	b.n	8000e7a <__udivmoddi4+0x1a6>
 8000f7a:	4463      	add	r3, ip
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	e74d      	b.n	8000e1c <__udivmoddi4+0x148>
 8000f80:	4606      	mov	r6, r0
 8000f82:	4623      	mov	r3, r4
 8000f84:	4608      	mov	r0, r1
 8000f86:	e70f      	b.n	8000da8 <__udivmoddi4+0xd4>
 8000f88:	3e02      	subs	r6, #2
 8000f8a:	4463      	add	r3, ip
 8000f8c:	e730      	b.n	8000df0 <__udivmoddi4+0x11c>
 8000f8e:	bf00      	nop

08000f90 <__aeabi_idiv0>:
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <max30102_Reg_Write>:
//	max30102_Reg_Write(REG_LED1_PA, current);
//
//}

void max30102_Reg_Write(uint8_t Register_Address,uint8_t Data)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b088      	sub	sp, #32
 8000f98:	af04      	add	r7, sp, #16
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	460a      	mov	r2, r1
 8000f9e:	71fb      	strb	r3, [r7, #7]
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0]=Register_Address;
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	733b      	strb	r3, [r7, #12]
	buf[1]=Data;
 8000fa8:	79bb      	ldrb	r3, [r7, #6]
 8000faa:	737b      	strb	r3, [r7, #13]
	if(HAL_I2C_Mem_Write(&hi2c1,I2C_WRITE_ADDR, buf[0], I2C_MEMADD_SIZE_8BIT,&buf[1], 2, HAL_MAX_DELAY)!=HAL_OK)
 8000fac:	7b3b      	ldrb	r3, [r7, #12]
 8000fae:	461a      	mov	r2, r3
 8000fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb4:	9302      	str	r3, [sp, #8]
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	9301      	str	r3, [sp, #4]
 8000fba:	f107 030c 	add.w	r3, r7, #12
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	9300      	str	r3, [sp, #0]
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	21ae      	movs	r1, #174	@ 0xae
 8000fc6:	4806      	ldr	r0, [pc, #24]	@ (8000fe0 <max30102_Reg_Write+0x4c>)
 8000fc8:	f003 fdd4 	bl	8004b74 <HAL_I2C_Mem_Write>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d002      	beq.n	8000fd8 <max30102_Reg_Write+0x44>
		printf("IIC write error");
 8000fd2:	4804      	ldr	r0, [pc, #16]	@ (8000fe4 <max30102_Reg_Write+0x50>)
 8000fd4:	f00d fb7e 	bl	800e6d4 <iprintf>
}
 8000fd8:	bf00      	nop
 8000fda:	3710      	adds	r7, #16
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	20002254 	.word	0x20002254
 8000fe4:	08012108 	.word	0x08012108

08000fe8 <max30102_Reg_Read>:

void max30102_Reg_Read(uint8_t Register_Address,uint8_t *Data)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b088      	sub	sp, #32
 8000fec:	af04      	add	r7, sp, #16
 8000fee:	4603      	mov	r3, r0
 8000ff0:	6039      	str	r1, [r7, #0]
 8000ff2:	71fb      	strb	r3, [r7, #7]
	uint8_t buf[2];
	buf[0]=Register_Address;
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	733b      	strb	r3, [r7, #12]
	if(HAL_I2C_Mem_Read(&hi2c1,I2C_READ_ADDR, buf[0], I2C_MEMADD_SIZE_8BIT,&buf[1], 1, HAL_MAX_DELAY)!=HAL_OK)
 8000ff8:	7b3b      	ldrb	r3, [r7, #12]
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	f04f 33ff 	mov.w	r3, #4294967295
 8001000:	9302      	str	r3, [sp, #8]
 8001002:	2301      	movs	r3, #1
 8001004:	9301      	str	r3, [sp, #4]
 8001006:	f107 030c 	add.w	r3, r7, #12
 800100a:	3301      	adds	r3, #1
 800100c:	9300      	str	r3, [sp, #0]
 800100e:	2301      	movs	r3, #1
 8001010:	21af      	movs	r1, #175	@ 0xaf
 8001012:	4808      	ldr	r0, [pc, #32]	@ (8001034 <max30102_Reg_Read+0x4c>)
 8001014:	f003 fec2 	bl	8004d9c <HAL_I2C_Mem_Read>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d002      	beq.n	8001024 <max30102_Reg_Read+0x3c>
		printf("IIC read error");
 800101e:	4806      	ldr	r0, [pc, #24]	@ (8001038 <max30102_Reg_Read+0x50>)
 8001020:	f00d fb58 	bl	800e6d4 <iprintf>
	*Data=buf[1];
 8001024:	7b7a      	ldrb	r2, [r7, #13]
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	701a      	strb	r2, [r3, #0]
}
 800102a:	bf00      	nop
 800102c:	3710      	adds	r7, #16
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20002254 	.word	0x20002254
 8001038:	08012118 	.word	0x08012118

0800103c <max30102_FIFO_ReadBytes>:

void max30102_FIFO_ReadBytes(uint32_t *Red_Data,uint32_t *IR_Data)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b08a      	sub	sp, #40	@ 0x28
 8001040:	af04      	add	r7, sp, #16
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
	uint8_t data[6];
	uint8_t temp;
	max30102_Reg_Read(REG_INTR_STATUS_1,&temp);
 8001046:	f107 030f 	add.w	r3, r7, #15
 800104a:	4619      	mov	r1, r3
 800104c:	2000      	movs	r0, #0
 800104e:	f7ff ffcb 	bl	8000fe8 <max30102_Reg_Read>
	max30102_Reg_Read(REG_INTR_STATUS_2,&temp);
 8001052:	f107 030f 	add.w	r3, r7, #15
 8001056:	4619      	mov	r1, r3
 8001058:	2001      	movs	r0, #1
 800105a:	f7ff ffc5 	bl	8000fe8 <max30102_Reg_Read>
	if(HAL_I2C_Mem_Read(&hi2c1,I2C_READ_ADDR, REG_FIFO_DATA, I2C_MEMADD_SIZE_8BIT,data, 6, HAL_MAX_DELAY)!=HAL_OK)
 800105e:	f04f 33ff 	mov.w	r3, #4294967295
 8001062:	9302      	str	r3, [sp, #8]
 8001064:	2306      	movs	r3, #6
 8001066:	9301      	str	r3, [sp, #4]
 8001068:	f107 0310 	add.w	r3, r7, #16
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	2301      	movs	r3, #1
 8001070:	2207      	movs	r2, #7
 8001072:	21af      	movs	r1, #175	@ 0xaf
 8001074:	480f      	ldr	r0, [pc, #60]	@ (80010b4 <max30102_FIFO_ReadBytes+0x78>)
 8001076:	f003 fe91 	bl	8004d9c <HAL_I2C_Mem_Read>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d002      	beq.n	8001086 <max30102_FIFO_ReadBytes+0x4a>
		printf("FIFO read error");
 8001080:	480d      	ldr	r0, [pc, #52]	@ (80010b8 <max30102_FIFO_ReadBytes+0x7c>)
 8001082:	f00d fb27 	bl	800e6d4 <iprintf>

	*Red_Data = ((uint32_t)data[0] << 16) | ((uint32_t)data[1] << 8) | (uint32_t)data[2];
 8001086:	7c3b      	ldrb	r3, [r7, #16]
 8001088:	041a      	lsls	r2, r3, #16
 800108a:	7c7b      	ldrb	r3, [r7, #17]
 800108c:	021b      	lsls	r3, r3, #8
 800108e:	4313      	orrs	r3, r2
 8001090:	7cba      	ldrb	r2, [r7, #18]
 8001092:	431a      	orrs	r2, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	601a      	str	r2, [r3, #0]
	*IR_Data = ((uint32_t)data[3] << 16) | ((uint32_t)data[4] << 8) | (uint32_t)data[5];
 8001098:	7cfb      	ldrb	r3, [r7, #19]
 800109a:	041a      	lsls	r2, r3, #16
 800109c:	7d3b      	ldrb	r3, [r7, #20]
 800109e:	021b      	lsls	r3, r3, #8
 80010a0:	4313      	orrs	r3, r2
 80010a2:	7d7a      	ldrb	r2, [r7, #21]
 80010a4:	431a      	orrs	r2, r3
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	601a      	str	r2, [r3, #0]


}
 80010aa:	bf00      	nop
 80010ac:	3718      	adds	r7, #24
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	20002254 	.word	0x20002254
 80010b8:	08012128 	.word	0x08012128

080010bc <max30102_Init>:
void max30102_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
	max30102_Reg_Write(REG_MODE_CONFIG,0x40);//MAX30102reset
 80010c0:	2140      	movs	r1, #64	@ 0x40
 80010c2:	2009      	movs	r0, #9
 80010c4:	f7ff ff66 	bl	8000f94 <max30102_Reg_Write>

	max30102_Reg_Write(REG_INTR_ENABLE_1,0xc0);	// INTR setting
 80010c8:	21c0      	movs	r1, #192	@ 0xc0
 80010ca:	2002      	movs	r0, #2
 80010cc:	f7ff ff62 	bl	8000f94 <max30102_Reg_Write>
	max30102_Reg_Write(REG_INTR_ENABLE_2,0x00);
 80010d0:	2100      	movs	r1, #0
 80010d2:	2003      	movs	r0, #3
 80010d4:	f7ff ff5e 	bl	8000f94 <max30102_Reg_Write>
	max30102_Reg_Write(REG_FIFO_WR_PTR,0x00);  	//FIFO_WR_PTR[4:0]
 80010d8:	2100      	movs	r1, #0
 80010da:	2004      	movs	r0, #4
 80010dc:	f7ff ff5a 	bl	8000f94 <max30102_Reg_Write>
	max30102_Reg_Write(REG_OVF_COUNTER,0x00);  	//OVF_COUNTER[4:0]
 80010e0:	2100      	movs	r1, #0
 80010e2:	2005      	movs	r0, #5
 80010e4:	f7ff ff56 	bl	8000f94 <max30102_Reg_Write>
	max30102_Reg_Write(REG_FIFO_RD_PTR,0x00);  	//FIFO_RD_PTR[4:0]
 80010e8:	2100      	movs	r1, #0
 80010ea:	2006      	movs	r0, #6
 80010ec:	f7ff ff52 	bl	8000f94 <max30102_Reg_Write>
	max30102_Reg_Write(REG_FIFO_CONFIG,0x0f);  	//sample avg = 1, fifo rollover=false, fifo almost full = 17
 80010f0:	210f      	movs	r1, #15
 80010f2:	2008      	movs	r0, #8
 80010f4:	f7ff ff4e 	bl	8000f94 <max30102_Reg_Write>
	max30102_Reg_Write(REG_MODE_CONFIG,0x03);  	//0x02 for Red only, 0x03 for SpO2 mode 0x07 multimode LED
 80010f8:	2103      	movs	r1, #3
 80010fa:	2009      	movs	r0, #9
 80010fc:	f7ff ff4a 	bl	8000f94 <max30102_Reg_Write>
	max30102_Reg_Write(REG_SPO2_CONFIG,0x27);  	// SPO2_ADC range = 4096nA, SPO2 sample rate (100 Hz), LED pulseWidth (400uS)
 8001100:	2127      	movs	r1, #39	@ 0x27
 8001102:	200a      	movs	r0, #10
 8001104:	f7ff ff46 	bl	8000f94 <max30102_Reg_Write>
	max30102_Reg_Write(REG_LED1_PA,0x2f);   	//Choose value for ~ 7mA for LED1
 8001108:	212f      	movs	r1, #47	@ 0x2f
 800110a:	200c      	movs	r0, #12
 800110c:	f7ff ff42 	bl	8000f94 <max30102_Reg_Write>
	max30102_Reg_Write(REG_LED2_PA,0x2f);   	// Choose value for ~ 7mA for LED2
 8001110:	212f      	movs	r1, #47	@ 0x2f
 8001112:	200d      	movs	r0, #13
 8001114:	f7ff ff3e 	bl	8000f94 <max30102_Reg_Write>
	max30102_Reg_Write(REG_PILOT_PA,0x7f);   	// Choose value for ~ 25mA for Pilot LED
 8001118:	217f      	movs	r1, #127	@ 0x7f
 800111a:	2010      	movs	r0, #16
 800111c:	f7ff ff3a 	bl	8000f94 <max30102_Reg_Write>
}
 8001120:	bf00      	nop
 8001122:	bd80      	pop	{r7, pc}

08001124 <max30102_Calculate_HR_BO_Value>:



void max30102_Calculate_HR_BO_Value(uint8_t* HR_Value,uint8_t* BO_Value)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08a      	sub	sp, #40	@ 0x28
 8001128:	af02      	add	r7, sp, #8
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
	int i;
	int32_t prev_data;

	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7)>0);
 800112e:	bf00      	nop
 8001130:	2180      	movs	r1, #128	@ 0x80
 8001132:	4868      	ldr	r0, [pc, #416]	@ (80012d4 <max30102_Calculate_HR_BO_Value+0x1b0>)
 8001134:	f003 fc2e 	bl	8004994 <HAL_GPIO_ReadPin>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d1f8      	bne.n	8001130 <max30102_Calculate_HR_BO_Value+0xc>
	uint32_t min=0x3FFFF;
 800113e:	4b66      	ldr	r3, [pc, #408]	@ (80012d8 <max30102_Calculate_HR_BO_Value+0x1b4>)
 8001140:	61bb      	str	r3, [r7, #24]
	uint32_t max=0;
 8001142:	2300      	movs	r3, #0
 8001144:	617b      	str	r3, [r7, #20]
	for(i=100;i<500;i++)
 8001146:	2364      	movs	r3, #100	@ 0x64
 8001148:	61fb      	str	r3, [r7, #28]
 800114a:	e02c      	b.n	80011a6 <max30102_Calculate_HR_BO_Value+0x82>
		{
			ir_buffer[i-100]=ir_buffer[i];//保持数据的连续性
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	3b64      	subs	r3, #100	@ 0x64
 8001150:	4962      	ldr	r1, [pc, #392]	@ (80012dc <max30102_Calculate_HR_BO_Value+0x1b8>)
 8001152:	69fa      	ldr	r2, [r7, #28]
 8001154:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001158:	4960      	ldr	r1, [pc, #384]	@ (80012dc <max30102_Calculate_HR_BO_Value+0x1b8>)
 800115a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			red_buffer[i-100]=red_buffer[i];
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	3b64      	subs	r3, #100	@ 0x64
 8001162:	495f      	ldr	r1, [pc, #380]	@ (80012e0 <max30102_Calculate_HR_BO_Value+0x1bc>)
 8001164:	69fa      	ldr	r2, [r7, #28]
 8001166:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800116a:	495d      	ldr	r1, [pc, #372]	@ (80012e0 <max30102_Calculate_HR_BO_Value+0x1bc>)
 800116c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(min>red_buffer[i])
 8001170:	4a5b      	ldr	r2, [pc, #364]	@ (80012e0 <max30102_Calculate_HR_BO_Value+0x1bc>)
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	429a      	cmp	r2, r3
 800117c:	d904      	bls.n	8001188 <max30102_Calculate_HR_BO_Value+0x64>
				{
				  min=red_buffer[i];
 800117e:	4a58      	ldr	r2, [pc, #352]	@ (80012e0 <max30102_Calculate_HR_BO_Value+0x1bc>)
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001186:	61bb      	str	r3, [r7, #24]
				};
			if(max<red_buffer[i])
 8001188:	4a55      	ldr	r2, [pc, #340]	@ (80012e0 <max30102_Calculate_HR_BO_Value+0x1bc>)
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001190:	697a      	ldr	r2, [r7, #20]
 8001192:	429a      	cmp	r2, r3
 8001194:	d204      	bcs.n	80011a0 <max30102_Calculate_HR_BO_Value+0x7c>
			  	{
				  max=red_buffer[i];
 8001196:	4a52      	ldr	r2, [pc, #328]	@ (80012e0 <max30102_Calculate_HR_BO_Value+0x1bc>)
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800119e:	617b      	str	r3, [r7, #20]
	for(i=100;i<500;i++)
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	3301      	adds	r3, #1
 80011a4:	61fb      	str	r3, [r7, #28]
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80011ac:	dbce      	blt.n	800114c <max30102_Calculate_HR_BO_Value+0x28>
			  	};

		 }


	for(i=400;i<500;i++)
 80011ae:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80011b2:	61fb      	str	r3, [r7, #28]
 80011b4:	e071      	b.n	800129a <max30102_Calculate_HR_BO_Value+0x176>
		{
			max30102_FIFO_ReadBytes((ir_buffer+i),(red_buffer+i));
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	4a48      	ldr	r2, [pc, #288]	@ (80012dc <max30102_Calculate_HR_BO_Value+0x1b8>)
 80011bc:	441a      	add	r2, r3
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	4947      	ldr	r1, [pc, #284]	@ (80012e0 <max30102_Calculate_HR_BO_Value+0x1bc>)
 80011c4:	440b      	add	r3, r1
 80011c6:	4619      	mov	r1, r3
 80011c8:	4610      	mov	r0, r2
 80011ca:	f7ff ff37 	bl	800103c <max30102_FIFO_ReadBytes>
			prev_data=red_buffer[i-1];
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	3b01      	subs	r3, #1
 80011d2:	4a43      	ldr	r2, [pc, #268]	@ (80012e0 <max30102_Calculate_HR_BO_Value+0x1bc>)
 80011d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011d8:	60fb      	str	r3, [r7, #12]
			float f_temp=red_buffer[i]-prev_data;
 80011da:	4a41      	ldr	r2, [pc, #260]	@ (80012e0 <max30102_Calculate_HR_BO_Value+0x1bc>)
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	ee07 3a90 	vmov	s15, r3
 80011ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011ee:	edc7 7a04 	vstr	s15, [r7, #16]
			if(f_temp>0)
 80011f2:	edd7 7a04 	vldr	s15, [r7, #16]
 80011f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011fe:	dd1d      	ble.n	800123c <max30102_Calculate_HR_BO_Value+0x118>
			  {
				if(max==min)
 8001200:	697a      	ldr	r2, [r7, #20]
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	429a      	cmp	r2, r3
 8001206:	d103      	bne.n	8001210 <max30102_Calculate_HR_BO_Value+0xec>
				{
					f_temp=0;
 8001208:	f04f 0300 	mov.w	r3, #0
 800120c:	613b      	str	r3, [r7, #16]
 800120e:	e032      	b.n	8001276 <max30102_Calculate_HR_BO_Value+0x152>
				}
				else
				{
					f_temp*=MAX_BRIGHTNESS;
 8001210:	edd7 7a04 	vldr	s15, [r7, #16]
 8001214:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 80012e4 <max30102_Calculate_HR_BO_Value+0x1c0>
 8001218:	ee67 7a87 	vmul.f32	s15, s15, s14
 800121c:	edc7 7a04 	vstr	s15, [r7, #16]
					f_temp/=max-min;
 8001220:	697a      	ldr	r2, [r7, #20]
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	ee07 3a90 	vmov	s15, r3
 800122a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800122e:	edd7 6a04 	vldr	s13, [r7, #16]
 8001232:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001236:	edc7 7a04 	vstr	s15, [r7, #16]
 800123a:	e01c      	b.n	8001276 <max30102_Calculate_HR_BO_Value+0x152>
				}
			  }
			else
			  {
				if(max==min)
 800123c:	697a      	ldr	r2, [r7, #20]
 800123e:	69bb      	ldr	r3, [r7, #24]
 8001240:	429a      	cmp	r2, r3
 8001242:	d103      	bne.n	800124c <max30102_Calculate_HR_BO_Value+0x128>
					{
						f_temp=0;
 8001244:	f04f 0300 	mov.w	r3, #0
 8001248:	613b      	str	r3, [r7, #16]
 800124a:	e014      	b.n	8001276 <max30102_Calculate_HR_BO_Value+0x152>
					}
				else{
					f_temp*=MAX_BRIGHTNESS;
 800124c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001250:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 80012e4 <max30102_Calculate_HR_BO_Value+0x1c0>
 8001254:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001258:	edc7 7a04 	vstr	s15, [r7, #16]
					f_temp/=min-max;
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	ee07 3a90 	vmov	s15, r3
 8001266:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800126a:	edd7 6a04 	vldr	s13, [r7, #16]
 800126e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001272:	edc7 7a04 	vstr	s15, [r7, #16]
				    }

			  }
			 n_brightness=f_temp;
 8001276:	edd7 7a04 	vldr	s15, [r7, #16]
 800127a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800127e:	ee17 2a90 	vmov	r2, s15
 8001282:	4b19      	ldr	r3, [pc, #100]	@ (80012e8 <max30102_Calculate_HR_BO_Value+0x1c4>)
 8001284:	601a      	str	r2, [r3, #0]
			 if(n_brightness<0)
				  {
					 n_brightness=0;
				  }
			 if(n_brightness>MAX_BRIGHTNESS)
 8001286:	4b18      	ldr	r3, [pc, #96]	@ (80012e8 <max30102_Calculate_HR_BO_Value+0x1c4>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	2bff      	cmp	r3, #255	@ 0xff
 800128c:	d902      	bls.n	8001294 <max30102_Calculate_HR_BO_Value+0x170>
				  {
					 n_brightness=MAX_BRIGHTNESS;
 800128e:	4b16      	ldr	r3, [pc, #88]	@ (80012e8 <max30102_Calculate_HR_BO_Value+0x1c4>)
 8001290:	22ff      	movs	r2, #255	@ 0xff
 8001292:	601a      	str	r2, [r3, #0]
	for(i=400;i<500;i++)
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	3301      	adds	r3, #1
 8001298:	61fb      	str	r3, [r7, #28]
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80012a0:	db89      	blt.n	80011b6 <max30102_Calculate_HR_BO_Value+0x92>
				  }
			 //adjust_Current(n_brightness);
		  }


		 calculate_hr_spo2(ir_buffer, red_buffer, buffer_length, &n_heart_rate, &n_sp02,SAMPLE_RATE);
 80012a2:	4b12      	ldr	r3, [pc, #72]	@ (80012ec <max30102_Calculate_HR_BO_Value+0x1c8>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	b29a      	uxth	r2, r3
 80012a8:	2364      	movs	r3, #100	@ 0x64
 80012aa:	9301      	str	r3, [sp, #4]
 80012ac:	4b10      	ldr	r3, [pc, #64]	@ (80012f0 <max30102_Calculate_HR_BO_Value+0x1cc>)
 80012ae:	9300      	str	r3, [sp, #0]
 80012b0:	4b10      	ldr	r3, [pc, #64]	@ (80012f4 <max30102_Calculate_HR_BO_Value+0x1d0>)
 80012b2:	490b      	ldr	r1, [pc, #44]	@ (80012e0 <max30102_Calculate_HR_BO_Value+0x1bc>)
 80012b4:	4809      	ldr	r0, [pc, #36]	@ (80012dc <max30102_Calculate_HR_BO_Value+0x1b8>)
 80012b6:	f000 f8b9 	bl	800142c <calculate_hr_spo2>
		  *HR_Value=n_heart_rate;
 80012ba:	4b0e      	ldr	r3, [pc, #56]	@ (80012f4 <max30102_Calculate_HR_BO_Value+0x1d0>)
 80012bc:	781a      	ldrb	r2, [r3, #0]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	701a      	strb	r2, [r3, #0]
		  *BO_Value=n_sp02;
 80012c2:	4b0b      	ldr	r3, [pc, #44]	@ (80012f0 <max30102_Calculate_HR_BO_Value+0x1cc>)
 80012c4:	781a      	ldrb	r2, [r3, #0]
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	701a      	strb	r2, [r3, #0]

}
 80012ca:	bf00      	nop
 80012cc:	3720      	adds	r7, #32
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	48000400 	.word	0x48000400
 80012d8:	0003ffff 	.word	0x0003ffff
 80012dc:	20000260 	.word	0x20000260
 80012e0:	20000a30 	.word	0x20000a30
 80012e4:	437f0000 	.word	0x437f0000
 80012e8:	20001204 	.word	0x20001204
 80012ec:	20000008 	.word	0x20000008
 80012f0:	20001200 	.word	0x20001200
 80012f4:	20001201 	.word	0x20001201

080012f8 <dc_remove>:

#define ALPHA 0.3  // 直流滤波系数
#define WINDOW_SIZE 5  // 均值滤波窗口大小
#define THRESHOLD_PERIODS 3  // 动态阈值计算的周期数

static float dc_remove(float x, float *prev_w) {
 80012f8:	b5b0      	push	{r4, r5, r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	ed87 0a01 	vstr	s0, [r7, #4]
 8001302:	6038      	str	r0, [r7, #0]
    float y = x - *prev_w + ALPHA * (*prev_w);
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	edd3 7a00 	vldr	s15, [r3]
 800130a:	ed97 7a01 	vldr	s14, [r7, #4]
 800130e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001312:	ee17 0a90 	vmov	r0, s15
 8001316:	f7ff f8ef 	bl	80004f8 <__aeabi_f2d>
 800131a:	4604      	mov	r4, r0
 800131c:	460d      	mov	r5, r1
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff f8e8 	bl	80004f8 <__aeabi_f2d>
 8001328:	a30f      	add	r3, pc, #60	@ (adr r3, 8001368 <dc_remove+0x70>)
 800132a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800132e:	f7ff f93b 	bl	80005a8 <__aeabi_dmul>
 8001332:	4602      	mov	r2, r0
 8001334:	460b      	mov	r3, r1
 8001336:	4620      	mov	r0, r4
 8001338:	4629      	mov	r1, r5
 800133a:	f7fe ff7f 	bl	800023c <__adddf3>
 800133e:	4602      	mov	r2, r0
 8001340:	460b      	mov	r3, r1
 8001342:	4610      	mov	r0, r2
 8001344:	4619      	mov	r1, r3
 8001346:	f7ff fc27 	bl	8000b98 <__aeabi_d2f>
 800134a:	4603      	mov	r3, r0
 800134c:	60fb      	str	r3, [r7, #12]
    *prev_w = x;
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	687a      	ldr	r2, [r7, #4]
 8001352:	601a      	str	r2, [r3, #0]
    return y;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	ee07 3a90 	vmov	s15, r3
}
 800135a:	eeb0 0a67 	vmov.f32	s0, s15
 800135e:	3710      	adds	r7, #16
 8001360:	46bd      	mov	sp, r7
 8001362:	bdb0      	pop	{r4, r5, r7, pc}
 8001364:	f3af 8000 	nop.w
 8001368:	33333333 	.word	0x33333333
 800136c:	3fd33333 	.word	0x3fd33333

08001370 <moving_average_filter>:

static float moving_average_filter(float input, uint16_t index) {
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	ed87 0a01 	vstr	s0, [r7, #4]
 800137a:	4603      	mov	r3, r0
 800137c:	807b      	strh	r3, [r7, #2]
    static float buffer[500] = {0};
    static float sum = 0;
    static uint16_t count = 0;

    if (count >= WINDOW_SIZE) {
 800137e:	4b27      	ldr	r3, [pc, #156]	@ (800141c <moving_average_filter+0xac>)
 8001380:	881b      	ldrh	r3, [r3, #0]
 8001382:	2b04      	cmp	r3, #4
 8001384:	d917      	bls.n	80013b6 <moving_average_filter+0x46>
        sum -= buffer[index % WINDOW_SIZE];
 8001386:	4b26      	ldr	r3, [pc, #152]	@ (8001420 <moving_average_filter+0xb0>)
 8001388:	ed93 7a00 	vldr	s14, [r3]
 800138c:	887a      	ldrh	r2, [r7, #2]
 800138e:	4b25      	ldr	r3, [pc, #148]	@ (8001424 <moving_average_filter+0xb4>)
 8001390:	fba3 1302 	umull	r1, r3, r3, r2
 8001394:	0899      	lsrs	r1, r3, #2
 8001396:	460b      	mov	r3, r1
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	440b      	add	r3, r1
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	b29b      	uxth	r3, r3
 80013a0:	4a21      	ldr	r2, [pc, #132]	@ (8001428 <moving_average_filter+0xb8>)
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	4413      	add	r3, r2
 80013a6:	edd3 7a00 	vldr	s15, [r3]
 80013aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001420 <moving_average_filter+0xb0>)
 80013b0:	edc3 7a00 	vstr	s15, [r3]
 80013b4:	e005      	b.n	80013c2 <moving_average_filter+0x52>
    } else {
        count++;
 80013b6:	4b19      	ldr	r3, [pc, #100]	@ (800141c <moving_average_filter+0xac>)
 80013b8:	881b      	ldrh	r3, [r3, #0]
 80013ba:	3301      	adds	r3, #1
 80013bc:	b29a      	uxth	r2, r3
 80013be:	4b17      	ldr	r3, [pc, #92]	@ (800141c <moving_average_filter+0xac>)
 80013c0:	801a      	strh	r2, [r3, #0]
    }

    buffer[index % WINDOW_SIZE] = input;
 80013c2:	887a      	ldrh	r2, [r7, #2]
 80013c4:	4b17      	ldr	r3, [pc, #92]	@ (8001424 <moving_average_filter+0xb4>)
 80013c6:	fba3 1302 	umull	r1, r3, r3, r2
 80013ca:	0899      	lsrs	r1, r3, #2
 80013cc:	460b      	mov	r3, r1
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	440b      	add	r3, r1
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	4a14      	ldr	r2, [pc, #80]	@ (8001428 <moving_average_filter+0xb8>)
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	4413      	add	r3, r2
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	601a      	str	r2, [r3, #0]
    sum += input;
 80013e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001420 <moving_average_filter+0xb0>)
 80013e2:	ed93 7a00 	vldr	s14, [r3]
 80013e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80013ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001420 <moving_average_filter+0xb0>)
 80013f0:	edc3 7a00 	vstr	s15, [r3]

    return sum / count;
 80013f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001420 <moving_average_filter+0xb0>)
 80013f6:	ed93 7a00 	vldr	s14, [r3]
 80013fa:	4b08      	ldr	r3, [pc, #32]	@ (800141c <moving_average_filter+0xac>)
 80013fc:	881b      	ldrh	r3, [r3, #0]
 80013fe:	ee07 3a90 	vmov	s15, r3
 8001402:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001406:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800140a:	eef0 7a66 	vmov.f32	s15, s13
}
 800140e:	eeb0 0a67 	vmov.f32	s0, s15
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr
 800141c:	20001208 	.word	0x20001208
 8001420:	2000120c 	.word	0x2000120c
 8001424:	cccccccd 	.word	0xcccccccd
 8001428:	20001210 	.word	0x20001210

0800142c <calculate_hr_spo2>:

void calculate_hr_spo2(uint32_t* ir_data, uint32_t* red_data, uint16_t length,uint8_t* heart_rate, uint8_t* spo2, uint8_t Fs)
{
 800142c:	b590      	push	{r4, r7, lr}
 800142e:	b09b      	sub	sp, #108	@ 0x6c
 8001430:	af00      	add	r7, sp, #0
 8001432:	6178      	str	r0, [r7, #20]
 8001434:	6139      	str	r1, [r7, #16]
 8001436:	60bb      	str	r3, [r7, #8]
 8001438:	4613      	mov	r3, r2
 800143a:	81fb      	strh	r3, [r7, #14]


    static float filtered_ir[500];
    float ir_prev_w = 0;
 800143c:	f04f 0300 	mov.w	r3, #0
 8001440:	623b      	str	r3, [r7, #32]
    // 计算直流滤波+均值滤波
    for (uint16_t i = 0; i < length; i++) {
 8001442:	2300      	movs	r3, #0
 8001444:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8001448:	e027      	b.n	800149a <calculate_hr_spo2+0x6e>
        float ir_filtered = dc_remove(ir_data[i], &ir_prev_w);
 800144a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	697a      	ldr	r2, [r7, #20]
 8001452:	4413      	add	r3, r2
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	ee07 3a90 	vmov	s15, r3
 800145a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800145e:	f107 0320 	add.w	r3, r7, #32
 8001462:	4618      	mov	r0, r3
 8001464:	eeb0 0a67 	vmov.f32	s0, s15
 8001468:	f7ff ff46 	bl	80012f8 <dc_remove>
 800146c:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
        filtered_ir[i] = moving_average_filter(ir_filtered, i);
 8001470:	f8b7 4066 	ldrh.w	r4, [r7, #102]	@ 0x66
 8001474:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8001478:	4618      	mov	r0, r3
 800147a:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 800147e:	f7ff ff77 	bl	8001370 <moving_average_filter>
 8001482:	eef0 7a40 	vmov.f32	s15, s0
 8001486:	4aa0      	ldr	r2, [pc, #640]	@ (8001708 <calculate_hr_spo2+0x2dc>)
 8001488:	00a3      	lsls	r3, r4, #2
 800148a:	4413      	add	r3, r2
 800148c:	edc3 7a00 	vstr	s15, [r3]
    for (uint16_t i = 0; i < length; i++) {
 8001490:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8001494:	3301      	adds	r3, #1
 8001496:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800149a:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 800149e:	89fb      	ldrh	r3, [r7, #14]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d3d2      	bcc.n	800144a <calculate_hr_spo2+0x1e>

   //计算心率
    float ir_data_sum_aver;
    uint16_t temp,i;

   for(i=0;i<length;i++)
 80014a4:	2300      	movs	r3, #0
 80014a6:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 80014aa:	e011      	b.n	80014d0 <calculate_hr_spo2+0xa4>
   {
	   ir_data_sum_aver+=filtered_ir[i];
 80014ac:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80014b0:	4a95      	ldr	r2, [pc, #596]	@ (8001708 <calculate_hr_spo2+0x2dc>)
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	4413      	add	r3, r2
 80014b6:	edd3 7a00 	vldr	s15, [r3]
 80014ba:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 80014be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014c2:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
   for(i=0;i<length;i++)
 80014c6:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80014ca:	3301      	adds	r3, #1
 80014cc:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 80014d0:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 80014d4:	89fb      	ldrh	r3, [r7, #14]
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d3e8      	bcc.n	80014ac <calculate_hr_spo2+0x80>
   }
   ir_data_sum_aver=ir_data_sum_aver/length;
 80014da:	89fb      	ldrh	r3, [r7, #14]
 80014dc:	ee07 3a90 	vmov	s15, r3
 80014e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014e4:	edd7 6a18 	vldr	s13, [r7, #96]	@ 0x60
 80014e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014ec:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60

    //寻找 PPG 与动态阈值交点
    for (uint16_t i = 1; i < length; i++)
 80014f0:	2301      	movs	r3, #1
 80014f2:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 80014f6:	e026      	b.n	8001546 <calculate_hr_spo2+0x11a>
    {
        if ((filtered_ir[i - 1] < ir_data_sum_aver && filtered_ir[i] >=ir_data_sum_aver))
 80014f8:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80014fc:	3b01      	subs	r3, #1
 80014fe:	4a82      	ldr	r2, [pc, #520]	@ (8001708 <calculate_hr_spo2+0x2dc>)
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	4413      	add	r3, r2
 8001504:	edd3 7a00 	vldr	s15, [r3]
 8001508:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 800150c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001514:	dd12      	ble.n	800153c <calculate_hr_spo2+0x110>
 8001516:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800151a:	4a7b      	ldr	r2, [pc, #492]	@ (8001708 <calculate_hr_spo2+0x2dc>)
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	4413      	add	r3, r2
 8001520:	edd3 7a00 	vldr	s15, [r3]
 8001524:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8001528:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800152c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001530:	d804      	bhi.n	800153c <calculate_hr_spo2+0x110>
        {

            temp=i;
 8001532:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8001536:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
            break;
 800153a:	e009      	b.n	8001550 <calculate_hr_spo2+0x124>
    for (uint16_t i = 1; i < length; i++)
 800153c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8001540:	3301      	adds	r3, #1
 8001542:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8001546:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800154a:	89fb      	ldrh	r3, [r7, #14]
 800154c:	429a      	cmp	r2, r3
 800154e:	d3d3      	bcc.n	80014f8 <calculate_hr_spo2+0xcc>
        }
    }
    i++;
 8001550:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8001554:	3301      	adds	r3, #1
 8001556:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
    for (; i < length; i++)
 800155a:	e029      	b.n	80015b0 <calculate_hr_spo2+0x184>
    {
           if ((filtered_ir[i - 1] < ir_data_sum_aver && filtered_ir[i] >=ir_data_sum_aver))
 800155c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8001560:	3b01      	subs	r3, #1
 8001562:	4a69      	ldr	r2, [pc, #420]	@ (8001708 <calculate_hr_spo2+0x2dc>)
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	4413      	add	r3, r2
 8001568:	edd3 7a00 	vldr	s15, [r3]
 800156c:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8001570:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001578:	dd15      	ble.n	80015a6 <calculate_hr_spo2+0x17a>
 800157a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800157e:	4a62      	ldr	r2, [pc, #392]	@ (8001708 <calculate_hr_spo2+0x2dc>)
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	4413      	add	r3, r2
 8001584:	edd3 7a00 	vldr	s15, [r3]
 8001588:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 800158c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001594:	d807      	bhi.n	80015a6 <calculate_hr_spo2+0x17a>
           {

               temp=i-temp;
 8001596:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 800159a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
               break;
 80015a4:	e009      	b.n	80015ba <calculate_hr_spo2+0x18e>
    for (; i < length; i++)
 80015a6:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80015aa:	3301      	adds	r3, #1
 80015ac:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 80015b0:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 80015b4:	89fb      	ldrh	r3, [r7, #14]
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d3d0      	bcc.n	800155c <calculate_hr_spo2+0x130>
           }
    }
    if((temp>28)&&(temp<200))
 80015ba:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80015be:	2b1c      	cmp	r3, #28
 80015c0:	f240 8161 	bls.w	8001886 <calculate_hr_spo2+0x45a>
 80015c4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80015c8:	2bc7      	cmp	r3, #199	@ 0xc7
 80015ca:	f200 815c 	bhi.w	8001886 <calculate_hr_spo2+0x45a>
    {
    	if(30<60*Fs/temp&&60*Fs/temp<200){
 80015ce:	f897 207c 	ldrb.w	r2, [r7, #124]	@ 0x7c
 80015d2:	4613      	mov	r3, r2
 80015d4:	011b      	lsls	r3, r3, #4
 80015d6:	1a9b      	subs	r3, r3, r2
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	461a      	mov	r2, r3
 80015dc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80015e0:	fb92 f3f3 	sdiv	r3, r2, r3
 80015e4:	2b1e      	cmp	r3, #30
 80015e6:	dd1a      	ble.n	800161e <calculate_hr_spo2+0x1f2>
 80015e8:	f897 207c 	ldrb.w	r2, [r7, #124]	@ 0x7c
 80015ec:	4613      	mov	r3, r2
 80015ee:	011b      	lsls	r3, r3, #4
 80015f0:	1a9b      	subs	r3, r3, r2
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	461a      	mov	r2, r3
 80015f6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80015fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80015fe:	2bc7      	cmp	r3, #199	@ 0xc7
 8001600:	dc0d      	bgt.n	800161e <calculate_hr_spo2+0x1f2>
    	*heart_rate=60*Fs/temp;}
 8001602:	f897 207c 	ldrb.w	r2, [r7, #124]	@ 0x7c
 8001606:	4613      	mov	r3, r2
 8001608:	011b      	lsls	r3, r3, #4
 800160a:	1a9b      	subs	r3, r3, r2
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	461a      	mov	r2, r3
 8001610:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8001614:	fb92 f3f3 	sdiv	r3, r2, r3
 8001618:	b2da      	uxtb	r2, r3
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	701a      	strb	r2, [r3, #0]
    	if(30<60*Fs/temp&&60*Fs/temp<200){
 800161e:	bf00      	nop

    // 计算 SpO₂


    // 获取DC/AC值
    float ir_dc = 0, ir_ac = 0;
 8001620:	f04f 0300 	mov.w	r3, #0
 8001624:	657b      	str	r3, [r7, #84]	@ 0x54
 8001626:	f04f 0300 	mov.w	r3, #0
 800162a:	637b      	str	r3, [r7, #52]	@ 0x34
    float max_ir = -FLT_MAX, min_ir = FLT_MAX;
 800162c:	f46f 0300 	mvn.w	r3, #8388608	@ 0x800000
 8001630:	653b      	str	r3, [r7, #80]	@ 0x50
 8001632:	4b36      	ldr	r3, [pc, #216]	@ (800170c <calculate_hr_spo2+0x2e0>)
 8001634:	64fb      	str	r3, [r7, #76]	@ 0x4c

       for (uint16_t i = 0; i < length; i++) {
 8001636:	2300      	movs	r3, #0
 8001638:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800163c:	e03b      	b.n	80016b6 <calculate_hr_spo2+0x28a>
           ir_dc += filtered_ir[i];
 800163e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001642:	4a31      	ldr	r2, [pc, #196]	@ (8001708 <calculate_hr_spo2+0x2dc>)
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	4413      	add	r3, r2
 8001648:	edd3 7a00 	vldr	s15, [r3]
 800164c:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001650:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001654:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

           if (filtered_ir[i] > max_ir) max_ir = filtered_ir[i];
 8001658:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800165c:	4a2a      	ldr	r2, [pc, #168]	@ (8001708 <calculate_hr_spo2+0x2dc>)
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	4413      	add	r3, r2
 8001662:	edd3 7a00 	vldr	s15, [r3]
 8001666:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800166a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800166e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001672:	d506      	bpl.n	8001682 <calculate_hr_spo2+0x256>
 8001674:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001678:	4a23      	ldr	r2, [pc, #140]	@ (8001708 <calculate_hr_spo2+0x2dc>)
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	4413      	add	r3, r2
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	653b      	str	r3, [r7, #80]	@ 0x50
           if (filtered_ir[i] < min_ir) min_ir = filtered_ir[i];
 8001682:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001686:	4a20      	ldr	r2, [pc, #128]	@ (8001708 <calculate_hr_spo2+0x2dc>)
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	4413      	add	r3, r2
 800168c:	edd3 7a00 	vldr	s15, [r3]
 8001690:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001694:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800169c:	dd06      	ble.n	80016ac <calculate_hr_spo2+0x280>
 800169e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80016a2:	4a19      	ldr	r2, [pc, #100]	@ (8001708 <calculate_hr_spo2+0x2dc>)
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	4413      	add	r3, r2
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
       for (uint16_t i = 0; i < length; i++) {
 80016ac:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80016b0:	3301      	adds	r3, #1
 80016b2:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80016b6:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 80016ba:	89fb      	ldrh	r3, [r7, #14]
 80016bc:	429a      	cmp	r2, r3
 80016be:	d3be      	bcc.n	800163e <calculate_hr_spo2+0x212>
       }
       ir_dc /= length;
 80016c0:	89fb      	ldrh	r3, [r7, #14]
 80016c2:	ee07 3a90 	vmov	s15, r3
 80016c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016ca:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 80016ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016d2:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
       ir_ac = max_ir - min_ir;
 80016d6:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80016da:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 80016de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016e2:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    float red_dc = 0, red_ac = 0;
 80016e6:	f04f 0300 	mov.w	r3, #0
 80016ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80016ec:	f04f 0300 	mov.w	r3, #0
 80016f0:	633b      	str	r3, [r7, #48]	@ 0x30
    float max_red = 0, min_red = FLT_MAX;
 80016f2:	f04f 0300 	mov.w	r3, #0
 80016f6:	643b      	str	r3, [r7, #64]	@ 0x40
 80016f8:	4b04      	ldr	r3, [pc, #16]	@ (800170c <calculate_hr_spo2+0x2e0>)
 80016fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    float red_prev_w = 0;
 80016fc:	f04f 0300 	mov.w	r3, #0
 8001700:	61fb      	str	r3, [r7, #28]

    for (uint16_t i = 0; i < length; i++) {
 8001702:	2300      	movs	r3, #0
 8001704:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8001706:	e03e      	b.n	8001786 <calculate_hr_spo2+0x35a>
 8001708:	200019e0 	.word	0x200019e0
 800170c:	7f7fffff 	.word	0x7f7fffff
 8001710:	428c0000 	.word	0x428c0000
 8001714:	42c80000 	.word	0x42c80000
 8001718:	42600000 	.word	0x42600000
 800171c:	42a00000 	.word	0x42a00000
        float red_filtered = dc_remove(red_data[i], &red_prev_w);
 8001720:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	693a      	ldr	r2, [r7, #16]
 8001726:	4413      	add	r3, r2
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	ee07 3a90 	vmov	s15, r3
 800172e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001732:	f107 031c 	add.w	r3, r7, #28
 8001736:	4618      	mov	r0, r3
 8001738:	eeb0 0a67 	vmov.f32	s0, s15
 800173c:	f7ff fddc 	bl	80012f8 <dc_remove>
 8001740:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
        red_dc += red_filtered;
 8001744:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8001748:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800174c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001750:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44

        if (red_filtered > max_red) max_red = red_filtered;
 8001754:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001758:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800175c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001764:	dd01      	ble.n	800176a <calculate_hr_spo2+0x33e>
 8001766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001768:	643b      	str	r3, [r7, #64]	@ 0x40
        if (red_filtered < min_red) min_red = red_filtered;
 800176a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800176e:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001772:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800177a:	d501      	bpl.n	8001780 <calculate_hr_spo2+0x354>
 800177c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800177e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    for (uint16_t i = 0; i < length; i++) {
 8001780:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8001782:	3301      	adds	r3, #1
 8001784:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8001786:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8001788:	89fb      	ldrh	r3, [r7, #14]
 800178a:	429a      	cmp	r2, r3
 800178c:	d3c8      	bcc.n	8001720 <calculate_hr_spo2+0x2f4>
    }
    red_dc /= length;
 800178e:	89fb      	ldrh	r3, [r7, #14]
 8001790:	ee07 3a90 	vmov	s15, r3
 8001794:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001798:	edd7 6a11 	vldr	s13, [r7, #68]	@ 0x44
 800179c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017a0:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    red_ac = max_red - min_red;
 80017a4:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80017a8:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80017ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017b0:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

    float R = (red_ac / red_dc) / (ir_ac / ir_dc);
 80017b4:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80017b8:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80017bc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80017c0:	ed97 6a0d 	vldr	s12, [r7, #52]	@ 0x34
 80017c4:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80017c8:	ee86 7a27 	vdiv.f32	s14, s12, s15
 80017cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017d0:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    if(((-15)*R*R+56*R+80)<70||((-15)*R*R+56*R+80)>100)
 80017d4:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80017d8:	eeba 7a0e 	vmov.f32	s14, #174	@ 0xc1700000 -15.0
 80017dc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80017e0:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80017e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017e8:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80017ec:	ed5f 6a36 	vldr	s13, [pc, #-216]	@ 8001718 <calculate_hr_spo2+0x2ec>
 80017f0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80017f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017f8:	ed1f 7a38 	vldr	s14, [pc, #-224]	@ 800171c <calculate_hr_spo2+0x2f0>
 80017fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001800:	ed1f 7a3d 	vldr	s14, [pc, #-244]	@ 8001710 <calculate_hr_spo2+0x2e4>
 8001804:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800180c:	d43d      	bmi.n	800188a <calculate_hr_spo2+0x45e>
 800180e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001812:	eeba 7a0e 	vmov.f32	s14, #174	@ 0xc1700000 -15.0
 8001816:	ee27 7a87 	vmul.f32	s14, s15, s14
 800181a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800181e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001822:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001826:	ed5f 6a44 	vldr	s13, [pc, #-272]	@ 8001718 <calculate_hr_spo2+0x2ec>
 800182a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800182e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001832:	ed1f 7a46 	vldr	s14, [pc, #-280]	@ 800171c <calculate_hr_spo2+0x2f0>
 8001836:	ee77 7a87 	vadd.f32	s15, s15, s14
 800183a:	ed1f 7a4a 	vldr	s14, [pc, #-296]	@ 8001714 <calculate_hr_spo2+0x2e8>
 800183e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001846:	dc20      	bgt.n	800188a <calculate_hr_spo2+0x45e>
    {
    	return;
    }
    else
    {
    *spo2 = (uint8_t)((-15)*R*R+56*R+80);
 8001848:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800184c:	eeba 7a0e 	vmov.f32	s14, #174	@ 0xc1700000 -15.0
 8001850:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001854:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001858:	ee27 7a27 	vmul.f32	s14, s14, s15
 800185c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001860:	ed5f 6a53 	vldr	s13, [pc, #-332]	@ 8001718 <calculate_hr_spo2+0x2ec>
 8001864:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001868:	ee77 7a27 	vadd.f32	s15, s14, s15
 800186c:	ed1f 7a55 	vldr	s14, [pc, #-340]	@ 800171c <calculate_hr_spo2+0x2f0>
 8001870:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001874:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001878:	edc7 7a01 	vstr	s15, [r7, #4]
 800187c:	793b      	ldrb	r3, [r7, #4]
 800187e:	b2da      	uxtb	r2, r3
 8001880:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001882:	701a      	strb	r2, [r3, #0]
 8001884:	e002      	b.n	800188c <calculate_hr_spo2+0x460>
    	return ;
 8001886:	bf00      	nop
 8001888:	e000      	b.n	800188c <calculate_hr_spo2+0x460>
    	return;
 800188a:	bf00      	nop
    }
}
 800188c:	376c      	adds	r7, #108	@ 0x6c
 800188e:	46bd      	mov	sp, r7
 8001890:	bd90      	pop	{r4, r7, pc}
 8001892:	bf00      	nop

08001894 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800189c:	4b06      	ldr	r3, [pc, #24]	@ (80018b8 <LL_EXTI_EnableIT_32_63+0x24>)
 800189e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80018a2:	4905      	ldr	r1, [pc, #20]	@ (80018b8 <LL_EXTI_EnableIT_32_63+0x24>)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	58000800 	.word	0x58000800

080018bc <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80018bc:	b480      	push	{r7}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80018c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018c8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80018ca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80018d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018d8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4013      	ands	r3, r2
 80018de:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018e0:	68fb      	ldr	r3, [r7, #12]
}
 80018e2:	bf00      	nop
 80018e4:	3714      	adds	r7, #20
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr

080018ee <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80018ee:	b480      	push	{r7}
 80018f0:	b085      	sub	sp, #20
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 80018f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018fa:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 80018fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4313      	orrs	r3, r2
 8001906:	f8c1 314c 	str.w	r3, [r1, #332]	@ 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 800190a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800190e:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4013      	ands	r3, r2
 8001916:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001918:	68fb      	ldr	r3, [r7, #12]
}
 800191a:	bf00      	nop
 800191c:	3714      	adds	r7, #20
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr

08001926 <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 8001926:	b580      	push	{r7, lr}
 8001928:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 800192a:	f002 f9eb 	bl	8003d04 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 800192e:	f002 f9ef 	bl	8003d10 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8001932:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8001936:	f7ff ffad 	bl	8001894 <LL_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 800193a:	f009 fbeb 	bl	800b114 <DbgTraceInit>
#endif

  APPD_SetCPU2GpioConfig( );
 800193e:	f000 f821 	bl	8001984 <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 8001942:	f000 f8c1 	bl	8001ac8 <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 8001946:	bf00      	nop
}
 8001948:	bd80      	pop	{r7, pc}
	...

0800194c <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 800194c:	b5b0      	push	{r4, r5, r7, lr}
 800194e:	b088      	sub	sp, #32
 8001950:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8001952:	4b0b      	ldr	r3, [pc, #44]	@ (8001980 <APPD_EnableCPU2+0x34>)
 8001954:	1d3c      	adds	r4, r7, #4
 8001956:	461d      	mov	r5, r3
 8001958:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800195a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800195c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001960:	c403      	stmia	r4!, {r0, r1}
 8001962:	8022      	strh	r2, [r4, #0]
 8001964:	3402      	adds	r4, #2
 8001966:	0c13      	lsrs	r3, r2, #16
 8001968:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 800196a:	f009 fae7 	bl	800af3c <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 800196e:	1d3b      	adds	r3, r7, #4
 8001970:	4618      	mov	r0, r3
 8001972:	f008 fd78 	bl	800a466 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8001976:	bf00      	nop
}
 8001978:	3720      	adds	r7, #32
 800197a:	46bd      	mov	sp, r7
 800197c:	bdb0      	pop	{r4, r5, r7, pc}
 800197e:	bf00      	nop
 8001980:	08012138 	.word	0x08012138

08001984 <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b088      	sub	sp, #32
 8001988:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 800198a:	1d3b      	adds	r3, r7, #4
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	605a      	str	r2, [r3, #4]
 8001992:	609a      	str	r2, [r3, #8]
 8001994:	60da      	str	r2, [r3, #12]
 8001996:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;
  gpioa_pin_list = 0;
 8001998:	2300      	movs	r3, #0
 800199a:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 800199c:	2300      	movs	r3, #0
 800199e:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 80019a0:	2300      	movs	r3, #0
 80019a2:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 80019a4:	2300      	movs	r3, #0
 80019a6:	77fb      	strb	r3, [r7, #31]
 80019a8:	e036      	b.n	8001a18 <APPD_SetCPU2GpioConfig+0x94>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 80019aa:	7ffb      	ldrb	r3, [r7, #31]
 80019ac:	4a43      	ldr	r2, [pc, #268]	@ (8001abc <APPD_SetCPU2GpioConfig+0x138>)
 80019ae:	00db      	lsls	r3, r3, #3
 80019b0:	4413      	add	r3, r2
 80019b2:	799b      	ldrb	r3, [r3, #6]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d02c      	beq.n	8001a12 <APPD_SetCPU2GpioConfig+0x8e>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 80019b8:	7ffb      	ldrb	r3, [r7, #31]
 80019ba:	4a40      	ldr	r2, [pc, #256]	@ (8001abc <APPD_SetCPU2GpioConfig+0x138>)
 80019bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80019c0:	4a3f      	ldr	r2, [pc, #252]	@ (8001ac0 <APPD_SetCPU2GpioConfig+0x13c>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d01b      	beq.n	80019fe <APPD_SetCPU2GpioConfig+0x7a>
 80019c6:	4a3e      	ldr	r2, [pc, #248]	@ (8001ac0 <APPD_SetCPU2GpioConfig+0x13c>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d821      	bhi.n	8001a10 <APPD_SetCPU2GpioConfig+0x8c>
 80019cc:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80019d0:	d003      	beq.n	80019da <APPD_SetCPU2GpioConfig+0x56>
 80019d2:	4a3c      	ldr	r2, [pc, #240]	@ (8001ac4 <APPD_SetCPU2GpioConfig+0x140>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d009      	beq.n	80019ec <APPD_SetCPU2GpioConfig+0x68>
          break;
        case (uint32_t)GPIOC:
          gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;
        default:
          break;
 80019d8:	e01a      	b.n	8001a10 <APPD_SetCPU2GpioConfig+0x8c>
          gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 80019da:	7ffb      	ldrb	r3, [r7, #31]
 80019dc:	4a37      	ldr	r2, [pc, #220]	@ (8001abc <APPD_SetCPU2GpioConfig+0x138>)
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	4413      	add	r3, r2
 80019e2:	889a      	ldrh	r2, [r3, #4]
 80019e4:	8bbb      	ldrh	r3, [r7, #28]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	83bb      	strh	r3, [r7, #28]
          break;
 80019ea:	e012      	b.n	8001a12 <APPD_SetCPU2GpioConfig+0x8e>
          gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 80019ec:	7ffb      	ldrb	r3, [r7, #31]
 80019ee:	4a33      	ldr	r2, [pc, #204]	@ (8001abc <APPD_SetCPU2GpioConfig+0x138>)
 80019f0:	00db      	lsls	r3, r3, #3
 80019f2:	4413      	add	r3, r2
 80019f4:	889a      	ldrh	r2, [r3, #4]
 80019f6:	8b7b      	ldrh	r3, [r7, #26]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	837b      	strh	r3, [r7, #26]
          break;
 80019fc:	e009      	b.n	8001a12 <APPD_SetCPU2GpioConfig+0x8e>
          gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 80019fe:	7ffb      	ldrb	r3, [r7, #31]
 8001a00:	4a2e      	ldr	r2, [pc, #184]	@ (8001abc <APPD_SetCPU2GpioConfig+0x138>)
 8001a02:	00db      	lsls	r3, r3, #3
 8001a04:	4413      	add	r3, r2
 8001a06:	889a      	ldrh	r2, [r3, #4]
 8001a08:	8b3b      	ldrh	r3, [r7, #24]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	833b      	strh	r3, [r7, #24]
          break;
 8001a0e:	e000      	b.n	8001a12 <APPD_SetCPU2GpioConfig+0x8e>
          break;
 8001a10:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8001a12:	7ffb      	ldrb	r3, [r7, #31]
 8001a14:	3301      	adds	r3, #1
 8001a16:	77fb      	strb	r3, [r7, #31]
 8001a18:	7ffb      	ldrb	r3, [r7, #31]
 8001a1a:	2b25      	cmp	r3, #37	@ 0x25
 8001a1c:	d9c5      	bls.n	80019aa <APPD_SetCPU2GpioConfig+0x26>
      }
    }
  }

  gpio_config.Pull = GPIO_NOPULL;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 8001a22:	2301      	movs	r3, #1
 8001a24:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a26:	2303      	movs	r3, #3
 8001a28:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 8001a2a:	8bbb      	ldrh	r3, [r7, #28]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d014      	beq.n	8001a5a <APPD_SetCPU2GpioConfig+0xd6>
  {
    gpio_config.Pin = gpioa_pin_list;
 8001a30:	8bbb      	ldrh	r3, [r7, #28]
 8001a32:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a34:	2001      	movs	r0, #1
 8001a36:	f7ff ff41 	bl	80018bc <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 8001a3a:	2001      	movs	r0, #1
 8001a3c:	f7ff ff57 	bl	80018ee <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 8001a40:	1d3b      	adds	r3, r7, #4
 8001a42:	4619      	mov	r1, r3
 8001a44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a48:	f002 fe34 	bl	80046b4 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 8001a4c:	8bbb      	ldrh	r3, [r7, #28]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	4619      	mov	r1, r3
 8001a52:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a56:	f002 ffb5 	bl	80049c4 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 8001a5a:	8b7b      	ldrh	r3, [r7, #26]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d012      	beq.n	8001a86 <APPD_SetCPU2GpioConfig+0x102>
  {
    gpio_config.Pin = gpiob_pin_list;
 8001a60:	8b7b      	ldrh	r3, [r7, #26]
 8001a62:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a64:	2002      	movs	r0, #2
 8001a66:	f7ff ff29 	bl	80018bc <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 8001a6a:	2002      	movs	r0, #2
 8001a6c:	f7ff ff3f 	bl	80018ee <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 8001a70:	1d3b      	adds	r3, r7, #4
 8001a72:	4619      	mov	r1, r3
 8001a74:	4813      	ldr	r0, [pc, #76]	@ (8001ac4 <APPD_SetCPU2GpioConfig+0x140>)
 8001a76:	f002 fe1d 	bl	80046b4 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 8001a7a:	8b7b      	ldrh	r3, [r7, #26]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4810      	ldr	r0, [pc, #64]	@ (8001ac4 <APPD_SetCPU2GpioConfig+0x140>)
 8001a82:	f002 ff9f 	bl	80049c4 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 8001a86:	8b3b      	ldrh	r3, [r7, #24]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d013      	beq.n	8001ab4 <APPD_SetCPU2GpioConfig+0x130>
  {
    gpio_config.Pin = gpioc_pin_list;
 8001a8c:	8b3b      	ldrh	r3, [r7, #24]
 8001a8e:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a90:	2004      	movs	r0, #4
 8001a92:	f7ff ff13 	bl	80018bc <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 8001a96:	2004      	movs	r0, #4
 8001a98:	f7ff ff29 	bl	80018ee <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 8001a9c:	1d3b      	adds	r3, r7, #4
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4807      	ldr	r0, [pc, #28]	@ (8001ac0 <APPD_SetCPU2GpioConfig+0x13c>)
 8001aa2:	f002 fe07 	bl	80046b4 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 8001aa6:	8b3b      	ldrh	r3, [r7, #24]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4804      	ldr	r0, [pc, #16]	@ (8001ac0 <APPD_SetCPU2GpioConfig+0x13c>)
 8001aae:	f002 ff89 	bl	80049c4 <HAL_GPIO_WritePin>
  }

/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 8001ab2:	bf00      	nop
 8001ab4:	bf00      	nop
}
 8001ab6:	3720      	adds	r7, #32
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	08013590 	.word	0x08013590
 8001ac0:	48000800 	.word	0x48000800
 8001ac4:	48000400 	.word	0x48000400

08001ac8 <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 8001acc:	bf00      	nop
}
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr

08001ad6 <DbgOutputInit>:
 * WRAP FUNCTIONS
 *
*************************************************************/
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	af00      	add	r7, sp, #0
#endif
}
else if (CFG_DEBUG_TRACE_UART == hw_uart1)
{
#if(CFG_HW_USART1_ENABLED == 1)
    MX_USART1_UART_Init();
 8001ada:	f001 ff2f 	bl	800393c <MX_USART1_UART_Init>
#endif
}
#endif

/* USER CODE END DbgOutputInit */
  return;
 8001ade:	bf00      	nop
}
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <DbgOutputTraces>:

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b084      	sub	sp, #16
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	60f8      	str	r0, [r7, #12]
 8001aea:	460b      	mov	r3, r1
 8001aec:	607a      	str	r2, [r7, #4]
 8001aee:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8001af0:	897a      	ldrh	r2, [r7, #10]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	68f9      	ldr	r1, [r7, #12]
 8001af6:	2000      	movs	r0, #0
 8001af8:	f001 fa4e 	bl	8002f98 <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 8001afc:	bf00      	nop
}
 8001afe:	3710      	adds	r7, #16
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8001b0c:	4b07      	ldr	r3, [pc, #28]	@ (8001b2c <LL_C2_PWR_SetPowerMode+0x28>)
 8001b0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001b12:	f023 0207 	bic.w	r2, r3, #7
 8001b16:	4905      	ldr	r1, [pc, #20]	@ (8001b2c <LL_C2_PWR_SetPowerMode+0x28>)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8001b20:	bf00      	nop
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr
 8001b2c:	58000400 	.word	0x58000400

08001b30 <LL_EXTI_EnableIT_32_63>:
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001b38:	4b06      	ldr	r3, [pc, #24]	@ (8001b54 <LL_EXTI_EnableIT_32_63+0x24>)
 8001b3a:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8001b3e:	4905      	ldr	r1, [pc, #20]	@ (8001b54 <LL_EXTI_EnableIT_32_63+0x24>)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	58000800 	.word	0x58000800

08001b58 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8001b60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b64:	4a0a      	ldr	r2, [pc, #40]	@ (8001b90 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8001b66:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8001b6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001b72:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	021b      	lsls	r3, r3, #8
 8001b7a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 8001b84:	bf00      	nop
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	cafecafe 	.word	0xcafecafe

08001b94 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001b9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8001ba6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	608b      	str	r3, [r1, #8]
}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8001bc0:	4b04      	ldr	r3, [pc, #16]	@ (8001bd4 <LL_DBGMCU_GetDeviceID+0x18>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	e0042000 	.word	0xe0042000

08001bd8 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8001bdc:	4b04      	ldr	r3, [pc, #16]	@ (8001bf0 <LL_DBGMCU_GetRevisionID+0x18>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	0c1b      	lsrs	r3, r3, #16
 8001be2:	b29b      	uxth	r3, r3
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	e0042000 	.word	0xe0042000

08001bf4 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001bf8:	4b05      	ldr	r3, [pc, #20]	@ (8001c10 <LL_LPM_EnableSleep+0x1c>)
 8001bfa:	691b      	ldr	r3, [r3, #16]
 8001bfc:	4a04      	ldr	r2, [pc, #16]	@ (8001c10 <LL_LPM_EnableSleep+0x1c>)
 8001bfe:	f023 0304 	bic.w	r3, r3, #4
 8001c02:	6113      	str	r3, [r2, #16]
}
 8001c04:	bf00      	nop
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	e000ed00 	.word	0xe000ed00

08001c14 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	22ff      	movs	r2, #255	@ 0xff
 8001c20:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001c22:	bf00      	nop
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr

08001c2e <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8001c2e:	b480      	push	{r7}
 8001c30:	b083      	sub	sp, #12
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	22ca      	movs	r2, #202	@ 0xca
 8001c3a:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2253      	movs	r2, #83	@ 0x53
 8001c40:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001c42:	bf00      	nop
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr

08001c4e <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	b083      	sub	sp, #12
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
 8001c56:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f023 0207 	bic.w	r2, r3, #7
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	431a      	orrs	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	609a      	str	r2, [r3, #8]
}
 8001c68:	bf00      	nop
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001c78:	4b04      	ldr	r3, [pc, #16]	@ (8001c8c <MX_APPE_Config+0x18>)
 8001c7a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001c7e:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8001c80:	f000 f826 	bl	8001cd0 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8001c84:	f000 f82b 	bl	8001cde <Config_HSE>

  return;
 8001c88:	bf00      	nop
}
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	58004000 	.word	0x58004000

08001c90 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8001c94:	f000 f837 	bl	8001d06 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8001c98:	f000 f850 	bl	8001d3c <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8001c9c:	4904      	ldr	r1, [pc, #16]	@ (8001cb0 <MX_APPE_Init+0x20>)
 8001c9e:	2000      	movs	r0, #0
 8001ca0:	f000 ff88 	bl	8002bb4 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 8001ca4:	f7ff fe3f 	bl	8001926 <APPD_Init>
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8001ca8:	f000 f856 	bl	8001d58 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8001cac:	bf00      	nop
}
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	200022e8 	.word	0x200022e8

08001cb4 <Init_Smps>:

void Init_Smps(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8001cb8:	bf00      	nop
}
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr

08001cc2 <Init_Exti>:

void Init_Exti(void)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8001cc6:	2050      	movs	r0, #80	@ 0x50
 8001cc8:	f7ff ff32 	bl	8001b30 <LL_EXTI_EnableIT_32_63>

  return;
 8001ccc:	bf00      	nop
}
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8001cd4:	bf00      	nop
}
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr

08001cde <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b082      	sub	sp, #8
 8001ce2:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8001ce4:	2000      	movs	r0, #0
 8001ce6:	f009 fa93 	bl	800b210 <OTP_Read>
 8001cea:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d005      	beq.n	8001cfe <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	799b      	ldrb	r3, [r3, #6]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7ff ff2e 	bl	8001b58 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8001cfc:	bf00      	nop
 8001cfe:	bf00      	nop
}
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <System_Init>:

static void System_Init(void)
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	af00      	add	r7, sp, #0
  Init_Smps();
 8001d0a:	f7ff ffd3 	bl	8001cb4 <Init_Smps>

  Init_Exti();
 8001d0e:	f7ff ffd8 	bl	8001cc2 <Init_Exti>

  Init_Rtc();
 8001d12:	f000 f803 	bl	8001d1c <Init_Rtc>

  return;
 8001d16:	bf00      	nop
}
 8001d18:	bd80      	pop	{r7, pc}
	...

08001d1c <Init_Rtc>:

static void Init_Rtc(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8001d20:	4805      	ldr	r0, [pc, #20]	@ (8001d38 <Init_Rtc+0x1c>)
 8001d22:	f7ff ff84 	bl	8001c2e <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8001d26:	2100      	movs	r1, #0
 8001d28:	4803      	ldr	r0, [pc, #12]	@ (8001d38 <Init_Rtc+0x1c>)
 8001d2a:	f7ff ff90 	bl	8001c4e <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8001d2e:	4802      	ldr	r0, [pc, #8]	@ (8001d38 <Init_Rtc+0x1c>)
 8001d30:	f7ff ff70 	bl	8001c14 <LL_RTC_EnableWriteProtection>

  return;
 8001d34:	bf00      	nop
}
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	40002800 	.word	0x40002800

08001d3c <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8001d40:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001d44:	f7ff ff26 	bl	8001b94 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8001d48:	f00b fb3a 	bl	800d3c0 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8001d4c:	2004      	movs	r0, #4
 8001d4e:	f7ff fed9 	bl	8001b04 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8001d52:	bf00      	nop
}
 8001d54:	bd80      	pop	{r7, pc}
	...

08001d58 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b088      	sub	sp, #32
 8001d5c:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8001d5e:	f008 ff37 	bl	800abd0 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8001d62:	4a11      	ldr	r2, [pc, #68]	@ (8001da8 <appe_Tl_Init+0x50>)
 8001d64:	2100      	movs	r1, #0
 8001d66:	2004      	movs	r0, #4
 8001d68:	f00b fc68 	bl	800d63c <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8001d6c:	4b0f      	ldr	r3, [pc, #60]	@ (8001dac <appe_Tl_Init+0x54>)
 8001d6e:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8001d70:	4b0f      	ldr	r3, [pc, #60]	@ (8001db0 <appe_Tl_Init+0x58>)
 8001d72:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8001d74:	463b      	mov	r3, r7
 8001d76:	4619      	mov	r1, r3
 8001d78:	480e      	ldr	r0, [pc, #56]	@ (8001db4 <appe_Tl_Init+0x5c>)
 8001d7a:	f008 fdeb 	bl	800a954 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8001d7e:	4b0e      	ldr	r3, [pc, #56]	@ (8001db8 <appe_Tl_Init+0x60>)
 8001d80:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8001d82:	4b0e      	ldr	r3, [pc, #56]	@ (8001dbc <appe_Tl_Init+0x64>)
 8001d84:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8001d86:	4b0e      	ldr	r3, [pc, #56]	@ (8001dc0 <appe_Tl_Init+0x68>)
 8001d88:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8001d8a:	f240 533c 	movw	r3, #1340	@ 0x53c
 8001d8e:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8001d90:	f107 0308 	add.w	r3, r7, #8
 8001d94:	4618      	mov	r0, r3
 8001d96:	f009 f85d 	bl	800ae54 <TL_MM_Init>

  TL_Enable();
 8001d9a:	f008 ff13 	bl	800abc4 <TL_Enable>

  return;
 8001d9e:	bf00      	nop
}
 8001da0:	3720      	adds	r7, #32
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	0800a98d 	.word	0x0800a98d
 8001dac:	20030734 	.word	0x20030734
 8001db0:	08001dc5 	.word	0x08001dc5
 8001db4:	08001ddd 	.word	0x08001ddd
 8001db8:	2003094c 	.word	0x2003094c
 8001dbc:	20030840 	.word	0x20030840
 8001dc0:	200301f8 	.word	0x200301f8

08001dc4 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	4603      	mov	r3, r0
 8001dcc:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8001dce:	bf00      	nop
}
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
	...

08001ddc <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b088      	sub	sp, #32
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	330b      	adds	r3, #11
 8001dea:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	881b      	ldrh	r3, [r3, #0]
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 8001df6:	2b07      	cmp	r3, #7
 8001df8:	f200 80d0 	bhi.w	8001f9c <APPE_SysUserEvtRx+0x1c0>
 8001dfc:	a201      	add	r2, pc, #4	@ (adr r2, 8001e04 <APPE_SysUserEvtRx+0x28>)
 8001dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e02:	bf00      	nop
 8001e04:	08001e25 	.word	0x08001e25
 8001e08:	08001eb7 	.word	0x08001eb7
 8001e0c:	08001ed9 	.word	0x08001ed9
 8001e10:	08001f9d 	.word	0x08001f9d
 8001e14:	08001f1d 	.word	0x08001f1d
 8001e18:	08001f41 	.word	0x08001f41
 8001e1c:	08001f5d 	.word	0x08001f5d
 8001e20:	08001f81 	.word	0x08001f81
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8001e24:	f107 030c 	add.w	r3, r7, #12
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f008 fb49 	bl	800a4c0 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 8001e2e:	485e      	ldr	r0, [pc, #376]	@ (8001fa8 <APPE_SysUserEvtRx+0x1cc>)
 8001e30:	f009 f910 	bl	800b054 <DbgTraceGetFileName>
 8001e34:	4601      	mov	r1, r0
 8001e36:	f44f 73b5 	mov.w	r3, #362	@ 0x16a
 8001e3a:	4a5c      	ldr	r2, [pc, #368]	@ (8001fac <APPE_SysUserEvtRx+0x1d0>)
 8001e3c:	485c      	ldr	r0, [pc, #368]	@ (8001fb0 <APPE_SysUserEvtRx+0x1d4>)
 8001e3e:	f00c fc49 	bl	800e6d4 <iprintf>
 8001e42:	7b3b      	ldrb	r3, [r7, #12]
 8001e44:	4619      	mov	r1, r3
 8001e46:	7b7b      	ldrb	r3, [r7, #13]
 8001e48:	461a      	mov	r2, r3
 8001e4a:	7bbb      	ldrb	r3, [r7, #14]
 8001e4c:	4859      	ldr	r0, [pc, #356]	@ (8001fb4 <APPE_SysUserEvtRx+0x1d8>)
 8001e4e:	f00c fc41 	bl	800e6d4 <iprintf>
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 8001e52:	4855      	ldr	r0, [pc, #340]	@ (8001fa8 <APPE_SysUserEvtRx+0x1cc>)
 8001e54:	f009 f8fe 	bl	800b054 <DbgTraceGetFileName>
 8001e58:	4601      	mov	r1, r0
 8001e5a:	f240 136b 	movw	r3, #363	@ 0x16b
 8001e5e:	4a53      	ldr	r2, [pc, #332]	@ (8001fac <APPE_SysUserEvtRx+0x1d0>)
 8001e60:	4853      	ldr	r0, [pc, #332]	@ (8001fb0 <APPE_SysUserEvtRx+0x1d4>)
 8001e62:	f00c fc37 	bl	800e6d4 <iprintf>
 8001e66:	7c3b      	ldrb	r3, [r7, #16]
 8001e68:	4619      	mov	r1, r3
 8001e6a:	4853      	ldr	r0, [pc, #332]	@ (8001fb8 <APPE_SysUserEvtRx+0x1dc>)
 8001e6c:	f00c fc32 	bl	800e6d4 <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 8001e70:	484d      	ldr	r0, [pc, #308]	@ (8001fa8 <APPE_SysUserEvtRx+0x1cc>)
 8001e72:	f009 f8ef 	bl	800b054 <DbgTraceGetFileName>
 8001e76:	4601      	mov	r1, r0
 8001e78:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 8001e7c:	4a4b      	ldr	r2, [pc, #300]	@ (8001fac <APPE_SysUserEvtRx+0x1d0>)
 8001e7e:	484c      	ldr	r0, [pc, #304]	@ (8001fb0 <APPE_SysUserEvtRx+0x1d4>)
 8001e80:	f00c fc28 	bl	800e6d4 <iprintf>
 8001e84:	7dbb      	ldrb	r3, [r7, #22]
 8001e86:	4619      	mov	r1, r3
 8001e88:	7dfb      	ldrb	r3, [r7, #23]
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	7e3b      	ldrb	r3, [r7, #24]
 8001e8e:	484b      	ldr	r0, [pc, #300]	@ (8001fbc <APPE_SysUserEvtRx+0x1e0>)
 8001e90:	f00c fc20 	bl	800e6d4 <iprintf>

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 8001e94:	4844      	ldr	r0, [pc, #272]	@ (8001fa8 <APPE_SysUserEvtRx+0x1cc>)
 8001e96:	f009 f8dd 	bl	800b054 <DbgTraceGetFileName>
 8001e9a:	4601      	mov	r1, r0
 8001e9c:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 8001ea0:	4a42      	ldr	r2, [pc, #264]	@ (8001fac <APPE_SysUserEvtRx+0x1d0>)
 8001ea2:	4843      	ldr	r0, [pc, #268]	@ (8001fb0 <APPE_SysUserEvtRx+0x1d4>)
 8001ea4:	f00c fc16 	bl	800e6d4 <iprintf>
 8001ea8:	4845      	ldr	r0, [pc, #276]	@ (8001fc0 <APPE_SysUserEvtRx+0x1e4>)
 8001eaa:	f00c fc13 	bl	800e6d4 <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f000 f8e0 	bl	8002074 <APPE_SysEvtReadyProcessing>
    break;
 8001eb4:	e073      	b.n	8001f9e <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 8001eb6:	483c      	ldr	r0, [pc, #240]	@ (8001fa8 <APPE_SysUserEvtRx+0x1cc>)
 8001eb8:	f009 f8cc 	bl	800b054 <DbgTraceGetFileName>
 8001ebc:	4601      	mov	r1, r0
 8001ebe:	f240 1373 	movw	r3, #371	@ 0x173
 8001ec2:	4a3a      	ldr	r2, [pc, #232]	@ (8001fac <APPE_SysUserEvtRx+0x1d0>)
 8001ec4:	483a      	ldr	r0, [pc, #232]	@ (8001fb0 <APPE_SysUserEvtRx+0x1d4>)
 8001ec6:	f00c fc05 	bl	800e6d4 <iprintf>
 8001eca:	483e      	ldr	r0, [pc, #248]	@ (8001fc4 <APPE_SysUserEvtRx+0x1e8>)
 8001ecc:	f00c fc02 	bl	800e6d4 <iprintf>
    APPE_SysEvtError(pPayload);
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f000 f885 	bl	8001fe0 <APPE_SysEvtError>
    break;
 8001ed6:	e062      	b.n	8001f9e <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CPU2 \n");
 8001ed8:	4833      	ldr	r0, [pc, #204]	@ (8001fa8 <APPE_SysUserEvtRx+0x1cc>)
 8001eda:	f009 f8bb 	bl	800b054 <DbgTraceGetFileName>
 8001ede:	4601      	mov	r1, r0
 8001ee0:	f44f 73bc 	mov.w	r3, #376	@ 0x178
 8001ee4:	4a31      	ldr	r2, [pc, #196]	@ (8001fac <APPE_SysUserEvtRx+0x1d0>)
 8001ee6:	4832      	ldr	r0, [pc, #200]	@ (8001fb0 <APPE_SysUserEvtRx+0x1d4>)
 8001ee8:	f00c fbf4 	bl	800e6d4 <iprintf>
 8001eec:	4836      	ldr	r0, [pc, #216]	@ (8001fc8 <APPE_SysUserEvtRx+0x1ec>)
 8001eee:	f00c fc61 	bl	800e7b4 <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 8001ef2:	482d      	ldr	r0, [pc, #180]	@ (8001fa8 <APPE_SysUserEvtRx+0x1cc>)
 8001ef4:	f009 f8ae 	bl	800b054 <DbgTraceGetFileName>
 8001ef8:	4601      	mov	r1, r0
 8001efa:	f240 1379 	movw	r3, #377	@ 0x179
 8001efe:	4a2b      	ldr	r2, [pc, #172]	@ (8001fac <APPE_SysUserEvtRx+0x1d0>)
 8001f00:	482b      	ldr	r0, [pc, #172]	@ (8001fb0 <APPE_SysUserEvtRx+0x1d4>)
 8001f02:	f00c fbe7 	bl	800e6d4 <iprintf>
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	3302      	adds	r3, #2
 8001f0a:	6819      	ldr	r1, [r3, #0]
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	3302      	adds	r3, #2
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	461a      	mov	r2, r3
 8001f14:	482d      	ldr	r0, [pc, #180]	@ (8001fcc <APPE_SysUserEvtRx+0x1f0>)
 8001f16:	f00c fbdd 	bl	800e6d4 <iprintf>
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
    break;
 8001f1a:	e040      	b.n	8001f9e <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 8001f1c:	4822      	ldr	r0, [pc, #136]	@ (8001fa8 <APPE_SysUserEvtRx+0x1cc>)
 8001f1e:	f009 f899 	bl	800b054 <DbgTraceGetFileName>
 8001f22:	4601      	mov	r1, r0
 8001f24:	f240 137f 	movw	r3, #383	@ 0x17f
 8001f28:	4a20      	ldr	r2, [pc, #128]	@ (8001fac <APPE_SysUserEvtRx+0x1d0>)
 8001f2a:	4821      	ldr	r0, [pc, #132]	@ (8001fb0 <APPE_SysUserEvtRx+0x1d4>)
 8001f2c:	f00c fbd2 	bl	800e6d4 <iprintf>
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	3302      	adds	r3, #2
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4619      	mov	r1, r3
 8001f38:	4825      	ldr	r0, [pc, #148]	@ (8001fd0 <APPE_SysUserEvtRx+0x1f4>)
 8001f3a:	f00c fbcb 	bl	800e6d4 <iprintf>
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
    break;
 8001f3e:	e02e      	b.n	8001f9e <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 8001f40:	4819      	ldr	r0, [pc, #100]	@ (8001fa8 <APPE_SysUserEvtRx+0x1cc>)
 8001f42:	f009 f887 	bl	800b054 <DbgTraceGetFileName>
 8001f46:	4601      	mov	r1, r0
 8001f48:	f44f 73c2 	mov.w	r3, #388	@ 0x184
 8001f4c:	4a17      	ldr	r2, [pc, #92]	@ (8001fac <APPE_SysUserEvtRx+0x1d0>)
 8001f4e:	4818      	ldr	r0, [pc, #96]	@ (8001fb0 <APPE_SysUserEvtRx+0x1d4>)
 8001f50:	f00c fbc0 	bl	800e6d4 <iprintf>
 8001f54:	481f      	ldr	r0, [pc, #124]	@ (8001fd4 <APPE_SysUserEvtRx+0x1f8>)
 8001f56:	f00c fbbd 	bl	800e6d4 <iprintf>
    break;
 8001f5a:	e020      	b.n	8001f9e <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 8001f5c:	4812      	ldr	r0, [pc, #72]	@ (8001fa8 <APPE_SysUserEvtRx+0x1cc>)
 8001f5e:	f009 f879 	bl	800b054 <DbgTraceGetFileName>
 8001f62:	4601      	mov	r1, r0
 8001f64:	f44f 73c4 	mov.w	r3, #392	@ 0x188
 8001f68:	4a10      	ldr	r2, [pc, #64]	@ (8001fac <APPE_SysUserEvtRx+0x1d0>)
 8001f6a:	4811      	ldr	r0, [pc, #68]	@ (8001fb0 <APPE_SysUserEvtRx+0x1d4>)
 8001f6c:	f00c fbb2 	bl	800e6d4 <iprintf>
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	3302      	adds	r3, #2
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4619      	mov	r1, r3
 8001f78:	4817      	ldr	r0, [pc, #92]	@ (8001fd8 <APPE_SysUserEvtRx+0x1fc>)
 8001f7a:	f00c fbab 	bl	800e6d4 <iprintf>
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
    break;
 8001f7e:	e00e      	b.n	8001f9e <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 8001f80:	4809      	ldr	r0, [pc, #36]	@ (8001fa8 <APPE_SysUserEvtRx+0x1cc>)
 8001f82:	f009 f867 	bl	800b054 <DbgTraceGetFileName>
 8001f86:	4601      	mov	r1, r0
 8001f88:	f240 138d 	movw	r3, #397	@ 0x18d
 8001f8c:	4a07      	ldr	r2, [pc, #28]	@ (8001fac <APPE_SysUserEvtRx+0x1d0>)
 8001f8e:	4808      	ldr	r0, [pc, #32]	@ (8001fb0 <APPE_SysUserEvtRx+0x1d4>)
 8001f90:	f00c fba0 	bl	800e6d4 <iprintf>
 8001f94:	4811      	ldr	r0, [pc, #68]	@ (8001fdc <APPE_SysUserEvtRx+0x200>)
 8001f96:	f00c fb9d 	bl	800e6d4 <iprintf>
    break;
 8001f9a:	e000      	b.n	8001f9e <APPE_SysUserEvtRx+0x1c2>

  default:
    break;
 8001f9c:	bf00      	nop
  }

  return;
 8001f9e:	bf00      	nop
}
 8001fa0:	3720      	adds	r7, #32
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	08012154 	.word	0x08012154
 8001fac:	080136c0 	.word	0x080136c0
 8001fb0:	0801216c 	.word	0x0801216c
 8001fb4:	08012180 	.word	0x08012180
 8001fb8:	080121a4 	.word	0x080121a4
 8001fbc:	080121c0 	.word	0x080121c0
 8001fc0:	080121d8 	.word	0x080121d8
 8001fc4:	080121f8 	.word	0x080121f8
 8001fc8:	0801221c 	.word	0x0801221c
 8001fcc:	0801226c 	.word	0x0801226c
 8001fd0:	08012294 	.word	0x08012294
 8001fd4:	080122d0 	.word	0x080122d0
 8001fd8:	080122f4 	.word	0x080122f4
 8001fdc:	08012330 	.word	0x08012330

08001fe0 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	330b      	adds	r3, #11
 8001fee:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	3302      	adds	r3, #2
 8001ff4:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 8001ff6:	4819      	ldr	r0, [pc, #100]	@ (800205c <APPE_SysEvtError+0x7c>)
 8001ff8:	f009 f82c 	bl	800b054 <DbgTraceGetFileName>
 8001ffc:	4601      	mov	r1, r0
 8001ffe:	f240 13a5 	movw	r3, #421	@ 0x1a5
 8002002:	4a17      	ldr	r2, [pc, #92]	@ (8002060 <APPE_SysEvtError+0x80>)
 8002004:	4817      	ldr	r0, [pc, #92]	@ (8002064 <APPE_SysEvtError+0x84>)
 8002006:	f00c fb65 	bl	800e6d4 <iprintf>
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	4619      	mov	r1, r3
 8002010:	4815      	ldr	r0, [pc, #84]	@ (8002068 <APPE_SysEvtError+0x88>)
 8002012:	f00c fb5f 	bl	800e6d4 <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d10d      	bne.n	800203a <APPE_SysEvtError+0x5a>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 800201e:	480f      	ldr	r0, [pc, #60]	@ (800205c <APPE_SysEvtError+0x7c>)
 8002020:	f009 f818 	bl	800b054 <DbgTraceGetFileName>
 8002024:	4601      	mov	r1, r0
 8002026:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800202a:	4a0d      	ldr	r2, [pc, #52]	@ (8002060 <APPE_SysEvtError+0x80>)
 800202c:	480d      	ldr	r0, [pc, #52]	@ (8002064 <APPE_SysEvtError+0x84>)
 800202e:	f00c fb51 	bl	800e6d4 <iprintf>
 8002032:	480e      	ldr	r0, [pc, #56]	@ (800206c <APPE_SysEvtError+0x8c>)
 8002034:	f00c fbbe 	bl	800e7b4 <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8002038:	e00d      	b.n	8002056 <APPE_SysEvtError+0x76>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 800203a:	4808      	ldr	r0, [pc, #32]	@ (800205c <APPE_SysEvtError+0x7c>)
 800203c:	f009 f80a 	bl	800b054 <DbgTraceGetFileName>
 8002040:	4601      	mov	r1, r0
 8002042:	f44f 73d7 	mov.w	r3, #430	@ 0x1ae
 8002046:	4a06      	ldr	r2, [pc, #24]	@ (8002060 <APPE_SysEvtError+0x80>)
 8002048:	4806      	ldr	r0, [pc, #24]	@ (8002064 <APPE_SysEvtError+0x84>)
 800204a:	f00c fb43 	bl	800e6d4 <iprintf>
 800204e:	4808      	ldr	r0, [pc, #32]	@ (8002070 <APPE_SysEvtError+0x90>)
 8002050:	f00c fbb0 	bl	800e7b4 <puts>
  return;
 8002054:	bf00      	nop
}
 8002056:	3710      	adds	r7, #16
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	08012154 	.word	0x08012154
 8002060:	080136d4 	.word	0x080136d4
 8002064:	0801216c 	.word	0x0801216c
 8002068:	08012354 	.word	0x08012354
 800206c:	08012384 	.word	0x08012384
 8002070:	080123c0 	.word	0x080123c0

08002074 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b08a      	sub	sp, #40	@ 0x28
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 800207c:	f107 0308 	add.w	r3, r7, #8
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	605a      	str	r2, [r3, #4]
 8002086:	609a      	str	r2, [r3, #8]
 8002088:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 800208a:	2300      	movs	r3, #0
 800208c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 800208e:	2300      	movs	r3, #0
 8002090:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	330b      	adds	r3, #11
 8002098:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	3302      	adds	r3, #2
 800209e:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d146      	bne.n	8002136 <APPE_SysEvtReadyProcessing+0xc2>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 80020a8:	4836      	ldr	r0, [pc, #216]	@ (8002184 <APPE_SysEvtReadyProcessing+0x110>)
 80020aa:	f008 ffd3 	bl	800b054 <DbgTraceGetFileName>
 80020ae:	4601      	mov	r1, r0
 80020b0:	f44f 73e2 	mov.w	r3, #452	@ 0x1c4
 80020b4:	4a34      	ldr	r2, [pc, #208]	@ (8002188 <APPE_SysEvtReadyProcessing+0x114>)
 80020b6:	4835      	ldr	r0, [pc, #212]	@ (800218c <APPE_SysEvtReadyProcessing+0x118>)
 80020b8:	f00c fb0c 	bl	800e6d4 <iprintf>
 80020bc:	4834      	ldr	r0, [pc, #208]	@ (8002190 <APPE_SysEvtReadyProcessing+0x11c>)
 80020be:	f00c fb79 	bl	800e7b4 <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2();
 80020c2:	f7ff fc43 	bl	800194c <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 80020c6:	230f      	movs	r3, #15
 80020c8:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 80020ca:	237f      	movs	r3, #127	@ 0x7f
 80020cc:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 80020ce:	f7ff fd83 	bl	8001bd8 <LL_DBGMCU_GetRevisionID>
 80020d2:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 80020d4:	482b      	ldr	r0, [pc, #172]	@ (8002184 <APPE_SysEvtReadyProcessing+0x110>)
 80020d6:	f008 ffbd 	bl	800b054 <DbgTraceGetFileName>
 80020da:	4601      	mov	r1, r0
 80020dc:	f44f 73ee 	mov.w	r3, #476	@ 0x1dc
 80020e0:	4a29      	ldr	r2, [pc, #164]	@ (8002188 <APPE_SysEvtReadyProcessing+0x114>)
 80020e2:	482a      	ldr	r0, [pc, #168]	@ (800218c <APPE_SysEvtReadyProcessing+0x118>)
 80020e4:	f00c faf6 	bl	800e6d4 <iprintf>
 80020e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80020ea:	482a      	ldr	r0, [pc, #168]	@ (8002194 <APPE_SysEvtReadyProcessing+0x120>)
 80020ec:	f00c faf2 	bl	800e6d4 <iprintf>

    config_param.RevisionID = (uint16_t)RevisionID;
 80020f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 80020f6:	f7ff fd61 	bl	8001bbc <LL_DBGMCU_GetDeviceID>
 80020fa:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
 80020fc:	4821      	ldr	r0, [pc, #132]	@ (8002184 <APPE_SysEvtReadyProcessing+0x110>)
 80020fe:	f008 ffa9 	bl	800b054 <DbgTraceGetFileName>
 8002102:	4601      	mov	r1, r0
 8002104:	f240 13e1 	movw	r3, #481	@ 0x1e1
 8002108:	4a1f      	ldr	r2, [pc, #124]	@ (8002188 <APPE_SysEvtReadyProcessing+0x114>)
 800210a:	4820      	ldr	r0, [pc, #128]	@ (800218c <APPE_SysEvtReadyProcessing+0x118>)
 800210c:	f00c fae2 	bl	800e6d4 <iprintf>
 8002110:	6a39      	ldr	r1, [r7, #32]
 8002112:	4821      	ldr	r0, [pc, #132]	@ (8002198 <APPE_SysEvtReadyProcessing+0x124>)
 8002114:	f00c fade 	bl	800e6d4 <iprintf>
    config_param.DeviceID = (uint16_t)DeviceID;
 8002118:	6a3b      	ldr	r3, [r7, #32]
 800211a:	b29b      	uxth	r3, r3
 800211c:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 800211e:	f107 0308 	add.w	r3, r7, #8
 8002122:	4618      	mov	r0, r3
 8002124:	f008 f9b6 	bl	800a494 <SHCI_C2_Config>

    APP_BLE_Init();
 8002128:	f009 fd78 	bl	800bc1c <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 800212c:	2100      	movs	r1, #0
 800212e:	2001      	movs	r0, #1
 8002130:	f00b f958 	bl	800d3e4 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8002134:	e022      	b.n	800217c <APPE_SysEvtReadyProcessing+0x108>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	2b01      	cmp	r3, #1
 800213c:	d110      	bne.n	8002160 <APPE_SysEvtReadyProcessing+0xec>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 800213e:	4811      	ldr	r0, [pc, #68]	@ (8002184 <APPE_SysEvtReadyProcessing+0x110>)
 8002140:	f008 ff88 	bl	800b054 <DbgTraceGetFileName>
 8002144:	4601      	mov	r1, r0
 8002146:	f44f 73f7 	mov.w	r3, #494	@ 0x1ee
 800214a:	4a0f      	ldr	r2, [pc, #60]	@ (8002188 <APPE_SysEvtReadyProcessing+0x114>)
 800214c:	480f      	ldr	r0, [pc, #60]	@ (800218c <APPE_SysEvtReadyProcessing+0x118>)
 800214e:	f00c fac1 	bl	800e6d4 <iprintf>
 8002152:	4812      	ldr	r0, [pc, #72]	@ (800219c <APPE_SysEvtReadyProcessing+0x128>)
 8002154:	f00c fabe 	bl	800e6d4 <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	701a      	strb	r2, [r3, #0]
  return;
 800215e:	e00d      	b.n	800217c <APPE_SysEvtReadyProcessing+0x108>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 8002160:	4808      	ldr	r0, [pc, #32]	@ (8002184 <APPE_SysEvtReadyProcessing+0x110>)
 8002162:	f008 ff77 	bl	800b054 <DbgTraceGetFileName>
 8002166:	4601      	mov	r1, r0
 8002168:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800216c:	4a06      	ldr	r2, [pc, #24]	@ (8002188 <APPE_SysEvtReadyProcessing+0x114>)
 800216e:	4807      	ldr	r0, [pc, #28]	@ (800218c <APPE_SysEvtReadyProcessing+0x118>)
 8002170:	f00c fab0 	bl	800e6d4 <iprintf>
 8002174:	480a      	ldr	r0, [pc, #40]	@ (80021a0 <APPE_SysEvtReadyProcessing+0x12c>)
 8002176:	f00c faad 	bl	800e6d4 <iprintf>
  return;
 800217a:	bf00      	nop
}
 800217c:	3728      	adds	r7, #40	@ 0x28
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	08012154 	.word	0x08012154
 8002188:	080136e8 	.word	0x080136e8
 800218c:	0801216c 	.word	0x0801216c
 8002190:	080123f8 	.word	0x080123f8
 8002194:	08012414 	.word	0x08012414
 8002198:	08012438 	.word	0x08012438
 800219c:	08012458 	.word	0x08012458
 80021a0:	0801248c 	.word	0x0801248c

080021a4 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021ac:	f001 fd86 	bl	8003cbc <HAL_GetTick>
 80021b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021bc:	d00a      	beq.n	80021d4 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 80021be:	f001 fd95 	bl	8003cec <HAL_GetTickFreq>
 80021c2:	4603      	mov	r3, r0
 80021c4:	461a      	mov	r2, r3
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	4413      	add	r3, r2
 80021ca:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021cc:	e002      	b.n	80021d4 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 80021ce:	f7ff fd11 	bl	8001bf4 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM) || defined (__ARMCC_VERSION)
    __force_stores();
  #endif /* __ARMCC_VERSION */

    __WFI();
 80021d2:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 80021d4:	f001 fd72 	bl	8003cbc <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d8f4      	bhi.n	80021ce <HAL_Delay+0x2a>
  }
}
 80021e4:	bf00      	nop
 80021e6:	bf00      	nop
 80021e8:	3710      	adds	r7, #16
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80021f2:	f04f 30ff 	mov.w	r0, #4294967295
 80021f6:	f00b f925 	bl	800d444 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 80021fa:	bf00      	nop
 80021fc:	bd80      	pop	{r7, pc}

080021fe <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 80021fe:	b480      	push	{r7}
 8002200:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8002202:	bf00      	nop
}
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8002216:	f04f 30ff 	mov.w	r0, #4294967295
 800221a:	f00b f913 	bl	800d444 <UTIL_SEQ_Run>
  return;
 800221e:	bf00      	nop
}
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8002226:	b580      	push	{r7, lr}
 8002228:	b082      	sub	sp, #8
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800222e:	2100      	movs	r1, #0
 8002230:	2004      	movs	r0, #4
 8002232:	f00b fa25 	bl	800d680 <UTIL_SEQ_SetTask>
  return;
 8002236:	bf00      	nop
}
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}

0800223e <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 800223e:	b580      	push	{r7, lr}
 8002240:	b082      	sub	sp, #8
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8002246:	2002      	movs	r0, #2
 8002248:	f00b fa86 	bl	800d758 <UTIL_SEQ_SetEvt>
  return;
 800224c:	bf00      	nop
}
 800224e:	3708      	adds	r7, #8
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 800225c:	2002      	movs	r0, #2
 800225e:	f00b fa9b 	bl	800d798 <UTIL_SEQ_WaitEvt>
  return;
 8002262:	bf00      	nop
}
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <LL_AHB1_GRP1_EnableClock>:
{
 800226a:	b480      	push	{r7}
 800226c:	b085      	sub	sp, #20
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002272:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002276:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002278:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4313      	orrs	r3, r2
 8002280:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002282:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002286:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	4013      	ands	r3, r2
 800228c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800228e:	68fb      	ldr	r3, [r7, #12]
}
 8002290:	bf00      	nop
 8002292:	3714      	adds	r7, #20
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80022a0:	2004      	movs	r0, #4
 80022a2:	f7ff ffe2 	bl	800226a <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80022a6:	2001      	movs	r0, #1
 80022a8:	f7ff ffdf 	bl	800226a <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80022ac:	2200      	movs	r2, #0
 80022ae:	2100      	movs	r1, #0
 80022b0:	200b      	movs	r0, #11
 80022b2:	f001 fe6e 	bl	8003f92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80022b6:	200b      	movs	r0, #11
 80022b8:	f001 fe85 	bl	8003fc6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80022bc:	2200      	movs	r2, #0
 80022be:	2100      	movs	r1, #0
 80022c0:	200c      	movs	r0, #12
 80022c2:	f001 fe66 	bl	8003f92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80022c6:	200c      	movs	r0, #12
 80022c8:	f001 fe7d 	bl	8003fc6 <HAL_NVIC_EnableIRQ>

}
 80022cc:	bf00      	nop
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <LL_AHB2_GRP1_EnableClock>:
{
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80022d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022dc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80022de:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80022e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022ec:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4013      	ands	r3, r2
 80022f2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80022f4:	68fb      	ldr	r3, [r7, #12]
}
 80022f6:	bf00      	nop
 80022f8:	3714      	adds	r7, #20
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
	...

08002304 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b086      	sub	sp, #24
 8002308:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800230a:	1d3b      	adds	r3, r7, #4
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]
 8002310:	605a      	str	r2, [r3, #4]
 8002312:	609a      	str	r2, [r3, #8]
 8002314:	60da      	str	r2, [r3, #12]
 8002316:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002318:	2004      	movs	r0, #4
 800231a:	f7ff ffd9 	bl	80022d0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800231e:	2002      	movs	r0, #2
 8002320:	f7ff ffd6 	bl	80022d0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002324:	2001      	movs	r0, #1
 8002326:	f7ff ffd3 	bl	80022d0 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5, GPIO_PIN_RESET);
 800232a:	2200      	movs	r2, #0
 800232c:	2123      	movs	r1, #35	@ 0x23
 800232e:	4815      	ldr	r0, [pc, #84]	@ (8002384 <MX_GPIO_Init+0x80>)
 8002330:	f002 fb48 	bl	80049c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002334:	2310      	movs	r3, #16
 8002336:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002338:	2300      	movs	r3, #0
 800233a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800233c:	2301      	movs	r3, #1
 800233e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002340:	1d3b      	adds	r3, r7, #4
 8002342:	4619      	mov	r1, r3
 8002344:	4810      	ldr	r0, [pc, #64]	@ (8002388 <MX_GPIO_Init+0x84>)
 8002346:	f002 f9b5 	bl	80046b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5;
 800234a:	2323      	movs	r3, #35	@ 0x23
 800234c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800234e:	2301      	movs	r3, #1
 8002350:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002352:	2300      	movs	r3, #0
 8002354:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002356:	2300      	movs	r3, #0
 8002358:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800235a:	1d3b      	adds	r3, r7, #4
 800235c:	4619      	mov	r1, r3
 800235e:	4809      	ldr	r0, [pc, #36]	@ (8002384 <MX_GPIO_Init+0x80>)
 8002360:	f002 f9a8 	bl	80046b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002364:	2380      	movs	r3, #128	@ 0x80
 8002366:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002368:	2300      	movs	r3, #0
 800236a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800236c:	2301      	movs	r3, #1
 800236e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002370:	1d3b      	adds	r3, r7, #4
 8002372:	4619      	mov	r1, r3
 8002374:	4803      	ldr	r0, [pc, #12]	@ (8002384 <MX_GPIO_Init+0x80>)
 8002376:	f002 f99d 	bl	80046b4 <HAL_GPIO_Init>

}
 800237a:	bf00      	nop
 800237c:	3718      	adds	r7, #24
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	48000400 	.word	0x48000400
 8002388:	48000800 	.word	0x48000800

0800238c <LL_EXTI_EnableIT_0_31>:
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002394:	4b06      	ldr	r3, [pc, #24]	@ (80023b0 <LL_EXTI_EnableIT_0_31+0x24>)
 8002396:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800239a:	4905      	ldr	r1, [pc, #20]	@ (80023b0 <LL_EXTI_EnableIT_0_31+0x24>)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	4313      	orrs	r3, r2
 80023a0:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 80023a4:	bf00      	nop
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr
 80023b0:	58000800 	.word	0x58000800

080023b4 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80023bc:	4b05      	ldr	r3, [pc, #20]	@ (80023d4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	4904      	ldr	r1, [pc, #16]	@ (80023d4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	600b      	str	r3, [r1, #0]

}
 80023c8:	bf00      	nop
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr
 80023d4:	58000800 	.word	0x58000800

080023d8 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80023de:	4b0d      	ldr	r3, [pc, #52]	@ (8002414 <ReadRtcSsrValue+0x3c>)
 80023e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80023e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002414 <ReadRtcSsrValue+0x3c>)
 80023e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 80023ee:	e005      	b.n	80023fc <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80023f4:	4b07      	ldr	r3, [pc, #28]	@ (8002414 <ReadRtcSsrValue+0x3c>)
 80023f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	429a      	cmp	r2, r3
 8002402:	d1f5      	bne.n	80023f0 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8002404:	683b      	ldr	r3, [r7, #0]
}
 8002406:	4618      	mov	r0, r3
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	40002800 	.word	0x40002800

08002418 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8002418:	b480      	push	{r7}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	4603      	mov	r3, r0
 8002420:	460a      	mov	r2, r1
 8002422:	71fb      	strb	r3, [r7, #7]
 8002424:	4613      	mov	r3, r2
 8002426:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8002428:	79ba      	ldrb	r2, [r7, #6]
 800242a:	491d      	ldr	r1, [pc, #116]	@ (80024a0 <LinkTimerAfter+0x88>)
 800242c:	4613      	mov	r3, r2
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	4413      	add	r3, r2
 8002432:	00db      	lsls	r3, r3, #3
 8002434:	440b      	add	r3, r1
 8002436:	3315      	adds	r3, #21
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800243c:	7bfb      	ldrb	r3, [r7, #15]
 800243e:	2b06      	cmp	r3, #6
 8002440:	d009      	beq.n	8002456 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8002442:	7bfa      	ldrb	r2, [r7, #15]
 8002444:	4916      	ldr	r1, [pc, #88]	@ (80024a0 <LinkTimerAfter+0x88>)
 8002446:	4613      	mov	r3, r2
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	4413      	add	r3, r2
 800244c:	00db      	lsls	r3, r3, #3
 800244e:	440b      	add	r3, r1
 8002450:	3314      	adds	r3, #20
 8002452:	79fa      	ldrb	r2, [r7, #7]
 8002454:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8002456:	79fa      	ldrb	r2, [r7, #7]
 8002458:	4911      	ldr	r1, [pc, #68]	@ (80024a0 <LinkTimerAfter+0x88>)
 800245a:	4613      	mov	r3, r2
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	4413      	add	r3, r2
 8002460:	00db      	lsls	r3, r3, #3
 8002462:	440b      	add	r3, r1
 8002464:	3315      	adds	r3, #21
 8002466:	7bfa      	ldrb	r2, [r7, #15]
 8002468:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 800246a:	79fa      	ldrb	r2, [r7, #7]
 800246c:	490c      	ldr	r1, [pc, #48]	@ (80024a0 <LinkTimerAfter+0x88>)
 800246e:	4613      	mov	r3, r2
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	4413      	add	r3, r2
 8002474:	00db      	lsls	r3, r3, #3
 8002476:	440b      	add	r3, r1
 8002478:	3314      	adds	r3, #20
 800247a:	79ba      	ldrb	r2, [r7, #6]
 800247c:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 800247e:	79ba      	ldrb	r2, [r7, #6]
 8002480:	4907      	ldr	r1, [pc, #28]	@ (80024a0 <LinkTimerAfter+0x88>)
 8002482:	4613      	mov	r3, r2
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	4413      	add	r3, r2
 8002488:	00db      	lsls	r3, r3, #3
 800248a:	440b      	add	r3, r1
 800248c:	3315      	adds	r3, #21
 800248e:	79fa      	ldrb	r2, [r7, #7]
 8002490:	701a      	strb	r2, [r3, #0]

  return;
 8002492:	bf00      	nop
}
 8002494:	3714      	adds	r7, #20
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	200021b0 	.word	0x200021b0

080024a4 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b085      	sub	sp, #20
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	4603      	mov	r3, r0
 80024ac:	460a      	mov	r2, r1
 80024ae:	71fb      	strb	r3, [r7, #7]
 80024b0:	4613      	mov	r3, r2
 80024b2:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 80024b4:	4b29      	ldr	r3, [pc, #164]	@ (800255c <LinkTimerBefore+0xb8>)
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	79ba      	ldrb	r2, [r7, #6]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d032      	beq.n	8002526 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 80024c0:	79ba      	ldrb	r2, [r7, #6]
 80024c2:	4927      	ldr	r1, [pc, #156]	@ (8002560 <LinkTimerBefore+0xbc>)
 80024c4:	4613      	mov	r3, r2
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	4413      	add	r3, r2
 80024ca:	00db      	lsls	r3, r3, #3
 80024cc:	440b      	add	r3, r1
 80024ce:	3314      	adds	r3, #20
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 80024d4:	7bfa      	ldrb	r2, [r7, #15]
 80024d6:	4922      	ldr	r1, [pc, #136]	@ (8002560 <LinkTimerBefore+0xbc>)
 80024d8:	4613      	mov	r3, r2
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	4413      	add	r3, r2
 80024de:	00db      	lsls	r3, r3, #3
 80024e0:	440b      	add	r3, r1
 80024e2:	3315      	adds	r3, #21
 80024e4:	79fa      	ldrb	r2, [r7, #7]
 80024e6:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 80024e8:	79fa      	ldrb	r2, [r7, #7]
 80024ea:	491d      	ldr	r1, [pc, #116]	@ (8002560 <LinkTimerBefore+0xbc>)
 80024ec:	4613      	mov	r3, r2
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	4413      	add	r3, r2
 80024f2:	00db      	lsls	r3, r3, #3
 80024f4:	440b      	add	r3, r1
 80024f6:	3315      	adds	r3, #21
 80024f8:	79ba      	ldrb	r2, [r7, #6]
 80024fa:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 80024fc:	79fa      	ldrb	r2, [r7, #7]
 80024fe:	4918      	ldr	r1, [pc, #96]	@ (8002560 <LinkTimerBefore+0xbc>)
 8002500:	4613      	mov	r3, r2
 8002502:	005b      	lsls	r3, r3, #1
 8002504:	4413      	add	r3, r2
 8002506:	00db      	lsls	r3, r3, #3
 8002508:	440b      	add	r3, r1
 800250a:	3314      	adds	r3, #20
 800250c:	7bfa      	ldrb	r2, [r7, #15]
 800250e:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8002510:	79ba      	ldrb	r2, [r7, #6]
 8002512:	4913      	ldr	r1, [pc, #76]	@ (8002560 <LinkTimerBefore+0xbc>)
 8002514:	4613      	mov	r3, r2
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	4413      	add	r3, r2
 800251a:	00db      	lsls	r3, r3, #3
 800251c:	440b      	add	r3, r1
 800251e:	3314      	adds	r3, #20
 8002520:	79fa      	ldrb	r2, [r7, #7]
 8002522:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8002524:	e014      	b.n	8002550 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8002526:	79fa      	ldrb	r2, [r7, #7]
 8002528:	490d      	ldr	r1, [pc, #52]	@ (8002560 <LinkTimerBefore+0xbc>)
 800252a:	4613      	mov	r3, r2
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	4413      	add	r3, r2
 8002530:	00db      	lsls	r3, r3, #3
 8002532:	440b      	add	r3, r1
 8002534:	3315      	adds	r3, #21
 8002536:	79ba      	ldrb	r2, [r7, #6]
 8002538:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800253a:	79ba      	ldrb	r2, [r7, #6]
 800253c:	4908      	ldr	r1, [pc, #32]	@ (8002560 <LinkTimerBefore+0xbc>)
 800253e:	4613      	mov	r3, r2
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	4413      	add	r3, r2
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	440b      	add	r3, r1
 8002548:	3314      	adds	r3, #20
 800254a:	79fa      	ldrb	r2, [r7, #7]
 800254c:	701a      	strb	r2, [r3, #0]
  return;
 800254e:	bf00      	nop
}
 8002550:	3714      	adds	r7, #20
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	20002240 	.word	0x20002240
 8002560:	200021b0 	.word	0x200021b0

08002564 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	4603      	mov	r3, r0
 800256c:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800256e:	4b4e      	ldr	r3, [pc, #312]	@ (80026a8 <linkTimer+0x144>)
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	b2db      	uxtb	r3, r3
 8002574:	2b06      	cmp	r3, #6
 8002576:	d118      	bne.n	80025aa <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8002578:	4b4b      	ldr	r3, [pc, #300]	@ (80026a8 <linkTimer+0x144>)
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	b2da      	uxtb	r2, r3
 800257e:	4b4b      	ldr	r3, [pc, #300]	@ (80026ac <linkTimer+0x148>)
 8002580:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8002582:	4a49      	ldr	r2, [pc, #292]	@ (80026a8 <linkTimer+0x144>)
 8002584:	79fb      	ldrb	r3, [r7, #7]
 8002586:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8002588:	79fa      	ldrb	r2, [r7, #7]
 800258a:	4949      	ldr	r1, [pc, #292]	@ (80026b0 <linkTimer+0x14c>)
 800258c:	4613      	mov	r3, r2
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	4413      	add	r3, r2
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	440b      	add	r3, r1
 8002596:	3315      	adds	r3, #21
 8002598:	2206      	movs	r2, #6
 800259a:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800259c:	4b45      	ldr	r3, [pc, #276]	@ (80026b4 <linkTimer+0x150>)
 800259e:	f04f 32ff 	mov.w	r2, #4294967295
 80025a2:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 80025a4:	2300      	movs	r3, #0
 80025a6:	81fb      	strh	r3, [r7, #14]
 80025a8:	e078      	b.n	800269c <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 80025aa:	f000 f909 	bl	80027c0 <ReturnTimeElapsed>
 80025ae:	4603      	mov	r3, r0
 80025b0:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 80025b2:	79fa      	ldrb	r2, [r7, #7]
 80025b4:	493e      	ldr	r1, [pc, #248]	@ (80026b0 <linkTimer+0x14c>)
 80025b6:	4613      	mov	r3, r2
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	4413      	add	r3, r2
 80025bc:	00db      	lsls	r3, r3, #3
 80025be:	440b      	add	r3, r1
 80025c0:	3308      	adds	r3, #8
 80025c2:	6819      	ldr	r1, [r3, #0]
 80025c4:	89fb      	ldrh	r3, [r7, #14]
 80025c6:	79fa      	ldrb	r2, [r7, #7]
 80025c8:	4419      	add	r1, r3
 80025ca:	4839      	ldr	r0, [pc, #228]	@ (80026b0 <linkTimer+0x14c>)
 80025cc:	4613      	mov	r3, r2
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	4413      	add	r3, r2
 80025d2:	00db      	lsls	r3, r3, #3
 80025d4:	4403      	add	r3, r0
 80025d6:	3308      	adds	r3, #8
 80025d8:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 80025da:	79fa      	ldrb	r2, [r7, #7]
 80025dc:	4934      	ldr	r1, [pc, #208]	@ (80026b0 <linkTimer+0x14c>)
 80025de:	4613      	mov	r3, r2
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	4413      	add	r3, r2
 80025e4:	00db      	lsls	r3, r3, #3
 80025e6:	440b      	add	r3, r1
 80025e8:	3308      	adds	r3, #8
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 80025ee:	4b2e      	ldr	r3, [pc, #184]	@ (80026a8 <linkTimer+0x144>)
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	4619      	mov	r1, r3
 80025f6:	4a2e      	ldr	r2, [pc, #184]	@ (80026b0 <linkTimer+0x14c>)
 80025f8:	460b      	mov	r3, r1
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	440b      	add	r3, r1
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	4413      	add	r3, r2
 8002602:	3308      	adds	r3, #8
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	68ba      	ldr	r2, [r7, #8]
 8002608:	429a      	cmp	r2, r3
 800260a:	d337      	bcc.n	800267c <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 800260c:	4b26      	ldr	r3, [pc, #152]	@ (80026a8 <linkTimer+0x144>)
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8002612:	7b7a      	ldrb	r2, [r7, #13]
 8002614:	4926      	ldr	r1, [pc, #152]	@ (80026b0 <linkTimer+0x14c>)
 8002616:	4613      	mov	r3, r2
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	4413      	add	r3, r2
 800261c:	00db      	lsls	r3, r3, #3
 800261e:	440b      	add	r3, r1
 8002620:	3315      	adds	r3, #21
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8002626:	e013      	b.n	8002650 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8002628:	7b7a      	ldrb	r2, [r7, #13]
 800262a:	4921      	ldr	r1, [pc, #132]	@ (80026b0 <linkTimer+0x14c>)
 800262c:	4613      	mov	r3, r2
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	4413      	add	r3, r2
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	440b      	add	r3, r1
 8002636:	3315      	adds	r3, #21
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 800263c:	7b7a      	ldrb	r2, [r7, #13]
 800263e:	491c      	ldr	r1, [pc, #112]	@ (80026b0 <linkTimer+0x14c>)
 8002640:	4613      	mov	r3, r2
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	4413      	add	r3, r2
 8002646:	00db      	lsls	r3, r3, #3
 8002648:	440b      	add	r3, r1
 800264a:	3315      	adds	r3, #21
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8002650:	7b3b      	ldrb	r3, [r7, #12]
 8002652:	2b06      	cmp	r3, #6
 8002654:	d00b      	beq.n	800266e <linkTimer+0x10a>
 8002656:	7b3a      	ldrb	r2, [r7, #12]
 8002658:	4915      	ldr	r1, [pc, #84]	@ (80026b0 <linkTimer+0x14c>)
 800265a:	4613      	mov	r3, r2
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	4413      	add	r3, r2
 8002660:	00db      	lsls	r3, r3, #3
 8002662:	440b      	add	r3, r1
 8002664:	3308      	adds	r3, #8
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	68ba      	ldr	r2, [r7, #8]
 800266a:	429a      	cmp	r2, r3
 800266c:	d2dc      	bcs.n	8002628 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 800266e:	7b7a      	ldrb	r2, [r7, #13]
 8002670:	79fb      	ldrb	r3, [r7, #7]
 8002672:	4611      	mov	r1, r2
 8002674:	4618      	mov	r0, r3
 8002676:	f7ff fecf 	bl	8002418 <LinkTimerAfter>
 800267a:	e00f      	b.n	800269c <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 800267c:	4b0a      	ldr	r3, [pc, #40]	@ (80026a8 <linkTimer+0x144>)
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	b2da      	uxtb	r2, r3
 8002682:	79fb      	ldrb	r3, [r7, #7]
 8002684:	4611      	mov	r1, r2
 8002686:	4618      	mov	r0, r3
 8002688:	f7ff ff0c 	bl	80024a4 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 800268c:	4b06      	ldr	r3, [pc, #24]	@ (80026a8 <linkTimer+0x144>)
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	b2da      	uxtb	r2, r3
 8002692:	4b06      	ldr	r3, [pc, #24]	@ (80026ac <linkTimer+0x148>)
 8002694:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8002696:	4a04      	ldr	r2, [pc, #16]	@ (80026a8 <linkTimer+0x144>)
 8002698:	79fb      	ldrb	r3, [r7, #7]
 800269a:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 800269c:	89fb      	ldrh	r3, [r7, #14]
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3710      	adds	r7, #16
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	20002240 	.word	0x20002240
 80026ac:	20002241 	.word	0x20002241
 80026b0:	200021b0 	.word	0x200021b0
 80026b4:	20002244 	.word	0x20002244

080026b8 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b085      	sub	sp, #20
 80026bc:	af00      	add	r7, sp, #0
 80026be:	4603      	mov	r3, r0
 80026c0:	460a      	mov	r2, r1
 80026c2:	71fb      	strb	r3, [r7, #7]
 80026c4:	4613      	mov	r3, r2
 80026c6:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 80026c8:	4b39      	ldr	r3, [pc, #228]	@ (80027b0 <UnlinkTimer+0xf8>)
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	79fa      	ldrb	r2, [r7, #7]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d111      	bne.n	80026f8 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 80026d4:	4b36      	ldr	r3, [pc, #216]	@ (80027b0 <UnlinkTimer+0xf8>)
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	b2da      	uxtb	r2, r3
 80026da:	4b36      	ldr	r3, [pc, #216]	@ (80027b4 <UnlinkTimer+0xfc>)
 80026dc:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 80026de:	79fa      	ldrb	r2, [r7, #7]
 80026e0:	4935      	ldr	r1, [pc, #212]	@ (80027b8 <UnlinkTimer+0x100>)
 80026e2:	4613      	mov	r3, r2
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	4413      	add	r3, r2
 80026e8:	00db      	lsls	r3, r3, #3
 80026ea:	440b      	add	r3, r1
 80026ec:	3315      	adds	r3, #21
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	b2da      	uxtb	r2, r3
 80026f2:	4b2f      	ldr	r3, [pc, #188]	@ (80027b0 <UnlinkTimer+0xf8>)
 80026f4:	701a      	strb	r2, [r3, #0]
 80026f6:	e03e      	b.n	8002776 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 80026f8:	79fa      	ldrb	r2, [r7, #7]
 80026fa:	492f      	ldr	r1, [pc, #188]	@ (80027b8 <UnlinkTimer+0x100>)
 80026fc:	4613      	mov	r3, r2
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	4413      	add	r3, r2
 8002702:	00db      	lsls	r3, r3, #3
 8002704:	440b      	add	r3, r1
 8002706:	3314      	adds	r3, #20
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 800270c:	79fa      	ldrb	r2, [r7, #7]
 800270e:	492a      	ldr	r1, [pc, #168]	@ (80027b8 <UnlinkTimer+0x100>)
 8002710:	4613      	mov	r3, r2
 8002712:	005b      	lsls	r3, r3, #1
 8002714:	4413      	add	r3, r2
 8002716:	00db      	lsls	r3, r3, #3
 8002718:	440b      	add	r3, r1
 800271a:	3315      	adds	r3, #21
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8002720:	79f9      	ldrb	r1, [r7, #7]
 8002722:	7bfa      	ldrb	r2, [r7, #15]
 8002724:	4824      	ldr	r0, [pc, #144]	@ (80027b8 <UnlinkTimer+0x100>)
 8002726:	460b      	mov	r3, r1
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	440b      	add	r3, r1
 800272c:	00db      	lsls	r3, r3, #3
 800272e:	4403      	add	r3, r0
 8002730:	3315      	adds	r3, #21
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	b2d8      	uxtb	r0, r3
 8002736:	4920      	ldr	r1, [pc, #128]	@ (80027b8 <UnlinkTimer+0x100>)
 8002738:	4613      	mov	r3, r2
 800273a:	005b      	lsls	r3, r3, #1
 800273c:	4413      	add	r3, r2
 800273e:	00db      	lsls	r3, r3, #3
 8002740:	440b      	add	r3, r1
 8002742:	3315      	adds	r3, #21
 8002744:	4602      	mov	r2, r0
 8002746:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002748:	7bbb      	ldrb	r3, [r7, #14]
 800274a:	2b06      	cmp	r3, #6
 800274c:	d013      	beq.n	8002776 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 800274e:	79f9      	ldrb	r1, [r7, #7]
 8002750:	7bba      	ldrb	r2, [r7, #14]
 8002752:	4819      	ldr	r0, [pc, #100]	@ (80027b8 <UnlinkTimer+0x100>)
 8002754:	460b      	mov	r3, r1
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	440b      	add	r3, r1
 800275a:	00db      	lsls	r3, r3, #3
 800275c:	4403      	add	r3, r0
 800275e:	3314      	adds	r3, #20
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	b2d8      	uxtb	r0, r3
 8002764:	4914      	ldr	r1, [pc, #80]	@ (80027b8 <UnlinkTimer+0x100>)
 8002766:	4613      	mov	r3, r2
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	4413      	add	r3, r2
 800276c:	00db      	lsls	r3, r3, #3
 800276e:	440b      	add	r3, r1
 8002770:	3314      	adds	r3, #20
 8002772:	4602      	mov	r2, r0
 8002774:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8002776:	79fa      	ldrb	r2, [r7, #7]
 8002778:	490f      	ldr	r1, [pc, #60]	@ (80027b8 <UnlinkTimer+0x100>)
 800277a:	4613      	mov	r3, r2
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	4413      	add	r3, r2
 8002780:	00db      	lsls	r3, r3, #3
 8002782:	440b      	add	r3, r1
 8002784:	330c      	adds	r3, #12
 8002786:	2201      	movs	r2, #1
 8002788:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 800278a:	4b09      	ldr	r3, [pc, #36]	@ (80027b0 <UnlinkTimer+0xf8>)
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	b2db      	uxtb	r3, r3
 8002790:	2b06      	cmp	r3, #6
 8002792:	d107      	bne.n	80027a4 <UnlinkTimer+0xec>
 8002794:	79bb      	ldrb	r3, [r7, #6]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d104      	bne.n	80027a4 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800279a:	4b08      	ldr	r3, [pc, #32]	@ (80027bc <UnlinkTimer+0x104>)
 800279c:	f04f 32ff 	mov.w	r2, #4294967295
 80027a0:	601a      	str	r2, [r3, #0]
  }

  return;
 80027a2:	bf00      	nop
 80027a4:	bf00      	nop
}
 80027a6:	3714      	adds	r7, #20
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr
 80027b0:	20002240 	.word	0x20002240
 80027b4:	20002241 	.word	0x20002241
 80027b8:	200021b0 	.word	0x200021b0
 80027bc:	20002244 	.word	0x20002244

080027c0 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 80027c6:	4b1a      	ldr	r3, [pc, #104]	@ (8002830 <ReturnTimeElapsed+0x70>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ce:	d026      	beq.n	800281e <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 80027d0:	f7ff fe02 	bl	80023d8 <ReadRtcSsrValue>
 80027d4:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 80027d6:	4b16      	ldr	r3, [pc, #88]	@ (8002830 <ReturnTimeElapsed+0x70>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	429a      	cmp	r2, r3
 80027de:	d805      	bhi.n	80027ec <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 80027e0:	4b13      	ldr	r3, [pc, #76]	@ (8002830 <ReturnTimeElapsed+0x70>)
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	607b      	str	r3, [r7, #4]
 80027ea:	e00a      	b.n	8002802 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 80027ec:	4b11      	ldr	r3, [pc, #68]	@ (8002834 <ReturnTimeElapsed+0x74>)
 80027ee:	881b      	ldrh	r3, [r3, #0]
 80027f0:	461a      	mov	r2, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 80027f8:	4b0d      	ldr	r3, [pc, #52]	@ (8002830 <ReturnTimeElapsed+0x70>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	683a      	ldr	r2, [r7, #0]
 80027fe:	4413      	add	r3, r2
 8002800:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8002802:	4b0d      	ldr	r3, [pc, #52]	@ (8002838 <ReturnTimeElapsed+0x78>)
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	461a      	mov	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	fb02 f303 	mul.w	r3, r2, r3
 800280e:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8002810:	4b0a      	ldr	r3, [pc, #40]	@ (800283c <ReturnTimeElapsed+0x7c>)
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	461a      	mov	r2, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	40d3      	lsrs	r3, r2
 800281a:	607b      	str	r3, [r7, #4]
 800281c:	e001      	b.n	8002822 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 800281e:	2300      	movs	r3, #0
 8002820:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	b29b      	uxth	r3, r3
}
 8002826:	4618      	mov	r0, r3
 8002828:	3708      	adds	r7, #8
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	20002244 	.word	0x20002244
 8002834:	2000224c 	.word	0x2000224c
 8002838:	2000224a 	.word	0x2000224a
 800283c:	20002249 	.word	0x20002249

08002840 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	4603      	mov	r3, r0
 8002848:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 800284a:	88fb      	ldrh	r3, [r7, #6]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d108      	bne.n	8002862 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8002850:	f7ff fdc2 	bl	80023d8 <ReadRtcSsrValue>
 8002854:	4603      	mov	r3, r0
 8002856:	4a21      	ldr	r2, [pc, #132]	@ (80028dc <RestartWakeupCounter+0x9c>)
 8002858:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800285a:	2003      	movs	r0, #3
 800285c:	f001 fbdb 	bl	8004016 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8002860:	e039      	b.n	80028d6 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8002862:	88fb      	ldrh	r3, [r7, #6]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d803      	bhi.n	8002870 <RestartWakeupCounter+0x30>
 8002868:	4b1d      	ldr	r3, [pc, #116]	@ (80028e0 <RestartWakeupCounter+0xa0>)
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	2b01      	cmp	r3, #1
 800286e:	d002      	beq.n	8002876 <RestartWakeupCounter+0x36>
      Value -= 1;
 8002870:	88fb      	ldrh	r3, [r7, #6]
 8002872:	3b01      	subs	r3, #1
 8002874:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002876:	bf00      	nop
 8002878:	4b1a      	ldr	r3, [pc, #104]	@ (80028e4 <RestartWakeupCounter+0xa4>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	f003 0304 	and.w	r3, r3, #4
 8002882:	2b00      	cmp	r3, #0
 8002884:	d0f8      	beq.n	8002878 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002886:	4b17      	ldr	r3, [pc, #92]	@ (80028e4 <RestartWakeupCounter+0xa4>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	b2da      	uxtb	r2, r3
 800288e:	4b15      	ldr	r3, [pc, #84]	@ (80028e4 <RestartWakeupCounter+0xa4>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8002896:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002898:	4b13      	ldr	r3, [pc, #76]	@ (80028e8 <RestartWakeupCounter+0xa8>)
 800289a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800289e:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80028a0:	2003      	movs	r0, #3
 80028a2:	f001 fbc6 	bl	8004032 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 80028a6:	4b11      	ldr	r3, [pc, #68]	@ (80028ec <RestartWakeupCounter+0xac>)
 80028a8:	695b      	ldr	r3, [r3, #20]
 80028aa:	0c1b      	lsrs	r3, r3, #16
 80028ac:	041b      	lsls	r3, r3, #16
 80028ae:	88fa      	ldrh	r2, [r7, #6]
 80028b0:	490e      	ldr	r1, [pc, #56]	@ (80028ec <RestartWakeupCounter+0xac>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80028b6:	f7ff fd8f 	bl	80023d8 <ReadRtcSsrValue>
 80028ba:	4603      	mov	r3, r0
 80028bc:	4a07      	ldr	r2, [pc, #28]	@ (80028dc <RestartWakeupCounter+0x9c>)
 80028be:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 80028c0:	4b08      	ldr	r3, [pc, #32]	@ (80028e4 <RestartWakeupCounter+0xa4>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	689a      	ldr	r2, [r3, #8]
 80028c6:	4b07      	ldr	r3, [pc, #28]	@ (80028e4 <RestartWakeupCounter+0xa4>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80028ce:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 80028d0:	f3af 8000 	nop.w
  return ;
 80028d4:	bf00      	nop
}
 80028d6:	3708      	adds	r7, #8
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	20002244 	.word	0x20002244
 80028e0:	20002249 	.word	0x20002249
 80028e4:	200022e8 	.word	0x200022e8
 80028e8:	58000800 	.word	0x58000800
 80028ec:	40002800 	.word	0x40002800

080028f0 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80028f6:	4b45      	ldr	r3, [pc, #276]	@ (8002a0c <RescheduleTimerList+0x11c>)
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002902:	d107      	bne.n	8002914 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8002904:	bf00      	nop
 8002906:	4b42      	ldr	r3, [pc, #264]	@ (8002a10 <RescheduleTimerList+0x120>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	f003 0304 	and.w	r3, r3, #4
 8002910:	2b00      	cmp	r3, #0
 8002912:	d1f8      	bne.n	8002906 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8002914:	4b3e      	ldr	r3, [pc, #248]	@ (8002a10 <RescheduleTimerList+0x120>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	689a      	ldr	r2, [r3, #8]
 800291a:	4b3d      	ldr	r3, [pc, #244]	@ (8002a10 <RescheduleTimerList+0x120>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002922:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8002924:	4b3b      	ldr	r3, [pc, #236]	@ (8002a14 <RescheduleTimerList+0x124>)
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 800292a:	7bfa      	ldrb	r2, [r7, #15]
 800292c:	493a      	ldr	r1, [pc, #232]	@ (8002a18 <RescheduleTimerList+0x128>)
 800292e:	4613      	mov	r3, r2
 8002930:	005b      	lsls	r3, r3, #1
 8002932:	4413      	add	r3, r2
 8002934:	00db      	lsls	r3, r3, #3
 8002936:	440b      	add	r3, r1
 8002938:	3308      	adds	r3, #8
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 800293e:	f7ff ff3f 	bl	80027c0 <ReturnTimeElapsed>
 8002942:	4603      	mov	r3, r0
 8002944:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8002946:	88fb      	ldrh	r3, [r7, #6]
 8002948:	68ba      	ldr	r2, [r7, #8]
 800294a:	429a      	cmp	r2, r3
 800294c:	d205      	bcs.n	800295a <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 800294e:	2300      	movs	r3, #0
 8002950:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002952:	4b32      	ldr	r3, [pc, #200]	@ (8002a1c <RescheduleTimerList+0x12c>)
 8002954:	2201      	movs	r2, #1
 8002956:	701a      	strb	r2, [r3, #0]
 8002958:	e04d      	b.n	80029f6 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 800295a:	88fb      	ldrh	r3, [r7, #6]
 800295c:	4a30      	ldr	r2, [pc, #192]	@ (8002a20 <RescheduleTimerList+0x130>)
 800295e:	8812      	ldrh	r2, [r2, #0]
 8002960:	b292      	uxth	r2, r2
 8002962:	4413      	add	r3, r2
 8002964:	461a      	mov	r2, r3
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	4293      	cmp	r3, r2
 800296a:	d906      	bls.n	800297a <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 800296c:	4b2c      	ldr	r3, [pc, #176]	@ (8002a20 <RescheduleTimerList+0x130>)
 800296e:	881b      	ldrh	r3, [r3, #0]
 8002970:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8002972:	4b2a      	ldr	r3, [pc, #168]	@ (8002a1c <RescheduleTimerList+0x12c>)
 8002974:	2200      	movs	r2, #0
 8002976:	701a      	strb	r2, [r3, #0]
 8002978:	e03d      	b.n	80029f6 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	b29a      	uxth	r2, r3
 800297e:	88fb      	ldrh	r3, [r7, #6]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002984:	4b25      	ldr	r3, [pc, #148]	@ (8002a1c <RescheduleTimerList+0x12c>)
 8002986:	2201      	movs	r2, #1
 8002988:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800298a:	e034      	b.n	80029f6 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 800298c:	7bfa      	ldrb	r2, [r7, #15]
 800298e:	4922      	ldr	r1, [pc, #136]	@ (8002a18 <RescheduleTimerList+0x128>)
 8002990:	4613      	mov	r3, r2
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	4413      	add	r3, r2
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	440b      	add	r3, r1
 800299a:	3308      	adds	r3, #8
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	88fb      	ldrh	r3, [r7, #6]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d20a      	bcs.n	80029ba <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 80029a4:	7bfa      	ldrb	r2, [r7, #15]
 80029a6:	491c      	ldr	r1, [pc, #112]	@ (8002a18 <RescheduleTimerList+0x128>)
 80029a8:	4613      	mov	r3, r2
 80029aa:	005b      	lsls	r3, r3, #1
 80029ac:	4413      	add	r3, r2
 80029ae:	00db      	lsls	r3, r3, #3
 80029b0:	440b      	add	r3, r1
 80029b2:	3308      	adds	r3, #8
 80029b4:	2200      	movs	r2, #0
 80029b6:	601a      	str	r2, [r3, #0]
 80029b8:	e013      	b.n	80029e2 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 80029ba:	7bfa      	ldrb	r2, [r7, #15]
 80029bc:	4916      	ldr	r1, [pc, #88]	@ (8002a18 <RescheduleTimerList+0x128>)
 80029be:	4613      	mov	r3, r2
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	4413      	add	r3, r2
 80029c4:	00db      	lsls	r3, r3, #3
 80029c6:	440b      	add	r3, r1
 80029c8:	3308      	adds	r3, #8
 80029ca:	6819      	ldr	r1, [r3, #0]
 80029cc:	88fb      	ldrh	r3, [r7, #6]
 80029ce:	7bfa      	ldrb	r2, [r7, #15]
 80029d0:	1ac9      	subs	r1, r1, r3
 80029d2:	4811      	ldr	r0, [pc, #68]	@ (8002a18 <RescheduleTimerList+0x128>)
 80029d4:	4613      	mov	r3, r2
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	4413      	add	r3, r2
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	4403      	add	r3, r0
 80029de:	3308      	adds	r3, #8
 80029e0:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 80029e2:	7bfa      	ldrb	r2, [r7, #15]
 80029e4:	490c      	ldr	r1, [pc, #48]	@ (8002a18 <RescheduleTimerList+0x128>)
 80029e6:	4613      	mov	r3, r2
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	4413      	add	r3, r2
 80029ec:	00db      	lsls	r3, r3, #3
 80029ee:	440b      	add	r3, r1
 80029f0:	3315      	adds	r3, #21
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80029f6:	7bfb      	ldrb	r3, [r7, #15]
 80029f8:	2b06      	cmp	r3, #6
 80029fa:	d1c7      	bne.n	800298c <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 80029fc:	89bb      	ldrh	r3, [r7, #12]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7ff ff1e 	bl	8002840 <RestartWakeupCounter>

  return ;
 8002a04:	bf00      	nop
}
 8002a06:	3710      	adds	r7, #16
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	40002800 	.word	0x40002800
 8002a10:	200022e8 	.word	0x200022e8
 8002a14:	20002240 	.word	0x20002240
 8002a18:	200021b0 	.word	0x200021b0
 8002a1c:	20002248 	.word	0x20002248
 8002a20:	2000224e 	.word	0x2000224e

08002a24 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b08a      	sub	sp, #40	@ 0x28
 8002a28:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a2a:	f3ef 8310 	mrs	r3, PRIMASK
 8002a2e:	617b      	str	r3, [r7, #20]
  return(result);
 8002a30:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002a32:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8002a34:	b672      	cpsid	i
}
 8002a36:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002a38:	4b59      	ldr	r3, [pc, #356]	@ (8002ba0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	22ca      	movs	r2, #202	@ 0xca
 8002a3e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002a40:	4b57      	ldr	r3, [pc, #348]	@ (8002ba0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2253      	movs	r2, #83	@ 0x53
 8002a46:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8002a48:	4b55      	ldr	r3, [pc, #340]	@ (8002ba0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	689a      	ldr	r2, [r3, #8]
 8002a4e:	4b54      	ldr	r3, [pc, #336]	@ (8002ba0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a56:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8002a58:	4b52      	ldr	r3, [pc, #328]	@ (8002ba4 <HW_TS_RTC_Wakeup_Handler+0x180>)
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8002a60:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002a64:	4950      	ldr	r1, [pc, #320]	@ (8002ba8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002a66:	4613      	mov	r3, r2
 8002a68:	005b      	lsls	r3, r3, #1
 8002a6a:	4413      	add	r3, r2
 8002a6c:	00db      	lsls	r3, r3, #3
 8002a6e:	440b      	add	r3, r1
 8002a70:	330c      	adds	r3, #12
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d16e      	bne.n	8002b58 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8002a7a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002a7e:	494a      	ldr	r1, [pc, #296]	@ (8002ba8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002a80:	4613      	mov	r3, r2
 8002a82:	005b      	lsls	r3, r3, #1
 8002a84:	4413      	add	r3, r2
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	440b      	add	r3, r1
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8002a8e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002a92:	4945      	ldr	r1, [pc, #276]	@ (8002ba8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002a94:	4613      	mov	r3, r2
 8002a96:	005b      	lsls	r3, r3, #1
 8002a98:	4413      	add	r3, r2
 8002a9a:	00db      	lsls	r3, r3, #3
 8002a9c:	440b      	add	r3, r1
 8002a9e:	3310      	adds	r3, #16
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8002aa4:	4b41      	ldr	r3, [pc, #260]	@ (8002bac <HW_TS_RTC_Wakeup_Handler+0x188>)
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d04c      	beq.n	8002b48 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8002aae:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002ab2:	493d      	ldr	r1, [pc, #244]	@ (8002ba8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	4413      	add	r3, r2
 8002aba:	00db      	lsls	r3, r3, #3
 8002abc:	440b      	add	r3, r1
 8002abe:	330d      	adds	r3, #13
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d124      	bne.n	8002b12 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8002ac8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002acc:	2101      	movs	r1, #1
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7ff fdf2 	bl	80026b8 <UnlinkTimer>
 8002ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad6:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	f383 8810 	msr	PRIMASK, r3
}
 8002ade:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8002ae0:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002ae4:	4930      	ldr	r1, [pc, #192]	@ (8002ba8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	005b      	lsls	r3, r3, #1
 8002aea:	4413      	add	r3, r2
 8002aec:	00db      	lsls	r3, r3, #3
 8002aee:	440b      	add	r3, r1
 8002af0:	3304      	adds	r3, #4
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002af8:	4611      	mov	r1, r2
 8002afa:	4618      	mov	r0, r3
 8002afc:	f000 f9b8 	bl	8002e70 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002b00:	4b27      	ldr	r3, [pc, #156]	@ (8002ba0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	22ca      	movs	r2, #202	@ 0xca
 8002b06:	625a      	str	r2, [r3, #36]	@ 0x24
 8002b08:	4b25      	ldr	r3, [pc, #148]	@ (8002ba0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2253      	movs	r2, #83	@ 0x53
 8002b0e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002b10:	e012      	b.n	8002b38 <HW_TS_RTC_Wakeup_Handler+0x114>
 8002b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b14:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	f383 8810 	msr	PRIMASK, r3
}
 8002b1c:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8002b1e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002b22:	4618      	mov	r0, r3
 8002b24:	f000 f920 	bl	8002d68 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002b28:	4b1d      	ldr	r3, [pc, #116]	@ (8002ba0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	22ca      	movs	r2, #202	@ 0xca
 8002b2e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002b30:	4b1b      	ldr	r3, [pc, #108]	@ (8002ba0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2253      	movs	r2, #83	@ 0x53
 8002b36:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8002b38:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002b3c:	69fa      	ldr	r2, [r7, #28]
 8002b3e:	4619      	mov	r1, r3
 8002b40:	69b8      	ldr	r0, [r7, #24]
 8002b42:	f000 fa1b 	bl	8002f7c <HW_TS_RTC_Int_AppNot>
 8002b46:	e022      	b.n	8002b8e <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8002b48:	f7ff fed2 	bl	80028f0 <RescheduleTimerList>
 8002b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b4e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	f383 8810 	msr	PRIMASK, r3
}
 8002b56:	e01a      	b.n	8002b8e <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002b58:	bf00      	nop
 8002b5a:	4b11      	ldr	r3, [pc, #68]	@ (8002ba0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	f003 0304 	and.w	r3, r3, #4
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d0f8      	beq.n	8002b5a <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002b68:	4b0d      	ldr	r3, [pc, #52]	@ (8002ba0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	b2da      	uxtb	r2, r3
 8002b70:	4b0b      	ldr	r3, [pc, #44]	@ (8002ba0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8002b78:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8002bb0 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8002b7c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002b80:	60da      	str	r2, [r3, #12]
 8002b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b84:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f383 8810 	msr	PRIMASK, r3
}
 8002b8c:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002b8e:	4b04      	ldr	r3, [pc, #16]	@ (8002ba0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	22ff      	movs	r2, #255	@ 0xff
 8002b94:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 8002b96:	bf00      	nop
}
 8002b98:	3728      	adds	r7, #40	@ 0x28
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	200022e8 	.word	0x200022e8
 8002ba4:	20002240 	.word	0x20002240
 8002ba8:	200021b0 	.word	0x200021b0
 8002bac:	20002248 	.word	0x20002248
 8002bb0:	58000800 	.word	0x58000800

08002bb4 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b088      	sub	sp, #32
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	4603      	mov	r3, r0
 8002bbc:	6039      	str	r1, [r7, #0]
 8002bbe:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002bc0:	4b5e      	ldr	r3, [pc, #376]	@ (8002d3c <HW_TS_Init+0x188>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	22ca      	movs	r2, #202	@ 0xca
 8002bc6:	625a      	str	r2, [r3, #36]	@ 0x24
 8002bc8:	4b5c      	ldr	r3, [pc, #368]	@ (8002d3c <HW_TS_Init+0x188>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2253      	movs	r2, #83	@ 0x53
 8002bce:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002bd0:	4b5b      	ldr	r3, [pc, #364]	@ (8002d40 <HW_TS_Init+0x18c>)
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	4a5a      	ldr	r2, [pc, #360]	@ (8002d40 <HW_TS_Init+0x18c>)
 8002bd6:	f043 0320 	orr.w	r3, r3, #32
 8002bda:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8002bdc:	4b58      	ldr	r3, [pc, #352]	@ (8002d40 <HW_TS_Init+0x18c>)
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	f003 0307 	and.w	r3, r3, #7
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	f1c3 0304 	rsb	r3, r3, #4
 8002bec:	b2da      	uxtb	r2, r3
 8002bee:	4b55      	ldr	r3, [pc, #340]	@ (8002d44 <HW_TS_Init+0x190>)
 8002bf0:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8002bf2:	4b53      	ldr	r3, [pc, #332]	@ (8002d40 <HW_TS_Init+0x18c>)
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002bfa:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 8002bfe:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c00:	693a      	ldr	r2, [r7, #16]
 8002c02:	fa92 f2a2 	rbit	r2, r2
 8002c06:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002c08:	68fa      	ldr	r2, [r7, #12]
 8002c0a:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002c0c:	697a      	ldr	r2, [r7, #20]
 8002c0e:	2a00      	cmp	r2, #0
 8002c10:	d101      	bne.n	8002c16 <HW_TS_Init+0x62>
  {
    return 32U;
 8002c12:	2220      	movs	r2, #32
 8002c14:	e003      	b.n	8002c1e <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8002c16:	697a      	ldr	r2, [r7, #20]
 8002c18:	fab2 f282 	clz	r2, r2
 8002c1c:	b2d2      	uxtb	r2, r2
 8002c1e:	40d3      	lsrs	r3, r2
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	3301      	adds	r3, #1
 8002c24:	b2da      	uxtb	r2, r3
 8002c26:	4b48      	ldr	r3, [pc, #288]	@ (8002d48 <HW_TS_Init+0x194>)
 8002c28:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8002c2a:	4b45      	ldr	r3, [pc, #276]	@ (8002d40 <HW_TS_Init+0x18c>)
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	3301      	adds	r3, #1
 8002c38:	b29a      	uxth	r2, r3
 8002c3a:	4b44      	ldr	r3, [pc, #272]	@ (8002d4c <HW_TS_Init+0x198>)
 8002c3c:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8002c3e:	4b43      	ldr	r3, [pc, #268]	@ (8002d4c <HW_TS_Init+0x198>)
 8002c40:	881b      	ldrh	r3, [r3, #0]
 8002c42:	3b01      	subs	r3, #1
 8002c44:	4a40      	ldr	r2, [pc, #256]	@ (8002d48 <HW_TS_Init+0x194>)
 8002c46:	7812      	ldrb	r2, [r2, #0]
 8002c48:	fb02 f303 	mul.w	r3, r2, r3
 8002c4c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002c50:	4a3c      	ldr	r2, [pc, #240]	@ (8002d44 <HW_TS_Init+0x190>)
 8002c52:	7812      	ldrb	r2, [r2, #0]
 8002c54:	40d3      	lsrs	r3, r2
 8002c56:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d904      	bls.n	8002c6c <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8002c62:	4b3b      	ldr	r3, [pc, #236]	@ (8002d50 <HW_TS_Init+0x19c>)
 8002c64:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002c68:	801a      	strh	r2, [r3, #0]
 8002c6a:	e003      	b.n	8002c74 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	b29a      	uxth	r2, r3
 8002c70:	4b37      	ldr	r3, [pc, #220]	@ (8002d50 <HW_TS_Init+0x19c>)
 8002c72:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002c74:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002c78:	f7ff fb9c 	bl	80023b4 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002c7c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002c80:	f7ff fb84 	bl	800238c <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8002c84:	79fb      	ldrb	r3, [r7, #7]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d13d      	bne.n	8002d06 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002c8a:	4b32      	ldr	r3, [pc, #200]	@ (8002d54 <HW_TS_Init+0x1a0>)
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002c90:	4b31      	ldr	r3, [pc, #196]	@ (8002d58 <HW_TS_Init+0x1a4>)
 8002c92:	f04f 32ff 	mov.w	r2, #4294967295
 8002c96:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002c98:	2300      	movs	r3, #0
 8002c9a:	77fb      	strb	r3, [r7, #31]
 8002c9c:	e00c      	b.n	8002cb8 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8002c9e:	7ffa      	ldrb	r2, [r7, #31]
 8002ca0:	492e      	ldr	r1, [pc, #184]	@ (8002d5c <HW_TS_Init+0x1a8>)
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	4413      	add	r3, r2
 8002ca8:	00db      	lsls	r3, r3, #3
 8002caa:	440b      	add	r3, r1
 8002cac:	330c      	adds	r3, #12
 8002cae:	2200      	movs	r2, #0
 8002cb0:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002cb2:	7ffb      	ldrb	r3, [r7, #31]
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	77fb      	strb	r3, [r7, #31]
 8002cb8:	7ffb      	ldrb	r3, [r7, #31]
 8002cba:	2b05      	cmp	r3, #5
 8002cbc:	d9ef      	bls.n	8002c9e <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8002cbe:	4b28      	ldr	r3, [pc, #160]	@ (8002d60 <HW_TS_Init+0x1ac>)
 8002cc0:	2206      	movs	r2, #6
 8002cc2:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8002cc4:	4b1d      	ldr	r3, [pc, #116]	@ (8002d3c <HW_TS_Init+0x188>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	689a      	ldr	r2, [r3, #8]
 8002cca:	4b1c      	ldr	r3, [pc, #112]	@ (8002d3c <HW_TS_Init+0x188>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002cd2:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8002cd4:	4b19      	ldr	r3, [pc, #100]	@ (8002d3c <HW_TS_Init+0x188>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	b2da      	uxtb	r2, r3
 8002cdc:	4b17      	ldr	r3, [pc, #92]	@ (8002d3c <HW_TS_Init+0x188>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8002ce4:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8002ce6:	4b1f      	ldr	r3, [pc, #124]	@ (8002d64 <HW_TS_Init+0x1b0>)
 8002ce8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002cec:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8002cee:	2003      	movs	r0, #3
 8002cf0:	f001 f99f 	bl	8004032 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8002cf4:	4b11      	ldr	r3, [pc, #68]	@ (8002d3c <HW_TS_Init+0x188>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	689a      	ldr	r2, [r3, #8]
 8002cfa:	4b10      	ldr	r3, [pc, #64]	@ (8002d3c <HW_TS_Init+0x188>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002d02:	609a      	str	r2, [r3, #8]
 8002d04:	e009      	b.n	8002d1a <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8002d06:	4b0d      	ldr	r3, [pc, #52]	@ (8002d3c <HW_TS_Init+0x188>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d002      	beq.n	8002d1a <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8002d14:	2003      	movs	r0, #3
 8002d16:	f001 f97e 	bl	8004016 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002d1a:	4b08      	ldr	r3, [pc, #32]	@ (8002d3c <HW_TS_Init+0x188>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	22ff      	movs	r2, #255	@ 0xff
 8002d20:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8002d22:	2200      	movs	r2, #0
 8002d24:	2103      	movs	r1, #3
 8002d26:	2003      	movs	r0, #3
 8002d28:	f001 f933 	bl	8003f92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002d2c:	2003      	movs	r0, #3
 8002d2e:	f001 f94a 	bl	8003fc6 <HAL_NVIC_EnableIRQ>

  return;
 8002d32:	bf00      	nop
}
 8002d34:	3720      	adds	r7, #32
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	200022e8 	.word	0x200022e8
 8002d40:	40002800 	.word	0x40002800
 8002d44:	20002249 	.word	0x20002249
 8002d48:	2000224a 	.word	0x2000224a
 8002d4c:	2000224c 	.word	0x2000224c
 8002d50:	2000224e 	.word	0x2000224e
 8002d54:	20002248 	.word	0x20002248
 8002d58:	20002244 	.word	0x20002244
 8002d5c:	200021b0 	.word	0x200021b0
 8002d60:	20002240 	.word	0x20002240
 8002d64:	58000800 	.word	0x58000800

08002d68 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	4603      	mov	r3, r0
 8002d70:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d72:	f3ef 8310 	mrs	r3, PRIMASK
 8002d76:	60fb      	str	r3, [r7, #12]
  return(result);
 8002d78:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002d7a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002d7c:	b672      	cpsid	i
}
 8002d7e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002d80:	2003      	movs	r0, #3
 8002d82:	f001 f92e 	bl	8003fe2 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002d86:	4b34      	ldr	r3, [pc, #208]	@ (8002e58 <HW_TS_Stop+0xf0>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	22ca      	movs	r2, #202	@ 0xca
 8002d8c:	625a      	str	r2, [r3, #36]	@ 0x24
 8002d8e:	4b32      	ldr	r3, [pc, #200]	@ (8002e58 <HW_TS_Stop+0xf0>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2253      	movs	r2, #83	@ 0x53
 8002d94:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002d96:	79fa      	ldrb	r2, [r7, #7]
 8002d98:	4930      	ldr	r1, [pc, #192]	@ (8002e5c <HW_TS_Stop+0xf4>)
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	4413      	add	r3, r2
 8002da0:	00db      	lsls	r3, r3, #3
 8002da2:	440b      	add	r3, r1
 8002da4:	330c      	adds	r3, #12
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d142      	bne.n	8002e34 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8002dae:	79fb      	ldrb	r3, [r7, #7]
 8002db0:	2100      	movs	r1, #0
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7ff fc80 	bl	80026b8 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8002db8:	4b29      	ldr	r3, [pc, #164]	@ (8002e60 <HW_TS_Stop+0xf8>)
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002dbe:	7cfb      	ldrb	r3, [r7, #19]
 8002dc0:	2b06      	cmp	r3, #6
 8002dc2:	d12f      	bne.n	8002e24 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8002dc4:	4b27      	ldr	r3, [pc, #156]	@ (8002e64 <HW_TS_Stop+0xfc>)
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dcc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dd0:	d107      	bne.n	8002de2 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8002dd2:	bf00      	nop
 8002dd4:	4b20      	ldr	r3, [pc, #128]	@ (8002e58 <HW_TS_Stop+0xf0>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	f003 0304 	and.w	r3, r3, #4
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1f8      	bne.n	8002dd4 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8002de2:	4b1d      	ldr	r3, [pc, #116]	@ (8002e58 <HW_TS_Stop+0xf0>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	689a      	ldr	r2, [r3, #8]
 8002de8:	4b1b      	ldr	r3, [pc, #108]	@ (8002e58 <HW_TS_Stop+0xf0>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002df0:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002df2:	bf00      	nop
 8002df4:	4b18      	ldr	r3, [pc, #96]	@ (8002e58 <HW_TS_Stop+0xf0>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	f003 0304 	and.w	r3, r3, #4
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d0f8      	beq.n	8002df4 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002e02:	4b15      	ldr	r3, [pc, #84]	@ (8002e58 <HW_TS_Stop+0xf0>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	b2da      	uxtb	r2, r3
 8002e0a:	4b13      	ldr	r3, [pc, #76]	@ (8002e58 <HW_TS_Stop+0xf0>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8002e12:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002e14:	4b14      	ldr	r3, [pc, #80]	@ (8002e68 <HW_TS_Stop+0x100>)
 8002e16:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002e1a:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002e1c:	2003      	movs	r0, #3
 8002e1e:	f001 f908 	bl	8004032 <HAL_NVIC_ClearPendingIRQ>
 8002e22:	e007      	b.n	8002e34 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002e24:	4b11      	ldr	r3, [pc, #68]	@ (8002e6c <HW_TS_Stop+0x104>)
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	7cfa      	ldrb	r2, [r7, #19]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d001      	beq.n	8002e34 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8002e30:	f7ff fd5e 	bl	80028f0 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002e34:	4b08      	ldr	r3, [pc, #32]	@ (8002e58 <HW_TS_Stop+0xf0>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	22ff      	movs	r2, #255	@ 0xff
 8002e3a:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002e3c:	2003      	movs	r0, #3
 8002e3e:	f001 f8c2 	bl	8003fc6 <HAL_NVIC_EnableIRQ>
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	f383 8810 	msr	PRIMASK, r3
}
 8002e4c:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8002e4e:	bf00      	nop
}
 8002e50:	3718      	adds	r7, #24
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	200022e8 	.word	0x200022e8
 8002e5c:	200021b0 	.word	0x200021b0
 8002e60:	20002240 	.word	0x20002240
 8002e64:	40002800 	.word	0x40002800
 8002e68:	58000800 	.word	0x58000800
 8002e6c:	20002241 	.word	0x20002241

08002e70 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	4603      	mov	r3, r0
 8002e78:	6039      	str	r1, [r7, #0]
 8002e7a:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002e7c:	79fa      	ldrb	r2, [r7, #7]
 8002e7e:	493b      	ldr	r1, [pc, #236]	@ (8002f6c <HW_TS_Start+0xfc>)
 8002e80:	4613      	mov	r3, r2
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	4413      	add	r3, r2
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	440b      	add	r3, r1
 8002e8a:	330c      	adds	r3, #12
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d103      	bne.n	8002e9c <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8002e94:	79fb      	ldrb	r3, [r7, #7]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7ff ff66 	bl	8002d68 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e9c:	f3ef 8310 	mrs	r3, PRIMASK
 8002ea0:	60fb      	str	r3, [r7, #12]
  return(result);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002ea4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002ea6:	b672      	cpsid	i
}
 8002ea8:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002eaa:	2003      	movs	r0, #3
 8002eac:	f001 f899 	bl	8003fe2 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002eb0:	4b2f      	ldr	r3, [pc, #188]	@ (8002f70 <HW_TS_Start+0x100>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	22ca      	movs	r2, #202	@ 0xca
 8002eb6:	625a      	str	r2, [r3, #36]	@ 0x24
 8002eb8:	4b2d      	ldr	r3, [pc, #180]	@ (8002f70 <HW_TS_Start+0x100>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2253      	movs	r2, #83	@ 0x53
 8002ebe:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8002ec0:	79fa      	ldrb	r2, [r7, #7]
 8002ec2:	492a      	ldr	r1, [pc, #168]	@ (8002f6c <HW_TS_Start+0xfc>)
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	005b      	lsls	r3, r3, #1
 8002ec8:	4413      	add	r3, r2
 8002eca:	00db      	lsls	r3, r3, #3
 8002ecc:	440b      	add	r3, r1
 8002ece:	330c      	adds	r3, #12
 8002ed0:	2202      	movs	r2, #2
 8002ed2:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8002ed4:	79fa      	ldrb	r2, [r7, #7]
 8002ed6:	4925      	ldr	r1, [pc, #148]	@ (8002f6c <HW_TS_Start+0xfc>)
 8002ed8:	4613      	mov	r3, r2
 8002eda:	005b      	lsls	r3, r3, #1
 8002edc:	4413      	add	r3, r2
 8002ede:	00db      	lsls	r3, r3, #3
 8002ee0:	440b      	add	r3, r1
 8002ee2:	3308      	adds	r3, #8
 8002ee4:	683a      	ldr	r2, [r7, #0]
 8002ee6:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8002ee8:	79fa      	ldrb	r2, [r7, #7]
 8002eea:	4920      	ldr	r1, [pc, #128]	@ (8002f6c <HW_TS_Start+0xfc>)
 8002eec:	4613      	mov	r3, r2
 8002eee:	005b      	lsls	r3, r3, #1
 8002ef0:	4413      	add	r3, r2
 8002ef2:	00db      	lsls	r3, r3, #3
 8002ef4:	440b      	add	r3, r1
 8002ef6:	3304      	adds	r3, #4
 8002ef8:	683a      	ldr	r2, [r7, #0]
 8002efa:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8002efc:	79fb      	ldrb	r3, [r7, #7]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7ff fb30 	bl	8002564 <linkTimer>
 8002f04:	4603      	mov	r3, r0
 8002f06:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8002f08:	4b1a      	ldr	r3, [pc, #104]	@ (8002f74 <HW_TS_Start+0x104>)
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002f0e:	4b1a      	ldr	r3, [pc, #104]	@ (8002f78 <HW_TS_Start+0x108>)
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	7c7a      	ldrb	r2, [r7, #17]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d002      	beq.n	8002f20 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8002f1a:	f7ff fce9 	bl	80028f0 <RescheduleTimerList>
 8002f1e:	e013      	b.n	8002f48 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8002f20:	79fa      	ldrb	r2, [r7, #7]
 8002f22:	4912      	ldr	r1, [pc, #72]	@ (8002f6c <HW_TS_Start+0xfc>)
 8002f24:	4613      	mov	r3, r2
 8002f26:	005b      	lsls	r3, r3, #1
 8002f28:	4413      	add	r3, r2
 8002f2a:	00db      	lsls	r3, r3, #3
 8002f2c:	440b      	add	r3, r1
 8002f2e:	3308      	adds	r3, #8
 8002f30:	6819      	ldr	r1, [r3, #0]
 8002f32:	8a7b      	ldrh	r3, [r7, #18]
 8002f34:	79fa      	ldrb	r2, [r7, #7]
 8002f36:	1ac9      	subs	r1, r1, r3
 8002f38:	480c      	ldr	r0, [pc, #48]	@ (8002f6c <HW_TS_Start+0xfc>)
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	005b      	lsls	r3, r3, #1
 8002f3e:	4413      	add	r3, r2
 8002f40:	00db      	lsls	r3, r3, #3
 8002f42:	4403      	add	r3, r0
 8002f44:	3308      	adds	r3, #8
 8002f46:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002f48:	4b09      	ldr	r3, [pc, #36]	@ (8002f70 <HW_TS_Start+0x100>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	22ff      	movs	r2, #255	@ 0xff
 8002f4e:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002f50:	2003      	movs	r0, #3
 8002f52:	f001 f838 	bl	8003fc6 <HAL_NVIC_EnableIRQ>
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	f383 8810 	msr	PRIMASK, r3
}
 8002f60:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8002f62:	bf00      	nop
}
 8002f64:	3718      	adds	r7, #24
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	200021b0 	.word	0x200021b0
 8002f70:	200022e8 	.word	0x200022e8
 8002f74:	20002240 	.word	0x20002240
 8002f78:	20002241 	.word	0x20002241

08002f7c <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	460b      	mov	r3, r1
 8002f86:	607a      	str	r2, [r7, #4]
 8002f88:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4798      	blx	r3

  return;
 8002f8e:	bf00      	nop
}
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
	...

08002f98 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b086      	sub	sp, #24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60b9      	str	r1, [r7, #8]
 8002fa0:	607b      	str	r3, [r7, #4]
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	73fb      	strb	r3, [r7, #15]
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8002faa:	2300      	movs	r3, #0
 8002fac:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 8002fb2:	7bfb      	ldrb	r3, [r7, #15]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d10e      	bne.n	8002fd6 <HW_UART_Transmit_DMA+0x3e>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_huart1TxCb = cb;
 8002fb8:	4a17      	ldr	r2, [pc, #92]	@ (8003018 <HW_UART_Transmit_DMA+0x80>)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 8002fbe:	4b17      	ldr	r3, [pc, #92]	@ (800301c <HW_UART_Transmit_DMA+0x84>)
 8002fc0:	4a17      	ldr	r2, [pc, #92]	@ (8003020 <HW_UART_Transmit_DMA+0x88>)
 8002fc2:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8002fc4:	89bb      	ldrh	r3, [r7, #12]
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	68b9      	ldr	r1, [r7, #8]
 8002fca:	4814      	ldr	r0, [pc, #80]	@ (800301c <HW_UART_Transmit_DMA+0x84>)
 8002fcc:	f004 fd6a 	bl	8007aa4 <HAL_UART_Transmit_DMA>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	75fb      	strb	r3, [r7, #23]
            break;
 8002fd4:	e000      	b.n	8002fd8 <HW_UART_Transmit_DMA+0x40>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 8002fd6:	bf00      	nop
    }

    switch (hal_status)
 8002fd8:	7dfb      	ldrb	r3, [r7, #23]
 8002fda:	2b03      	cmp	r3, #3
 8002fdc:	d816      	bhi.n	800300c <HW_UART_Transmit_DMA+0x74>
 8002fde:	a201      	add	r2, pc, #4	@ (adr r2, 8002fe4 <HW_UART_Transmit_DMA+0x4c>)
 8002fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fe4:	08002ff5 	.word	0x08002ff5
 8002fe8:	08002ffb 	.word	0x08002ffb
 8002fec:	08003001 	.word	0x08003001
 8002ff0:	08003007 	.word	0x08003007
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	75bb      	strb	r3, [r7, #22]
            break;
 8002ff8:	e009      	b.n	800300e <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	75bb      	strb	r3, [r7, #22]
            break;
 8002ffe:	e006      	b.n	800300e <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 8003000:	2302      	movs	r3, #2
 8003002:	75bb      	strb	r3, [r7, #22]
            break;
 8003004:	e003      	b.n	800300e <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 8003006:	2303      	movs	r3, #3
 8003008:	75bb      	strb	r3, [r7, #22]
            break;
 800300a:	e000      	b.n	800300e <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 800300c:	bf00      	nop
    }

    return hw_status;
 800300e:	7dbb      	ldrb	r3, [r7, #22]
}
 8003010:	4618      	mov	r0, r3
 8003012:	3718      	adds	r7, #24
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	20002250 	.word	0x20002250
 800301c:	20002310 	.word	0x20002310
 8003020:	40013800 	.word	0x40013800

08003024 <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	461a      	mov	r2, r3
 8003032:	4b09      	ldr	r3, [pc, #36]	@ (8003058 <HAL_UART_TxCpltCallback+0x34>)
 8003034:	429a      	cmp	r2, r3
 8003036:	d107      	bne.n	8003048 <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 8003038:	4b08      	ldr	r3, [pc, #32]	@ (800305c <HAL_UART_TxCpltCallback+0x38>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d005      	beq.n	800304c <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 8003040:	4b06      	ldr	r3, [pc, #24]	@ (800305c <HAL_UART_TxCpltCallback+0x38>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4798      	blx	r3
            }
            break;
 8003046:	e001      	b.n	800304c <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 8003048:	bf00      	nop
 800304a:	e000      	b.n	800304e <HAL_UART_TxCpltCallback+0x2a>
            break;
 800304c:	bf00      	nop
    }

    return;
 800304e:	bf00      	nop
}
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	40013800 	.word	0x40013800
 800305c:	20002250 	.word	0x20002250

08003060 <LL_AHB2_GRP1_EnableClock>:
{
 8003060:	b480      	push	{r7}
 8003062:	b085      	sub	sp, #20
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003068:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800306c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800306e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4313      	orrs	r3, r2
 8003076:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003078:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800307c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4013      	ands	r3, r2
 8003082:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003084:	68fb      	ldr	r3, [r7, #12]
}
 8003086:	bf00      	nop
 8003088:	3714      	adds	r7, #20
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr

08003092 <LL_APB1_GRP1_EnableClock>:
{
 8003092:	b480      	push	{r7}
 8003094:	b085      	sub	sp, #20
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800309a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800309e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80030a0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80030aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030ae:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4013      	ands	r3, r2
 80030b4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80030b6:	68fb      	ldr	r3, [r7, #12]
}
 80030b8:	bf00      	nop
 80030ba:	3714      	adds	r7, #20
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr

080030c4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80030c8:	4b1b      	ldr	r3, [pc, #108]	@ (8003138 <MX_I2C1_Init+0x74>)
 80030ca:	4a1c      	ldr	r2, [pc, #112]	@ (800313c <MX_I2C1_Init+0x78>)
 80030cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B07CB4;
 80030ce:	4b1a      	ldr	r3, [pc, #104]	@ (8003138 <MX_I2C1_Init+0x74>)
 80030d0:	4a1b      	ldr	r2, [pc, #108]	@ (8003140 <MX_I2C1_Init+0x7c>)
 80030d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80030d4:	4b18      	ldr	r3, [pc, #96]	@ (8003138 <MX_I2C1_Init+0x74>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80030da:	4b17      	ldr	r3, [pc, #92]	@ (8003138 <MX_I2C1_Init+0x74>)
 80030dc:	2201      	movs	r2, #1
 80030de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80030e0:	4b15      	ldr	r3, [pc, #84]	@ (8003138 <MX_I2C1_Init+0x74>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80030e6:	4b14      	ldr	r3, [pc, #80]	@ (8003138 <MX_I2C1_Init+0x74>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80030ec:	4b12      	ldr	r3, [pc, #72]	@ (8003138 <MX_I2C1_Init+0x74>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80030f2:	4b11      	ldr	r3, [pc, #68]	@ (8003138 <MX_I2C1_Init+0x74>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80030f8:	4b0f      	ldr	r3, [pc, #60]	@ (8003138 <MX_I2C1_Init+0x74>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80030fe:	480e      	ldr	r0, [pc, #56]	@ (8003138 <MX_I2C1_Init+0x74>)
 8003100:	f001 fc9c 	bl	8004a3c <HAL_I2C_Init>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800310a:	f000 f985 	bl	8003418 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800310e:	2100      	movs	r1, #0
 8003110:	4809      	ldr	r0, [pc, #36]	@ (8003138 <MX_I2C1_Init+0x74>)
 8003112:	f002 fa1f 	bl	8005554 <HAL_I2CEx_ConfigAnalogFilter>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d001      	beq.n	8003120 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800311c:	f000 f97c 	bl	8003418 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003120:	2100      	movs	r1, #0
 8003122:	4805      	ldr	r0, [pc, #20]	@ (8003138 <MX_I2C1_Init+0x74>)
 8003124:	f002 fa61 	bl	80055ea <HAL_I2CEx_ConfigDigitalFilter>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d001      	beq.n	8003132 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800312e:	f000 f973 	bl	8003418 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003132:	bf00      	nop
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	20002254 	.word	0x20002254
 800313c:	40005400 	.word	0x40005400
 8003140:	00b07cb4 	.word	0x00b07cb4

08003144 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b09c      	sub	sp, #112	@ 0x70
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800314c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003150:	2200      	movs	r2, #0
 8003152:	601a      	str	r2, [r3, #0]
 8003154:	605a      	str	r2, [r3, #4]
 8003156:	609a      	str	r2, [r3, #8]
 8003158:	60da      	str	r2, [r3, #12]
 800315a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800315c:	f107 030c 	add.w	r3, r7, #12
 8003160:	2250      	movs	r2, #80	@ 0x50
 8003162:	2100      	movs	r1, #0
 8003164:	4618      	mov	r0, r3
 8003166:	f00b fc25 	bl	800e9b4 <memset>
  if(i2cHandle->Instance==I2C1)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a17      	ldr	r2, [pc, #92]	@ (80031cc <HAL_I2C_MspInit+0x88>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d126      	bne.n	80031c2 <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003174:	2304      	movs	r3, #4
 8003176:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003178:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 800317c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800317e:	f107 030c 	add.w	r3, r7, #12
 8003182:	4618      	mov	r0, r3
 8003184:	f003 fe49 	bl	8006e1a <HAL_RCCEx_PeriphCLKConfig>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800318e:	f000 f943 	bl	8003418 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003192:	2002      	movs	r0, #2
 8003194:	f7ff ff64 	bl	8003060 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003198:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800319c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800319e:	2312      	movs	r3, #18
 80031a0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a2:	2300      	movs	r3, #0
 80031a4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031a6:	2300      	movs	r3, #0
 80031a8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80031aa:	2304      	movs	r3, #4
 80031ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031ae:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80031b2:	4619      	mov	r1, r3
 80031b4:	4806      	ldr	r0, [pc, #24]	@ (80031d0 <HAL_I2C_MspInit+0x8c>)
 80031b6:	f001 fa7d 	bl	80046b4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80031ba:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80031be:	f7ff ff68 	bl	8003092 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80031c2:	bf00      	nop
 80031c4:	3770      	adds	r7, #112	@ 0x70
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	40005400 	.word	0x40005400
 80031d0:	48000400 	.word	0x48000400

080031d4 <LL_AHB3_GRP1_EnableClock>:
{
 80031d4:	b480      	push	{r7}
 80031d6:	b085      	sub	sp, #20
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80031dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80031e2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80031ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4013      	ands	r3, r2
 80031f6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80031f8:	68fb      	ldr	r3, [r7, #12]
}
 80031fa:	bf00      	nop
 80031fc:	3714      	adds	r7, #20
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
	...

08003208 <MX_IPCC_Init>:

IPCC_HandleTypeDef hipcc;

/* IPCC init function */
void MX_IPCC_Init(void)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 800320c:	4b06      	ldr	r3, [pc, #24]	@ (8003228 <MX_IPCC_Init+0x20>)
 800320e:	4a07      	ldr	r2, [pc, #28]	@ (800322c <MX_IPCC_Init+0x24>)
 8003210:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8003212:	4805      	ldr	r0, [pc, #20]	@ (8003228 <MX_IPCC_Init+0x20>)
 8003214:	f002 fa36 	bl	8005684 <HAL_IPCC_Init>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d001      	beq.n	8003222 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 800321e:	f000 f8fb 	bl	8003418 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8003222:	bf00      	nop
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	200022a8 	.word	0x200022a8
 800322c:	58000c00 	.word	0x58000c00

08003230 <HAL_IPCC_MspInit>:

void HAL_IPCC_MspInit(IPCC_HandleTypeDef* ipccHandle)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]

  if(ipccHandle->Instance==IPCC)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a0d      	ldr	r2, [pc, #52]	@ (8003274 <HAL_IPCC_MspInit+0x44>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d113      	bne.n	800326a <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* IPCC clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8003242:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8003246:	f7ff ffc5 	bl	80031d4 <LL_AHB3_GRP1_EnableClock>

    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 800324a:	2200      	movs	r2, #0
 800324c:	2100      	movs	r1, #0
 800324e:	202c      	movs	r0, #44	@ 0x2c
 8003250:	f000 fe9f 	bl	8003f92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8003254:	202c      	movs	r0, #44	@ 0x2c
 8003256:	f000 feb6 	bl	8003fc6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 800325a:	2200      	movs	r2, #0
 800325c:	2100      	movs	r1, #0
 800325e:	202d      	movs	r0, #45	@ 0x2d
 8003260:	f000 fe97 	bl	8003f92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8003264:	202d      	movs	r0, #45	@ 0x2d
 8003266:	f000 feae 	bl	8003fc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }
}
 800326a:	bf00      	nop
 800326c:	3708      	adds	r7, #8
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	58000c00 	.word	0x58000c00

08003278 <LL_RCC_LSE_SetDriveCapability>:
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8003280:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003284:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003288:	f023 0218 	bic.w	r2, r3, #24
 800328c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4313      	orrs	r3, r2
 8003294:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8003298:	bf00      	nop
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr

080032a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80032a8:	f000 fc9a 	bl	8003be0 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 80032ac:	f7fe fce2 	bl	8001c74 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80032b0:	f000 f836 	bl	8003320 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80032b4:	f000 f890 	bl	80033d8 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 80032b8:	f7ff ffa6 	bl	8003208 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_RF_Init();
 80032bc:	f000 f8b2 	bl	8003424 <MX_RF_Init>
  MX_GPIO_Init();
 80032c0:	f7ff f820 	bl	8002304 <MX_GPIO_Init>
  MX_DMA_Init();
 80032c4:	f7fe ffea 	bl	800229c <MX_DMA_Init>
  MX_RTC_Init();
 80032c8:	f000 f8de 	bl	8003488 <MX_RTC_Init>
  MX_USART1_UART_Init();
 80032cc:	f000 fb36 	bl	800393c <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80032d0:	f7ff fef8 	bl	80030c4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  APPD_Init();
 80032d4:	f7fe fb27 	bl	8001926 <APPD_Init>

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 80032d8:	f7fe fcda 	bl	8001c90 <MX_APPE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  max30102_Init();
 80032dc:	f7fd feee 	bl	80010bc <max30102_Init>
  while (1)
  {


    /* USER CODE END WHILE */
    MX_APPE_Process();
 80032e0:	f7fe ff85 	bl	80021ee <MX_APPE_Process>

    /* USER CODE BEGIN 3 */
    max30102_Calculate_HR_BO_Value(&HR_Value,&BO_Value);
 80032e4:	490a      	ldr	r1, [pc, #40]	@ (8003310 <main+0x6c>)
 80032e6:	480b      	ldr	r0, [pc, #44]	@ (8003314 <main+0x70>)
 80032e8:	f7fd ff1c 	bl	8001124 <max30102_Calculate_HR_BO_Value>
    printf("心率：%d\r\n",HR_Value );
 80032ec:	4b09      	ldr	r3, [pc, #36]	@ (8003314 <main+0x70>)
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	4619      	mov	r1, r3
 80032f2:	4809      	ldr	r0, [pc, #36]	@ (8003318 <main+0x74>)
 80032f4:	f00b f9ee 	bl	800e6d4 <iprintf>
    printf("血氧浓度值：%d\r\n",BO_Value);
 80032f8:	4b05      	ldr	r3, [pc, #20]	@ (8003310 <main+0x6c>)
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	4619      	mov	r1, r3
 80032fe:	4807      	ldr	r0, [pc, #28]	@ (800331c <main+0x78>)
 8003300:	f00b f9e8 	bl	800e6d4 <iprintf>
    HAL_Delay(10);
 8003304:	200a      	movs	r0, #10
 8003306:	f7fe ff4d 	bl	80021a4 <HAL_Delay>
    MX_APPE_Process();
 800330a:	bf00      	nop
 800330c:	e7e8      	b.n	80032e0 <main+0x3c>
 800330e:	bf00      	nop
 8003310:	200022e5 	.word	0x200022e5
 8003314:	200022e4 	.word	0x200022e4
 8003318:	080124c0 	.word	0x080124c0
 800331c:	080124d0 	.word	0x080124d0

08003320 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b09a      	sub	sp, #104	@ 0x68
 8003324:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003326:	f107 0320 	add.w	r3, r7, #32
 800332a:	2248      	movs	r2, #72	@ 0x48
 800332c:	2100      	movs	r1, #0
 800332e:	4618      	mov	r0, r3
 8003330:	f00b fb40 	bl	800e9b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003334:	1d3b      	adds	r3, r7, #4
 8003336:	2200      	movs	r2, #0
 8003338:	601a      	str	r2, [r3, #0]
 800333a:	605a      	str	r2, [r3, #4]
 800333c:	609a      	str	r2, [r3, #8]
 800333e:	60da      	str	r2, [r3, #12]
 8003340:	611a      	str	r2, [r3, #16]
 8003342:	615a      	str	r2, [r3, #20]
 8003344:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003346:	f002 fa23 	bl	8005790 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 800334a:	2010      	movs	r0, #16
 800334c:	f7ff ff94 	bl	8003278 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003350:	4b20      	ldr	r3, [pc, #128]	@ (80033d4 <SystemClock_Config+0xb4>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003358:	4a1e      	ldr	r2, [pc, #120]	@ (80033d4 <SystemClock_Config+0xb4>)
 800335a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800335e:	6013      	str	r3, [r2, #0]
 8003360:	4b1c      	ldr	r3, [pc, #112]	@ (80033d4 <SystemClock_Config+0xb4>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003368:	603b      	str	r3, [r7, #0]
 800336a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800336c:	2307      	movs	r3, #7
 800336e:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003370:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003374:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003376:	2301      	movs	r3, #1
 8003378:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800337a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800337e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003380:	2340      	movs	r3, #64	@ 0x40
 8003382:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003384:	2300      	movs	r3, #0
 8003386:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003388:	f107 0320 	add.w	r3, r7, #32
 800338c:	4618      	mov	r0, r3
 800338e:	f002 fd93 	bl	8005eb8 <HAL_RCC_OscConfig>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d001      	beq.n	800339c <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8003398:	f000 f83e 	bl	8003418 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800339c:	236f      	movs	r3, #111	@ 0x6f
 800339e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80033a0:	2302      	movs	r3, #2
 80033a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80033a4:	2300      	movs	r3, #0
 80033a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80033a8:	2300      	movs	r3, #0
 80033aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80033ac:	2300      	movs	r3, #0
 80033ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80033b0:	2300      	movs	r3, #0
 80033b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80033b4:	2300      	movs	r3, #0
 80033b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80033b8:	1d3b      	adds	r3, r7, #4
 80033ba:	2101      	movs	r1, #1
 80033bc:	4618      	mov	r0, r3
 80033be:	f003 f8ef 	bl	80065a0 <HAL_RCC_ClockConfig>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d001      	beq.n	80033cc <SystemClock_Config+0xac>
  {
    Error_Handler();
 80033c8:	f000 f826 	bl	8003418 <Error_Handler>
  }
}
 80033cc:	bf00      	nop
 80033ce:	3768      	adds	r7, #104	@ 0x68
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	58000400 	.word	0x58000400

080033d8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b094      	sub	sp, #80	@ 0x50
 80033dc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80033de:	463b      	mov	r3, r7
 80033e0:	2250      	movs	r2, #80	@ 0x50
 80033e2:	2100      	movs	r1, #0
 80033e4:	4618      	mov	r0, r3
 80033e6:	f00b fae5 	bl	800e9b4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 80033ea:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80033ee:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80033f0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80033f4:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80033f6:	2300      	movs	r3, #0
 80033f8:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80033fa:	2310      	movs	r3, #16
 80033fc:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80033fe:	463b      	mov	r3, r7
 8003400:	4618      	mov	r0, r3
 8003402:	f003 fd0a 	bl	8006e1a <HAL_RCCEx_PeriphCLKConfig>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d001      	beq.n	8003410 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 800340c:	f000 f804 	bl	8003418 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8003410:	bf00      	nop
 8003412:	3750      	adds	r7, #80	@ 0x50
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003418:	b480      	push	{r7}
 800341a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800341c:	b672      	cpsid	i
}
 800341e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003420:	bf00      	nop
 8003422:	e7fd      	b.n	8003420 <Error_Handler+0x8>

08003424 <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 8003424:	b480      	push	{r7}
 8003426:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8003428:	bf00      	nop
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr

08003432 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8003432:	b480      	push	{r7}
 8003434:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8003436:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800343a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800343e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003442:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003446:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800344a:	bf00      	nop
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr

08003454 <LL_APB1_GRP1_EnableClock>:
{
 8003454:	b480      	push	{r7}
 8003456:	b085      	sub	sp, #20
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800345c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003460:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003462:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4313      	orrs	r3, r2
 800346a:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800346c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003470:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4013      	ands	r3, r2
 8003476:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003478:	68fb      	ldr	r3, [r7, #12]
}
 800347a:	bf00      	nop
 800347c:	3714      	adds	r7, #20
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
	...

08003488 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b086      	sub	sp, #24
 800348c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800348e:	1d3b      	adds	r3, r7, #4
 8003490:	2200      	movs	r2, #0
 8003492:	601a      	str	r2, [r3, #0]
 8003494:	605a      	str	r2, [r3, #4]
 8003496:	609a      	str	r2, [r3, #8]
 8003498:	60da      	str	r2, [r3, #12]
 800349a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800349c:	2300      	movs	r3, #0
 800349e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80034a0:	4b2c      	ldr	r3, [pc, #176]	@ (8003554 <MX_RTC_Init+0xcc>)
 80034a2:	4a2d      	ldr	r2, [pc, #180]	@ (8003558 <MX_RTC_Init+0xd0>)
 80034a4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80034a6:	4b2b      	ldr	r3, [pc, #172]	@ (8003554 <MX_RTC_Init+0xcc>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80034ac:	4b29      	ldr	r3, [pc, #164]	@ (8003554 <MX_RTC_Init+0xcc>)
 80034ae:	220f      	movs	r2, #15
 80034b0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80034b2:	4b28      	ldr	r3, [pc, #160]	@ (8003554 <MX_RTC_Init+0xcc>)
 80034b4:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80034b8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80034ba:	4b26      	ldr	r3, [pc, #152]	@ (8003554 <MX_RTC_Init+0xcc>)
 80034bc:	2200      	movs	r2, #0
 80034be:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80034c0:	4b24      	ldr	r3, [pc, #144]	@ (8003554 <MX_RTC_Init+0xcc>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80034c6:	4b23      	ldr	r3, [pc, #140]	@ (8003554 <MX_RTC_Init+0xcc>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80034cc:	4b21      	ldr	r3, [pc, #132]	@ (8003554 <MX_RTC_Init+0xcc>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80034d2:	4820      	ldr	r0, [pc, #128]	@ (8003554 <MX_RTC_Init+0xcc>)
 80034d4:	f003 ff28 	bl	8007328 <HAL_RTC_Init>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d001      	beq.n	80034e2 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80034de:	f7ff ff9b 	bl	8003418 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80034e2:	2300      	movs	r3, #0
 80034e4:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80034e6:	2300      	movs	r3, #0
 80034e8:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80034ea:	2300      	movs	r3, #0
 80034ec:	71bb      	strb	r3, [r7, #6]
  sTime.SubSeconds = 0x0;
 80034ee:	2300      	movs	r3, #0
 80034f0:	60bb      	str	r3, [r7, #8]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80034f2:	2300      	movs	r3, #0
 80034f4:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80034f6:	2300      	movs	r3, #0
 80034f8:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80034fa:	1d3b      	adds	r3, r7, #4
 80034fc:	2201      	movs	r2, #1
 80034fe:	4619      	mov	r1, r3
 8003500:	4814      	ldr	r0, [pc, #80]	@ (8003554 <MX_RTC_Init+0xcc>)
 8003502:	f003 ffc1 	bl	8007488 <HAL_RTC_SetTime>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d001      	beq.n	8003510 <MX_RTC_Init+0x88>
  {
    Error_Handler();
 800350c:	f7ff ff84 	bl	8003418 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003510:	2301      	movs	r3, #1
 8003512:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8003514:	2301      	movs	r3, #1
 8003516:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8003518:	2301      	movs	r3, #1
 800351a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 800351c:	2300      	movs	r3, #0
 800351e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003520:	463b      	mov	r3, r7
 8003522:	2201      	movs	r2, #1
 8003524:	4619      	mov	r1, r3
 8003526:	480b      	ldr	r0, [pc, #44]	@ (8003554 <MX_RTC_Init+0xcc>)
 8003528:	f004 f872 	bl	8007610 <HAL_RTC_SetDate>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d001      	beq.n	8003536 <MX_RTC_Init+0xae>
  {
    Error_Handler();
 8003532:	f7ff ff71 	bl	8003418 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8003536:	2200      	movs	r2, #0
 8003538:	2100      	movs	r1, #0
 800353a:	4806      	ldr	r0, [pc, #24]	@ (8003554 <MX_RTC_Init+0xcc>)
 800353c:	f004 f986 	bl	800784c <HAL_RTCEx_SetWakeUpTimer_IT>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d001      	beq.n	800354a <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8003546:	f7ff ff67 	bl	8003418 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800354a:	bf00      	nop
 800354c:	3718      	adds	r7, #24
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	200022e8 	.word	0x200022e8
 8003558:	40002800 	.word	0x40002800

0800355c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b096      	sub	sp, #88	@ 0x58
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003564:	f107 0308 	add.w	r3, r7, #8
 8003568:	2250      	movs	r2, #80	@ 0x50
 800356a:	2100      	movs	r1, #0
 800356c:	4618      	mov	r0, r3
 800356e:	f00b fa21 	bl	800e9b4 <memset>
  if(rtcHandle->Instance==RTC)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a12      	ldr	r2, [pc, #72]	@ (80035c0 <HAL_RTC_MspInit+0x64>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d11d      	bne.n	80035b8 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800357c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003580:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003582:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003586:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003588:	f107 0308 	add.w	r3, r7, #8
 800358c:	4618      	mov	r0, r3
 800358e:	f003 fc44 	bl	8006e1a <HAL_RCCEx_PeriphCLKConfig>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d001      	beq.n	800359c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8003598:	f7ff ff3e 	bl	8003418 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800359c:	f7ff ff49 	bl	8003432 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80035a0:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80035a4:	f7ff ff56 	bl	8003454 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80035a8:	2200      	movs	r2, #0
 80035aa:	2100      	movs	r1, #0
 80035ac:	2003      	movs	r0, #3
 80035ae:	f000 fcf0 	bl	8003f92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80035b2:	2003      	movs	r0, #3
 80035b4:	f000 fd07 	bl	8003fc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80035b8:	bf00      	nop
 80035ba:	3758      	adds	r7, #88	@ 0x58
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	40002800 	.word	0x40002800

080035c4 <LL_AHB3_GRP1_EnableClock>:
{
 80035c4:	b480      	push	{r7}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80035cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035d0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80035d2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4313      	orrs	r3, r2
 80035da:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80035dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4013      	ands	r3, r2
 80035e6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80035e8:	68fb      	ldr	r3, [r7, #12]
}
 80035ea:	bf00      	nop
 80035ec:	3714      	adds	r7, #20
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr

080035f6 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035f6:	b580      	push	{r7, lr}
 80035f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 80035fa:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80035fe:	f7ff ffe1 	bl	80035c4 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8003602:	2200      	movs	r2, #0
 8003604:	2100      	movs	r1, #0
 8003606:	202e      	movs	r0, #46	@ 0x2e
 8003608:	f000 fcc3 	bl	8003f92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 800360c:	202e      	movs	r0, #46	@ 0x2e
 800360e:	f000 fcda 	bl	8003fc6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003612:	bf00      	nop
 8003614:	bd80      	pop	{r7, pc}

08003616 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003616:	b480      	push	{r7}
 8003618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800361a:	bf00      	nop
 800361c:	e7fd      	b.n	800361a <NMI_Handler+0x4>

0800361e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800361e:	b480      	push	{r7}
 8003620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003622:	bf00      	nop
 8003624:	e7fd      	b.n	8003622 <HardFault_Handler+0x4>

08003626 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003626:	b480      	push	{r7}
 8003628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800362a:	bf00      	nop
 800362c:	e7fd      	b.n	800362a <MemManage_Handler+0x4>

0800362e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800362e:	b480      	push	{r7}
 8003630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003632:	bf00      	nop
 8003634:	e7fd      	b.n	8003632 <BusFault_Handler+0x4>

08003636 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003636:	b480      	push	{r7}
 8003638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800363a:	bf00      	nop
 800363c:	e7fd      	b.n	800363a <UsageFault_Handler+0x4>

0800363e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800363e:	b480      	push	{r7}
 8003640:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003642:	bf00      	nop
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr

0800364c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800364c:	b480      	push	{r7}
 800364e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003650:	bf00      	nop
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr

0800365a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800365a:	b480      	push	{r7}
 800365c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800365e:	bf00      	nop
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800366c:	f000 fb12 	bl	8003c94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003670:	bf00      	nop
 8003672:	bd80      	pop	{r7, pc}

08003674 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8003678:	f7ff f9d4 	bl	8002a24 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 800367c:	bf00      	nop
 800367e:	bd80      	pop	{r7, pc}

08003680 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003684:	4802      	ldr	r0, [pc, #8]	@ (8003690 <DMA1_Channel1_IRQHandler+0x10>)
 8003686:	f000 fec4 	bl	8004412 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800368a:	bf00      	nop
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	200023a4 	.word	0x200023a4

08003694 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003698:	4802      	ldr	r0, [pc, #8]	@ (80036a4 <DMA1_Channel2_IRQHandler+0x10>)
 800369a:	f000 feba 	bl	8004412 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800369e:	bf00      	nop
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	20002404 	.word	0x20002404

080036a8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80036ac:	4802      	ldr	r0, [pc, #8]	@ (80036b8 <USART1_IRQHandler+0x10>)
 80036ae:	f004 fa79 	bl	8007ba4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80036b2:	bf00      	nop
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	20002310 	.word	0x20002310

080036bc <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 80036c0:	f009 fd40 	bl	800d144 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 80036c4:	bf00      	nop
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 80036cc:	f009 fd70 	bl	800d1b0 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 80036d0:	bf00      	nop
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80036d8:	f001 f98c 	bl	80049f4 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80036dc:	bf00      	nop
 80036de:	bd80      	pop	{r7, pc}

080036e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80036e0:	b480      	push	{r7}
 80036e2:	af00      	add	r7, sp, #0
  return 1;
 80036e4:	2301      	movs	r3, #1
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <_kill>:

int _kill(int pid, int sig)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80036fa:	f00b f9c3 	bl	800ea84 <__errno>
 80036fe:	4603      	mov	r3, r0
 8003700:	2216      	movs	r2, #22
 8003702:	601a      	str	r2, [r3, #0]
  return -1;
 8003704:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003708:	4618      	mov	r0, r3
 800370a:	3708      	adds	r7, #8
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <_exit>:

void _exit (int status)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003718:	f04f 31ff 	mov.w	r1, #4294967295
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f7ff ffe7 	bl	80036f0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003722:	bf00      	nop
 8003724:	e7fd      	b.n	8003722 <_exit+0x12>

08003726 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003726:	b580      	push	{r7, lr}
 8003728:	b086      	sub	sp, #24
 800372a:	af00      	add	r7, sp, #0
 800372c:	60f8      	str	r0, [r7, #12]
 800372e:	60b9      	str	r1, [r7, #8]
 8003730:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003732:	2300      	movs	r3, #0
 8003734:	617b      	str	r3, [r7, #20]
 8003736:	e00a      	b.n	800374e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003738:	f3af 8000 	nop.w
 800373c:	4601      	mov	r1, r0
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	1c5a      	adds	r2, r3, #1
 8003742:	60ba      	str	r2, [r7, #8]
 8003744:	b2ca      	uxtb	r2, r1
 8003746:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	3301      	adds	r3, #1
 800374c:	617b      	str	r3, [r7, #20]
 800374e:	697a      	ldr	r2, [r7, #20]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	429a      	cmp	r2, r3
 8003754:	dbf0      	blt.n	8003738 <_read+0x12>
  }

  return len;
 8003756:	687b      	ldr	r3, [r7, #4]
}
 8003758:	4618      	mov	r0, r3
 800375a:	3718      	adds	r7, #24
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003768:	f04f 33ff 	mov.w	r3, #4294967295
}
 800376c:	4618      	mov	r0, r3
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003788:	605a      	str	r2, [r3, #4]
  return 0;
 800378a:	2300      	movs	r3, #0
}
 800378c:	4618      	mov	r0, r3
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <_isatty>:

int _isatty(int file)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80037a0:	2301      	movs	r3, #1
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	370c      	adds	r7, #12
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr

080037ae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80037ae:	b480      	push	{r7}
 80037b0:	b085      	sub	sp, #20
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	60f8      	str	r0, [r7, #12]
 80037b6:	60b9      	str	r1, [r7, #8]
 80037b8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80037ba:	2300      	movs	r3, #0
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3714      	adds	r7, #20
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b086      	sub	sp, #24
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80037d0:	4a14      	ldr	r2, [pc, #80]	@ (8003824 <_sbrk+0x5c>)
 80037d2:	4b15      	ldr	r3, [pc, #84]	@ (8003828 <_sbrk+0x60>)
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80037dc:	4b13      	ldr	r3, [pc, #76]	@ (800382c <_sbrk+0x64>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d102      	bne.n	80037ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80037e4:	4b11      	ldr	r3, [pc, #68]	@ (800382c <_sbrk+0x64>)
 80037e6:	4a12      	ldr	r2, [pc, #72]	@ (8003830 <_sbrk+0x68>)
 80037e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80037ea:	4b10      	ldr	r3, [pc, #64]	@ (800382c <_sbrk+0x64>)
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4413      	add	r3, r2
 80037f2:	693a      	ldr	r2, [r7, #16]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d207      	bcs.n	8003808 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80037f8:	f00b f944 	bl	800ea84 <__errno>
 80037fc:	4603      	mov	r3, r0
 80037fe:	220c      	movs	r2, #12
 8003800:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003802:	f04f 33ff 	mov.w	r3, #4294967295
 8003806:	e009      	b.n	800381c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003808:	4b08      	ldr	r3, [pc, #32]	@ (800382c <_sbrk+0x64>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800380e:	4b07      	ldr	r3, [pc, #28]	@ (800382c <_sbrk+0x64>)
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4413      	add	r3, r2
 8003816:	4a05      	ldr	r2, [pc, #20]	@ (800382c <_sbrk+0x64>)
 8003818:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800381a:	68fb      	ldr	r3, [r7, #12]
}
 800381c:	4618      	mov	r0, r3
 800381e:	3718      	adds	r7, #24
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	20030000 	.word	0x20030000
 8003828:	00000400 	.word	0x00000400
 800382c:	2000230c 	.word	0x2000230c
 8003830:	20003780 	.word	0x20003780

08003834 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003834:	b480      	push	{r7}
 8003836:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8003838:	4b24      	ldr	r3, [pc, #144]	@ (80038cc <SystemInit+0x98>)
 800383a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800383e:	4a23      	ldr	r2, [pc, #140]	@ (80038cc <SystemInit+0x98>)
 8003840:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003844:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003848:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003852:	f043 0301 	orr.w	r3, r3, #1
 8003856:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8003858:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800385c:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8003860:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8003862:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800386c:	4b18      	ldr	r3, [pc, #96]	@ (80038d0 <SystemInit+0x9c>)
 800386e:	4013      	ands	r3, r2
 8003870:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8003872:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003876:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800387a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800387e:	f023 0305 	bic.w	r3, r3, #5
 8003882:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003886:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800388a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800388e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003892:	f023 0301 	bic.w	r3, r3, #1
 8003896:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800389a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800389e:	4a0d      	ldr	r2, [pc, #52]	@ (80038d4 <SystemInit+0xa0>)
 80038a0:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80038a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038a6:	4a0b      	ldr	r2, [pc, #44]	@ (80038d4 <SystemInit+0xa0>)
 80038a8:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80038aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80038b4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038b8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80038ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038be:	2200      	movs	r2, #0
 80038c0:	619a      	str	r2, [r3, #24]
}
 80038c2:	bf00      	nop
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr
 80038cc:	e000ed00 	.word	0xe000ed00
 80038d0:	faf6fefb 	.word	0xfaf6fefb
 80038d4:	22041000 	.word	0x22041000

080038d8 <LL_AHB2_GRP1_EnableClock>:
{
 80038d8:	b480      	push	{r7}
 80038da:	b085      	sub	sp, #20
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80038e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038e4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80038e6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80038f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038f4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4013      	ands	r3, r2
 80038fa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80038fc:	68fb      	ldr	r3, [r7, #12]
}
 80038fe:	bf00      	nop
 8003900:	3714      	adds	r7, #20
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr

0800390a <LL_APB2_GRP1_EnableClock>:
{
 800390a:	b480      	push	{r7}
 800390c:	b085      	sub	sp, #20
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8003912:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003916:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003918:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	4313      	orrs	r3, r2
 8003920:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003922:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003926:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4013      	ands	r3, r2
 800392c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800392e:	68fb      	ldr	r3, [r7, #12]
}
 8003930:	bf00      	nop
 8003932:	3714      	adds	r7, #20
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003940:	4b23      	ldr	r3, [pc, #140]	@ (80039d0 <MX_USART1_UART_Init+0x94>)
 8003942:	4a24      	ldr	r2, [pc, #144]	@ (80039d4 <MX_USART1_UART_Init+0x98>)
 8003944:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003946:	4b22      	ldr	r3, [pc, #136]	@ (80039d0 <MX_USART1_UART_Init+0x94>)
 8003948:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800394c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800394e:	4b20      	ldr	r3, [pc, #128]	@ (80039d0 <MX_USART1_UART_Init+0x94>)
 8003950:	2200      	movs	r2, #0
 8003952:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003954:	4b1e      	ldr	r3, [pc, #120]	@ (80039d0 <MX_USART1_UART_Init+0x94>)
 8003956:	2200      	movs	r2, #0
 8003958:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800395a:	4b1d      	ldr	r3, [pc, #116]	@ (80039d0 <MX_USART1_UART_Init+0x94>)
 800395c:	2200      	movs	r2, #0
 800395e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003960:	4b1b      	ldr	r3, [pc, #108]	@ (80039d0 <MX_USART1_UART_Init+0x94>)
 8003962:	220c      	movs	r2, #12
 8003964:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003966:	4b1a      	ldr	r3, [pc, #104]	@ (80039d0 <MX_USART1_UART_Init+0x94>)
 8003968:	2200      	movs	r2, #0
 800396a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 800396c:	4b18      	ldr	r3, [pc, #96]	@ (80039d0 <MX_USART1_UART_Init+0x94>)
 800396e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003972:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003974:	4b16      	ldr	r3, [pc, #88]	@ (80039d0 <MX_USART1_UART_Init+0x94>)
 8003976:	2200      	movs	r2, #0
 8003978:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800397a:	4b15      	ldr	r3, [pc, #84]	@ (80039d0 <MX_USART1_UART_Init+0x94>)
 800397c:	2200      	movs	r2, #0
 800397e:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003980:	4b13      	ldr	r3, [pc, #76]	@ (80039d0 <MX_USART1_UART_Init+0x94>)
 8003982:	2200      	movs	r2, #0
 8003984:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003986:	4812      	ldr	r0, [pc, #72]	@ (80039d0 <MX_USART1_UART_Init+0x94>)
 8003988:	f004 f83c 	bl	8007a04 <HAL_UART_Init>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d001      	beq.n	8003996 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8003992:	f7ff fd41 	bl	8003418 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003996:	2100      	movs	r1, #0
 8003998:	480d      	ldr	r0, [pc, #52]	@ (80039d0 <MX_USART1_UART_Init+0x94>)
 800399a:	f005 fa1c 	bl	8008dd6 <HAL_UARTEx_SetTxFifoThreshold>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d001      	beq.n	80039a8 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 80039a4:	f7ff fd38 	bl	8003418 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80039a8:	2100      	movs	r1, #0
 80039aa:	4809      	ldr	r0, [pc, #36]	@ (80039d0 <MX_USART1_UART_Init+0x94>)
 80039ac:	f005 fa51 	bl	8008e52 <HAL_UARTEx_SetRxFifoThreshold>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d001      	beq.n	80039ba <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 80039b6:	f7ff fd2f 	bl	8003418 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80039ba:	4805      	ldr	r0, [pc, #20]	@ (80039d0 <MX_USART1_UART_Init+0x94>)
 80039bc:	f005 f9d2 	bl	8008d64 <HAL_UARTEx_DisableFifoMode>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d001      	beq.n	80039ca <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 80039c6:	f7ff fd27 	bl	8003418 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80039ca:	bf00      	nop
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	20002310 	.word	0x20002310
 80039d4:	40013800 	.word	0x40013800

080039d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b09c      	sub	sp, #112	@ 0x70
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039e0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80039e4:	2200      	movs	r2, #0
 80039e6:	601a      	str	r2, [r3, #0]
 80039e8:	605a      	str	r2, [r3, #4]
 80039ea:	609a      	str	r2, [r3, #8]
 80039ec:	60da      	str	r2, [r3, #12]
 80039ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80039f0:	f107 030c 	add.w	r3, r7, #12
 80039f4:	2250      	movs	r2, #80	@ 0x50
 80039f6:	2100      	movs	r1, #0
 80039f8:	4618      	mov	r0, r3
 80039fa:	f00a ffdb 	bl	800e9b4 <memset>
  if(uartHandle->Instance==USART1)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a45      	ldr	r2, [pc, #276]	@ (8003b18 <HAL_UART_MspInit+0x140>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	f040 8082 	bne.w	8003b0e <HAL_UART_MspInit+0x136>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003a12:	f107 030c 	add.w	r3, r7, #12
 8003a16:	4618      	mov	r0, r3
 8003a18:	f003 f9ff 	bl	8006e1a <HAL_RCCEx_PeriphCLKConfig>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d001      	beq.n	8003a26 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003a22:	f7ff fcf9 	bl	8003418 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003a26:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003a2a:	f7ff ff6e 	bl	800390a <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a2e:	2001      	movs	r0, #1
 8003a30:	f7ff ff52 	bl	80038d8 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003a34:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003a38:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a3a:	2302      	movs	r3, #2
 8003a3c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a42:	2300      	movs	r3, #0
 8003a44:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003a46:	2307      	movs	r3, #7
 8003a48:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a4a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003a4e:	4619      	mov	r1, r3
 8003a50:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003a54:	f000 fe2e 	bl	80046b4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8003a58:	4b30      	ldr	r3, [pc, #192]	@ (8003b1c <HAL_UART_MspInit+0x144>)
 8003a5a:	4a31      	ldr	r2, [pc, #196]	@ (8003b20 <HAL_UART_MspInit+0x148>)
 8003a5c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8003a5e:	4b2f      	ldr	r3, [pc, #188]	@ (8003b1c <HAL_UART_MspInit+0x144>)
 8003a60:	220e      	movs	r2, #14
 8003a62:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a64:	4b2d      	ldr	r3, [pc, #180]	@ (8003b1c <HAL_UART_MspInit+0x144>)
 8003a66:	2200      	movs	r2, #0
 8003a68:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a6a:	4b2c      	ldr	r3, [pc, #176]	@ (8003b1c <HAL_UART_MspInit+0x144>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003a70:	4b2a      	ldr	r3, [pc, #168]	@ (8003b1c <HAL_UART_MspInit+0x144>)
 8003a72:	2280      	movs	r2, #128	@ 0x80
 8003a74:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a76:	4b29      	ldr	r3, [pc, #164]	@ (8003b1c <HAL_UART_MspInit+0x144>)
 8003a78:	2200      	movs	r2, #0
 8003a7a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a7c:	4b27      	ldr	r3, [pc, #156]	@ (8003b1c <HAL_UART_MspInit+0x144>)
 8003a7e:	2200      	movs	r2, #0
 8003a80:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8003a82:	4b26      	ldr	r3, [pc, #152]	@ (8003b1c <HAL_UART_MspInit+0x144>)
 8003a84:	2200      	movs	r2, #0
 8003a86:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003a88:	4b24      	ldr	r3, [pc, #144]	@ (8003b1c <HAL_UART_MspInit+0x144>)
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003a8e:	4823      	ldr	r0, [pc, #140]	@ (8003b1c <HAL_UART_MspInit+0x144>)
 8003a90:	f000 fade 	bl	8004050 <HAL_DMA_Init>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d001      	beq.n	8003a9e <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8003a9a:	f7ff fcbd 	bl	8003418 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a1e      	ldr	r2, [pc, #120]	@ (8003b1c <HAL_UART_MspInit+0x144>)
 8003aa2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003aa6:	4a1d      	ldr	r2, [pc, #116]	@ (8003b1c <HAL_UART_MspInit+0x144>)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8003aac:	4b1d      	ldr	r3, [pc, #116]	@ (8003b24 <HAL_UART_MspInit+0x14c>)
 8003aae:	4a1e      	ldr	r2, [pc, #120]	@ (8003b28 <HAL_UART_MspInit+0x150>)
 8003ab0:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8003ab2:	4b1c      	ldr	r3, [pc, #112]	@ (8003b24 <HAL_UART_MspInit+0x14c>)
 8003ab4:	220f      	movs	r2, #15
 8003ab6:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003ab8:	4b1a      	ldr	r3, [pc, #104]	@ (8003b24 <HAL_UART_MspInit+0x14c>)
 8003aba:	2210      	movs	r2, #16
 8003abc:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003abe:	4b19      	ldr	r3, [pc, #100]	@ (8003b24 <HAL_UART_MspInit+0x14c>)
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003ac4:	4b17      	ldr	r3, [pc, #92]	@ (8003b24 <HAL_UART_MspInit+0x14c>)
 8003ac6:	2280      	movs	r2, #128	@ 0x80
 8003ac8:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003aca:	4b16      	ldr	r3, [pc, #88]	@ (8003b24 <HAL_UART_MspInit+0x14c>)
 8003acc:	2200      	movs	r2, #0
 8003ace:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003ad0:	4b14      	ldr	r3, [pc, #80]	@ (8003b24 <HAL_UART_MspInit+0x14c>)
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003ad6:	4b13      	ldr	r3, [pc, #76]	@ (8003b24 <HAL_UART_MspInit+0x14c>)
 8003ad8:	2200      	movs	r2, #0
 8003ada:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003adc:	4b11      	ldr	r3, [pc, #68]	@ (8003b24 <HAL_UART_MspInit+0x14c>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003ae2:	4810      	ldr	r0, [pc, #64]	@ (8003b24 <HAL_UART_MspInit+0x14c>)
 8003ae4:	f000 fab4 	bl	8004050 <HAL_DMA_Init>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d001      	beq.n	8003af2 <HAL_UART_MspInit+0x11a>
    {
      Error_Handler();
 8003aee:	f7ff fc93 	bl	8003418 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a0b      	ldr	r2, [pc, #44]	@ (8003b24 <HAL_UART_MspInit+0x14c>)
 8003af6:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003af8:	4a0a      	ldr	r2, [pc, #40]	@ (8003b24 <HAL_UART_MspInit+0x14c>)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003afe:	2200      	movs	r2, #0
 8003b00:	2100      	movs	r1, #0
 8003b02:	2024      	movs	r0, #36	@ 0x24
 8003b04:	f000 fa45 	bl	8003f92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003b08:	2024      	movs	r0, #36	@ 0x24
 8003b0a:	f000 fa5c 	bl	8003fc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003b0e:	bf00      	nop
 8003b10:	3770      	adds	r7, #112	@ 0x70
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	40013800 	.word	0x40013800
 8003b1c:	200023a4 	.word	0x200023a4
 8003b20:	40020008 	.word	0x40020008
 8003b24:	20002404 	.word	0x20002404
 8003b28:	4002001c 	.word	0x4002001c

08003b2c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8003b2c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b2e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b30:	3304      	adds	r3, #4

08003b32 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b32:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b34:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8003b36:	d3f9      	bcc.n	8003b2c <CopyDataInit>
  bx lr
 8003b38:	4770      	bx	lr

08003b3a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8003b3a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8003b3c:	3004      	adds	r0, #4

08003b3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8003b3e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8003b40:	d3fb      	bcc.n	8003b3a <FillZerobss>
  bx lr
 8003b42:	4770      	bx	lr

08003b44 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003b44:	480c      	ldr	r0, [pc, #48]	@ (8003b78 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003b46:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003b48:	f7ff fe74 	bl	8003834 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8003b4c:	480b      	ldr	r0, [pc, #44]	@ (8003b7c <LoopForever+0x6>)
 8003b4e:	490c      	ldr	r1, [pc, #48]	@ (8003b80 <LoopForever+0xa>)
 8003b50:	4a0c      	ldr	r2, [pc, #48]	@ (8003b84 <LoopForever+0xe>)
 8003b52:	2300      	movs	r3, #0
 8003b54:	f7ff ffed 	bl	8003b32 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8003b58:	480b      	ldr	r0, [pc, #44]	@ (8003b88 <LoopForever+0x12>)
 8003b5a:	490c      	ldr	r1, [pc, #48]	@ (8003b8c <LoopForever+0x16>)
 8003b5c:	4a0c      	ldr	r2, [pc, #48]	@ (8003b90 <LoopForever+0x1a>)
 8003b5e:	2300      	movs	r3, #0
 8003b60:	f7ff ffe7 	bl	8003b32 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8003b64:	480b      	ldr	r0, [pc, #44]	@ (8003b94 <LoopForever+0x1e>)
 8003b66:	490c      	ldr	r1, [pc, #48]	@ (8003b98 <LoopForever+0x22>)
 8003b68:	2300      	movs	r3, #0
 8003b6a:	f7ff ffe8 	bl	8003b3e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003b6e:	f00a ff8f 	bl	800ea90 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003b72:	f7ff fb97 	bl	80032a4 <main>

08003b76 <LoopForever>:

LoopForever:
  b LoopForever
 8003b76:	e7fe      	b.n	8003b76 <LoopForever>
  ldr   r0, =_estack
 8003b78:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8003b7c:	20000008 	.word	0x20000008
 8003b80:	200001f8 	.word	0x200001f8
 8003b84:	08013ca0 	.word	0x08013ca0
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8003b88:	200301e4 	.word	0x200301e4
 8003b8c:	20030a67 	.word	0x20030a67
 8003b90:	08013ed6 	.word	0x08013ed6
  INIT_BSS _sbss, _ebss
 8003b94:	20000244 	.word	0x20000244
 8003b98:	20003780 	.word	0x20003780

08003b9c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003b9c:	e7fe      	b.n	8003b9c <ADC1_IRQHandler>
	...

08003ba0 <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8003ba4:	4b05      	ldr	r3, [pc, #20]	@ (8003bbc <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	4a04      	ldr	r2, [pc, #16]	@ (8003bbc <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8003baa:	f043 0301 	orr.w	r3, r3, #1
 8003bae:	6053      	str	r3, [r2, #4]
}
 8003bb0:	bf00      	nop
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	e0042000 	.word	0xe0042000

08003bc0 <LL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enable the Debug Module during STOP mode
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_EnableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStopMode(void)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8003bc4:	4b05      	ldr	r3, [pc, #20]	@ (8003bdc <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	4a04      	ldr	r2, [pc, #16]	@ (8003bdc <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8003bca:	f043 0302 	orr.w	r3, r3, #2
 8003bce:	6053      	str	r3, [r2, #4]
}
 8003bd0:	bf00      	nop
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr
 8003bda:	bf00      	nop
 8003bdc:	e0042000 	.word	0xe0042000

08003be0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003be6:	2300      	movs	r3, #0
 8003be8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003bea:	4b0c      	ldr	r3, [pc, #48]	@ (8003c1c <HAL_Init+0x3c>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a0b      	ldr	r2, [pc, #44]	@ (8003c1c <HAL_Init+0x3c>)
 8003bf0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bf4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003bf6:	2003      	movs	r0, #3
 8003bf8:	f000 f9c0 	bl	8003f7c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003bfc:	200f      	movs	r0, #15
 8003bfe:	f000 f80f 	bl	8003c20 <HAL_InitTick>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d002      	beq.n	8003c0e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	71fb      	strb	r3, [r7, #7]
 8003c0c:	e001      	b.n	8003c12 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003c0e:	f7ff fcf2 	bl	80035f6 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003c12:	79fb      	ldrb	r3, [r7, #7]
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3708      	adds	r7, #8
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	58004000 	.word	0x58004000

08003c20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8003c2c:	4b17      	ldr	r3, [pc, #92]	@ (8003c8c <HAL_InitTick+0x6c>)
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d024      	beq.n	8003c7e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003c34:	f002 fe60 	bl	80068f8 <HAL_RCC_GetHCLKFreq>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	4b14      	ldr	r3, [pc, #80]	@ (8003c8c <HAL_InitTick+0x6c>)
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	4619      	mov	r1, r3
 8003c40:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003c44:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f000 f9d6 	bl	8003ffe <HAL_SYSTICK_Config>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d10f      	bne.n	8003c78 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2b0f      	cmp	r3, #15
 8003c5c:	d809      	bhi.n	8003c72 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c5e:	2200      	movs	r2, #0
 8003c60:	6879      	ldr	r1, [r7, #4]
 8003c62:	f04f 30ff 	mov.w	r0, #4294967295
 8003c66:	f000 f994 	bl	8003f92 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003c6a:	4a09      	ldr	r2, [pc, #36]	@ (8003c90 <HAL_InitTick+0x70>)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6013      	str	r3, [r2, #0]
 8003c70:	e007      	b.n	8003c82 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	73fb      	strb	r3, [r7, #15]
 8003c76:	e004      	b.n	8003c82 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	73fb      	strb	r3, [r7, #15]
 8003c7c:	e001      	b.n	8003c82 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003c82:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3710      	adds	r7, #16
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	20000014 	.word	0x20000014
 8003c90:	20000010 	.word	0x20000010

08003c94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c94:	b480      	push	{r7}
 8003c96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003c98:	4b06      	ldr	r3, [pc, #24]	@ (8003cb4 <HAL_IncTick+0x20>)
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	4b06      	ldr	r3, [pc, #24]	@ (8003cb8 <HAL_IncTick+0x24>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	4a04      	ldr	r2, [pc, #16]	@ (8003cb8 <HAL_IncTick+0x24>)
 8003ca6:	6013      	str	r3, [r2, #0]
}
 8003ca8:	bf00      	nop
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr
 8003cb2:	bf00      	nop
 8003cb4:	20000014 	.word	0x20000014
 8003cb8:	20002464 	.word	0x20002464

08003cbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	af00      	add	r7, sp, #0
  return uwTick;
 8003cc0:	4b03      	ldr	r3, [pc, #12]	@ (8003cd0 <HAL_GetTick+0x14>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	20002464 	.word	0x20002464

08003cd4 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8003cd8:	4b03      	ldr	r3, [pc, #12]	@ (8003ce8 <HAL_GetTickPrio+0x14>)
 8003cda:	681b      	ldr	r3, [r3, #0]
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr
 8003ce6:	bf00      	nop
 8003ce8:	20000010 	.word	0x20000010

08003cec <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8003cec:	b480      	push	{r7}
 8003cee:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8003cf0:	4b03      	ldr	r3, [pc, #12]	@ (8003d00 <HAL_GetTickFreq+0x14>)
 8003cf2:	781b      	ldrb	r3, [r3, #0]
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	20000014 	.word	0x20000014

08003d04 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8003d08:	f7ff ff4a 	bl	8003ba0 <LL_DBGMCU_EnableDBGSleepMode>
}
 8003d0c:	bf00      	nop
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8003d14:	f7ff ff54 	bl	8003bc0 <LL_DBGMCU_EnableDBGStopMode>
}
 8003d18:	bf00      	nop
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b085      	sub	sp, #20
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f003 0307 	and.w	r3, r3, #7
 8003d2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d2c:	4b0c      	ldr	r3, [pc, #48]	@ (8003d60 <__NVIC_SetPriorityGrouping+0x44>)
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d32:	68ba      	ldr	r2, [r7, #8]
 8003d34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003d38:	4013      	ands	r3, r2
 8003d3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003d48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d4e:	4a04      	ldr	r2, [pc, #16]	@ (8003d60 <__NVIC_SetPriorityGrouping+0x44>)
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	60d3      	str	r3, [r2, #12]
}
 8003d54:	bf00      	nop
 8003d56:	3714      	adds	r7, #20
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr
 8003d60:	e000ed00 	.word	0xe000ed00

08003d64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d64:	b480      	push	{r7}
 8003d66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d68:	4b04      	ldr	r3, [pc, #16]	@ (8003d7c <__NVIC_GetPriorityGrouping+0x18>)
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	0a1b      	lsrs	r3, r3, #8
 8003d6e:	f003 0307 	and.w	r3, r3, #7
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr
 8003d7c:	e000ed00 	.word	0xe000ed00

08003d80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	4603      	mov	r3, r0
 8003d88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	db0b      	blt.n	8003daa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d92:	79fb      	ldrb	r3, [r7, #7]
 8003d94:	f003 021f 	and.w	r2, r3, #31
 8003d98:	4907      	ldr	r1, [pc, #28]	@ (8003db8 <__NVIC_EnableIRQ+0x38>)
 8003d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d9e:	095b      	lsrs	r3, r3, #5
 8003da0:	2001      	movs	r0, #1
 8003da2:	fa00 f202 	lsl.w	r2, r0, r2
 8003da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003daa:	bf00      	nop
 8003dac:	370c      	adds	r7, #12
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop
 8003db8:	e000e100 	.word	0xe000e100

08003dbc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	db12      	blt.n	8003df4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003dce:	79fb      	ldrb	r3, [r7, #7]
 8003dd0:	f003 021f 	and.w	r2, r3, #31
 8003dd4:	490a      	ldr	r1, [pc, #40]	@ (8003e00 <__NVIC_DisableIRQ+0x44>)
 8003dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dda:	095b      	lsrs	r3, r3, #5
 8003ddc:	2001      	movs	r0, #1
 8003dde:	fa00 f202 	lsl.w	r2, r0, r2
 8003de2:	3320      	adds	r3, #32
 8003de4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003de8:	f3bf 8f4f 	dsb	sy
}
 8003dec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003dee:	f3bf 8f6f 	isb	sy
}
 8003df2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003df4:	bf00      	nop
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr
 8003e00:	e000e100 	.word	0xe000e100

08003e04 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	db0c      	blt.n	8003e30 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e16:	79fb      	ldrb	r3, [r7, #7]
 8003e18:	f003 021f 	and.w	r2, r3, #31
 8003e1c:	4907      	ldr	r1, [pc, #28]	@ (8003e3c <__NVIC_SetPendingIRQ+0x38>)
 8003e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e22:	095b      	lsrs	r3, r3, #5
 8003e24:	2001      	movs	r0, #1
 8003e26:	fa00 f202 	lsl.w	r2, r0, r2
 8003e2a:	3340      	adds	r3, #64	@ 0x40
 8003e2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003e30:	bf00      	nop
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr
 8003e3c:	e000e100 	.word	0xe000e100

08003e40 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	4603      	mov	r3, r0
 8003e48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	db0c      	blt.n	8003e6c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e52:	79fb      	ldrb	r3, [r7, #7]
 8003e54:	f003 021f 	and.w	r2, r3, #31
 8003e58:	4907      	ldr	r1, [pc, #28]	@ (8003e78 <__NVIC_ClearPendingIRQ+0x38>)
 8003e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e5e:	095b      	lsrs	r3, r3, #5
 8003e60:	2001      	movs	r0, #1
 8003e62:	fa00 f202 	lsl.w	r2, r0, r2
 8003e66:	3360      	adds	r3, #96	@ 0x60
 8003e68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003e6c:	bf00      	nop
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr
 8003e78:	e000e100 	.word	0xe000e100

08003e7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	4603      	mov	r3, r0
 8003e84:	6039      	str	r1, [r7, #0]
 8003e86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	db0a      	blt.n	8003ea6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	b2da      	uxtb	r2, r3
 8003e94:	490c      	ldr	r1, [pc, #48]	@ (8003ec8 <__NVIC_SetPriority+0x4c>)
 8003e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e9a:	0112      	lsls	r2, r2, #4
 8003e9c:	b2d2      	uxtb	r2, r2
 8003e9e:	440b      	add	r3, r1
 8003ea0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ea4:	e00a      	b.n	8003ebc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	b2da      	uxtb	r2, r3
 8003eaa:	4908      	ldr	r1, [pc, #32]	@ (8003ecc <__NVIC_SetPriority+0x50>)
 8003eac:	79fb      	ldrb	r3, [r7, #7]
 8003eae:	f003 030f 	and.w	r3, r3, #15
 8003eb2:	3b04      	subs	r3, #4
 8003eb4:	0112      	lsls	r2, r2, #4
 8003eb6:	b2d2      	uxtb	r2, r2
 8003eb8:	440b      	add	r3, r1
 8003eba:	761a      	strb	r2, [r3, #24]
}
 8003ebc:	bf00      	nop
 8003ebe:	370c      	adds	r7, #12
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr
 8003ec8:	e000e100 	.word	0xe000e100
 8003ecc:	e000ed00 	.word	0xe000ed00

08003ed0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b089      	sub	sp, #36	@ 0x24
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	60b9      	str	r1, [r7, #8]
 8003eda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f003 0307 	and.w	r3, r3, #7
 8003ee2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	f1c3 0307 	rsb	r3, r3, #7
 8003eea:	2b04      	cmp	r3, #4
 8003eec:	bf28      	it	cs
 8003eee:	2304      	movcs	r3, #4
 8003ef0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	3304      	adds	r3, #4
 8003ef6:	2b06      	cmp	r3, #6
 8003ef8:	d902      	bls.n	8003f00 <NVIC_EncodePriority+0x30>
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	3b03      	subs	r3, #3
 8003efe:	e000      	b.n	8003f02 <NVIC_EncodePriority+0x32>
 8003f00:	2300      	movs	r3, #0
 8003f02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f04:	f04f 32ff 	mov.w	r2, #4294967295
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0e:	43da      	mvns	r2, r3
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	401a      	ands	r2, r3
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f18:	f04f 31ff 	mov.w	r1, #4294967295
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f22:	43d9      	mvns	r1, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f28:	4313      	orrs	r3, r2
         );
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3724      	adds	r7, #36	@ 0x24
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr
	...

08003f38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	3b01      	subs	r3, #1
 8003f44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f48:	d301      	bcc.n	8003f4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e00f      	b.n	8003f6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f4e:	4a0a      	ldr	r2, [pc, #40]	@ (8003f78 <SysTick_Config+0x40>)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	3b01      	subs	r3, #1
 8003f54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f56:	210f      	movs	r1, #15
 8003f58:	f04f 30ff 	mov.w	r0, #4294967295
 8003f5c:	f7ff ff8e 	bl	8003e7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f60:	4b05      	ldr	r3, [pc, #20]	@ (8003f78 <SysTick_Config+0x40>)
 8003f62:	2200      	movs	r2, #0
 8003f64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f66:	4b04      	ldr	r3, [pc, #16]	@ (8003f78 <SysTick_Config+0x40>)
 8003f68:	2207      	movs	r2, #7
 8003f6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3708      	adds	r7, #8
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	e000e010 	.word	0xe000e010

08003f7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f7ff fec9 	bl	8003d1c <__NVIC_SetPriorityGrouping>
}
 8003f8a:	bf00      	nop
 8003f8c:	3708      	adds	r7, #8
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}

08003f92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f92:	b580      	push	{r7, lr}
 8003f94:	b086      	sub	sp, #24
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	4603      	mov	r3, r0
 8003f9a:	60b9      	str	r1, [r7, #8]
 8003f9c:	607a      	str	r2, [r7, #4]
 8003f9e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003fa0:	f7ff fee0 	bl	8003d64 <__NVIC_GetPriorityGrouping>
 8003fa4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	68b9      	ldr	r1, [r7, #8]
 8003faa:	6978      	ldr	r0, [r7, #20]
 8003fac:	f7ff ff90 	bl	8003ed0 <NVIC_EncodePriority>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fb6:	4611      	mov	r1, r2
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f7ff ff5f 	bl	8003e7c <__NVIC_SetPriority>
}
 8003fbe:	bf00      	nop
 8003fc0:	3718      	adds	r7, #24
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}

08003fc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fc6:	b580      	push	{r7, lr}
 8003fc8:	b082      	sub	sp, #8
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	4603      	mov	r3, r0
 8003fce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f7ff fed3 	bl	8003d80 <__NVIC_EnableIRQ>
}
 8003fda:	bf00      	nop
 8003fdc:	3708      	adds	r7, #8
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}

08003fe2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003fe2:	b580      	push	{r7, lr}
 8003fe4:	b082      	sub	sp, #8
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	4603      	mov	r3, r0
 8003fea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f7ff fee3 	bl	8003dbc <__NVIC_DisableIRQ>
}
 8003ff6:	bf00      	nop
 8003ff8:	3708      	adds	r7, #8
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}

08003ffe <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ffe:	b580      	push	{r7, lr}
 8004000:	b082      	sub	sp, #8
 8004002:	af00      	add	r7, sp, #0
 8004004:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f7ff ff96 	bl	8003f38 <SysTick_Config>
 800400c:	4603      	mov	r3, r0
}
 800400e:	4618      	mov	r0, r3
 8004010:	3708      	adds	r7, #8
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}

08004016 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8004016:	b580      	push	{r7, lr}
 8004018:	b082      	sub	sp, #8
 800401a:	af00      	add	r7, sp, #0
 800401c:	4603      	mov	r3, r0
 800401e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8004020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004024:	4618      	mov	r0, r3
 8004026:	f7ff feed 	bl	8003e04 <__NVIC_SetPendingIRQ>
}
 800402a:	bf00      	nop
 800402c:	3708      	adds	r7, #8
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}

08004032 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004032:	b580      	push	{r7, lr}
 8004034:	b082      	sub	sp, #8
 8004036:	af00      	add	r7, sp, #0
 8004038:	4603      	mov	r3, r0
 800403a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800403c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004040:	4618      	mov	r0, r3
 8004042:	f7ff fefd 	bl	8003e40 <__NVIC_ClearPendingIRQ>
}
 8004046:	bf00      	nop
 8004048:	3708      	adds	r7, #8
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
	...

08004050 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d101      	bne.n	8004062 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e08e      	b.n	8004180 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	461a      	mov	r2, r3
 8004068:	4b47      	ldr	r3, [pc, #284]	@ (8004188 <HAL_DMA_Init+0x138>)
 800406a:	429a      	cmp	r2, r3
 800406c:	d80f      	bhi.n	800408e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	461a      	mov	r2, r3
 8004074:	4b45      	ldr	r3, [pc, #276]	@ (800418c <HAL_DMA_Init+0x13c>)
 8004076:	4413      	add	r3, r2
 8004078:	4a45      	ldr	r2, [pc, #276]	@ (8004190 <HAL_DMA_Init+0x140>)
 800407a:	fba2 2303 	umull	r2, r3, r2, r3
 800407e:	091b      	lsrs	r3, r3, #4
 8004080:	009a      	lsls	r2, r3, #2
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a42      	ldr	r2, [pc, #264]	@ (8004194 <HAL_DMA_Init+0x144>)
 800408a:	641a      	str	r2, [r3, #64]	@ 0x40
 800408c:	e00e      	b.n	80040ac <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	461a      	mov	r2, r3
 8004094:	4b40      	ldr	r3, [pc, #256]	@ (8004198 <HAL_DMA_Init+0x148>)
 8004096:	4413      	add	r3, r2
 8004098:	4a3d      	ldr	r2, [pc, #244]	@ (8004190 <HAL_DMA_Init+0x140>)
 800409a:	fba2 2303 	umull	r2, r3, r2, r3
 800409e:	091b      	lsrs	r3, r3, #4
 80040a0:	009a      	lsls	r2, r3, #2
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a3c      	ldr	r2, [pc, #240]	@ (800419c <HAL_DMA_Init+0x14c>)
 80040aa:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2202      	movs	r2, #2
 80040b0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80040c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040c6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80040d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	699b      	ldr	r3, [r3, #24]
 80040e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a1b      	ldr	r3, [r3, #32]
 80040ee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80040f0:	68fa      	ldr	r2, [r7, #12]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 fa74 	bl	80045ec <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800410c:	d102      	bne.n	8004114 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685a      	ldr	r2, [r3, #4]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800411c:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8004120:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800412a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d010      	beq.n	8004156 <HAL_DMA_Init+0x106>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	2b04      	cmp	r3, #4
 800413a:	d80c      	bhi.n	8004156 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f000 fa93 	bl	8004668 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004146:	2200      	movs	r2, #0
 8004148:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004152:	605a      	str	r2, [r3, #4]
 8004154:	e008      	b.n	8004168 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2201      	movs	r2, #1
 8004172:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800417e:	2300      	movs	r3, #0
}
 8004180:	4618      	mov	r0, r3
 8004182:	3710      	adds	r7, #16
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}
 8004188:	40020407 	.word	0x40020407
 800418c:	bffdfff8 	.word	0xbffdfff8
 8004190:	cccccccd 	.word	0xcccccccd
 8004194:	40020000 	.word	0x40020000
 8004198:	bffdfbf8 	.word	0xbffdfbf8
 800419c:	40020400 	.word	0x40020400

080041a0 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b086      	sub	sp, #24
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	60f8      	str	r0, [r7, #12]
 80041a8:	60b9      	str	r1, [r7, #8]
 80041aa:	607a      	str	r2, [r7, #4]
 80041ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041ae:	2300      	movs	r3, #0
 80041b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d101      	bne.n	80041c0 <HAL_DMA_Start_IT+0x20>
 80041bc:	2302      	movs	r3, #2
 80041be:	e066      	b.n	800428e <HAL_DMA_Start_IT+0xee>
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d155      	bne.n	8004280 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2202      	movs	r2, #2
 80041d8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2200      	movs	r2, #0
 80041e0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f022 0201 	bic.w	r2, r2, #1
 80041f0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	68b9      	ldr	r1, [r7, #8]
 80041f8:	68f8      	ldr	r0, [r7, #12]
 80041fa:	f000 f9b9 	bl	8004570 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004202:	2b00      	cmp	r3, #0
 8004204:	d008      	beq.n	8004218 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f042 020e 	orr.w	r2, r2, #14
 8004214:	601a      	str	r2, [r3, #0]
 8004216:	e00f      	b.n	8004238 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f022 0204 	bic.w	r2, r2, #4
 8004226:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f042 020a 	orr.w	r2, r2, #10
 8004236:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d007      	beq.n	8004256 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004250:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004254:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800425a:	2b00      	cmp	r3, #0
 800425c:	d007      	beq.n	800426e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004268:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800426c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f042 0201 	orr.w	r2, r2, #1
 800427c:	601a      	str	r2, [r3, #0]
 800427e:	e005      	b.n	800428c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2200      	movs	r2, #0
 8004284:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004288:	2302      	movs	r3, #2
 800428a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800428c:	7dfb      	ldrb	r3, [r7, #23]
}
 800428e:	4618      	mov	r0, r3
 8004290:	3718      	adds	r7, #24
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}

08004296 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004296:	b480      	push	{r7}
 8004298:	b083      	sub	sp, #12
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d101      	bne.n	80042a8 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e04f      	b.n	8004348 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d008      	beq.n	80042c6 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2204      	movs	r2, #4
 80042b8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e040      	b.n	8004348 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f022 020e 	bic.w	r2, r2, #14
 80042d4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80042e4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f022 0201 	bic.w	r2, r2, #1
 80042f4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042fa:	f003 021c 	and.w	r2, r3, #28
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004302:	2101      	movs	r1, #1
 8004304:	fa01 f202 	lsl.w	r2, r1, r2
 8004308:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004312:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004318:	2b00      	cmp	r3, #0
 800431a:	d00c      	beq.n	8004336 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004326:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800432a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004334:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2201      	movs	r2, #1
 800433a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8004346:	2300      	movs	r3, #0
}
 8004348:	4618      	mov	r0, r3
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800435c:	2300      	movs	r3, #0
 800435e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004366:	b2db      	uxtb	r3, r3
 8004368:	2b02      	cmp	r3, #2
 800436a:	d005      	beq.n	8004378 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2204      	movs	r2, #4
 8004370:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	73fb      	strb	r3, [r7, #15]
 8004376:	e047      	b.n	8004408 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f022 020e 	bic.w	r2, r2, #14
 8004386:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f022 0201 	bic.w	r2, r2, #1
 8004396:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043a2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80043a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043ac:	f003 021c 	and.w	r2, r3, #28
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043b4:	2101      	movs	r1, #1
 80043b6:	fa01 f202 	lsl.w	r2, r1, r2
 80043ba:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80043c4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00c      	beq.n	80043e8 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80043dc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80043e6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d003      	beq.n	8004408 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	4798      	blx	r3
    }
  }
  return status;
 8004408:	7bfb      	ldrb	r3, [r7, #15]
}
 800440a:	4618      	mov	r0, r3
 800440c:	3710      	adds	r7, #16
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}

08004412 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004412:	b580      	push	{r7, lr}
 8004414:	b084      	sub	sp, #16
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800442e:	f003 031c 	and.w	r3, r3, #28
 8004432:	2204      	movs	r2, #4
 8004434:	409a      	lsls	r2, r3
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	4013      	ands	r3, r2
 800443a:	2b00      	cmp	r3, #0
 800443c:	d026      	beq.n	800448c <HAL_DMA_IRQHandler+0x7a>
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	f003 0304 	and.w	r3, r3, #4
 8004444:	2b00      	cmp	r3, #0
 8004446:	d021      	beq.n	800448c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 0320 	and.w	r3, r3, #32
 8004452:	2b00      	cmp	r3, #0
 8004454:	d107      	bne.n	8004466 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f022 0204 	bic.w	r2, r2, #4
 8004464:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800446a:	f003 021c 	and.w	r2, r3, #28
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004472:	2104      	movs	r1, #4
 8004474:	fa01 f202 	lsl.w	r2, r1, r2
 8004478:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800447e:	2b00      	cmp	r3, #0
 8004480:	d071      	beq.n	8004566 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800448a:	e06c      	b.n	8004566 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004490:	f003 031c 	and.w	r3, r3, #28
 8004494:	2202      	movs	r2, #2
 8004496:	409a      	lsls	r2, r3
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	4013      	ands	r3, r2
 800449c:	2b00      	cmp	r3, #0
 800449e:	d02e      	beq.n	80044fe <HAL_DMA_IRQHandler+0xec>
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	f003 0302 	and.w	r3, r3, #2
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d029      	beq.n	80044fe <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0320 	and.w	r3, r3, #32
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d10b      	bne.n	80044d0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f022 020a 	bic.w	r2, r2, #10
 80044c6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044d4:	f003 021c 	and.w	r2, r3, #28
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044dc:	2102      	movs	r1, #2
 80044de:	fa01 f202 	lsl.w	r2, r1, r2
 80044e2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d038      	beq.n	8004566 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80044fc:	e033      	b.n	8004566 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004502:	f003 031c 	and.w	r3, r3, #28
 8004506:	2208      	movs	r2, #8
 8004508:	409a      	lsls	r2, r3
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	4013      	ands	r3, r2
 800450e:	2b00      	cmp	r3, #0
 8004510:	d02a      	beq.n	8004568 <HAL_DMA_IRQHandler+0x156>
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	f003 0308 	and.w	r3, r3, #8
 8004518:	2b00      	cmp	r3, #0
 800451a:	d025      	beq.n	8004568 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f022 020e 	bic.w	r2, r2, #14
 800452a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004530:	f003 021c 	and.w	r2, r3, #28
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004538:	2101      	movs	r1, #1
 800453a:	fa01 f202 	lsl.w	r2, r1, r2
 800453e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2201      	movs	r2, #1
 800454a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800455a:	2b00      	cmp	r3, #0
 800455c:	d004      	beq.n	8004568 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004566:	bf00      	nop
 8004568:	bf00      	nop
}
 800456a:	3710      	adds	r7, #16
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}

08004570 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004570:	b480      	push	{r7}
 8004572:	b085      	sub	sp, #20
 8004574:	af00      	add	r7, sp, #0
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	607a      	str	r2, [r7, #4]
 800457c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004586:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800458c:	2b00      	cmp	r3, #0
 800458e:	d004      	beq.n	800459a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004594:	68fa      	ldr	r2, [r7, #12]
 8004596:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004598:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800459e:	f003 021c 	and.w	r2, r3, #28
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045a6:	2101      	movs	r1, #1
 80045a8:	fa01 f202 	lsl.w	r2, r1, r2
 80045ac:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	683a      	ldr	r2, [r7, #0]
 80045b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	2b10      	cmp	r3, #16
 80045bc:	d108      	bne.n	80045d0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	68ba      	ldr	r2, [r7, #8]
 80045cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80045ce:	e007      	b.n	80045e0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68ba      	ldr	r2, [r7, #8]
 80045d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	60da      	str	r2, [r3, #12]
}
 80045e0:	bf00      	nop
 80045e2:	3714      	adds	r7, #20
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b085      	sub	sp, #20
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	461a      	mov	r2, r3
 80045fa:	4b17      	ldr	r3, [pc, #92]	@ (8004658 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d80a      	bhi.n	8004616 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004604:	089b      	lsrs	r3, r3, #2
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800460c:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	6493      	str	r3, [r2, #72]	@ 0x48
 8004614:	e007      	b.n	8004626 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800461a:	089b      	lsrs	r3, r3, #2
 800461c:	009a      	lsls	r2, r3, #2
 800461e:	4b0f      	ldr	r3, [pc, #60]	@ (800465c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004620:	4413      	add	r3, r2
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	b2db      	uxtb	r3, r3
 800462c:	3b08      	subs	r3, #8
 800462e:	4a0c      	ldr	r2, [pc, #48]	@ (8004660 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004630:	fba2 2303 	umull	r2, r3, r2, r3
 8004634:	091b      	lsrs	r3, r3, #4
 8004636:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4a0a      	ldr	r2, [pc, #40]	@ (8004664 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800463c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f003 031f 	and.w	r3, r3, #31
 8004644:	2201      	movs	r2, #1
 8004646:	409a      	lsls	r2, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800464c:	bf00      	nop
 800464e:	3714      	adds	r7, #20
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr
 8004658:	40020407 	.word	0x40020407
 800465c:	4002081c 	.word	0x4002081c
 8004660:	cccccccd 	.word	0xcccccccd
 8004664:	40020880 	.word	0x40020880

08004668 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004668:	b480      	push	{r7}
 800466a:	b085      	sub	sp, #20
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004678:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800467a:	68fa      	ldr	r2, [r7, #12]
 800467c:	4b0b      	ldr	r3, [pc, #44]	@ (80046ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800467e:	4413      	add	r3, r2
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	461a      	mov	r2, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4a09      	ldr	r2, [pc, #36]	@ (80046b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 800468c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	3b01      	subs	r3, #1
 8004692:	f003 0303 	and.w	r3, r3, #3
 8004696:	2201      	movs	r2, #1
 8004698:	409a      	lsls	r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800469e:	bf00      	nop
 80046a0:	3714      	adds	r7, #20
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop
 80046ac:	1000823f 	.word	0x1000823f
 80046b0:	40020940 	.word	0x40020940

080046b4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b087      	sub	sp, #28
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80046be:	2300      	movs	r3, #0
 80046c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80046c2:	e14c      	b.n	800495e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	2101      	movs	r1, #1
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	fa01 f303 	lsl.w	r3, r1, r3
 80046d0:	4013      	ands	r3, r2
 80046d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	f000 813e 	beq.w	8004958 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	f003 0303 	and.w	r3, r3, #3
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d005      	beq.n	80046f4 <HAL_GPIO_Init+0x40>
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	f003 0303 	and.w	r3, r3, #3
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d130      	bne.n	8004756 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	005b      	lsls	r3, r3, #1
 80046fe:	2203      	movs	r2, #3
 8004700:	fa02 f303 	lsl.w	r3, r2, r3
 8004704:	43db      	mvns	r3, r3
 8004706:	693a      	ldr	r2, [r7, #16]
 8004708:	4013      	ands	r3, r2
 800470a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	68da      	ldr	r2, [r3, #12]
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	005b      	lsls	r3, r3, #1
 8004714:	fa02 f303 	lsl.w	r3, r2, r3
 8004718:	693a      	ldr	r2, [r7, #16]
 800471a:	4313      	orrs	r3, r2
 800471c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	693a      	ldr	r2, [r7, #16]
 8004722:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800472a:	2201      	movs	r2, #1
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	fa02 f303 	lsl.w	r3, r2, r3
 8004732:	43db      	mvns	r3, r3
 8004734:	693a      	ldr	r2, [r7, #16]
 8004736:	4013      	ands	r3, r2
 8004738:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	091b      	lsrs	r3, r3, #4
 8004740:	f003 0201 	and.w	r2, r3, #1
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	fa02 f303 	lsl.w	r3, r2, r3
 800474a:	693a      	ldr	r2, [r7, #16]
 800474c:	4313      	orrs	r3, r2
 800474e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	693a      	ldr	r2, [r7, #16]
 8004754:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	f003 0303 	and.w	r3, r3, #3
 800475e:	2b03      	cmp	r3, #3
 8004760:	d017      	beq.n	8004792 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	005b      	lsls	r3, r3, #1
 800476c:	2203      	movs	r2, #3
 800476e:	fa02 f303 	lsl.w	r3, r2, r3
 8004772:	43db      	mvns	r3, r3
 8004774:	693a      	ldr	r2, [r7, #16]
 8004776:	4013      	ands	r3, r2
 8004778:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	689a      	ldr	r2, [r3, #8]
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	005b      	lsls	r3, r3, #1
 8004782:	fa02 f303 	lsl.w	r3, r2, r3
 8004786:	693a      	ldr	r2, [r7, #16]
 8004788:	4313      	orrs	r3, r2
 800478a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	693a      	ldr	r2, [r7, #16]
 8004790:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	f003 0303 	and.w	r3, r3, #3
 800479a:	2b02      	cmp	r3, #2
 800479c:	d123      	bne.n	80047e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	08da      	lsrs	r2, r3, #3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	3208      	adds	r2, #8
 80047a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	f003 0307 	and.w	r3, r3, #7
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	220f      	movs	r2, #15
 80047b6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ba:	43db      	mvns	r3, r3
 80047bc:	693a      	ldr	r2, [r7, #16]
 80047be:	4013      	ands	r3, r2
 80047c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	691a      	ldr	r2, [r3, #16]
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	f003 0307 	and.w	r3, r3, #7
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	fa02 f303 	lsl.w	r3, r2, r3
 80047d2:	693a      	ldr	r2, [r7, #16]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	08da      	lsrs	r2, r3, #3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	3208      	adds	r2, #8
 80047e0:	6939      	ldr	r1, [r7, #16]
 80047e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	005b      	lsls	r3, r3, #1
 80047f0:	2203      	movs	r2, #3
 80047f2:	fa02 f303 	lsl.w	r3, r2, r3
 80047f6:	43db      	mvns	r3, r3
 80047f8:	693a      	ldr	r2, [r7, #16]
 80047fa:	4013      	ands	r3, r2
 80047fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	f003 0203 	and.w	r2, r3, #3
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	005b      	lsls	r3, r3, #1
 800480a:	fa02 f303 	lsl.w	r3, r2, r3
 800480e:	693a      	ldr	r2, [r7, #16]
 8004810:	4313      	orrs	r3, r2
 8004812:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	693a      	ldr	r2, [r7, #16]
 8004818:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004822:	2b00      	cmp	r3, #0
 8004824:	f000 8098 	beq.w	8004958 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004828:	4a54      	ldr	r2, [pc, #336]	@ (800497c <HAL_GPIO_Init+0x2c8>)
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	089b      	lsrs	r3, r3, #2
 800482e:	3302      	adds	r3, #2
 8004830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004834:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	f003 0303 	and.w	r3, r3, #3
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	220f      	movs	r2, #15
 8004840:	fa02 f303 	lsl.w	r3, r2, r3
 8004844:	43db      	mvns	r3, r3
 8004846:	693a      	ldr	r2, [r7, #16]
 8004848:	4013      	ands	r3, r2
 800484a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004852:	d019      	beq.n	8004888 <HAL_GPIO_Init+0x1d4>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4a4a      	ldr	r2, [pc, #296]	@ (8004980 <HAL_GPIO_Init+0x2cc>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d013      	beq.n	8004884 <HAL_GPIO_Init+0x1d0>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4a49      	ldr	r2, [pc, #292]	@ (8004984 <HAL_GPIO_Init+0x2d0>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d00d      	beq.n	8004880 <HAL_GPIO_Init+0x1cc>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a48      	ldr	r2, [pc, #288]	@ (8004988 <HAL_GPIO_Init+0x2d4>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d007      	beq.n	800487c <HAL_GPIO_Init+0x1c8>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a47      	ldr	r2, [pc, #284]	@ (800498c <HAL_GPIO_Init+0x2d8>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d101      	bne.n	8004878 <HAL_GPIO_Init+0x1c4>
 8004874:	2304      	movs	r3, #4
 8004876:	e008      	b.n	800488a <HAL_GPIO_Init+0x1d6>
 8004878:	2307      	movs	r3, #7
 800487a:	e006      	b.n	800488a <HAL_GPIO_Init+0x1d6>
 800487c:	2303      	movs	r3, #3
 800487e:	e004      	b.n	800488a <HAL_GPIO_Init+0x1d6>
 8004880:	2302      	movs	r3, #2
 8004882:	e002      	b.n	800488a <HAL_GPIO_Init+0x1d6>
 8004884:	2301      	movs	r3, #1
 8004886:	e000      	b.n	800488a <HAL_GPIO_Init+0x1d6>
 8004888:	2300      	movs	r3, #0
 800488a:	697a      	ldr	r2, [r7, #20]
 800488c:	f002 0203 	and.w	r2, r2, #3
 8004890:	0092      	lsls	r2, r2, #2
 8004892:	4093      	lsls	r3, r2
 8004894:	693a      	ldr	r2, [r7, #16]
 8004896:	4313      	orrs	r3, r2
 8004898:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800489a:	4938      	ldr	r1, [pc, #224]	@ (800497c <HAL_GPIO_Init+0x2c8>)
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	089b      	lsrs	r3, r3, #2
 80048a0:	3302      	adds	r3, #2
 80048a2:	693a      	ldr	r2, [r7, #16]
 80048a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80048a8:	4b39      	ldr	r3, [pc, #228]	@ (8004990 <HAL_GPIO_Init+0x2dc>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	43db      	mvns	r3, r3
 80048b2:	693a      	ldr	r2, [r7, #16]
 80048b4:	4013      	ands	r3, r2
 80048b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d003      	beq.n	80048cc <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80048c4:	693a      	ldr	r2, [r7, #16]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80048cc:	4a30      	ldr	r2, [pc, #192]	@ (8004990 <HAL_GPIO_Init+0x2dc>)
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80048d2:	4b2f      	ldr	r3, [pc, #188]	@ (8004990 <HAL_GPIO_Init+0x2dc>)
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	43db      	mvns	r3, r3
 80048dc:	693a      	ldr	r2, [r7, #16]
 80048de:	4013      	ands	r3, r2
 80048e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d003      	beq.n	80048f6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80048ee:	693a      	ldr	r2, [r7, #16]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80048f6:	4a26      	ldr	r2, [pc, #152]	@ (8004990 <HAL_GPIO_Init+0x2dc>)
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80048fc:	4b24      	ldr	r3, [pc, #144]	@ (8004990 <HAL_GPIO_Init+0x2dc>)
 80048fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004902:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	43db      	mvns	r3, r3
 8004908:	693a      	ldr	r2, [r7, #16]
 800490a:	4013      	ands	r3, r2
 800490c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d003      	beq.n	8004922 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800491a:	693a      	ldr	r2, [r7, #16]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	4313      	orrs	r3, r2
 8004920:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004922:	4a1b      	ldr	r2, [pc, #108]	@ (8004990 <HAL_GPIO_Init+0x2dc>)
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 800492a:	4b19      	ldr	r3, [pc, #100]	@ (8004990 <HAL_GPIO_Init+0x2dc>)
 800492c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004930:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	43db      	mvns	r3, r3
 8004936:	693a      	ldr	r2, [r7, #16]
 8004938:	4013      	ands	r3, r2
 800493a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d003      	beq.n	8004950 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8004948:	693a      	ldr	r2, [r7, #16]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	4313      	orrs	r3, r2
 800494e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004950:	4a0f      	ldr	r2, [pc, #60]	@ (8004990 <HAL_GPIO_Init+0x2dc>)
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	3301      	adds	r3, #1
 800495c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	fa22 f303 	lsr.w	r3, r2, r3
 8004968:	2b00      	cmp	r3, #0
 800496a:	f47f aeab 	bne.w	80046c4 <HAL_GPIO_Init+0x10>
  }
}
 800496e:	bf00      	nop
 8004970:	bf00      	nop
 8004972:	371c      	adds	r7, #28
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr
 800497c:	40010000 	.word	0x40010000
 8004980:	48000400 	.word	0x48000400
 8004984:	48000800 	.word	0x48000800
 8004988:	48000c00 	.word	0x48000c00
 800498c:	48001000 	.word	0x48001000
 8004990:	58000800 	.word	0x58000800

08004994 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004994:	b480      	push	{r7}
 8004996:	b085      	sub	sp, #20
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	460b      	mov	r3, r1
 800499e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	691a      	ldr	r2, [r3, #16]
 80049a4:	887b      	ldrh	r3, [r7, #2]
 80049a6:	4013      	ands	r3, r2
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d002      	beq.n	80049b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80049ac:	2301      	movs	r3, #1
 80049ae:	73fb      	strb	r3, [r7, #15]
 80049b0:	e001      	b.n	80049b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80049b2:	2300      	movs	r3, #0
 80049b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80049b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3714      	adds	r7, #20
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	460b      	mov	r3, r1
 80049ce:	807b      	strh	r3, [r7, #2]
 80049d0:	4613      	mov	r3, r2
 80049d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80049d4:	787b      	ldrb	r3, [r7, #1]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d003      	beq.n	80049e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80049da:	887a      	ldrh	r2, [r7, #2]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80049e0:	e002      	b.n	80049e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80049e2:	887a      	ldrh	r2, [r7, #2]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80049e8:	bf00      	nop
 80049ea:	370c      	adds	r7, #12
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr

080049f4 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b082      	sub	sp, #8
 80049f8:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 80049fa:	4b0a      	ldr	r3, [pc, #40]	@ (8004a24 <HAL_HSEM_IRQHandler+0x30>)
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8004a00:	4b08      	ldr	r3, [pc, #32]	@ (8004a24 <HAL_HSEM_IRQHandler+0x30>)
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	43db      	mvns	r3, r3
 8004a08:	4906      	ldr	r1, [pc, #24]	@ (8004a24 <HAL_HSEM_IRQHandler+0x30>)
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8004a0e:	4a05      	ldr	r2, [pc, #20]	@ (8004a24 <HAL_HSEM_IRQHandler+0x30>)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f000 f807 	bl	8004a28 <HAL_HSEM_FreeCallback>
}
 8004a1a:	bf00      	nop
 8004a1c:	3708      	adds	r7, #8
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	58001500 	.word	0x58001500

08004a28 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8004a30:	bf00      	nop
 8004a32:	370c      	adds	r7, #12
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b082      	sub	sp, #8
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d101      	bne.n	8004a4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e08d      	b.n	8004b6a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d106      	bne.n	8004a68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f7fe fb6e 	bl	8003144 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2224      	movs	r2, #36	@ 0x24
 8004a6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f022 0201 	bic.w	r2, r2, #1
 8004a7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	685a      	ldr	r2, [r3, #4]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004a8c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	689a      	ldr	r2, [r3, #8]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004a9c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d107      	bne.n	8004ab6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	689a      	ldr	r2, [r3, #8]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004ab2:	609a      	str	r2, [r3, #8]
 8004ab4:	e006      	b.n	8004ac4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	689a      	ldr	r2, [r3, #8]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004ac2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	d108      	bne.n	8004ade <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	685a      	ldr	r2, [r3, #4]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ada:	605a      	str	r2, [r3, #4]
 8004adc:	e007      	b.n	8004aee <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	685a      	ldr	r2, [r3, #4]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004aec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	6812      	ldr	r2, [r2, #0]
 8004af8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004afc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b00:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68da      	ldr	r2, [r3, #12]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004b10:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	691a      	ldr	r2, [r3, #16]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	695b      	ldr	r3, [r3, #20]
 8004b1a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	699b      	ldr	r3, [r3, #24]
 8004b22:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	430a      	orrs	r2, r1
 8004b2a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	69d9      	ldr	r1, [r3, #28]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a1a      	ldr	r2, [r3, #32]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	430a      	orrs	r2, r1
 8004b3a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f042 0201 	orr.w	r2, r2, #1
 8004b4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2220      	movs	r2, #32
 8004b56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004b68:	2300      	movs	r3, #0
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3708      	adds	r7, #8
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
	...

08004b74 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b088      	sub	sp, #32
 8004b78:	af02      	add	r7, sp, #8
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	4608      	mov	r0, r1
 8004b7e:	4611      	mov	r1, r2
 8004b80:	461a      	mov	r2, r3
 8004b82:	4603      	mov	r3, r0
 8004b84:	817b      	strh	r3, [r7, #10]
 8004b86:	460b      	mov	r3, r1
 8004b88:	813b      	strh	r3, [r7, #8]
 8004b8a:	4613      	mov	r3, r2
 8004b8c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	2b20      	cmp	r3, #32
 8004b98:	f040 80f9 	bne.w	8004d8e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b9c:	6a3b      	ldr	r3, [r7, #32]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d002      	beq.n	8004ba8 <HAL_I2C_Mem_Write+0x34>
 8004ba2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d105      	bne.n	8004bb4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004bae:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e0ed      	b.n	8004d90 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d101      	bne.n	8004bc2 <HAL_I2C_Mem_Write+0x4e>
 8004bbe:	2302      	movs	r3, #2
 8004bc0:	e0e6      	b.n	8004d90 <HAL_I2C_Mem_Write+0x21c>
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004bca:	f7ff f877 	bl	8003cbc <HAL_GetTick>
 8004bce:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	9300      	str	r3, [sp, #0]
 8004bd4:	2319      	movs	r3, #25
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004bdc:	68f8      	ldr	r0, [r7, #12]
 8004bde:	f000 fac3 	bl	8005168 <I2C_WaitOnFlagUntilTimeout>
 8004be2:	4603      	mov	r3, r0
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d001      	beq.n	8004bec <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e0d1      	b.n	8004d90 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2221      	movs	r2, #33	@ 0x21
 8004bf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2240      	movs	r2, #64	@ 0x40
 8004bf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6a3a      	ldr	r2, [r7, #32]
 8004c06:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004c0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2200      	movs	r2, #0
 8004c12:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004c14:	88f8      	ldrh	r0, [r7, #6]
 8004c16:	893a      	ldrh	r2, [r7, #8]
 8004c18:	8979      	ldrh	r1, [r7, #10]
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	9301      	str	r3, [sp, #4]
 8004c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c20:	9300      	str	r3, [sp, #0]
 8004c22:	4603      	mov	r3, r0
 8004c24:	68f8      	ldr	r0, [r7, #12]
 8004c26:	f000 f9d3 	bl	8004fd0 <I2C_RequestMemoryWrite>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d005      	beq.n	8004c3c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2200      	movs	r2, #0
 8004c34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e0a9      	b.n	8004d90 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	2bff      	cmp	r3, #255	@ 0xff
 8004c44:	d90e      	bls.n	8004c64 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	22ff      	movs	r2, #255	@ 0xff
 8004c4a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c50:	b2da      	uxtb	r2, r3
 8004c52:	8979      	ldrh	r1, [r7, #10]
 8004c54:	2300      	movs	r3, #0
 8004c56:	9300      	str	r3, [sp, #0]
 8004c58:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004c5c:	68f8      	ldr	r0, [r7, #12]
 8004c5e:	f000 fc47 	bl	80054f0 <I2C_TransferConfig>
 8004c62:	e00f      	b.n	8004c84 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c68:	b29a      	uxth	r2, r3
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c72:	b2da      	uxtb	r2, r3
 8004c74:	8979      	ldrh	r1, [r7, #10]
 8004c76:	2300      	movs	r3, #0
 8004c78:	9300      	str	r3, [sp, #0]
 8004c7a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004c7e:	68f8      	ldr	r0, [r7, #12]
 8004c80:	f000 fc36 	bl	80054f0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c84:	697a      	ldr	r2, [r7, #20]
 8004c86:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c88:	68f8      	ldr	r0, [r7, #12]
 8004c8a:	f000 fac6 	bl	800521a <I2C_WaitOnTXISFlagUntilTimeout>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d001      	beq.n	8004c98 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e07b      	b.n	8004d90 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c9c:	781a      	ldrb	r2, [r3, #0]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ca8:	1c5a      	adds	r2, r3, #1
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	3b01      	subs	r3, #1
 8004cb6:	b29a      	uxth	r2, r3
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cc0:	3b01      	subs	r3, #1
 8004cc2:	b29a      	uxth	r2, r3
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d034      	beq.n	8004d3c <HAL_I2C_Mem_Write+0x1c8>
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d130      	bne.n	8004d3c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	9300      	str	r3, [sp, #0]
 8004cde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	2180      	movs	r1, #128	@ 0x80
 8004ce4:	68f8      	ldr	r0, [r7, #12]
 8004ce6:	f000 fa3f 	bl	8005168 <I2C_WaitOnFlagUntilTimeout>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d001      	beq.n	8004cf4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e04d      	b.n	8004d90 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	2bff      	cmp	r3, #255	@ 0xff
 8004cfc:	d90e      	bls.n	8004d1c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	22ff      	movs	r2, #255	@ 0xff
 8004d02:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d08:	b2da      	uxtb	r2, r3
 8004d0a:	8979      	ldrh	r1, [r7, #10]
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	9300      	str	r3, [sp, #0]
 8004d10:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004d14:	68f8      	ldr	r0, [r7, #12]
 8004d16:	f000 fbeb 	bl	80054f0 <I2C_TransferConfig>
 8004d1a:	e00f      	b.n	8004d3c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d20:	b29a      	uxth	r2, r3
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d2a:	b2da      	uxtb	r2, r3
 8004d2c:	8979      	ldrh	r1, [r7, #10]
 8004d2e:	2300      	movs	r3, #0
 8004d30:	9300      	str	r3, [sp, #0]
 8004d32:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004d36:	68f8      	ldr	r0, [r7, #12]
 8004d38:	f000 fbda 	bl	80054f0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d19e      	bne.n	8004c84 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d46:	697a      	ldr	r2, [r7, #20]
 8004d48:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d4a:	68f8      	ldr	r0, [r7, #12]
 8004d4c:	f000 faac 	bl	80052a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d001      	beq.n	8004d5a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e01a      	b.n	8004d90 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	2220      	movs	r2, #32
 8004d60:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	6859      	ldr	r1, [r3, #4]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	4b0a      	ldr	r3, [pc, #40]	@ (8004d98 <HAL_I2C_Mem_Write+0x224>)
 8004d6e:	400b      	ands	r3, r1
 8004d70:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2220      	movs	r2, #32
 8004d76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2200      	movs	r2, #0
 8004d86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	e000      	b.n	8004d90 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004d8e:	2302      	movs	r3, #2
  }
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3718      	adds	r7, #24
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}
 8004d98:	fe00e800 	.word	0xfe00e800

08004d9c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b088      	sub	sp, #32
 8004da0:	af02      	add	r7, sp, #8
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	4608      	mov	r0, r1
 8004da6:	4611      	mov	r1, r2
 8004da8:	461a      	mov	r2, r3
 8004daa:	4603      	mov	r3, r0
 8004dac:	817b      	strh	r3, [r7, #10]
 8004dae:	460b      	mov	r3, r1
 8004db0:	813b      	strh	r3, [r7, #8]
 8004db2:	4613      	mov	r3, r2
 8004db4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	2b20      	cmp	r3, #32
 8004dc0:	f040 80fd 	bne.w	8004fbe <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dc4:	6a3b      	ldr	r3, [r7, #32]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d002      	beq.n	8004dd0 <HAL_I2C_Mem_Read+0x34>
 8004dca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d105      	bne.n	8004ddc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004dd6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e0f1      	b.n	8004fc0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d101      	bne.n	8004dea <HAL_I2C_Mem_Read+0x4e>
 8004de6:	2302      	movs	r3, #2
 8004de8:	e0ea      	b.n	8004fc0 <HAL_I2C_Mem_Read+0x224>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2201      	movs	r2, #1
 8004dee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004df2:	f7fe ff63 	bl	8003cbc <HAL_GetTick>
 8004df6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	9300      	str	r3, [sp, #0]
 8004dfc:	2319      	movs	r3, #25
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004e04:	68f8      	ldr	r0, [r7, #12]
 8004e06:	f000 f9af 	bl	8005168 <I2C_WaitOnFlagUntilTimeout>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d001      	beq.n	8004e14 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	e0d5      	b.n	8004fc0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2222      	movs	r2, #34	@ 0x22
 8004e18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2240      	movs	r2, #64	@ 0x40
 8004e20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2200      	movs	r2, #0
 8004e28:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6a3a      	ldr	r2, [r7, #32]
 8004e2e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004e34:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004e3c:	88f8      	ldrh	r0, [r7, #6]
 8004e3e:	893a      	ldrh	r2, [r7, #8]
 8004e40:	8979      	ldrh	r1, [r7, #10]
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	9301      	str	r3, [sp, #4]
 8004e46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e48:	9300      	str	r3, [sp, #0]
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	68f8      	ldr	r0, [r7, #12]
 8004e4e:	f000 f913 	bl	8005078 <I2C_RequestMemoryRead>
 8004e52:	4603      	mov	r3, r0
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d005      	beq.n	8004e64 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e0ad      	b.n	8004fc0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	2bff      	cmp	r3, #255	@ 0xff
 8004e6c:	d90e      	bls.n	8004e8c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	22ff      	movs	r2, #255	@ 0xff
 8004e72:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e78:	b2da      	uxtb	r2, r3
 8004e7a:	8979      	ldrh	r1, [r7, #10]
 8004e7c:	4b52      	ldr	r3, [pc, #328]	@ (8004fc8 <HAL_I2C_Mem_Read+0x22c>)
 8004e7e:	9300      	str	r3, [sp, #0]
 8004e80:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004e84:	68f8      	ldr	r0, [r7, #12]
 8004e86:	f000 fb33 	bl	80054f0 <I2C_TransferConfig>
 8004e8a:	e00f      	b.n	8004eac <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e90:	b29a      	uxth	r2, r3
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e9a:	b2da      	uxtb	r2, r3
 8004e9c:	8979      	ldrh	r1, [r7, #10]
 8004e9e:	4b4a      	ldr	r3, [pc, #296]	@ (8004fc8 <HAL_I2C_Mem_Read+0x22c>)
 8004ea0:	9300      	str	r3, [sp, #0]
 8004ea2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004ea6:	68f8      	ldr	r0, [r7, #12]
 8004ea8:	f000 fb22 	bl	80054f0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	9300      	str	r3, [sp, #0]
 8004eb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	2104      	movs	r1, #4
 8004eb6:	68f8      	ldr	r0, [r7, #12]
 8004eb8:	f000 f956 	bl	8005168 <I2C_WaitOnFlagUntilTimeout>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d001      	beq.n	8004ec6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e07c      	b.n	8004fc0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ed0:	b2d2      	uxtb	r2, r2
 8004ed2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ed8:	1c5a      	adds	r2, r3, #1
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ee2:	3b01      	subs	r3, #1
 8004ee4:	b29a      	uxth	r2, r3
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	3b01      	subs	r3, #1
 8004ef2:	b29a      	uxth	r2, r3
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d034      	beq.n	8004f6c <HAL_I2C_Mem_Read+0x1d0>
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d130      	bne.n	8004f6c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	9300      	str	r3, [sp, #0]
 8004f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f10:	2200      	movs	r2, #0
 8004f12:	2180      	movs	r1, #128	@ 0x80
 8004f14:	68f8      	ldr	r0, [r7, #12]
 8004f16:	f000 f927 	bl	8005168 <I2C_WaitOnFlagUntilTimeout>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d001      	beq.n	8004f24 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e04d      	b.n	8004fc0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	2bff      	cmp	r3, #255	@ 0xff
 8004f2c:	d90e      	bls.n	8004f4c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	22ff      	movs	r2, #255	@ 0xff
 8004f32:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f38:	b2da      	uxtb	r2, r3
 8004f3a:	8979      	ldrh	r1, [r7, #10]
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	9300      	str	r3, [sp, #0]
 8004f40:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004f44:	68f8      	ldr	r0, [r7, #12]
 8004f46:	f000 fad3 	bl	80054f0 <I2C_TransferConfig>
 8004f4a:	e00f      	b.n	8004f6c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f50:	b29a      	uxth	r2, r3
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f5a:	b2da      	uxtb	r2, r3
 8004f5c:	8979      	ldrh	r1, [r7, #10]
 8004f5e:	2300      	movs	r3, #0
 8004f60:	9300      	str	r3, [sp, #0]
 8004f62:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004f66:	68f8      	ldr	r0, [r7, #12]
 8004f68:	f000 fac2 	bl	80054f0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d19a      	bne.n	8004eac <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f76:	697a      	ldr	r2, [r7, #20]
 8004f78:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f7a:	68f8      	ldr	r0, [r7, #12]
 8004f7c:	f000 f994 	bl	80052a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004f80:	4603      	mov	r3, r0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d001      	beq.n	8004f8a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e01a      	b.n	8004fc0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2220      	movs	r2, #32
 8004f90:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	6859      	ldr	r1, [r3, #4]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	4b0b      	ldr	r3, [pc, #44]	@ (8004fcc <HAL_I2C_Mem_Read+0x230>)
 8004f9e:	400b      	ands	r3, r1
 8004fa0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2220      	movs	r2, #32
 8004fa6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2200      	movs	r2, #0
 8004fae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	e000      	b.n	8004fc0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004fbe:	2302      	movs	r3, #2
  }
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3718      	adds	r7, #24
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	80002400 	.word	0x80002400
 8004fcc:	fe00e800 	.word	0xfe00e800

08004fd0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b086      	sub	sp, #24
 8004fd4:	af02      	add	r7, sp, #8
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	4608      	mov	r0, r1
 8004fda:	4611      	mov	r1, r2
 8004fdc:	461a      	mov	r2, r3
 8004fde:	4603      	mov	r3, r0
 8004fe0:	817b      	strh	r3, [r7, #10]
 8004fe2:	460b      	mov	r3, r1
 8004fe4:	813b      	strh	r3, [r7, #8]
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004fea:	88fb      	ldrh	r3, [r7, #6]
 8004fec:	b2da      	uxtb	r2, r3
 8004fee:	8979      	ldrh	r1, [r7, #10]
 8004ff0:	4b20      	ldr	r3, [pc, #128]	@ (8005074 <I2C_RequestMemoryWrite+0xa4>)
 8004ff2:	9300      	str	r3, [sp, #0]
 8004ff4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004ff8:	68f8      	ldr	r0, [r7, #12]
 8004ffa:	f000 fa79 	bl	80054f0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ffe:	69fa      	ldr	r2, [r7, #28]
 8005000:	69b9      	ldr	r1, [r7, #24]
 8005002:	68f8      	ldr	r0, [r7, #12]
 8005004:	f000 f909 	bl	800521a <I2C_WaitOnTXISFlagUntilTimeout>
 8005008:	4603      	mov	r3, r0
 800500a:	2b00      	cmp	r3, #0
 800500c:	d001      	beq.n	8005012 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e02c      	b.n	800506c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005012:	88fb      	ldrh	r3, [r7, #6]
 8005014:	2b01      	cmp	r3, #1
 8005016:	d105      	bne.n	8005024 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005018:	893b      	ldrh	r3, [r7, #8]
 800501a:	b2da      	uxtb	r2, r3
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	629a      	str	r2, [r3, #40]	@ 0x28
 8005022:	e015      	b.n	8005050 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005024:	893b      	ldrh	r3, [r7, #8]
 8005026:	0a1b      	lsrs	r3, r3, #8
 8005028:	b29b      	uxth	r3, r3
 800502a:	b2da      	uxtb	r2, r3
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005032:	69fa      	ldr	r2, [r7, #28]
 8005034:	69b9      	ldr	r1, [r7, #24]
 8005036:	68f8      	ldr	r0, [r7, #12]
 8005038:	f000 f8ef 	bl	800521a <I2C_WaitOnTXISFlagUntilTimeout>
 800503c:	4603      	mov	r3, r0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d001      	beq.n	8005046 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e012      	b.n	800506c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005046:	893b      	ldrh	r3, [r7, #8]
 8005048:	b2da      	uxtb	r2, r3
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005050:	69fb      	ldr	r3, [r7, #28]
 8005052:	9300      	str	r3, [sp, #0]
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	2200      	movs	r2, #0
 8005058:	2180      	movs	r1, #128	@ 0x80
 800505a:	68f8      	ldr	r0, [r7, #12]
 800505c:	f000 f884 	bl	8005168 <I2C_WaitOnFlagUntilTimeout>
 8005060:	4603      	mov	r3, r0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d001      	beq.n	800506a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e000      	b.n	800506c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800506a:	2300      	movs	r3, #0
}
 800506c:	4618      	mov	r0, r3
 800506e:	3710      	adds	r7, #16
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}
 8005074:	80002000 	.word	0x80002000

08005078 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b086      	sub	sp, #24
 800507c:	af02      	add	r7, sp, #8
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	4608      	mov	r0, r1
 8005082:	4611      	mov	r1, r2
 8005084:	461a      	mov	r2, r3
 8005086:	4603      	mov	r3, r0
 8005088:	817b      	strh	r3, [r7, #10]
 800508a:	460b      	mov	r3, r1
 800508c:	813b      	strh	r3, [r7, #8]
 800508e:	4613      	mov	r3, r2
 8005090:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005092:	88fb      	ldrh	r3, [r7, #6]
 8005094:	b2da      	uxtb	r2, r3
 8005096:	8979      	ldrh	r1, [r7, #10]
 8005098:	4b20      	ldr	r3, [pc, #128]	@ (800511c <I2C_RequestMemoryRead+0xa4>)
 800509a:	9300      	str	r3, [sp, #0]
 800509c:	2300      	movs	r3, #0
 800509e:	68f8      	ldr	r0, [r7, #12]
 80050a0:	f000 fa26 	bl	80054f0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050a4:	69fa      	ldr	r2, [r7, #28]
 80050a6:	69b9      	ldr	r1, [r7, #24]
 80050a8:	68f8      	ldr	r0, [r7, #12]
 80050aa:	f000 f8b6 	bl	800521a <I2C_WaitOnTXISFlagUntilTimeout>
 80050ae:	4603      	mov	r3, r0
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d001      	beq.n	80050b8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	e02c      	b.n	8005112 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80050b8:	88fb      	ldrh	r3, [r7, #6]
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d105      	bne.n	80050ca <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80050be:	893b      	ldrh	r3, [r7, #8]
 80050c0:	b2da      	uxtb	r2, r3
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	629a      	str	r2, [r3, #40]	@ 0x28
 80050c8:	e015      	b.n	80050f6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80050ca:	893b      	ldrh	r3, [r7, #8]
 80050cc:	0a1b      	lsrs	r3, r3, #8
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	b2da      	uxtb	r2, r3
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050d8:	69fa      	ldr	r2, [r7, #28]
 80050da:	69b9      	ldr	r1, [r7, #24]
 80050dc:	68f8      	ldr	r0, [r7, #12]
 80050de:	f000 f89c 	bl	800521a <I2C_WaitOnTXISFlagUntilTimeout>
 80050e2:	4603      	mov	r3, r0
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d001      	beq.n	80050ec <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	e012      	b.n	8005112 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80050ec:	893b      	ldrh	r3, [r7, #8]
 80050ee:	b2da      	uxtb	r2, r3
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	9300      	str	r3, [sp, #0]
 80050fa:	69bb      	ldr	r3, [r7, #24]
 80050fc:	2200      	movs	r2, #0
 80050fe:	2140      	movs	r1, #64	@ 0x40
 8005100:	68f8      	ldr	r0, [r7, #12]
 8005102:	f000 f831 	bl	8005168 <I2C_WaitOnFlagUntilTimeout>
 8005106:	4603      	mov	r3, r0
 8005108:	2b00      	cmp	r3, #0
 800510a:	d001      	beq.n	8005110 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	e000      	b.n	8005112 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	3710      	adds	r7, #16
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop
 800511c:	80002000 	.word	0x80002000

08005120 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005120:	b480      	push	{r7}
 8005122:	b083      	sub	sp, #12
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	699b      	ldr	r3, [r3, #24]
 800512e:	f003 0302 	and.w	r3, r3, #2
 8005132:	2b02      	cmp	r3, #2
 8005134:	d103      	bne.n	800513e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2200      	movs	r2, #0
 800513c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	699b      	ldr	r3, [r3, #24]
 8005144:	f003 0301 	and.w	r3, r3, #1
 8005148:	2b01      	cmp	r3, #1
 800514a:	d007      	beq.n	800515c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	699a      	ldr	r2, [r3, #24]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f042 0201 	orr.w	r2, r2, #1
 800515a:	619a      	str	r2, [r3, #24]
  }
}
 800515c:	bf00      	nop
 800515e:	370c      	adds	r7, #12
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr

08005168 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0
 800516e:	60f8      	str	r0, [r7, #12]
 8005170:	60b9      	str	r1, [r7, #8]
 8005172:	603b      	str	r3, [r7, #0]
 8005174:	4613      	mov	r3, r2
 8005176:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005178:	e03b      	b.n	80051f2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800517a:	69ba      	ldr	r2, [r7, #24]
 800517c:	6839      	ldr	r1, [r7, #0]
 800517e:	68f8      	ldr	r0, [r7, #12]
 8005180:	f000 f8d6 	bl	8005330 <I2C_IsErrorOccurred>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d001      	beq.n	800518e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	e041      	b.n	8005212 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005194:	d02d      	beq.n	80051f2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005196:	f7fe fd91 	bl	8003cbc <HAL_GetTick>
 800519a:	4602      	mov	r2, r0
 800519c:	69bb      	ldr	r3, [r7, #24]
 800519e:	1ad3      	subs	r3, r2, r3
 80051a0:	683a      	ldr	r2, [r7, #0]
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d302      	bcc.n	80051ac <I2C_WaitOnFlagUntilTimeout+0x44>
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d122      	bne.n	80051f2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	699a      	ldr	r2, [r3, #24]
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	4013      	ands	r3, r2
 80051b6:	68ba      	ldr	r2, [r7, #8]
 80051b8:	429a      	cmp	r2, r3
 80051ba:	bf0c      	ite	eq
 80051bc:	2301      	moveq	r3, #1
 80051be:	2300      	movne	r3, #0
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	461a      	mov	r2, r3
 80051c4:	79fb      	ldrb	r3, [r7, #7]
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d113      	bne.n	80051f2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051ce:	f043 0220 	orr.w	r2, r3, #32
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2220      	movs	r2, #32
 80051da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e00f      	b.n	8005212 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	699a      	ldr	r2, [r3, #24]
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	4013      	ands	r3, r2
 80051fc:	68ba      	ldr	r2, [r7, #8]
 80051fe:	429a      	cmp	r2, r3
 8005200:	bf0c      	ite	eq
 8005202:	2301      	moveq	r3, #1
 8005204:	2300      	movne	r3, #0
 8005206:	b2db      	uxtb	r3, r3
 8005208:	461a      	mov	r2, r3
 800520a:	79fb      	ldrb	r3, [r7, #7]
 800520c:	429a      	cmp	r2, r3
 800520e:	d0b4      	beq.n	800517a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005210:	2300      	movs	r3, #0
}
 8005212:	4618      	mov	r0, r3
 8005214:	3710      	adds	r7, #16
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}

0800521a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800521a:	b580      	push	{r7, lr}
 800521c:	b084      	sub	sp, #16
 800521e:	af00      	add	r7, sp, #0
 8005220:	60f8      	str	r0, [r7, #12]
 8005222:	60b9      	str	r1, [r7, #8]
 8005224:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005226:	e033      	b.n	8005290 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	68b9      	ldr	r1, [r7, #8]
 800522c:	68f8      	ldr	r0, [r7, #12]
 800522e:	f000 f87f 	bl	8005330 <I2C_IsErrorOccurred>
 8005232:	4603      	mov	r3, r0
 8005234:	2b00      	cmp	r3, #0
 8005236:	d001      	beq.n	800523c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e031      	b.n	80052a0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005242:	d025      	beq.n	8005290 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005244:	f7fe fd3a 	bl	8003cbc <HAL_GetTick>
 8005248:	4602      	mov	r2, r0
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	68ba      	ldr	r2, [r7, #8]
 8005250:	429a      	cmp	r2, r3
 8005252:	d302      	bcc.n	800525a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d11a      	bne.n	8005290 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	699b      	ldr	r3, [r3, #24]
 8005260:	f003 0302 	and.w	r3, r3, #2
 8005264:	2b02      	cmp	r3, #2
 8005266:	d013      	beq.n	8005290 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800526c:	f043 0220 	orr.w	r2, r3, #32
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2220      	movs	r2, #32
 8005278:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2200      	movs	r2, #0
 8005280:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2200      	movs	r2, #0
 8005288:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	e007      	b.n	80052a0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	699b      	ldr	r3, [r3, #24]
 8005296:	f003 0302 	and.w	r3, r3, #2
 800529a:	2b02      	cmp	r3, #2
 800529c:	d1c4      	bne.n	8005228 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800529e:	2300      	movs	r3, #0
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3710      	adds	r7, #16
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b084      	sub	sp, #16
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80052b4:	e02f      	b.n	8005316 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	68b9      	ldr	r1, [r7, #8]
 80052ba:	68f8      	ldr	r0, [r7, #12]
 80052bc:	f000 f838 	bl	8005330 <I2C_IsErrorOccurred>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d001      	beq.n	80052ca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	e02d      	b.n	8005326 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052ca:	f7fe fcf7 	bl	8003cbc <HAL_GetTick>
 80052ce:	4602      	mov	r2, r0
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	1ad3      	subs	r3, r2, r3
 80052d4:	68ba      	ldr	r2, [r7, #8]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d302      	bcc.n	80052e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d11a      	bne.n	8005316 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	699b      	ldr	r3, [r3, #24]
 80052e6:	f003 0320 	and.w	r3, r3, #32
 80052ea:	2b20      	cmp	r3, #32
 80052ec:	d013      	beq.n	8005316 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052f2:	f043 0220 	orr.w	r2, r3, #32
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2220      	movs	r2, #32
 80052fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2200      	movs	r2, #0
 8005306:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2200      	movs	r2, #0
 800530e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e007      	b.n	8005326 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	699b      	ldr	r3, [r3, #24]
 800531c:	f003 0320 	and.w	r3, r3, #32
 8005320:	2b20      	cmp	r3, #32
 8005322:	d1c8      	bne.n	80052b6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	3710      	adds	r7, #16
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
	...

08005330 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b08a      	sub	sp, #40	@ 0x28
 8005334:	af00      	add	r7, sp, #0
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800533c:	2300      	movs	r3, #0
 800533e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	699b      	ldr	r3, [r3, #24]
 8005348:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800534a:	2300      	movs	r3, #0
 800534c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	f003 0310 	and.w	r3, r3, #16
 8005358:	2b00      	cmp	r3, #0
 800535a:	d068      	beq.n	800542e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	2210      	movs	r2, #16
 8005362:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005364:	e049      	b.n	80053fa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800536c:	d045      	beq.n	80053fa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800536e:	f7fe fca5 	bl	8003cbc <HAL_GetTick>
 8005372:	4602      	mov	r2, r0
 8005374:	69fb      	ldr	r3, [r7, #28]
 8005376:	1ad3      	subs	r3, r2, r3
 8005378:	68ba      	ldr	r2, [r7, #8]
 800537a:	429a      	cmp	r2, r3
 800537c:	d302      	bcc.n	8005384 <I2C_IsErrorOccurred+0x54>
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d13a      	bne.n	80053fa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800538e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005396:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	699b      	ldr	r3, [r3, #24]
 800539e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80053a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053a6:	d121      	bne.n	80053ec <I2C_IsErrorOccurred+0xbc>
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80053ae:	d01d      	beq.n	80053ec <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80053b0:	7cfb      	ldrb	r3, [r7, #19]
 80053b2:	2b20      	cmp	r3, #32
 80053b4:	d01a      	beq.n	80053ec <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	685a      	ldr	r2, [r3, #4]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80053c4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80053c6:	f7fe fc79 	bl	8003cbc <HAL_GetTick>
 80053ca:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80053cc:	e00e      	b.n	80053ec <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80053ce:	f7fe fc75 	bl	8003cbc <HAL_GetTick>
 80053d2:	4602      	mov	r2, r0
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	1ad3      	subs	r3, r2, r3
 80053d8:	2b19      	cmp	r3, #25
 80053da:	d907      	bls.n	80053ec <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80053dc:	6a3b      	ldr	r3, [r7, #32]
 80053de:	f043 0320 	orr.w	r3, r3, #32
 80053e2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80053ea:	e006      	b.n	80053fa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	699b      	ldr	r3, [r3, #24]
 80053f2:	f003 0320 	and.w	r3, r3, #32
 80053f6:	2b20      	cmp	r3, #32
 80053f8:	d1e9      	bne.n	80053ce <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	699b      	ldr	r3, [r3, #24]
 8005400:	f003 0320 	and.w	r3, r3, #32
 8005404:	2b20      	cmp	r3, #32
 8005406:	d003      	beq.n	8005410 <I2C_IsErrorOccurred+0xe0>
 8005408:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800540c:	2b00      	cmp	r3, #0
 800540e:	d0aa      	beq.n	8005366 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005410:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005414:	2b00      	cmp	r3, #0
 8005416:	d103      	bne.n	8005420 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	2220      	movs	r2, #32
 800541e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005420:	6a3b      	ldr	r3, [r7, #32]
 8005422:	f043 0304 	orr.w	r3, r3, #4
 8005426:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	699b      	ldr	r3, [r3, #24]
 8005434:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005436:	69bb      	ldr	r3, [r7, #24]
 8005438:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800543c:	2b00      	cmp	r3, #0
 800543e:	d00b      	beq.n	8005458 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005440:	6a3b      	ldr	r3, [r7, #32]
 8005442:	f043 0301 	orr.w	r3, r3, #1
 8005446:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005450:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005458:	69bb      	ldr	r3, [r7, #24]
 800545a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800545e:	2b00      	cmp	r3, #0
 8005460:	d00b      	beq.n	800547a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005462:	6a3b      	ldr	r3, [r7, #32]
 8005464:	f043 0308 	orr.w	r3, r3, #8
 8005468:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005472:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800547a:	69bb      	ldr	r3, [r7, #24]
 800547c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005480:	2b00      	cmp	r3, #0
 8005482:	d00b      	beq.n	800549c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005484:	6a3b      	ldr	r3, [r7, #32]
 8005486:	f043 0302 	orr.w	r3, r3, #2
 800548a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005494:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800549c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d01c      	beq.n	80054de <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80054a4:	68f8      	ldr	r0, [r7, #12]
 80054a6:	f7ff fe3b 	bl	8005120 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	6859      	ldr	r1, [r3, #4]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	4b0d      	ldr	r3, [pc, #52]	@ (80054ec <I2C_IsErrorOccurred+0x1bc>)
 80054b6:	400b      	ands	r3, r1
 80054b8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80054be:	6a3b      	ldr	r3, [r7, #32]
 80054c0:	431a      	orrs	r2, r3
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2220      	movs	r2, #32
 80054ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2200      	movs	r2, #0
 80054d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2200      	movs	r2, #0
 80054da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80054de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3728      	adds	r7, #40	@ 0x28
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	bf00      	nop
 80054ec:	fe00e800 	.word	0xfe00e800

080054f0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b087      	sub	sp, #28
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	607b      	str	r3, [r7, #4]
 80054fa:	460b      	mov	r3, r1
 80054fc:	817b      	strh	r3, [r7, #10]
 80054fe:	4613      	mov	r3, r2
 8005500:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005502:	897b      	ldrh	r3, [r7, #10]
 8005504:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005508:	7a7b      	ldrb	r3, [r7, #9]
 800550a:	041b      	lsls	r3, r3, #16
 800550c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005510:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005516:	6a3b      	ldr	r3, [r7, #32]
 8005518:	4313      	orrs	r3, r2
 800551a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800551e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	685a      	ldr	r2, [r3, #4]
 8005526:	6a3b      	ldr	r3, [r7, #32]
 8005528:	0d5b      	lsrs	r3, r3, #21
 800552a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800552e:	4b08      	ldr	r3, [pc, #32]	@ (8005550 <I2C_TransferConfig+0x60>)
 8005530:	430b      	orrs	r3, r1
 8005532:	43db      	mvns	r3, r3
 8005534:	ea02 0103 	and.w	r1, r2, r3
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	697a      	ldr	r2, [r7, #20]
 800553e:	430a      	orrs	r2, r1
 8005540:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005542:	bf00      	nop
 8005544:	371c      	adds	r7, #28
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr
 800554e:	bf00      	nop
 8005550:	03ff63ff 	.word	0x03ff63ff

08005554 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005564:	b2db      	uxtb	r3, r3
 8005566:	2b20      	cmp	r3, #32
 8005568:	d138      	bne.n	80055dc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005570:	2b01      	cmp	r3, #1
 8005572:	d101      	bne.n	8005578 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005574:	2302      	movs	r3, #2
 8005576:	e032      	b.n	80055de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2201      	movs	r2, #1
 800557c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2224      	movs	r2, #36	@ 0x24
 8005584:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f022 0201 	bic.w	r2, r2, #1
 8005596:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80055a6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	6819      	ldr	r1, [r3, #0]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	683a      	ldr	r2, [r7, #0]
 80055b4:	430a      	orrs	r2, r1
 80055b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f042 0201 	orr.w	r2, r2, #1
 80055c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2220      	movs	r2, #32
 80055cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2200      	movs	r2, #0
 80055d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80055d8:	2300      	movs	r3, #0
 80055da:	e000      	b.n	80055de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80055dc:	2302      	movs	r3, #2
  }
}
 80055de:	4618      	mov	r0, r3
 80055e0:	370c      	adds	r7, #12
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr

080055ea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80055ea:	b480      	push	{r7}
 80055ec:	b085      	sub	sp, #20
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	6078      	str	r0, [r7, #4]
 80055f2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	2b20      	cmp	r3, #32
 80055fe:	d139      	bne.n	8005674 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005606:	2b01      	cmp	r3, #1
 8005608:	d101      	bne.n	800560e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800560a:	2302      	movs	r3, #2
 800560c:	e033      	b.n	8005676 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2201      	movs	r2, #1
 8005612:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2224      	movs	r2, #36	@ 0x24
 800561a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f022 0201 	bic.w	r2, r2, #1
 800562c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800563c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	021b      	lsls	r3, r3, #8
 8005642:	68fa      	ldr	r2, [r7, #12]
 8005644:	4313      	orrs	r3, r2
 8005646:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	68fa      	ldr	r2, [r7, #12]
 800564e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f042 0201 	orr.w	r2, r2, #1
 800565e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2220      	movs	r2, #32
 8005664:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005670:	2300      	movs	r3, #0
 8005672:	e000      	b.n	8005676 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005674:	2302      	movs	r3, #2
  }
}
 8005676:	4618      	mov	r0, r3
 8005678:	3714      	adds	r7, #20
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr
	...

08005684 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b084      	sub	sp, #16
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 800568c:	2300      	movs	r3, #0
 800568e:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d01e      	beq.n	80056d4 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8005696:	4b13      	ldr	r3, [pc, #76]	@ (80056e4 <HAL_IPCC_Init+0x60>)
 8005698:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d102      	bne.n	80056ac <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f7fd fdc2 	bl	8003230 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 80056ac:	68b8      	ldr	r0, [r7, #8]
 80056ae:	f000 f85b 	bl	8005768 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f000 f82c 	bl	800571c <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2201      	movs	r2, #1
 80056ce:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 80056d2:	e001      	b.n	80056d8 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 80056d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3710      	adds	r7, #16
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
 80056e2:	bf00      	nop
 80056e4:	58000c00 	.word	0x58000c00

080056e8 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b085      	sub	sp, #20
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	60b9      	str	r1, [r7, #8]
 80056f2:	4613      	mov	r3, r2
 80056f4:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 80056f6:	bf00      	nop
 80056f8:	3714      	adds	r7, #20
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr

08005702 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8005702:	b480      	push	{r7}
 8005704:	b085      	sub	sp, #20
 8005706:	af00      	add	r7, sp, #0
 8005708:	60f8      	str	r0, [r7, #12]
 800570a:	60b9      	str	r1, [r7, #8]
 800570c:	4613      	mov	r3, r2
 800570e:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8005710:	bf00      	nop
 8005712:	3714      	adds	r7, #20
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr

0800571c <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 800571c:	b480      	push	{r7}
 800571e:	b085      	sub	sp, #20
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8005724:	2300      	movs	r3, #0
 8005726:	60fb      	str	r3, [r7, #12]
 8005728:	e00f      	b.n	800574a <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 800572a:	687a      	ldr	r2, [r7, #4]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	4413      	add	r3, r2
 8005732:	4a0b      	ldr	r2, [pc, #44]	@ (8005760 <IPCC_SetDefaultCallbacks+0x44>)
 8005734:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	3306      	adds	r3, #6
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	4413      	add	r3, r2
 8005740:	4a08      	ldr	r2, [pc, #32]	@ (8005764 <IPCC_SetDefaultCallbacks+0x48>)
 8005742:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	3301      	adds	r3, #1
 8005748:	60fb      	str	r3, [r7, #12]
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2b05      	cmp	r3, #5
 800574e:	d9ec      	bls.n	800572a <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8005750:	bf00      	nop
 8005752:	bf00      	nop
 8005754:	3714      	adds	r7, #20
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr
 800575e:	bf00      	nop
 8005760:	080056e9 	.word	0x080056e9
 8005764:	08005703 	.word	0x08005703

08005768 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2200      	movs	r2, #0
 8005774:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 800577c:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	223f      	movs	r2, #63	@ 0x3f
 8005782:	609a      	str	r2, [r3, #8]
}
 8005784:	bf00      	nop
 8005786:	370c      	adds	r7, #12
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr

08005790 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005790:	b480      	push	{r7}
 8005792:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005794:	4b05      	ldr	r3, [pc, #20]	@ (80057ac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a04      	ldr	r2, [pc, #16]	@ (80057ac <HAL_PWR_EnableBkUpAccess+0x1c>)
 800579a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800579e:	6013      	str	r3, [r2, #0]
}
 80057a0:	bf00      	nop
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr
 80057aa:	bf00      	nop
 80057ac:	58000400 	.word	0x58000400

080057b0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80057b0:	b480      	push	{r7}
 80057b2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80057b4:	4b04      	ldr	r3, [pc, #16]	@ (80057c8 <HAL_PWREx_GetVoltageRange+0x18>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 80057bc:	4618      	mov	r0, r3
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr
 80057c6:	bf00      	nop
 80057c8:	58000400 	.word	0x58000400

080057cc <LL_RCC_HSE_IsEnabledDiv2>:
{
 80057cc:	b480      	push	{r7}
 80057ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80057d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80057da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80057de:	d101      	bne.n	80057e4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80057e0:	2301      	movs	r3, #1
 80057e2:	e000      	b.n	80057e6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80057e4:	2300      	movs	r3, #0
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr

080057f0 <LL_RCC_HSE_Enable>:
{
 80057f0:	b480      	push	{r7}
 80057f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80057f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80057fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005802:	6013      	str	r3, [r2, #0]
}
 8005804:	bf00      	nop
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr

0800580e <LL_RCC_HSE_Disable>:
{
 800580e:	b480      	push	{r7}
 8005810:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8005812:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800581c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005820:	6013      	str	r3, [r2, #0]
}
 8005822:	bf00      	nop
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr

0800582c <LL_RCC_HSE_IsReady>:
{
 800582c:	b480      	push	{r7}
 800582e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005830:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800583a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800583e:	d101      	bne.n	8005844 <LL_RCC_HSE_IsReady+0x18>
 8005840:	2301      	movs	r3, #1
 8005842:	e000      	b.n	8005846 <LL_RCC_HSE_IsReady+0x1a>
 8005844:	2300      	movs	r3, #0
}
 8005846:	4618      	mov	r0, r3
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <LL_RCC_HSI_Enable>:
{
 8005850:	b480      	push	{r7}
 8005852:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005854:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800585e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005862:	6013      	str	r3, [r2, #0]
}
 8005864:	bf00      	nop
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr

0800586e <LL_RCC_HSI_Disable>:
{
 800586e:	b480      	push	{r7}
 8005870:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005872:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800587c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005880:	6013      	str	r3, [r2, #0]
}
 8005882:	bf00      	nop
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <LL_RCC_HSI_IsReady>:
{
 800588c:	b480      	push	{r7}
 800588e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005890:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800589a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800589e:	d101      	bne.n	80058a4 <LL_RCC_HSI_IsReady+0x18>
 80058a0:	2301      	movs	r3, #1
 80058a2:	e000      	b.n	80058a6 <LL_RCC_HSI_IsReady+0x1a>
 80058a4:	2300      	movs	r3, #0
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr

080058b0 <LL_RCC_HSI_SetCalibTrimming>:
{
 80058b0:	b480      	push	{r7}
 80058b2:	b083      	sub	sp, #12
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80058b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	061b      	lsls	r3, r3, #24
 80058c6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80058ca:	4313      	orrs	r3, r2
 80058cc:	604b      	str	r3, [r1, #4]
}
 80058ce:	bf00      	nop
 80058d0:	370c      	adds	r7, #12
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr

080058da <LL_RCC_HSI48_Enable>:
{
 80058da:	b480      	push	{r7}
 80058dc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80058de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80058e6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80058ea:	f043 0301 	orr.w	r3, r3, #1
 80058ee:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 80058f2:	bf00      	nop
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr

080058fc <LL_RCC_HSI48_Disable>:
{
 80058fc:	b480      	push	{r7}
 80058fe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8005900:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005904:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005908:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800590c:	f023 0301 	bic.w	r3, r3, #1
 8005910:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8005914:	bf00      	nop
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr

0800591e <LL_RCC_HSI48_IsReady>:
{
 800591e:	b480      	push	{r7}
 8005920:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8005922:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005926:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800592a:	f003 0302 	and.w	r3, r3, #2
 800592e:	2b02      	cmp	r3, #2
 8005930:	d101      	bne.n	8005936 <LL_RCC_HSI48_IsReady+0x18>
 8005932:	2301      	movs	r3, #1
 8005934:	e000      	b.n	8005938 <LL_RCC_HSI48_IsReady+0x1a>
 8005936:	2300      	movs	r3, #0
}
 8005938:	4618      	mov	r0, r3
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr

08005942 <LL_RCC_LSE_Enable>:
{
 8005942:	b480      	push	{r7}
 8005944:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005946:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800594a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800594e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005952:	f043 0301 	orr.w	r3, r3, #1
 8005956:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800595a:	bf00      	nop
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr

08005964 <LL_RCC_LSE_Disable>:
{
 8005964:	b480      	push	{r7}
 8005966:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005968:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800596c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005970:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005974:	f023 0301 	bic.w	r3, r3, #1
 8005978:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800597c:	bf00      	nop
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr

08005986 <LL_RCC_LSE_EnableBypass>:
{
 8005986:	b480      	push	{r7}
 8005988:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800598a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800598e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005992:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005996:	f043 0304 	orr.w	r3, r3, #4
 800599a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800599e:	bf00      	nop
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr

080059a8 <LL_RCC_LSE_DisableBypass>:
{
 80059a8:	b480      	push	{r7}
 80059aa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80059ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059b4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80059b8:	f023 0304 	bic.w	r3, r3, #4
 80059bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80059c0:	bf00      	nop
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr

080059ca <LL_RCC_LSE_IsReady>:
{
 80059ca:	b480      	push	{r7}
 80059cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80059ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059d6:	f003 0302 	and.w	r3, r3, #2
 80059da:	2b02      	cmp	r3, #2
 80059dc:	d101      	bne.n	80059e2 <LL_RCC_LSE_IsReady+0x18>
 80059de:	2301      	movs	r3, #1
 80059e0:	e000      	b.n	80059e4 <LL_RCC_LSE_IsReady+0x1a>
 80059e2:	2300      	movs	r3, #0
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr

080059ee <LL_RCC_LSI1_Enable>:
{
 80059ee:	b480      	push	{r7}
 80059f0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80059f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80059fe:	f043 0301 	orr.w	r3, r3, #1
 8005a02:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8005a06:	bf00      	nop
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr

08005a10 <LL_RCC_LSI1_Disable>:
{
 8005a10:	b480      	push	{r7}
 8005a12:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8005a14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a18:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a1c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005a20:	f023 0301 	bic.w	r3, r3, #1
 8005a24:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8005a28:	bf00      	nop
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr

08005a32 <LL_RCC_LSI1_IsReady>:
{
 8005a32:	b480      	push	{r7}
 8005a34:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8005a36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a3e:	f003 0302 	and.w	r3, r3, #2
 8005a42:	2b02      	cmp	r3, #2
 8005a44:	d101      	bne.n	8005a4a <LL_RCC_LSI1_IsReady+0x18>
 8005a46:	2301      	movs	r3, #1
 8005a48:	e000      	b.n	8005a4c <LL_RCC_LSI1_IsReady+0x1a>
 8005a4a:	2300      	movs	r3, #0
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr

08005a56 <LL_RCC_LSI2_Enable>:
{
 8005a56:	b480      	push	{r7}
 8005a58:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005a5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a62:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005a66:	f043 0304 	orr.w	r3, r3, #4
 8005a6a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8005a6e:	bf00      	nop
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <LL_RCC_LSI2_Disable>:
{
 8005a78:	b480      	push	{r7}
 8005a7a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005a7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a84:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005a88:	f023 0304 	bic.w	r3, r3, #4
 8005a8c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8005a90:	bf00      	nop
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr

08005a9a <LL_RCC_LSI2_IsReady>:
{
 8005a9a:	b480      	push	{r7}
 8005a9c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8005a9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005aa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005aa6:	f003 0308 	and.w	r3, r3, #8
 8005aaa:	2b08      	cmp	r3, #8
 8005aac:	d101      	bne.n	8005ab2 <LL_RCC_LSI2_IsReady+0x18>
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e000      	b.n	8005ab4 <LL_RCC_LSI2_IsReady+0x1a>
 8005ab2:	2300      	movs	r3, #0
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr

08005abe <LL_RCC_LSI2_SetTrimming>:
{
 8005abe:	b480      	push	{r7}
 8005ac0:	b083      	sub	sp, #12
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8005ac6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005aca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ace:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	021b      	lsls	r3, r3, #8
 8005ad6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005ada:	4313      	orrs	r3, r2
 8005adc:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8005ae0:	bf00      	nop
 8005ae2:	370c      	adds	r7, #12
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr

08005aec <LL_RCC_MSI_Enable>:
{
 8005aec:	b480      	push	{r7}
 8005aee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005af0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005afa:	f043 0301 	orr.w	r3, r3, #1
 8005afe:	6013      	str	r3, [r2, #0]
}
 8005b00:	bf00      	nop
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr

08005b0a <LL_RCC_MSI_Disable>:
{
 8005b0a:	b480      	push	{r7}
 8005b0c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8005b0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005b18:	f023 0301 	bic.w	r3, r3, #1
 8005b1c:	6013      	str	r3, [r2, #0]
}
 8005b1e:	bf00      	nop
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr

08005b28 <LL_RCC_MSI_IsReady>:
{
 8005b28:	b480      	push	{r7}
 8005b2a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005b2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f003 0302 	and.w	r3, r3, #2
 8005b36:	2b02      	cmp	r3, #2
 8005b38:	d101      	bne.n	8005b3e <LL_RCC_MSI_IsReady+0x16>
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e000      	b.n	8005b40 <LL_RCC_MSI_IsReady+0x18>
 8005b3e:	2300      	movs	r3, #0
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr

08005b4a <LL_RCC_MSI_SetRange>:
{
 8005b4a:	b480      	push	{r7}
 8005b4c:	b083      	sub	sp, #12
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8005b52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005b5c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4313      	orrs	r3, r2
 8005b64:	600b      	str	r3, [r1, #0]
}
 8005b66:	bf00      	nop
 8005b68:	370c      	adds	r7, #12
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr

08005b72 <LL_RCC_MSI_GetRange>:
{
 8005b72:	b480      	push	{r7}
 8005b74:	b083      	sub	sp, #12
 8005b76:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8005b78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005b82:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2bb0      	cmp	r3, #176	@ 0xb0
 8005b88:	d901      	bls.n	8005b8e <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8005b8a:	23b0      	movs	r3, #176	@ 0xb0
 8005b8c:	607b      	str	r3, [r7, #4]
  return msiRange;
 8005b8e:	687b      	ldr	r3, [r7, #4]
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	370c      	adds	r7, #12
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr

08005b9c <LL_RCC_MSI_SetCalibTrimming>:
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b083      	sub	sp, #12
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005ba4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	021b      	lsls	r3, r3, #8
 8005bb2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	604b      	str	r3, [r1, #4]
}
 8005bba:	bf00      	nop
 8005bbc:	370c      	adds	r7, #12
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr

08005bc6 <LL_RCC_SetSysClkSource>:
{
 8005bc6:	b480      	push	{r7}
 8005bc8:	b083      	sub	sp, #12
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005bce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	f023 0203 	bic.w	r2, r3, #3
 8005bd8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	608b      	str	r3, [r1, #8]
}
 8005be2:	bf00      	nop
 8005be4:	370c      	adds	r7, #12
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr

08005bee <LL_RCC_GetSysClkSource>:
{
 8005bee:	b480      	push	{r7}
 8005bf0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005bf2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	f003 030c 	and.w	r3, r3, #12
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr

08005c06 <LL_RCC_SetAHBPrescaler>:
{
 8005c06:	b480      	push	{r7}
 8005c08:	b083      	sub	sp, #12
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005c0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005c18:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	608b      	str	r3, [r1, #8]
}
 8005c22:	bf00      	nop
 8005c24:	370c      	adds	r7, #12
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr

08005c2e <LL_C2_RCC_SetAHBPrescaler>:
{
 8005c2e:	b480      	push	{r7}
 8005c30:	b083      	sub	sp, #12
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8005c36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c3a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005c3e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005c42:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8005c4e:	bf00      	nop
 8005c50:	370c      	adds	r7, #12
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr

08005c5a <LL_RCC_SetAHB4Prescaler>:
{
 8005c5a:	b480      	push	{r7}
 8005c5c:	b083      	sub	sp, #12
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8005c62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c66:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005c6a:	f023 020f 	bic.w	r2, r3, #15
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	091b      	lsrs	r3, r3, #4
 8005c72:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005c76:	4313      	orrs	r3, r2
 8005c78:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8005c7c:	bf00      	nop
 8005c7e:	370c      	adds	r7, #12
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr

08005c88 <LL_RCC_SetAPB1Prescaler>:
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005c90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005c9a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	608b      	str	r3, [r1, #8]
}
 8005ca4:	bf00      	nop
 8005ca6:	370c      	adds	r7, #12
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <LL_RCC_SetAPB2Prescaler>:
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b083      	sub	sp, #12
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005cb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005cc2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	608b      	str	r3, [r1, #8]
}
 8005ccc:	bf00      	nop
 8005cce:	370c      	adds	r7, #12
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr

08005cd8 <LL_RCC_GetAHBPrescaler>:
{
 8005cd8:	b480      	push	{r7}
 8005cda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005cdc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <LL_RCC_GetAHB4Prescaler>:
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005cf4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005cf8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005cfc:	011b      	lsls	r3, r3, #4
 8005cfe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr

08005d0c <LL_RCC_GetAPB1Prescaler>:
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005d10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr

08005d24 <LL_RCC_GetAPB2Prescaler>:
{
 8005d24:	b480      	push	{r7}
 8005d26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005d28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr

08005d3c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005d40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005d4a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005d4e:	6013      	str	r3, [r2, #0]
}
 8005d50:	bf00      	nop
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr

08005d5a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8005d5a:	b480      	push	{r7}
 8005d5c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005d5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005d68:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005d6c:	6013      	str	r3, [r2, #0]
}
 8005d6e:	bf00      	nop
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr

08005d78 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005d7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d86:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d8a:	d101      	bne.n	8005d90 <LL_RCC_PLL_IsReady+0x18>
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	e000      	b.n	8005d92 <LL_RCC_PLL_IsReady+0x1a>
 8005d90:	2300      	movs	r3, #0
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005da0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005da4:	68db      	ldr	r3, [r3, #12]
 8005da6:	0a1b      	lsrs	r3, r3, #8
 8005da8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr

08005db6 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8005db6:	b480      	push	{r7}
 8005db8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005dba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr

08005dce <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005dce:	b480      	push	{r7}
 8005dd0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005dd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr

08005de6 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005de6:	b480      	push	{r7}
 8005de8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005dea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	f003 0303 	and.w	r3, r3, #3
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr

08005dfe <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8005dfe:	b480      	push	{r7}
 8005e00:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005e02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e10:	d101      	bne.n	8005e16 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8005e12:	2301      	movs	r3, #1
 8005e14:	e000      	b.n	8005e18 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8005e16:	2300      	movs	r3, #0
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr

08005e22 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8005e22:	b480      	push	{r7}
 8005e24:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8005e26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e2a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005e2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e32:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005e36:	d101      	bne.n	8005e3c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e000      	b.n	8005e3e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8005e3c:	2300      	movs	r3, #0
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005e4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e50:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005e54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e5c:	d101      	bne.n	8005e62 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005e5e:	2301      	movs	r3, #1
 8005e60:	e000      	b.n	8005e64 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8005e62:	2300      	movs	r3, #0
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr

08005e6e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8005e6e:	b480      	push	{r7}
 8005e70:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005e72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005e80:	d101      	bne.n	8005e86 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8005e82:	2301      	movs	r3, #1
 8005e84:	e000      	b.n	8005e88 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8005e86:	2300      	movs	r3, #0
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr

08005e92 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8005e92:	b480      	push	{r7}
 8005e94:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8005e96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005ea0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005ea4:	d101      	bne.n	8005eaa <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e000      	b.n	8005eac <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8005eaa:	2300      	movs	r3, #0
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr
	...

08005eb8 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005eb8:	b590      	push	{r4, r7, lr}
 8005eba:	b08d      	sub	sp, #52	@ 0x34
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d101      	bne.n	8005eca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e363      	b.n	8006592 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f003 0320 	and.w	r3, r3, #32
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	f000 808d 	beq.w	8005ff2 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ed8:	f7ff fe89 	bl	8005bee <LL_RCC_GetSysClkSource>
 8005edc:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ede:	f7ff ff82 	bl	8005de6 <LL_RCC_PLL_GetMainSource>
 8005ee2:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005ee4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d005      	beq.n	8005ef6 <HAL_RCC_OscConfig+0x3e>
 8005eea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eec:	2b0c      	cmp	r3, #12
 8005eee:	d147      	bne.n	8005f80 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8005ef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d144      	bne.n	8005f80 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	69db      	ldr	r3, [r3, #28]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d101      	bne.n	8005f02 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	e347      	b.n	8006592 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8005f06:	f7ff fe34 	bl	8005b72 <LL_RCC_MSI_GetRange>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	429c      	cmp	r4, r3
 8005f0e:	d914      	bls.n	8005f3a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f14:	4618      	mov	r0, r3
 8005f16:	f000 fd2f 	bl	8006978 <RCC_SetFlashLatencyFromMSIRange>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d001      	beq.n	8005f24 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	e336      	b.n	8006592 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f7ff fe0e 	bl	8005b4a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6a1b      	ldr	r3, [r3, #32]
 8005f32:	4618      	mov	r0, r3
 8005f34:	f7ff fe32 	bl	8005b9c <LL_RCC_MSI_SetCalibTrimming>
 8005f38:	e013      	b.n	8005f62 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f7ff fe03 	bl	8005b4a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6a1b      	ldr	r3, [r3, #32]
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f7ff fe27 	bl	8005b9c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f52:	4618      	mov	r0, r3
 8005f54:	f000 fd10 	bl	8006978 <RCC_SetFlashLatencyFromMSIRange>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d001      	beq.n	8005f62 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e317      	b.n	8006592 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005f62:	f000 fcc9 	bl	80068f8 <HAL_RCC_GetHCLKFreq>
 8005f66:	4603      	mov	r3, r0
 8005f68:	4aa4      	ldr	r2, [pc, #656]	@ (80061fc <HAL_RCC_OscConfig+0x344>)
 8005f6a:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005f6c:	4ba4      	ldr	r3, [pc, #656]	@ (8006200 <HAL_RCC_OscConfig+0x348>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4618      	mov	r0, r3
 8005f72:	f7fd fe55 	bl	8003c20 <HAL_InitTick>
 8005f76:	4603      	mov	r3, r0
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d039      	beq.n	8005ff0 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e308      	b.n	8006592 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	69db      	ldr	r3, [r3, #28]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d01e      	beq.n	8005fc6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005f88:	f7ff fdb0 	bl	8005aec <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005f8c:	f7fd fe96 	bl	8003cbc <HAL_GetTick>
 8005f90:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005f92:	e008      	b.n	8005fa6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005f94:	f7fd fe92 	bl	8003cbc <HAL_GetTick>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f9c:	1ad3      	subs	r3, r2, r3
 8005f9e:	2b02      	cmp	r3, #2
 8005fa0:	d901      	bls.n	8005fa6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005fa2:	2303      	movs	r3, #3
 8005fa4:	e2f5      	b.n	8006592 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005fa6:	f7ff fdbf 	bl	8005b28 <LL_RCC_MSI_IsReady>
 8005faa:	4603      	mov	r3, r0
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d0f1      	beq.n	8005f94 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f7ff fdc8 	bl	8005b4a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6a1b      	ldr	r3, [r3, #32]
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f7ff fdec 	bl	8005b9c <LL_RCC_MSI_SetCalibTrimming>
 8005fc4:	e015      	b.n	8005ff2 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005fc6:	f7ff fda0 	bl	8005b0a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005fca:	f7fd fe77 	bl	8003cbc <HAL_GetTick>
 8005fce:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005fd0:	e008      	b.n	8005fe4 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005fd2:	f7fd fe73 	bl	8003cbc <HAL_GetTick>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fda:	1ad3      	subs	r3, r2, r3
 8005fdc:	2b02      	cmp	r3, #2
 8005fde:	d901      	bls.n	8005fe4 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005fe0:	2303      	movs	r3, #3
 8005fe2:	e2d6      	b.n	8006592 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005fe4:	f7ff fda0 	bl	8005b28 <LL_RCC_MSI_IsReady>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d1f1      	bne.n	8005fd2 <HAL_RCC_OscConfig+0x11a>
 8005fee:	e000      	b.n	8005ff2 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005ff0:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f003 0301 	and.w	r3, r3, #1
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d047      	beq.n	800608e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ffe:	f7ff fdf6 	bl	8005bee <LL_RCC_GetSysClkSource>
 8006002:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006004:	f7ff feef 	bl	8005de6 <LL_RCC_PLL_GetMainSource>
 8006008:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800600a:	6a3b      	ldr	r3, [r7, #32]
 800600c:	2b08      	cmp	r3, #8
 800600e:	d005      	beq.n	800601c <HAL_RCC_OscConfig+0x164>
 8006010:	6a3b      	ldr	r3, [r7, #32]
 8006012:	2b0c      	cmp	r3, #12
 8006014:	d108      	bne.n	8006028 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8006016:	69fb      	ldr	r3, [r7, #28]
 8006018:	2b03      	cmp	r3, #3
 800601a:	d105      	bne.n	8006028 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d134      	bne.n	800608e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8006024:	2301      	movs	r3, #1
 8006026:	e2b4      	b.n	8006592 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006030:	d102      	bne.n	8006038 <HAL_RCC_OscConfig+0x180>
 8006032:	f7ff fbdd 	bl	80057f0 <LL_RCC_HSE_Enable>
 8006036:	e001      	b.n	800603c <HAL_RCC_OscConfig+0x184>
 8006038:	f7ff fbe9 	bl	800580e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d012      	beq.n	800606a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006044:	f7fd fe3a 	bl	8003cbc <HAL_GetTick>
 8006048:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800604a:	e008      	b.n	800605e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800604c:	f7fd fe36 	bl	8003cbc <HAL_GetTick>
 8006050:	4602      	mov	r2, r0
 8006052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006054:	1ad3      	subs	r3, r2, r3
 8006056:	2b64      	cmp	r3, #100	@ 0x64
 8006058:	d901      	bls.n	800605e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800605a:	2303      	movs	r3, #3
 800605c:	e299      	b.n	8006592 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800605e:	f7ff fbe5 	bl	800582c <LL_RCC_HSE_IsReady>
 8006062:	4603      	mov	r3, r0
 8006064:	2b00      	cmp	r3, #0
 8006066:	d0f1      	beq.n	800604c <HAL_RCC_OscConfig+0x194>
 8006068:	e011      	b.n	800608e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800606a:	f7fd fe27 	bl	8003cbc <HAL_GetTick>
 800606e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8006070:	e008      	b.n	8006084 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006072:	f7fd fe23 	bl	8003cbc <HAL_GetTick>
 8006076:	4602      	mov	r2, r0
 8006078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800607a:	1ad3      	subs	r3, r2, r3
 800607c:	2b64      	cmp	r3, #100	@ 0x64
 800607e:	d901      	bls.n	8006084 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8006080:	2303      	movs	r3, #3
 8006082:	e286      	b.n	8006592 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8006084:	f7ff fbd2 	bl	800582c <LL_RCC_HSE_IsReady>
 8006088:	4603      	mov	r3, r0
 800608a:	2b00      	cmp	r3, #0
 800608c:	d1f1      	bne.n	8006072 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f003 0302 	and.w	r3, r3, #2
 8006096:	2b00      	cmp	r3, #0
 8006098:	d04c      	beq.n	8006134 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800609a:	f7ff fda8 	bl	8005bee <LL_RCC_GetSysClkSource>
 800609e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80060a0:	f7ff fea1 	bl	8005de6 <LL_RCC_PLL_GetMainSource>
 80060a4:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80060a6:	69bb      	ldr	r3, [r7, #24]
 80060a8:	2b04      	cmp	r3, #4
 80060aa:	d005      	beq.n	80060b8 <HAL_RCC_OscConfig+0x200>
 80060ac:	69bb      	ldr	r3, [r7, #24]
 80060ae:	2b0c      	cmp	r3, #12
 80060b0:	d10e      	bne.n	80060d0 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	2b02      	cmp	r3, #2
 80060b6:	d10b      	bne.n	80060d0 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d101      	bne.n	80060c4 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	e266      	b.n	8006592 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	691b      	ldr	r3, [r3, #16]
 80060c8:	4618      	mov	r0, r3
 80060ca:	f7ff fbf1 	bl	80058b0 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80060ce:	e031      	b.n	8006134 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d019      	beq.n	800610c <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80060d8:	f7ff fbba 	bl	8005850 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060dc:	f7fd fdee 	bl	8003cbc <HAL_GetTick>
 80060e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80060e2:	e008      	b.n	80060f6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060e4:	f7fd fdea 	bl	8003cbc <HAL_GetTick>
 80060e8:	4602      	mov	r2, r0
 80060ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ec:	1ad3      	subs	r3, r2, r3
 80060ee:	2b02      	cmp	r3, #2
 80060f0:	d901      	bls.n	80060f6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80060f2:	2303      	movs	r3, #3
 80060f4:	e24d      	b.n	8006592 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80060f6:	f7ff fbc9 	bl	800588c <LL_RCC_HSI_IsReady>
 80060fa:	4603      	mov	r3, r0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d0f1      	beq.n	80060e4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	691b      	ldr	r3, [r3, #16]
 8006104:	4618      	mov	r0, r3
 8006106:	f7ff fbd3 	bl	80058b0 <LL_RCC_HSI_SetCalibTrimming>
 800610a:	e013      	b.n	8006134 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800610c:	f7ff fbaf 	bl	800586e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006110:	f7fd fdd4 	bl	8003cbc <HAL_GetTick>
 8006114:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8006116:	e008      	b.n	800612a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006118:	f7fd fdd0 	bl	8003cbc <HAL_GetTick>
 800611c:	4602      	mov	r2, r0
 800611e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006120:	1ad3      	subs	r3, r2, r3
 8006122:	2b02      	cmp	r3, #2
 8006124:	d901      	bls.n	800612a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8006126:	2303      	movs	r3, #3
 8006128:	e233      	b.n	8006592 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800612a:	f7ff fbaf 	bl	800588c <LL_RCC_HSI_IsReady>
 800612e:	4603      	mov	r3, r0
 8006130:	2b00      	cmp	r3, #0
 8006132:	d1f1      	bne.n	8006118 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f003 0308 	and.w	r3, r3, #8
 800613c:	2b00      	cmp	r3, #0
 800613e:	d106      	bne.n	800614e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8006148:	2b00      	cmp	r3, #0
 800614a:	f000 80a3 	beq.w	8006294 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	695b      	ldr	r3, [r3, #20]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d076      	beq.n	8006244 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f003 0310 	and.w	r3, r3, #16
 800615e:	2b00      	cmp	r3, #0
 8006160:	d046      	beq.n	80061f0 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8006162:	f7ff fc66 	bl	8005a32 <LL_RCC_LSI1_IsReady>
 8006166:	4603      	mov	r3, r0
 8006168:	2b00      	cmp	r3, #0
 800616a:	d113      	bne.n	8006194 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800616c:	f7ff fc3f 	bl	80059ee <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006170:	f7fd fda4 	bl	8003cbc <HAL_GetTick>
 8006174:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8006176:	e008      	b.n	800618a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006178:	f7fd fda0 	bl	8003cbc <HAL_GetTick>
 800617c:	4602      	mov	r2, r0
 800617e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006180:	1ad3      	subs	r3, r2, r3
 8006182:	2b02      	cmp	r3, #2
 8006184:	d901      	bls.n	800618a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8006186:	2303      	movs	r3, #3
 8006188:	e203      	b.n	8006592 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800618a:	f7ff fc52 	bl	8005a32 <LL_RCC_LSI1_IsReady>
 800618e:	4603      	mov	r3, r0
 8006190:	2b00      	cmp	r3, #0
 8006192:	d0f1      	beq.n	8006178 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8006194:	f7ff fc5f 	bl	8005a56 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006198:	f7fd fd90 	bl	8003cbc <HAL_GetTick>
 800619c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800619e:	e008      	b.n	80061b2 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80061a0:	f7fd fd8c 	bl	8003cbc <HAL_GetTick>
 80061a4:	4602      	mov	r2, r0
 80061a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061a8:	1ad3      	subs	r3, r2, r3
 80061aa:	2b03      	cmp	r3, #3
 80061ac:	d901      	bls.n	80061b2 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80061ae:	2303      	movs	r3, #3
 80061b0:	e1ef      	b.n	8006592 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80061b2:	f7ff fc72 	bl	8005a9a <LL_RCC_LSI2_IsReady>
 80061b6:	4603      	mov	r3, r0
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d0f1      	beq.n	80061a0 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	699b      	ldr	r3, [r3, #24]
 80061c0:	4618      	mov	r0, r3
 80061c2:	f7ff fc7c 	bl	8005abe <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80061c6:	f7ff fc23 	bl	8005a10 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061ca:	f7fd fd77 	bl	8003cbc <HAL_GetTick>
 80061ce:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80061d0:	e008      	b.n	80061e4 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80061d2:	f7fd fd73 	bl	8003cbc <HAL_GetTick>
 80061d6:	4602      	mov	r2, r0
 80061d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061da:	1ad3      	subs	r3, r2, r3
 80061dc:	2b02      	cmp	r3, #2
 80061de:	d901      	bls.n	80061e4 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80061e0:	2303      	movs	r3, #3
 80061e2:	e1d6      	b.n	8006592 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80061e4:	f7ff fc25 	bl	8005a32 <LL_RCC_LSI1_IsReady>
 80061e8:	4603      	mov	r3, r0
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d1f1      	bne.n	80061d2 <HAL_RCC_OscConfig+0x31a>
 80061ee:	e051      	b.n	8006294 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80061f0:	f7ff fbfd 	bl	80059ee <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061f4:	f7fd fd62 	bl	8003cbc <HAL_GetTick>
 80061f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80061fa:	e00c      	b.n	8006216 <HAL_RCC_OscConfig+0x35e>
 80061fc:	2000000c 	.word	0x2000000c
 8006200:	20000010 	.word	0x20000010
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006204:	f7fd fd5a 	bl	8003cbc <HAL_GetTick>
 8006208:	4602      	mov	r2, r0
 800620a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800620c:	1ad3      	subs	r3, r2, r3
 800620e:	2b02      	cmp	r3, #2
 8006210:	d901      	bls.n	8006216 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8006212:	2303      	movs	r3, #3
 8006214:	e1bd      	b.n	8006592 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8006216:	f7ff fc0c 	bl	8005a32 <LL_RCC_LSI1_IsReady>
 800621a:	4603      	mov	r3, r0
 800621c:	2b00      	cmp	r3, #0
 800621e:	d0f1      	beq.n	8006204 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8006220:	f7ff fc2a 	bl	8005a78 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8006224:	e008      	b.n	8006238 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006226:	f7fd fd49 	bl	8003cbc <HAL_GetTick>
 800622a:	4602      	mov	r2, r0
 800622c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800622e:	1ad3      	subs	r3, r2, r3
 8006230:	2b03      	cmp	r3, #3
 8006232:	d901      	bls.n	8006238 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8006234:	2303      	movs	r3, #3
 8006236:	e1ac      	b.n	8006592 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8006238:	f7ff fc2f 	bl	8005a9a <LL_RCC_LSI2_IsReady>
 800623c:	4603      	mov	r3, r0
 800623e:	2b00      	cmp	r3, #0
 8006240:	d1f1      	bne.n	8006226 <HAL_RCC_OscConfig+0x36e>
 8006242:	e027      	b.n	8006294 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8006244:	f7ff fc18 	bl	8005a78 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006248:	f7fd fd38 	bl	8003cbc <HAL_GetTick>
 800624c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800624e:	e008      	b.n	8006262 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006250:	f7fd fd34 	bl	8003cbc <HAL_GetTick>
 8006254:	4602      	mov	r2, r0
 8006256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006258:	1ad3      	subs	r3, r2, r3
 800625a:	2b03      	cmp	r3, #3
 800625c:	d901      	bls.n	8006262 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800625e:	2303      	movs	r3, #3
 8006260:	e197      	b.n	8006592 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8006262:	f7ff fc1a 	bl	8005a9a <LL_RCC_LSI2_IsReady>
 8006266:	4603      	mov	r3, r0
 8006268:	2b00      	cmp	r3, #0
 800626a:	d1f1      	bne.n	8006250 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800626c:	f7ff fbd0 	bl	8005a10 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006270:	f7fd fd24 	bl	8003cbc <HAL_GetTick>
 8006274:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8006276:	e008      	b.n	800628a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006278:	f7fd fd20 	bl	8003cbc <HAL_GetTick>
 800627c:	4602      	mov	r2, r0
 800627e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006280:	1ad3      	subs	r3, r2, r3
 8006282:	2b02      	cmp	r3, #2
 8006284:	d901      	bls.n	800628a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8006286:	2303      	movs	r3, #3
 8006288:	e183      	b.n	8006592 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800628a:	f7ff fbd2 	bl	8005a32 <LL_RCC_LSI1_IsReady>
 800628e:	4603      	mov	r3, r0
 8006290:	2b00      	cmp	r3, #0
 8006292:	d1f1      	bne.n	8006278 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f003 0304 	and.w	r3, r3, #4
 800629c:	2b00      	cmp	r3, #0
 800629e:	d05b      	beq.n	8006358 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80062a0:	4ba7      	ldr	r3, [pc, #668]	@ (8006540 <HAL_RCC_OscConfig+0x688>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d114      	bne.n	80062d6 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80062ac:	f7ff fa70 	bl	8005790 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80062b0:	f7fd fd04 	bl	8003cbc <HAL_GetTick>
 80062b4:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80062b6:	e008      	b.n	80062ca <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062b8:	f7fd fd00 	bl	8003cbc <HAL_GetTick>
 80062bc:	4602      	mov	r2, r0
 80062be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c0:	1ad3      	subs	r3, r2, r3
 80062c2:	2b02      	cmp	r3, #2
 80062c4:	d901      	bls.n	80062ca <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80062c6:	2303      	movs	r3, #3
 80062c8:	e163      	b.n	8006592 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80062ca:	4b9d      	ldr	r3, [pc, #628]	@ (8006540 <HAL_RCC_OscConfig+0x688>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d0f0      	beq.n	80062b8 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d102      	bne.n	80062e4 <HAL_RCC_OscConfig+0x42c>
 80062de:	f7ff fb30 	bl	8005942 <LL_RCC_LSE_Enable>
 80062e2:	e00c      	b.n	80062fe <HAL_RCC_OscConfig+0x446>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	2b05      	cmp	r3, #5
 80062ea:	d104      	bne.n	80062f6 <HAL_RCC_OscConfig+0x43e>
 80062ec:	f7ff fb4b 	bl	8005986 <LL_RCC_LSE_EnableBypass>
 80062f0:	f7ff fb27 	bl	8005942 <LL_RCC_LSE_Enable>
 80062f4:	e003      	b.n	80062fe <HAL_RCC_OscConfig+0x446>
 80062f6:	f7ff fb35 	bl	8005964 <LL_RCC_LSE_Disable>
 80062fa:	f7ff fb55 	bl	80059a8 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d014      	beq.n	8006330 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006306:	f7fd fcd9 	bl	8003cbc <HAL_GetTick>
 800630a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800630c:	e00a      	b.n	8006324 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800630e:	f7fd fcd5 	bl	8003cbc <HAL_GetTick>
 8006312:	4602      	mov	r2, r0
 8006314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006316:	1ad3      	subs	r3, r2, r3
 8006318:	f241 3288 	movw	r2, #5000	@ 0x1388
 800631c:	4293      	cmp	r3, r2
 800631e:	d901      	bls.n	8006324 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8006320:	2303      	movs	r3, #3
 8006322:	e136      	b.n	8006592 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8006324:	f7ff fb51 	bl	80059ca <LL_RCC_LSE_IsReady>
 8006328:	4603      	mov	r3, r0
 800632a:	2b00      	cmp	r3, #0
 800632c:	d0ef      	beq.n	800630e <HAL_RCC_OscConfig+0x456>
 800632e:	e013      	b.n	8006358 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006330:	f7fd fcc4 	bl	8003cbc <HAL_GetTick>
 8006334:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8006336:	e00a      	b.n	800634e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006338:	f7fd fcc0 	bl	8003cbc <HAL_GetTick>
 800633c:	4602      	mov	r2, r0
 800633e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006340:	1ad3      	subs	r3, r2, r3
 8006342:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006346:	4293      	cmp	r3, r2
 8006348:	d901      	bls.n	800634e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800634a:	2303      	movs	r3, #3
 800634c:	e121      	b.n	8006592 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800634e:	f7ff fb3c 	bl	80059ca <LL_RCC_LSE_IsReady>
 8006352:	4603      	mov	r3, r0
 8006354:	2b00      	cmp	r3, #0
 8006356:	d1ef      	bne.n	8006338 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006360:	2b00      	cmp	r3, #0
 8006362:	d02c      	beq.n	80063be <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006368:	2b00      	cmp	r3, #0
 800636a:	d014      	beq.n	8006396 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800636c:	f7ff fab5 	bl	80058da <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006370:	f7fd fca4 	bl	8003cbc <HAL_GetTick>
 8006374:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8006376:	e008      	b.n	800638a <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006378:	f7fd fca0 	bl	8003cbc <HAL_GetTick>
 800637c:	4602      	mov	r2, r0
 800637e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006380:	1ad3      	subs	r3, r2, r3
 8006382:	2b02      	cmp	r3, #2
 8006384:	d901      	bls.n	800638a <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8006386:	2303      	movs	r3, #3
 8006388:	e103      	b.n	8006592 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800638a:	f7ff fac8 	bl	800591e <LL_RCC_HSI48_IsReady>
 800638e:	4603      	mov	r3, r0
 8006390:	2b00      	cmp	r3, #0
 8006392:	d0f1      	beq.n	8006378 <HAL_RCC_OscConfig+0x4c0>
 8006394:	e013      	b.n	80063be <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006396:	f7ff fab1 	bl	80058fc <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800639a:	f7fd fc8f 	bl	8003cbc <HAL_GetTick>
 800639e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80063a0:	e008      	b.n	80063b4 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80063a2:	f7fd fc8b 	bl	8003cbc <HAL_GetTick>
 80063a6:	4602      	mov	r2, r0
 80063a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063aa:	1ad3      	subs	r3, r2, r3
 80063ac:	2b02      	cmp	r3, #2
 80063ae:	d901      	bls.n	80063b4 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80063b0:	2303      	movs	r3, #3
 80063b2:	e0ee      	b.n	8006592 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80063b4:	f7ff fab3 	bl	800591e <LL_RCC_HSI48_IsReady>
 80063b8:	4603      	mov	r3, r0
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d1f1      	bne.n	80063a2 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	f000 80e4 	beq.w	8006590 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80063c8:	f7ff fc11 	bl	8005bee <LL_RCC_GetSysClkSource>
 80063cc:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80063ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063da:	2b02      	cmp	r3, #2
 80063dc:	f040 80b4 	bne.w	8006548 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f003 0203 	and.w	r2, r3, #3
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d123      	bne.n	8006436 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d11c      	bne.n	8006436 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	0a1b      	lsrs	r3, r3, #8
 8006400:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006408:	429a      	cmp	r2, r3
 800640a:	d114      	bne.n	8006436 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8006416:	429a      	cmp	r2, r3
 8006418:	d10d      	bne.n	8006436 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006424:	429a      	cmp	r2, r3
 8006426:	d106      	bne.n	8006436 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006432:	429a      	cmp	r2, r3
 8006434:	d05d      	beq.n	80064f2 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	2b0c      	cmp	r3, #12
 800643a:	d058      	beq.n	80064ee <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800643c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006446:	2b00      	cmp	r3, #0
 8006448:	d001      	beq.n	800644e <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	e0a1      	b.n	8006592 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800644e:	f7ff fc84 	bl	8005d5a <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006452:	f7fd fc33 	bl	8003cbc <HAL_GetTick>
 8006456:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006458:	e008      	b.n	800646c <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800645a:	f7fd fc2f 	bl	8003cbc <HAL_GetTick>
 800645e:	4602      	mov	r2, r0
 8006460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006462:	1ad3      	subs	r3, r2, r3
 8006464:	2b02      	cmp	r3, #2
 8006466:	d901      	bls.n	800646c <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8006468:	2303      	movs	r3, #3
 800646a:	e092      	b.n	8006592 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800646c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006476:	2b00      	cmp	r3, #0
 8006478:	d1ef      	bne.n	800645a <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800647a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800647e:	68da      	ldr	r2, [r3, #12]
 8006480:	4b30      	ldr	r3, [pc, #192]	@ (8006544 <HAL_RCC_OscConfig+0x68c>)
 8006482:	4013      	ands	r3, r2
 8006484:	687a      	ldr	r2, [r7, #4]
 8006486:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8006488:	687a      	ldr	r2, [r7, #4]
 800648a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800648c:	4311      	orrs	r1, r2
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006492:	0212      	lsls	r2, r2, #8
 8006494:	4311      	orrs	r1, r2
 8006496:	687a      	ldr	r2, [r7, #4]
 8006498:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800649a:	4311      	orrs	r1, r2
 800649c:	687a      	ldr	r2, [r7, #4]
 800649e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80064a0:	4311      	orrs	r1, r2
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80064a6:	430a      	orrs	r2, r1
 80064a8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80064ac:	4313      	orrs	r3, r2
 80064ae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80064b0:	f7ff fc44 	bl	8005d3c <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80064b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064b8:	68db      	ldr	r3, [r3, #12]
 80064ba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80064be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80064c2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80064c4:	f7fd fbfa 	bl	8003cbc <HAL_GetTick>
 80064c8:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80064ca:	e008      	b.n	80064de <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064cc:	f7fd fbf6 	bl	8003cbc <HAL_GetTick>
 80064d0:	4602      	mov	r2, r0
 80064d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064d4:	1ad3      	subs	r3, r2, r3
 80064d6:	2b02      	cmp	r3, #2
 80064d8:	d901      	bls.n	80064de <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80064da:	2303      	movs	r3, #3
 80064dc:	e059      	b.n	8006592 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80064de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d0ef      	beq.n	80064cc <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80064ec:	e050      	b.n	8006590 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80064ee:	2301      	movs	r3, #1
 80064f0:	e04f      	b.n	8006592 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80064f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d147      	bne.n	8006590 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006500:	f7ff fc1c 	bl	8005d3c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006504:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006508:	68db      	ldr	r3, [r3, #12]
 800650a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800650e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006512:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006514:	f7fd fbd2 	bl	8003cbc <HAL_GetTick>
 8006518:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800651a:	e008      	b.n	800652e <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800651c:	f7fd fbce 	bl	8003cbc <HAL_GetTick>
 8006520:	4602      	mov	r2, r0
 8006522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006524:	1ad3      	subs	r3, r2, r3
 8006526:	2b02      	cmp	r3, #2
 8006528:	d901      	bls.n	800652e <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800652a:	2303      	movs	r3, #3
 800652c:	e031      	b.n	8006592 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800652e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006538:	2b00      	cmp	r3, #0
 800653a:	d0ef      	beq.n	800651c <HAL_RCC_OscConfig+0x664>
 800653c:	e028      	b.n	8006590 <HAL_RCC_OscConfig+0x6d8>
 800653e:	bf00      	nop
 8006540:	58000400 	.word	0x58000400
 8006544:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	2b0c      	cmp	r3, #12
 800654c:	d01e      	beq.n	800658c <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800654e:	f7ff fc04 	bl	8005d5a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006552:	f7fd fbb3 	bl	8003cbc <HAL_GetTick>
 8006556:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006558:	e008      	b.n	800656c <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800655a:	f7fd fbaf 	bl	8003cbc <HAL_GetTick>
 800655e:	4602      	mov	r2, r0
 8006560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006562:	1ad3      	subs	r3, r2, r3
 8006564:	2b02      	cmp	r3, #2
 8006566:	d901      	bls.n	800656c <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8006568:	2303      	movs	r3, #3
 800656a:	e012      	b.n	8006592 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800656c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006576:	2b00      	cmp	r3, #0
 8006578:	d1ef      	bne.n	800655a <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800657a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800657e:	68da      	ldr	r2, [r3, #12]
 8006580:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006584:	4b05      	ldr	r3, [pc, #20]	@ (800659c <HAL_RCC_OscConfig+0x6e4>)
 8006586:	4013      	ands	r3, r2
 8006588:	60cb      	str	r3, [r1, #12]
 800658a:	e001      	b.n	8006590 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800658c:	2301      	movs	r3, #1
 800658e:	e000      	b.n	8006592 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8006590:	2300      	movs	r3, #0
}
 8006592:	4618      	mov	r0, r3
 8006594:	3734      	adds	r7, #52	@ 0x34
 8006596:	46bd      	mov	sp, r7
 8006598:	bd90      	pop	{r4, r7, pc}
 800659a:	bf00      	nop
 800659c:	eefefffc 	.word	0xeefefffc

080065a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b084      	sub	sp, #16
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d101      	bne.n	80065b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80065b0:	2301      	movs	r3, #1
 80065b2:	e12d      	b.n	8006810 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80065b4:	4b98      	ldr	r3, [pc, #608]	@ (8006818 <HAL_RCC_ClockConfig+0x278>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f003 0307 	and.w	r3, r3, #7
 80065bc:	683a      	ldr	r2, [r7, #0]
 80065be:	429a      	cmp	r2, r3
 80065c0:	d91b      	bls.n	80065fa <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065c2:	4b95      	ldr	r3, [pc, #596]	@ (8006818 <HAL_RCC_ClockConfig+0x278>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f023 0207 	bic.w	r2, r3, #7
 80065ca:	4993      	ldr	r1, [pc, #588]	@ (8006818 <HAL_RCC_ClockConfig+0x278>)
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	4313      	orrs	r3, r2
 80065d0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065d2:	f7fd fb73 	bl	8003cbc <HAL_GetTick>
 80065d6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065d8:	e008      	b.n	80065ec <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80065da:	f7fd fb6f 	bl	8003cbc <HAL_GetTick>
 80065de:	4602      	mov	r2, r0
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	1ad3      	subs	r3, r2, r3
 80065e4:	2b02      	cmp	r3, #2
 80065e6:	d901      	bls.n	80065ec <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80065e8:	2303      	movs	r3, #3
 80065ea:	e111      	b.n	8006810 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065ec:	4b8a      	ldr	r3, [pc, #552]	@ (8006818 <HAL_RCC_ClockConfig+0x278>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f003 0307 	and.w	r3, r3, #7
 80065f4:	683a      	ldr	r2, [r7, #0]
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d1ef      	bne.n	80065da <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f003 0302 	and.w	r3, r3, #2
 8006602:	2b00      	cmp	r3, #0
 8006604:	d016      	beq.n	8006634 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	4618      	mov	r0, r3
 800660c:	f7ff fafb 	bl	8005c06 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006610:	f7fd fb54 	bl	8003cbc <HAL_GetTick>
 8006614:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006616:	e008      	b.n	800662a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006618:	f7fd fb50 	bl	8003cbc <HAL_GetTick>
 800661c:	4602      	mov	r2, r0
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	1ad3      	subs	r3, r2, r3
 8006622:	2b02      	cmp	r3, #2
 8006624:	d901      	bls.n	800662a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8006626:	2303      	movs	r3, #3
 8006628:	e0f2      	b.n	8006810 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800662a:	f7ff fbe8 	bl	8005dfe <LL_RCC_IsActiveFlag_HPRE>
 800662e:	4603      	mov	r3, r0
 8006630:	2b00      	cmp	r3, #0
 8006632:	d0f1      	beq.n	8006618 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f003 0320 	and.w	r3, r3, #32
 800663c:	2b00      	cmp	r3, #0
 800663e:	d016      	beq.n	800666e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	695b      	ldr	r3, [r3, #20]
 8006644:	4618      	mov	r0, r3
 8006646:	f7ff faf2 	bl	8005c2e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800664a:	f7fd fb37 	bl	8003cbc <HAL_GetTick>
 800664e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006650:	e008      	b.n	8006664 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006652:	f7fd fb33 	bl	8003cbc <HAL_GetTick>
 8006656:	4602      	mov	r2, r0
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	1ad3      	subs	r3, r2, r3
 800665c:	2b02      	cmp	r3, #2
 800665e:	d901      	bls.n	8006664 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8006660:	2303      	movs	r3, #3
 8006662:	e0d5      	b.n	8006810 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006664:	f7ff fbdd 	bl	8005e22 <LL_RCC_IsActiveFlag_C2HPRE>
 8006668:	4603      	mov	r3, r0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d0f1      	beq.n	8006652 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006676:	2b00      	cmp	r3, #0
 8006678:	d016      	beq.n	80066a8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	699b      	ldr	r3, [r3, #24]
 800667e:	4618      	mov	r0, r3
 8006680:	f7ff faeb 	bl	8005c5a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006684:	f7fd fb1a 	bl	8003cbc <HAL_GetTick>
 8006688:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800668a:	e008      	b.n	800669e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800668c:	f7fd fb16 	bl	8003cbc <HAL_GetTick>
 8006690:	4602      	mov	r2, r0
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	1ad3      	subs	r3, r2, r3
 8006696:	2b02      	cmp	r3, #2
 8006698:	d901      	bls.n	800669e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800669a:	2303      	movs	r3, #3
 800669c:	e0b8      	b.n	8006810 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800669e:	f7ff fbd3 	bl	8005e48 <LL_RCC_IsActiveFlag_SHDHPRE>
 80066a2:	4603      	mov	r3, r0
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d0f1      	beq.n	800668c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f003 0304 	and.w	r3, r3, #4
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d016      	beq.n	80066e2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	4618      	mov	r0, r3
 80066ba:	f7ff fae5 	bl	8005c88 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80066be:	f7fd fafd 	bl	8003cbc <HAL_GetTick>
 80066c2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80066c4:	e008      	b.n	80066d8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80066c6:	f7fd faf9 	bl	8003cbc <HAL_GetTick>
 80066ca:	4602      	mov	r2, r0
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	1ad3      	subs	r3, r2, r3
 80066d0:	2b02      	cmp	r3, #2
 80066d2:	d901      	bls.n	80066d8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80066d4:	2303      	movs	r3, #3
 80066d6:	e09b      	b.n	8006810 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80066d8:	f7ff fbc9 	bl	8005e6e <LL_RCC_IsActiveFlag_PPRE1>
 80066dc:	4603      	mov	r3, r0
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d0f1      	beq.n	80066c6 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f003 0308 	and.w	r3, r3, #8
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d017      	beq.n	800671e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	691b      	ldr	r3, [r3, #16]
 80066f2:	00db      	lsls	r3, r3, #3
 80066f4:	4618      	mov	r0, r3
 80066f6:	f7ff fadb 	bl	8005cb0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80066fa:	f7fd fadf 	bl	8003cbc <HAL_GetTick>
 80066fe:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006700:	e008      	b.n	8006714 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006702:	f7fd fadb 	bl	8003cbc <HAL_GetTick>
 8006706:	4602      	mov	r2, r0
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	1ad3      	subs	r3, r2, r3
 800670c:	2b02      	cmp	r3, #2
 800670e:	d901      	bls.n	8006714 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8006710:	2303      	movs	r3, #3
 8006712:	e07d      	b.n	8006810 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006714:	f7ff fbbd 	bl	8005e92 <LL_RCC_IsActiveFlag_PPRE2>
 8006718:	4603      	mov	r3, r0
 800671a:	2b00      	cmp	r3, #0
 800671c:	d0f1      	beq.n	8006702 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f003 0301 	and.w	r3, r3, #1
 8006726:	2b00      	cmp	r3, #0
 8006728:	d043      	beq.n	80067b2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	2b02      	cmp	r3, #2
 8006730:	d106      	bne.n	8006740 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8006732:	f7ff f87b 	bl	800582c <LL_RCC_HSE_IsReady>
 8006736:	4603      	mov	r3, r0
 8006738:	2b00      	cmp	r3, #0
 800673a:	d11e      	bne.n	800677a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800673c:	2301      	movs	r3, #1
 800673e:	e067      	b.n	8006810 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	2b03      	cmp	r3, #3
 8006746:	d106      	bne.n	8006756 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8006748:	f7ff fb16 	bl	8005d78 <LL_RCC_PLL_IsReady>
 800674c:	4603      	mov	r3, r0
 800674e:	2b00      	cmp	r3, #0
 8006750:	d113      	bne.n	800677a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006752:	2301      	movs	r3, #1
 8006754:	e05c      	b.n	8006810 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d106      	bne.n	800676c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800675e:	f7ff f9e3 	bl	8005b28 <LL_RCC_MSI_IsReady>
 8006762:	4603      	mov	r3, r0
 8006764:	2b00      	cmp	r3, #0
 8006766:	d108      	bne.n	800677a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	e051      	b.n	8006810 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800676c:	f7ff f88e 	bl	800588c <LL_RCC_HSI_IsReady>
 8006770:	4603      	mov	r3, r0
 8006772:	2b00      	cmp	r3, #0
 8006774:	d101      	bne.n	800677a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006776:	2301      	movs	r3, #1
 8006778:	e04a      	b.n	8006810 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	4618      	mov	r0, r3
 8006780:	f7ff fa21 	bl	8005bc6 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006784:	f7fd fa9a 	bl	8003cbc <HAL_GetTick>
 8006788:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800678a:	e00a      	b.n	80067a2 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800678c:	f7fd fa96 	bl	8003cbc <HAL_GetTick>
 8006790:	4602      	mov	r2, r0
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	1ad3      	subs	r3, r2, r3
 8006796:	f241 3288 	movw	r2, #5000	@ 0x1388
 800679a:	4293      	cmp	r3, r2
 800679c:	d901      	bls.n	80067a2 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800679e:	2303      	movs	r3, #3
 80067a0:	e036      	b.n	8006810 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067a2:	f7ff fa24 	bl	8005bee <LL_RCC_GetSysClkSource>
 80067a6:	4602      	mov	r2, r0
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	009b      	lsls	r3, r3, #2
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d1ec      	bne.n	800678c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80067b2:	4b19      	ldr	r3, [pc, #100]	@ (8006818 <HAL_RCC_ClockConfig+0x278>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f003 0307 	and.w	r3, r3, #7
 80067ba:	683a      	ldr	r2, [r7, #0]
 80067bc:	429a      	cmp	r2, r3
 80067be:	d21b      	bcs.n	80067f8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067c0:	4b15      	ldr	r3, [pc, #84]	@ (8006818 <HAL_RCC_ClockConfig+0x278>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f023 0207 	bic.w	r2, r3, #7
 80067c8:	4913      	ldr	r1, [pc, #76]	@ (8006818 <HAL_RCC_ClockConfig+0x278>)
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	4313      	orrs	r3, r2
 80067ce:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067d0:	f7fd fa74 	bl	8003cbc <HAL_GetTick>
 80067d4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067d6:	e008      	b.n	80067ea <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80067d8:	f7fd fa70 	bl	8003cbc <HAL_GetTick>
 80067dc:	4602      	mov	r2, r0
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	1ad3      	subs	r3, r2, r3
 80067e2:	2b02      	cmp	r3, #2
 80067e4:	d901      	bls.n	80067ea <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80067e6:	2303      	movs	r3, #3
 80067e8:	e012      	b.n	8006810 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067ea:	4b0b      	ldr	r3, [pc, #44]	@ (8006818 <HAL_RCC_ClockConfig+0x278>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f003 0307 	and.w	r3, r3, #7
 80067f2:	683a      	ldr	r2, [r7, #0]
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d1ef      	bne.n	80067d8 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80067f8:	f000 f87e 	bl	80068f8 <HAL_RCC_GetHCLKFreq>
 80067fc:	4603      	mov	r3, r0
 80067fe:	4a07      	ldr	r2, [pc, #28]	@ (800681c <HAL_RCC_ClockConfig+0x27c>)
 8006800:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8006802:	f7fd fa67 	bl	8003cd4 <HAL_GetTickPrio>
 8006806:	4603      	mov	r3, r0
 8006808:	4618      	mov	r0, r3
 800680a:	f7fd fa09 	bl	8003c20 <HAL_InitTick>
 800680e:	4603      	mov	r3, r0
}
 8006810:	4618      	mov	r0, r3
 8006812:	3710      	adds	r7, #16
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}
 8006818:	58004000 	.word	0x58004000
 800681c:	2000000c 	.word	0x2000000c

08006820 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006820:	b590      	push	{r4, r7, lr}
 8006822:	b085      	sub	sp, #20
 8006824:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006826:	f7ff f9e2 	bl	8005bee <LL_RCC_GetSysClkSource>
 800682a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d10a      	bne.n	8006848 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006832:	f7ff f99e 	bl	8005b72 <LL_RCC_MSI_GetRange>
 8006836:	4603      	mov	r3, r0
 8006838:	091b      	lsrs	r3, r3, #4
 800683a:	f003 030f 	and.w	r3, r3, #15
 800683e:	4a2b      	ldr	r2, [pc, #172]	@ (80068ec <HAL_RCC_GetSysClockFreq+0xcc>)
 8006840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006844:	60fb      	str	r3, [r7, #12]
 8006846:	e04b      	b.n	80068e0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2b04      	cmp	r3, #4
 800684c:	d102      	bne.n	8006854 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800684e:	4b28      	ldr	r3, [pc, #160]	@ (80068f0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006850:	60fb      	str	r3, [r7, #12]
 8006852:	e045      	b.n	80068e0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2b08      	cmp	r3, #8
 8006858:	d10a      	bne.n	8006870 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800685a:	f7fe ffb7 	bl	80057cc <LL_RCC_HSE_IsEnabledDiv2>
 800685e:	4603      	mov	r3, r0
 8006860:	2b01      	cmp	r3, #1
 8006862:	d102      	bne.n	800686a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8006864:	4b22      	ldr	r3, [pc, #136]	@ (80068f0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006866:	60fb      	str	r3, [r7, #12]
 8006868:	e03a      	b.n	80068e0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800686a:	4b22      	ldr	r3, [pc, #136]	@ (80068f4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800686c:	60fb      	str	r3, [r7, #12]
 800686e:	e037      	b.n	80068e0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8006870:	f7ff fab9 	bl	8005de6 <LL_RCC_PLL_GetMainSource>
 8006874:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	2b02      	cmp	r3, #2
 800687a:	d003      	beq.n	8006884 <HAL_RCC_GetSysClockFreq+0x64>
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	2b03      	cmp	r3, #3
 8006880:	d003      	beq.n	800688a <HAL_RCC_GetSysClockFreq+0x6a>
 8006882:	e00d      	b.n	80068a0 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8006884:	4b1a      	ldr	r3, [pc, #104]	@ (80068f0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006886:	60bb      	str	r3, [r7, #8]
        break;
 8006888:	e015      	b.n	80068b6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800688a:	f7fe ff9f 	bl	80057cc <LL_RCC_HSE_IsEnabledDiv2>
 800688e:	4603      	mov	r3, r0
 8006890:	2b01      	cmp	r3, #1
 8006892:	d102      	bne.n	800689a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8006894:	4b16      	ldr	r3, [pc, #88]	@ (80068f0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006896:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8006898:	e00d      	b.n	80068b6 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800689a:	4b16      	ldr	r3, [pc, #88]	@ (80068f4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800689c:	60bb      	str	r3, [r7, #8]
        break;
 800689e:	e00a      	b.n	80068b6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80068a0:	f7ff f967 	bl	8005b72 <LL_RCC_MSI_GetRange>
 80068a4:	4603      	mov	r3, r0
 80068a6:	091b      	lsrs	r3, r3, #4
 80068a8:	f003 030f 	and.w	r3, r3, #15
 80068ac:	4a0f      	ldr	r2, [pc, #60]	@ (80068ec <HAL_RCC_GetSysClockFreq+0xcc>)
 80068ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068b2:	60bb      	str	r3, [r7, #8]
        break;
 80068b4:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80068b6:	f7ff fa71 	bl	8005d9c <LL_RCC_PLL_GetN>
 80068ba:	4602      	mov	r2, r0
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	fb03 f402 	mul.w	r4, r3, r2
 80068c2:	f7ff fa84 	bl	8005dce <LL_RCC_PLL_GetDivider>
 80068c6:	4603      	mov	r3, r0
 80068c8:	091b      	lsrs	r3, r3, #4
 80068ca:	3301      	adds	r3, #1
 80068cc:	fbb4 f4f3 	udiv	r4, r4, r3
 80068d0:	f7ff fa71 	bl	8005db6 <LL_RCC_PLL_GetR>
 80068d4:	4603      	mov	r3, r0
 80068d6:	0f5b      	lsrs	r3, r3, #29
 80068d8:	3301      	adds	r3, #1
 80068da:	fbb4 f3f3 	udiv	r3, r4, r3
 80068de:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80068e0:	68fb      	ldr	r3, [r7, #12]
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3714      	adds	r7, #20
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd90      	pop	{r4, r7, pc}
 80068ea:	bf00      	nop
 80068ec:	08013764 	.word	0x08013764
 80068f0:	00f42400 	.word	0x00f42400
 80068f4:	01e84800 	.word	0x01e84800

080068f8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80068f8:	b598      	push	{r3, r4, r7, lr}
 80068fa:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80068fc:	f7ff ff90 	bl	8006820 <HAL_RCC_GetSysClockFreq>
 8006900:	4604      	mov	r4, r0
 8006902:	f7ff f9e9 	bl	8005cd8 <LL_RCC_GetAHBPrescaler>
 8006906:	4603      	mov	r3, r0
 8006908:	091b      	lsrs	r3, r3, #4
 800690a:	f003 030f 	and.w	r3, r3, #15
 800690e:	4a03      	ldr	r2, [pc, #12]	@ (800691c <HAL_RCC_GetHCLKFreq+0x24>)
 8006910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006914:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8006918:	4618      	mov	r0, r3
 800691a:	bd98      	pop	{r3, r4, r7, pc}
 800691c:	08013704 	.word	0x08013704

08006920 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006920:	b598      	push	{r3, r4, r7, lr}
 8006922:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006924:	f7ff ffe8 	bl	80068f8 <HAL_RCC_GetHCLKFreq>
 8006928:	4604      	mov	r4, r0
 800692a:	f7ff f9ef 	bl	8005d0c <LL_RCC_GetAPB1Prescaler>
 800692e:	4603      	mov	r3, r0
 8006930:	0a1b      	lsrs	r3, r3, #8
 8006932:	f003 0307 	and.w	r3, r3, #7
 8006936:	4a04      	ldr	r2, [pc, #16]	@ (8006948 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800693c:	f003 031f 	and.w	r3, r3, #31
 8006940:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006944:	4618      	mov	r0, r3
 8006946:	bd98      	pop	{r3, r4, r7, pc}
 8006948:	08013744 	.word	0x08013744

0800694c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800694c:	b598      	push	{r3, r4, r7, lr}
 800694e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8006950:	f7ff ffd2 	bl	80068f8 <HAL_RCC_GetHCLKFreq>
 8006954:	4604      	mov	r4, r0
 8006956:	f7ff f9e5 	bl	8005d24 <LL_RCC_GetAPB2Prescaler>
 800695a:	4603      	mov	r3, r0
 800695c:	0adb      	lsrs	r3, r3, #11
 800695e:	f003 0307 	and.w	r3, r3, #7
 8006962:	4a04      	ldr	r2, [pc, #16]	@ (8006974 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006964:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006968:	f003 031f 	and.w	r3, r3, #31
 800696c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006970:	4618      	mov	r0, r3
 8006972:	bd98      	pop	{r3, r4, r7, pc}
 8006974:	08013744 	.word	0x08013744

08006978 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8006978:	b590      	push	{r4, r7, lr}
 800697a:	b085      	sub	sp, #20
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2bb0      	cmp	r3, #176	@ 0xb0
 8006984:	d903      	bls.n	800698e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8006986:	4b15      	ldr	r3, [pc, #84]	@ (80069dc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800698a:	60fb      	str	r3, [r7, #12]
 800698c:	e007      	b.n	800699e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	091b      	lsrs	r3, r3, #4
 8006992:	f003 030f 	and.w	r3, r3, #15
 8006996:	4a11      	ldr	r2, [pc, #68]	@ (80069dc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800699c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800699e:	f7ff f9a7 	bl	8005cf0 <LL_RCC_GetAHB4Prescaler>
 80069a2:	4603      	mov	r3, r0
 80069a4:	091b      	lsrs	r3, r3, #4
 80069a6:	f003 030f 	and.w	r3, r3, #15
 80069aa:	4a0d      	ldr	r2, [pc, #52]	@ (80069e0 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80069ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069b0:	68fa      	ldr	r2, [r7, #12]
 80069b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80069b6:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	4a0a      	ldr	r2, [pc, #40]	@ (80069e4 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80069bc:	fba2 2303 	umull	r2, r3, r2, r3
 80069c0:	0c9c      	lsrs	r4, r3, #18
 80069c2:	f7fe fef5 	bl	80057b0 <HAL_PWREx_GetVoltageRange>
 80069c6:	4603      	mov	r3, r0
 80069c8:	4619      	mov	r1, r3
 80069ca:	4620      	mov	r0, r4
 80069cc:	f000 f80c 	bl	80069e8 <RCC_SetFlashLatency>
 80069d0:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3714      	adds	r7, #20
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd90      	pop	{r4, r7, pc}
 80069da:	bf00      	nop
 80069dc:	08013764 	.word	0x08013764
 80069e0:	08013704 	.word	0x08013704
 80069e4:	431bde83 	.word	0x431bde83

080069e8 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80069e8:	b590      	push	{r4, r7, lr}
 80069ea:	b093      	sub	sp, #76	@ 0x4c
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80069f2:	4b37      	ldr	r3, [pc, #220]	@ (8006ad0 <RCC_SetFlashLatency+0xe8>)
 80069f4:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80069f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80069fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80069fe:	4a35      	ldr	r2, [pc, #212]	@ (8006ad4 <RCC_SetFlashLatency+0xec>)
 8006a00:	f107 031c 	add.w	r3, r7, #28
 8006a04:	ca07      	ldmia	r2, {r0, r1, r2}
 8006a06:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8006a0a:	4b33      	ldr	r3, [pc, #204]	@ (8006ad8 <RCC_SetFlashLatency+0xf0>)
 8006a0c:	f107 040c 	add.w	r4, r7, #12
 8006a10:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006a12:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8006a16:	2300      	movs	r3, #0
 8006a18:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a20:	d11a      	bne.n	8006a58 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006a22:	2300      	movs	r3, #0
 8006a24:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a26:	e013      	b.n	8006a50 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8006a28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	3348      	adds	r3, #72	@ 0x48
 8006a2e:	443b      	add	r3, r7
 8006a30:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8006a34:	687a      	ldr	r2, [r7, #4]
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d807      	bhi.n	8006a4a <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006a3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a3c:	009b      	lsls	r3, r3, #2
 8006a3e:	3348      	adds	r3, #72	@ 0x48
 8006a40:	443b      	add	r3, r7
 8006a42:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006a46:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8006a48:	e020      	b.n	8006a8c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006a4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a4c:	3301      	adds	r3, #1
 8006a4e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a52:	2b03      	cmp	r3, #3
 8006a54:	d9e8      	bls.n	8006a28 <RCC_SetFlashLatency+0x40>
 8006a56:	e019      	b.n	8006a8c <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006a58:	2300      	movs	r3, #0
 8006a5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a5c:	e013      	b.n	8006a86 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8006a5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	3348      	adds	r3, #72	@ 0x48
 8006a64:	443b      	add	r3, r7
 8006a66:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d807      	bhi.n	8006a80 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006a70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a72:	009b      	lsls	r3, r3, #2
 8006a74:	3348      	adds	r3, #72	@ 0x48
 8006a76:	443b      	add	r3, r7
 8006a78:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006a7c:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8006a7e:	e005      	b.n	8006a8c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006a80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a82:	3301      	adds	r3, #1
 8006a84:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a88:	2b02      	cmp	r3, #2
 8006a8a:	d9e8      	bls.n	8006a5e <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8006a8c:	4b13      	ldr	r3, [pc, #76]	@ (8006adc <RCC_SetFlashLatency+0xf4>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f023 0207 	bic.w	r2, r3, #7
 8006a94:	4911      	ldr	r1, [pc, #68]	@ (8006adc <RCC_SetFlashLatency+0xf4>)
 8006a96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006a9c:	f7fd f90e 	bl	8003cbc <HAL_GetTick>
 8006aa0:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006aa2:	e008      	b.n	8006ab6 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006aa4:	f7fd f90a 	bl	8003cbc <HAL_GetTick>
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aac:	1ad3      	subs	r3, r2, r3
 8006aae:	2b02      	cmp	r3, #2
 8006ab0:	d901      	bls.n	8006ab6 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8006ab2:	2303      	movs	r3, #3
 8006ab4:	e007      	b.n	8006ac6 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006ab6:	4b09      	ldr	r3, [pc, #36]	@ (8006adc <RCC_SetFlashLatency+0xf4>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f003 0307 	and.w	r3, r3, #7
 8006abe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d1ef      	bne.n	8006aa4 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8006ac4:	2300      	movs	r3, #0
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	374c      	adds	r7, #76	@ 0x4c
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd90      	pop	{r4, r7, pc}
 8006ace:	bf00      	nop
 8006ad0:	080124e8 	.word	0x080124e8
 8006ad4:	080124f8 	.word	0x080124f8
 8006ad8:	08012504 	.word	0x08012504
 8006adc:	58004000 	.word	0x58004000

08006ae0 <LL_RCC_LSE_IsEnabled>:
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8006ae4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006aec:	f003 0301 	and.w	r3, r3, #1
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d101      	bne.n	8006af8 <LL_RCC_LSE_IsEnabled+0x18>
 8006af4:	2301      	movs	r3, #1
 8006af6:	e000      	b.n	8006afa <LL_RCC_LSE_IsEnabled+0x1a>
 8006af8:	2300      	movs	r3, #0
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr

08006b04 <LL_RCC_LSE_IsReady>:
{
 8006b04:	b480      	push	{r7}
 8006b06:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006b08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b10:	f003 0302 	and.w	r3, r3, #2
 8006b14:	2b02      	cmp	r3, #2
 8006b16:	d101      	bne.n	8006b1c <LL_RCC_LSE_IsReady+0x18>
 8006b18:	2301      	movs	r3, #1
 8006b1a:	e000      	b.n	8006b1e <LL_RCC_LSE_IsReady+0x1a>
 8006b1c:	2300      	movs	r3, #0
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr

08006b28 <LL_RCC_SetRFWKPClockSource>:
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b083      	sub	sp, #12
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8006b30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b34:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b38:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006b3c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	4313      	orrs	r3, r2
 8006b44:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8006b48:	bf00      	nop
 8006b4a:	370c      	adds	r7, #12
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr

08006b54 <LL_RCC_SetSMPSClockSource>:
{
 8006b54:	b480      	push	{r7}
 8006b56:	b083      	sub	sp, #12
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8006b5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b62:	f023 0203 	bic.w	r2, r3, #3
 8006b66:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8006b70:	bf00      	nop
 8006b72:	370c      	adds	r7, #12
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr

08006b7c <LL_RCC_SetSMPSPrescaler>:
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b083      	sub	sp, #12
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8006b84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b8a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006b8e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	4313      	orrs	r3, r2
 8006b96:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8006b98:	bf00      	nop
 8006b9a:	370c      	adds	r7, #12
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr

08006ba4 <LL_RCC_SetUSARTClockSource>:
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b083      	sub	sp, #12
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8006bac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bb4:	f023 0203 	bic.w	r2, r3, #3
 8006bb8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006bc4:	bf00      	nop
 8006bc6:	370c      	adds	r7, #12
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr

08006bd0 <LL_RCC_SetLPUARTClockSource>:
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b083      	sub	sp, #12
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006bd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006be0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006be4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	4313      	orrs	r3, r2
 8006bec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006bf0:	bf00      	nop
 8006bf2:	370c      	adds	r7, #12
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr

08006bfc <LL_RCC_SetI2CClockSource>:
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b083      	sub	sp, #12
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006c04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c08:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	091b      	lsrs	r3, r3, #4
 8006c10:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8006c14:	43db      	mvns	r3, r3
 8006c16:	401a      	ands	r2, r3
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	011b      	lsls	r3, r3, #4
 8006c1c:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8006c20:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006c24:	4313      	orrs	r3, r2
 8006c26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006c2a:	bf00      	nop
 8006c2c:	370c      	adds	r7, #12
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr

08006c36 <LL_RCC_SetLPTIMClockSource>:
{
 8006c36:	b480      	push	{r7}
 8006c38:	b083      	sub	sp, #12
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006c3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c42:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	0c1b      	lsrs	r3, r3, #16
 8006c4a:	041b      	lsls	r3, r3, #16
 8006c4c:	43db      	mvns	r3, r3
 8006c4e:	401a      	ands	r2, r3
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	041b      	lsls	r3, r3, #16
 8006c54:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006c5e:	bf00      	nop
 8006c60:	370c      	adds	r7, #12
 8006c62:	46bd      	mov	sp, r7
 8006c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c68:	4770      	bx	lr

08006c6a <LL_RCC_SetSAIClockSource>:
{
 8006c6a:	b480      	push	{r7}
 8006c6c:	b083      	sub	sp, #12
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8006c72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c7a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006c7e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	4313      	orrs	r3, r2
 8006c86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006c8a:	bf00      	nop
 8006c8c:	370c      	adds	r7, #12
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c94:	4770      	bx	lr

08006c96 <LL_RCC_SetRNGClockSource>:
{
 8006c96:	b480      	push	{r7}
 8006c98:	b083      	sub	sp, #12
 8006c9a:	af00      	add	r7, sp, #0
 8006c9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006c9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ca6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006caa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006cb6:	bf00      	nop
 8006cb8:	370c      	adds	r7, #12
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc0:	4770      	bx	lr

08006cc2 <LL_RCC_SetCLK48ClockSource>:
{
 8006cc2:	b480      	push	{r7}
 8006cc4:	b083      	sub	sp, #12
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8006cca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cd2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006cd6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006ce2:	bf00      	nop
 8006ce4:	370c      	adds	r7, #12
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr

08006cee <LL_RCC_SetUSBClockSource>:
{
 8006cee:	b580      	push	{r7, lr}
 8006cf0:	b082      	sub	sp, #8
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f7ff ffe3 	bl	8006cc2 <LL_RCC_SetCLK48ClockSource>
}
 8006cfc:	bf00      	nop
 8006cfe:	3708      	adds	r7, #8
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}

08006d04 <LL_RCC_SetADCClockSource>:
{
 8006d04:	b480      	push	{r7}
 8006d06:	b083      	sub	sp, #12
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006d0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d14:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006d18:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006d24:	bf00      	nop
 8006d26:	370c      	adds	r7, #12
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr

08006d30 <LL_RCC_SetRTCClockSource>:
{
 8006d30:	b480      	push	{r7}
 8006d32:	b083      	sub	sp, #12
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006d38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d40:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006d44:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8006d50:	bf00      	nop
 8006d52:	370c      	adds	r7, #12
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr

08006d5c <LL_RCC_GetRTCClockSource>:
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006d60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d68:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d74:	4770      	bx	lr

08006d76 <LL_RCC_ForceBackupDomainReset>:
{
 8006d76:	b480      	push	{r7}
 8006d78:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006d7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d82:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006d86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d8a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006d8e:	bf00      	nop
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr

08006d98 <LL_RCC_ReleaseBackupDomainReset>:
{
 8006d98:	b480      	push	{r7}
 8006d9a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006d9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006da4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006da8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006dac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006db0:	bf00      	nop
 8006db2:	46bd      	mov	sp, r7
 8006db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db8:	4770      	bx	lr

08006dba <LL_RCC_PLLSAI1_Enable>:
{
 8006dba:	b480      	push	{r7}
 8006dbc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006dbe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006dc8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006dcc:	6013      	str	r3, [r2, #0]
}
 8006dce:	bf00      	nop
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr

08006dd8 <LL_RCC_PLLSAI1_Disable>:
{
 8006dd8:	b480      	push	{r7}
 8006dda:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006ddc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006de6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006dea:	6013      	str	r3, [r2, #0]
}
 8006dec:	bf00      	nop
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr

08006df6 <LL_RCC_PLLSAI1_IsReady>:
{
 8006df6:	b480      	push	{r7}
 8006df8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8006dfa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e04:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e08:	d101      	bne.n	8006e0e <LL_RCC_PLLSAI1_IsReady+0x18>
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	e000      	b.n	8006e10 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8006e0e:	2300      	movs	r3, #0
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	46bd      	mov	sp, r7
 8006e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e18:	4770      	bx	lr

08006e1a <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e1a:	b580      	push	{r7, lr}
 8006e1c:	b088      	sub	sp, #32
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8006e22:	2300      	movs	r3, #0
 8006e24:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006e26:	2300      	movs	r3, #0
 8006e28:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d034      	beq.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e3a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006e3e:	d021      	beq.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8006e40:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006e44:	d81b      	bhi.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006e46:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006e4a:	d01d      	beq.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8006e4c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006e50:	d815      	bhi.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d00b      	beq.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0x54>
 8006e56:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006e5a:	d110      	bne.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8006e5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e60:	68db      	ldr	r3, [r3, #12]
 8006e62:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006e66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e6a:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8006e6c:	e00d      	b.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	3304      	adds	r3, #4
 8006e72:	4618      	mov	r0, r3
 8006e74:	f000 f947 	bl	8007106 <RCCEx_PLLSAI1_ConfigNP>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006e7c:	e005      	b.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	77fb      	strb	r3, [r7, #31]
        break;
 8006e82:	e002      	b.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006e84:	bf00      	nop
 8006e86:	e000      	b.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006e88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e8a:	7ffb      	ldrb	r3, [r7, #31]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d105      	bne.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e94:	4618      	mov	r0, r3
 8006e96:	f7ff fee8 	bl	8006c6a <LL_RCC_SetSAIClockSource>
 8006e9a:	e001      	b.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e9c:	7ffb      	ldrb	r3, [r7, #31]
 8006e9e:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d046      	beq.n	8006f3a <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8006eac:	f7ff ff56 	bl	8006d5c <LL_RCC_GetRTCClockSource>
 8006eb0:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eb6:	69ba      	ldr	r2, [r7, #24]
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d03c      	beq.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006ebc:	f7fe fc68 	bl	8005790 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8006ec0:	69bb      	ldr	r3, [r7, #24]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d105      	bne.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f7ff ff30 	bl	8006d30 <LL_RCC_SetRTCClockSource>
 8006ed0:	e02e      	b.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8006ed2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006eda:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8006edc:	f7ff ff4b 	bl	8006d76 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8006ee0:	f7ff ff5a 	bl	8006d98 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8006ef2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8006efc:	f7ff fdf0 	bl	8006ae0 <LL_RCC_LSE_IsEnabled>
 8006f00:	4603      	mov	r3, r0
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d114      	bne.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006f06:	f7fc fed9 	bl	8003cbc <HAL_GetTick>
 8006f0a:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8006f0c:	e00b      	b.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f0e:	f7fc fed5 	bl	8003cbc <HAL_GetTick>
 8006f12:	4602      	mov	r2, r0
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	1ad3      	subs	r3, r2, r3
 8006f18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d902      	bls.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8006f20:	2303      	movs	r3, #3
 8006f22:	77fb      	strb	r3, [r7, #31]
              break;
 8006f24:	e004      	b.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8006f26:	f7ff fded 	bl	8006b04 <LL_RCC_LSE_IsReady>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d1ee      	bne.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8006f30:	7ffb      	ldrb	r3, [r7, #31]
 8006f32:	77bb      	strb	r3, [r7, #30]
 8006f34:	e001      	b.n	8006f3a <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f36:	7ffb      	ldrb	r3, [r7, #31]
 8006f38:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f003 0301 	and.w	r3, r3, #1
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d004      	beq.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	699b      	ldr	r3, [r3, #24]
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f7ff fe2a 	bl	8006ba4 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f003 0302 	and.w	r3, r3, #2
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d004      	beq.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	69db      	ldr	r3, [r3, #28]
 8006f60:	4618      	mov	r0, r3
 8006f62:	f7ff fe35 	bl	8006bd0 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f003 0310 	and.w	r3, r3, #16
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d004      	beq.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f76:	4618      	mov	r0, r3
 8006f78:	f7ff fe5d 	bl	8006c36 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f003 0320 	and.w	r3, r3, #32
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d004      	beq.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f7ff fe52 	bl	8006c36 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f003 0304 	and.w	r3, r3, #4
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d004      	beq.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6a1b      	ldr	r3, [r3, #32]
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f7ff fe2a 	bl	8006bfc <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f003 0308 	and.w	r3, r3, #8
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d004      	beq.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f7ff fe1f 	bl	8006bfc <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d022      	beq.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f7ff fe8d 	bl	8006cee <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fd8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006fdc:	d107      	bne.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8006fde:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006fe2:	68db      	ldr	r3, [r3, #12]
 8006fe4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006fe8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006fec:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ff2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006ff6:	d10b      	bne.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	3304      	adds	r3, #4
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f000 f8dd 	bl	80071bc <RCCEx_PLLSAI1_ConfigNQ>
 8007002:	4603      	mov	r3, r0
 8007004:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8007006:	7ffb      	ldrb	r3, [r7, #31]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d001      	beq.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800700c:	7ffb      	ldrb	r3, [r7, #31]
 800700e:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007018:	2b00      	cmp	r3, #0
 800701a:	d02b      	beq.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007020:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007024:	d008      	beq.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800702a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800702e:	d003      	beq.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007034:	2b00      	cmp	r3, #0
 8007036:	d105      	bne.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800703c:	4618      	mov	r0, r3
 800703e:	f7ff fe2a 	bl	8006c96 <LL_RCC_SetRNGClockSource>
 8007042:	e00a      	b.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x240>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007048:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800704c:	60fb      	str	r3, [r7, #12]
 800704e:	2000      	movs	r0, #0
 8007050:	f7ff fe21 	bl	8006c96 <LL_RCC_SetRNGClockSource>
 8007054:	68f8      	ldr	r0, [r7, #12]
 8007056:	f7ff fe34 	bl	8006cc2 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800705e:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8007062:	d107      	bne.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8007064:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007068:	68db      	ldr	r3, [r3, #12]
 800706a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800706e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007072:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800707c:	2b00      	cmp	r3, #0
 800707e:	d022      	beq.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007084:	4618      	mov	r0, r3
 8007086:	f7ff fe3d 	bl	8006d04 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800708e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007092:	d107      	bne.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007094:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007098:	68db      	ldr	r3, [r3, #12]
 800709a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800709e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80070a2:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80070ac:	d10b      	bne.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	3304      	adds	r3, #4
 80070b2:	4618      	mov	r0, r3
 80070b4:	f000 f8dd 	bl	8007272 <RCCEx_PLLSAI1_ConfigNR>
 80070b8:	4603      	mov	r3, r0
 80070ba:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80070bc:	7ffb      	ldrb	r3, [r7, #31]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d001      	beq.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80070c2:	7ffb      	ldrb	r3, [r7, #31]
 80070c4:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d004      	beq.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070d6:	4618      	mov	r0, r3
 80070d8:	f7ff fd26 	bl	8006b28 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d009      	beq.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070ec:	4618      	mov	r0, r3
 80070ee:	f7ff fd45 	bl	8006b7c <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070f6:	4618      	mov	r0, r3
 80070f8:	f7ff fd2c 	bl	8006b54 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80070fc:	7fbb      	ldrb	r3, [r7, #30]
}
 80070fe:	4618      	mov	r0, r3
 8007100:	3720      	adds	r7, #32
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}

08007106 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007106:	b580      	push	{r7, lr}
 8007108:	b084      	sub	sp, #16
 800710a:	af00      	add	r7, sp, #0
 800710c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800710e:	2300      	movs	r3, #0
 8007110:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007112:	f7ff fe61 	bl	8006dd8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007116:	f7fc fdd1 	bl	8003cbc <HAL_GetTick>
 800711a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800711c:	e009      	b.n	8007132 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800711e:	f7fc fdcd 	bl	8003cbc <HAL_GetTick>
 8007122:	4602      	mov	r2, r0
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	1ad3      	subs	r3, r2, r3
 8007128:	2b02      	cmp	r3, #2
 800712a:	d902      	bls.n	8007132 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800712c:	2303      	movs	r3, #3
 800712e:	73fb      	strb	r3, [r7, #15]
      break;
 8007130:	e004      	b.n	800713c <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007132:	f7ff fe60 	bl	8006df6 <LL_RCC_PLLSAI1_IsReady>
 8007136:	4603      	mov	r3, r0
 8007138:	2b00      	cmp	r3, #0
 800713a:	d1f0      	bne.n	800711e <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800713c:	7bfb      	ldrb	r3, [r7, #15]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d137      	bne.n	80071b2 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007142:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007146:	691b      	ldr	r3, [r3, #16]
 8007148:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	021b      	lsls	r3, r3, #8
 8007152:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007156:	4313      	orrs	r3, r2
 8007158:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800715a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800715e:	691b      	ldr	r3, [r3, #16]
 8007160:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800716c:	4313      	orrs	r3, r2
 800716e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007170:	f7ff fe23 	bl	8006dba <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007174:	f7fc fda2 	bl	8003cbc <HAL_GetTick>
 8007178:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800717a:	e009      	b.n	8007190 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800717c:	f7fc fd9e 	bl	8003cbc <HAL_GetTick>
 8007180:	4602      	mov	r2, r0
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	1ad3      	subs	r3, r2, r3
 8007186:	2b02      	cmp	r3, #2
 8007188:	d902      	bls.n	8007190 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800718a:	2303      	movs	r3, #3
 800718c:	73fb      	strb	r3, [r7, #15]
        break;
 800718e:	e004      	b.n	800719a <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007190:	f7ff fe31 	bl	8006df6 <LL_RCC_PLLSAI1_IsReady>
 8007194:	4603      	mov	r3, r0
 8007196:	2b01      	cmp	r3, #1
 8007198:	d1f0      	bne.n	800717c <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800719a:	7bfb      	ldrb	r3, [r7, #15]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d108      	bne.n	80071b2 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80071a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80071a4:	691a      	ldr	r2, [r3, #16]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	691b      	ldr	r3, [r3, #16]
 80071aa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80071ae:	4313      	orrs	r3, r2
 80071b0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80071b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3710      	adds	r7, #16
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}

080071bc <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b084      	sub	sp, #16
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80071c4:	2300      	movs	r3, #0
 80071c6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80071c8:	f7ff fe06 	bl	8006dd8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80071cc:	f7fc fd76 	bl	8003cbc <HAL_GetTick>
 80071d0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80071d2:	e009      	b.n	80071e8 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80071d4:	f7fc fd72 	bl	8003cbc <HAL_GetTick>
 80071d8:	4602      	mov	r2, r0
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	1ad3      	subs	r3, r2, r3
 80071de:	2b02      	cmp	r3, #2
 80071e0:	d902      	bls.n	80071e8 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80071e2:	2303      	movs	r3, #3
 80071e4:	73fb      	strb	r3, [r7, #15]
      break;
 80071e6:	e004      	b.n	80071f2 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80071e8:	f7ff fe05 	bl	8006df6 <LL_RCC_PLLSAI1_IsReady>
 80071ec:	4603      	mov	r3, r0
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d1f0      	bne.n	80071d4 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80071f2:	7bfb      	ldrb	r3, [r7, #15]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d137      	bne.n	8007268 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80071f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80071fc:	691b      	ldr	r3, [r3, #16]
 80071fe:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	021b      	lsls	r3, r3, #8
 8007208:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800720c:	4313      	orrs	r3, r2
 800720e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8007210:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007214:	691b      	ldr	r3, [r3, #16]
 8007216:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	689b      	ldr	r3, [r3, #8]
 800721e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007222:	4313      	orrs	r3, r2
 8007224:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007226:	f7ff fdc8 	bl	8006dba <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800722a:	f7fc fd47 	bl	8003cbc <HAL_GetTick>
 800722e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007230:	e009      	b.n	8007246 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007232:	f7fc fd43 	bl	8003cbc <HAL_GetTick>
 8007236:	4602      	mov	r2, r0
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	1ad3      	subs	r3, r2, r3
 800723c:	2b02      	cmp	r3, #2
 800723e:	d902      	bls.n	8007246 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8007240:	2303      	movs	r3, #3
 8007242:	73fb      	strb	r3, [r7, #15]
        break;
 8007244:	e004      	b.n	8007250 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007246:	f7ff fdd6 	bl	8006df6 <LL_RCC_PLLSAI1_IsReady>
 800724a:	4603      	mov	r3, r0
 800724c:	2b01      	cmp	r3, #1
 800724e:	d1f0      	bne.n	8007232 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8007250:	7bfb      	ldrb	r3, [r7, #15]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d108      	bne.n	8007268 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007256:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800725a:	691a      	ldr	r2, [r3, #16]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	691b      	ldr	r3, [r3, #16]
 8007260:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007264:	4313      	orrs	r3, r2
 8007266:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007268:	7bfb      	ldrb	r3, [r7, #15]
}
 800726a:	4618      	mov	r0, r3
 800726c:	3710      	adds	r7, #16
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}

08007272 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007272:	b580      	push	{r7, lr}
 8007274:	b084      	sub	sp, #16
 8007276:	af00      	add	r7, sp, #0
 8007278:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800727a:	2300      	movs	r3, #0
 800727c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800727e:	f7ff fdab 	bl	8006dd8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007282:	f7fc fd1b 	bl	8003cbc <HAL_GetTick>
 8007286:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007288:	e009      	b.n	800729e <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800728a:	f7fc fd17 	bl	8003cbc <HAL_GetTick>
 800728e:	4602      	mov	r2, r0
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	1ad3      	subs	r3, r2, r3
 8007294:	2b02      	cmp	r3, #2
 8007296:	d902      	bls.n	800729e <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8007298:	2303      	movs	r3, #3
 800729a:	73fb      	strb	r3, [r7, #15]
      break;
 800729c:	e004      	b.n	80072a8 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800729e:	f7ff fdaa 	bl	8006df6 <LL_RCC_PLLSAI1_IsReady>
 80072a2:	4603      	mov	r3, r0
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d1f0      	bne.n	800728a <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80072a8:	7bfb      	ldrb	r3, [r7, #15]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d137      	bne.n	800731e <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80072ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80072b2:	691b      	ldr	r3, [r3, #16]
 80072b4:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	021b      	lsls	r3, r3, #8
 80072be:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80072c2:	4313      	orrs	r3, r2
 80072c4:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80072c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80072ca:	691b      	ldr	r3, [r3, #16]
 80072cc:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	68db      	ldr	r3, [r3, #12]
 80072d4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80072d8:	4313      	orrs	r3, r2
 80072da:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80072dc:	f7ff fd6d 	bl	8006dba <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072e0:	f7fc fcec 	bl	8003cbc <HAL_GetTick>
 80072e4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80072e6:	e009      	b.n	80072fc <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80072e8:	f7fc fce8 	bl	8003cbc <HAL_GetTick>
 80072ec:	4602      	mov	r2, r0
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	1ad3      	subs	r3, r2, r3
 80072f2:	2b02      	cmp	r3, #2
 80072f4:	d902      	bls.n	80072fc <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80072f6:	2303      	movs	r3, #3
 80072f8:	73fb      	strb	r3, [r7, #15]
        break;
 80072fa:	e004      	b.n	8007306 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80072fc:	f7ff fd7b 	bl	8006df6 <LL_RCC_PLLSAI1_IsReady>
 8007300:	4603      	mov	r3, r0
 8007302:	2b01      	cmp	r3, #1
 8007304:	d1f0      	bne.n	80072e8 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8007306:	7bfb      	ldrb	r3, [r7, #15]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d108      	bne.n	800731e <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800730c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007310:	691a      	ldr	r2, [r3, #16]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	691b      	ldr	r3, [r3, #16]
 8007316:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800731a:	4313      	orrs	r3, r2
 800731c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800731e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007320:	4618      	mov	r0, r3
 8007322:	3710      	adds	r7, #16
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}

08007328 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b084      	sub	sp, #16
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d101      	bne.n	800733a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8007336:	2301      	movs	r3, #1
 8007338:	e09f      	b.n	800747a <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8007340:	b2db      	uxtb	r3, r3
 8007342:	2b00      	cmp	r3, #0
 8007344:	d106      	bne.n	8007354 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2200      	movs	r2, #0
 800734a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f7fc f904 	bl	800355c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2202      	movs	r2, #2
 8007358:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800735c:	4b49      	ldr	r3, [pc, #292]	@ (8007484 <HAL_RTC_Init+0x15c>)
 800735e:	68db      	ldr	r3, [r3, #12]
 8007360:	f003 0310 	and.w	r3, r3, #16
 8007364:	2b10      	cmp	r3, #16
 8007366:	d07e      	beq.n	8007466 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	22ca      	movs	r2, #202	@ 0xca
 800736e:	625a      	str	r2, [r3, #36]	@ 0x24
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	2253      	movs	r2, #83	@ 0x53
 8007376:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f000 fa1d 	bl	80077b8 <RTC_EnterInitMode>
 800737e:	4603      	mov	r3, r0
 8007380:	2b00      	cmp	r3, #0
 8007382:	d00a      	beq.n	800739a <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	22ff      	movs	r2, #255	@ 0xff
 800738a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2204      	movs	r2, #4
 8007390:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 8007394:	2301      	movs	r3, #1
 8007396:	73fb      	strb	r3, [r7, #15]
 8007398:	e067      	b.n	800746a <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	689b      	ldr	r3, [r3, #8]
 80073a0:	687a      	ldr	r2, [r7, #4]
 80073a2:	6812      	ldr	r2, [r2, #0]
 80073a4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80073a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80073ac:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	6899      	ldr	r1, [r3, #8]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	685a      	ldr	r2, [r3, #4]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	691b      	ldr	r3, [r3, #16]
 80073bc:	431a      	orrs	r2, r3
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	699b      	ldr	r3, [r3, #24]
 80073c2:	431a      	orrs	r2, r3
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	430a      	orrs	r2, r1
 80073ca:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	687a      	ldr	r2, [r7, #4]
 80073d2:	68d2      	ldr	r2, [r2, #12]
 80073d4:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	6919      	ldr	r1, [r3, #16]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	041a      	lsls	r2, r3, #16
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	430a      	orrs	r2, r1
 80073e8:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	68da      	ldr	r2, [r3, #12]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80073f8:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f022 0203 	bic.w	r2, r2, #3
 8007408:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	69da      	ldr	r2, [r3, #28]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	695b      	ldr	r3, [r3, #20]
 8007418:	431a      	orrs	r2, r3
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	430a      	orrs	r2, r1
 8007420:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	689b      	ldr	r3, [r3, #8]
 8007428:	f003 0320 	and.w	r3, r3, #32
 800742c:	2b00      	cmp	r3, #0
 800742e:	d113      	bne.n	8007458 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f000 f99b 	bl	800776c <HAL_RTC_WaitForSynchro>
 8007436:	4603      	mov	r3, r0
 8007438:	2b00      	cmp	r3, #0
 800743a:	d00d      	beq.n	8007458 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	22ff      	movs	r2, #255	@ 0xff
 8007442:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2204      	movs	r2, #4
 8007448:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2200      	movs	r2, #0
 8007450:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8007454:	2301      	movs	r3, #1
 8007456:	e010      	b.n	800747a <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	22ff      	movs	r2, #255	@ 0xff
 800745e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 8007460:	2300      	movs	r3, #0
 8007462:	73fb      	strb	r3, [r7, #15]
 8007464:	e001      	b.n	800746a <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8007466:	2300      	movs	r3, #0
 8007468:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800746a:	7bfb      	ldrb	r3, [r7, #15]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d103      	bne.n	8007478 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2201      	movs	r2, #1
 8007474:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 8007478:	7bfb      	ldrb	r3, [r7, #15]
}
 800747a:	4618      	mov	r0, r3
 800747c:	3710      	adds	r7, #16
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}
 8007482:	bf00      	nop
 8007484:	40002800 	.word	0x40002800

08007488 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007488:	b590      	push	{r4, r7, lr}
 800748a:	b087      	sub	sp, #28
 800748c:	af00      	add	r7, sp, #0
 800748e:	60f8      	str	r0, [r7, #12]
 8007490:	60b9      	str	r1, [r7, #8]
 8007492:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f893 3020 	ldrb.w	r3, [r3, #32]
 800749a:	2b01      	cmp	r3, #1
 800749c:	d101      	bne.n	80074a2 <HAL_RTC_SetTime+0x1a>
 800749e:	2302      	movs	r3, #2
 80074a0:	e0b2      	b.n	8007608 <HAL_RTC_SetTime+0x180>
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2201      	movs	r2, #1
 80074a6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2202      	movs	r2, #2
 80074ae:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if (Format == RTC_FORMAT_BIN)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d126      	bne.n	8007506 <HAL_RTC_SetTime+0x7e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	689b      	ldr	r3, [r3, #8]
 80074be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d102      	bne.n	80074cc <HAL_RTC_SetTime+0x44>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	2200      	movs	r2, #0
 80074ca:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	781b      	ldrb	r3, [r3, #0]
 80074d0:	4618      	mov	r0, r3
 80074d2:	f000 f99b 	bl	800780c <RTC_ByteToBcd2>
 80074d6:	4603      	mov	r3, r0
 80074d8:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	785b      	ldrb	r3, [r3, #1]
 80074de:	4618      	mov	r0, r3
 80074e0:	f000 f994 	bl	800780c <RTC_ByteToBcd2>
 80074e4:	4603      	mov	r3, r0
 80074e6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80074e8:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	789b      	ldrb	r3, [r3, #2]
 80074ee:	4618      	mov	r0, r3
 80074f0:	f000 f98c 	bl	800780c <RTC_ByteToBcd2>
 80074f4:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80074f6:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	78db      	ldrb	r3, [r3, #3]
 80074fe:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007500:	4313      	orrs	r3, r2
 8007502:	617b      	str	r3, [r7, #20]
 8007504:	e018      	b.n	8007538 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	689b      	ldr	r3, [r3, #8]
 800750c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007510:	2b00      	cmp	r3, #0
 8007512:	d102      	bne.n	800751a <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	2200      	movs	r2, #0
 8007518:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	781b      	ldrb	r3, [r3, #0]
 800751e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	785b      	ldrb	r3, [r3, #1]
 8007524:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8007526:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8007528:	68ba      	ldr	r2, [r7, #8]
 800752a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800752c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	78db      	ldrb	r3, [r3, #3]
 8007532:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8007534:	4313      	orrs	r3, r2
 8007536:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	22ca      	movs	r2, #202	@ 0xca
 800753e:	625a      	str	r2, [r3, #36]	@ 0x24
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	2253      	movs	r2, #83	@ 0x53
 8007546:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007548:	68f8      	ldr	r0, [r7, #12]
 800754a:	f000 f935 	bl	80077b8 <RTC_EnterInitMode>
 800754e:	4603      	mov	r3, r0
 8007550:	2b00      	cmp	r3, #0
 8007552:	d00d      	beq.n	8007570 <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	22ff      	movs	r2, #255	@ 0xff
 800755a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2204      	movs	r2, #4
 8007560:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	2200      	movs	r2, #0
 8007568:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800756c:	2301      	movs	r3, #1
 800756e:	e04b      	b.n	8007608 <HAL_RTC_SetTime+0x180>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681a      	ldr	r2, [r3, #0]
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800757a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800757e:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	689a      	ldr	r2, [r3, #8]
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800758e:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	6899      	ldr	r1, [r3, #8]
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	68da      	ldr	r2, [r3, #12]
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	691b      	ldr	r3, [r3, #16]
 800759e:	431a      	orrs	r2, r3
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	430a      	orrs	r2, r1
 80075a6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	68da      	ldr	r2, [r3, #12]
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80075b6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	689b      	ldr	r3, [r3, #8]
 80075be:	f003 0320 	and.w	r3, r3, #32
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d113      	bne.n	80075ee <HAL_RTC_SetTime+0x166>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80075c6:	68f8      	ldr	r0, [r7, #12]
 80075c8:	f000 f8d0 	bl	800776c <HAL_RTC_WaitForSynchro>
 80075cc:	4603      	mov	r3, r0
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d00d      	beq.n	80075ee <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	22ff      	movs	r2, #255	@ 0xff
 80075d8:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2204      	movs	r2, #4
 80075de:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2200      	movs	r2, #0
 80075e6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80075ea:	2301      	movs	r3, #1
 80075ec:	e00c      	b.n	8007608 <HAL_RTC_SetTime+0x180>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	22ff      	movs	r2, #255	@ 0xff
 80075f4:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2201      	movs	r2, #1
 80075fa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    __HAL_UNLOCK(hrtc);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2200      	movs	r2, #0
 8007602:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 8007606:	2300      	movs	r3, #0
  }
}
 8007608:	4618      	mov	r0, r3
 800760a:	371c      	adds	r7, #28
 800760c:	46bd      	mov	sp, r7
 800760e:	bd90      	pop	{r4, r7, pc}

08007610 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007610:	b590      	push	{r4, r7, lr}
 8007612:	b087      	sub	sp, #28
 8007614:	af00      	add	r7, sp, #0
 8007616:	60f8      	str	r0, [r7, #12]
 8007618:	60b9      	str	r1, [r7, #8]
 800761a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007622:	2b01      	cmp	r3, #1
 8007624:	d101      	bne.n	800762a <HAL_RTC_SetDate+0x1a>
 8007626:	2302      	movs	r3, #2
 8007628:	e09c      	b.n	8007764 <HAL_RTC_SetDate+0x154>
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2201      	movs	r2, #1
 800762e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2202      	movs	r2, #2
 8007636:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d10e      	bne.n	800765e <HAL_RTC_SetDate+0x4e>
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	785b      	ldrb	r3, [r3, #1]
 8007644:	f003 0310 	and.w	r3, r3, #16
 8007648:	2b00      	cmp	r3, #0
 800764a:	d008      	beq.n	800765e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	785b      	ldrb	r3, [r3, #1]
 8007650:	f023 0310 	bic.w	r3, r3, #16
 8007654:	b2db      	uxtb	r3, r3
 8007656:	330a      	adds	r3, #10
 8007658:	b2da      	uxtb	r2, r3
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d11c      	bne.n	800769e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	78db      	ldrb	r3, [r3, #3]
 8007668:	4618      	mov	r0, r3
 800766a:	f000 f8cf 	bl	800780c <RTC_ByteToBcd2>
 800766e:	4603      	mov	r3, r0
 8007670:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	785b      	ldrb	r3, [r3, #1]
 8007676:	4618      	mov	r0, r3
 8007678:	f000 f8c8 	bl	800780c <RTC_ByteToBcd2>
 800767c:	4603      	mov	r3, r0
 800767e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8007680:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	789b      	ldrb	r3, [r3, #2]
 8007686:	4618      	mov	r0, r3
 8007688:	f000 f8c0 	bl	800780c <RTC_ByteToBcd2>
 800768c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800768e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	781b      	ldrb	r3, [r3, #0]
 8007696:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8007698:	4313      	orrs	r3, r2
 800769a:	617b      	str	r3, [r7, #20]
 800769c:	e00e      	b.n	80076bc <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	78db      	ldrb	r3, [r3, #3]
 80076a2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	785b      	ldrb	r3, [r3, #1]
 80076a8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80076aa:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80076ac:	68ba      	ldr	r2, [r7, #8]
 80076ae:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80076b0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	781b      	ldrb	r3, [r3, #0]
 80076b6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80076b8:	4313      	orrs	r3, r2
 80076ba:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	22ca      	movs	r2, #202	@ 0xca
 80076c2:	625a      	str	r2, [r3, #36]	@ 0x24
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	2253      	movs	r2, #83	@ 0x53
 80076ca:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80076cc:	68f8      	ldr	r0, [r7, #12]
 80076ce:	f000 f873 	bl	80077b8 <RTC_EnterInitMode>
 80076d2:	4603      	mov	r3, r0
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d00d      	beq.n	80076f4 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	22ff      	movs	r2, #255	@ 0xff
 80076de:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2204      	movs	r2, #4
 80076e4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2200      	movs	r2, #0
 80076ec:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 80076f0:	2301      	movs	r3, #1
 80076f2:	e037      	b.n	8007764 <HAL_RTC_SetDate+0x154>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681a      	ldr	r2, [r3, #0]
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80076fe:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007702:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	68da      	ldr	r2, [r3, #12]
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007712:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	689b      	ldr	r3, [r3, #8]
 800771a:	f003 0320 	and.w	r3, r3, #32
 800771e:	2b00      	cmp	r3, #0
 8007720:	d113      	bne.n	800774a <HAL_RTC_SetDate+0x13a>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007722:	68f8      	ldr	r0, [r7, #12]
 8007724:	f000 f822 	bl	800776c <HAL_RTC_WaitForSynchro>
 8007728:	4603      	mov	r3, r0
 800772a:	2b00      	cmp	r3, #0
 800772c:	d00d      	beq.n	800774a <HAL_RTC_SetDate+0x13a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	22ff      	movs	r2, #255	@ 0xff
 8007734:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2204      	movs	r2, #4
 800773a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2200      	movs	r2, #0
 8007742:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8007746:	2301      	movs	r3, #1
 8007748:	e00c      	b.n	8007764 <HAL_RTC_SetDate+0x154>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	22ff      	movs	r2, #255	@ 0xff
 8007750:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2201      	movs	r2, #1
 8007756:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	2200      	movs	r2, #0
 800775e:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 8007762:	2300      	movs	r3, #0
  }
}
 8007764:	4618      	mov	r0, r3
 8007766:	371c      	adds	r7, #28
 8007768:	46bd      	mov	sp, r7
 800776a:	bd90      	pop	{r4, r7, pc}

0800776c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b084      	sub	sp, #16
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	68da      	ldr	r2, [r3, #12]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007782:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007784:	f7fc fa9a 	bl	8003cbc <HAL_GetTick>
 8007788:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800778a:	e009      	b.n	80077a0 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800778c:	f7fc fa96 	bl	8003cbc <HAL_GetTick>
 8007790:	4602      	mov	r2, r0
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	1ad3      	subs	r3, r2, r3
 8007796:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800779a:	d901      	bls.n	80077a0 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800779c:	2303      	movs	r3, #3
 800779e:	e007      	b.n	80077b0 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	68db      	ldr	r3, [r3, #12]
 80077a6:	f003 0320 	and.w	r3, r3, #32
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d0ee      	beq.n	800778c <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80077ae:	2300      	movs	r3, #0
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3710      	adds	r7, #16
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b084      	sub	sp, #16
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	68db      	ldr	r3, [r3, #12]
 80077c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d119      	bne.n	8007802 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f04f 32ff 	mov.w	r2, #4294967295
 80077d6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80077d8:	f7fc fa70 	bl	8003cbc <HAL_GetTick>
 80077dc:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80077de:	e009      	b.n	80077f4 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80077e0:	f7fc fa6c 	bl	8003cbc <HAL_GetTick>
 80077e4:	4602      	mov	r2, r0
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	1ad3      	subs	r3, r2, r3
 80077ea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80077ee:	d901      	bls.n	80077f4 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 80077f0:	2303      	movs	r3, #3
 80077f2:	e007      	b.n	8007804 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	68db      	ldr	r3, [r3, #12]
 80077fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d0ee      	beq.n	80077e0 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8007802:	2300      	movs	r3, #0
}
 8007804:	4618      	mov	r0, r3
 8007806:	3710      	adds	r7, #16
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}

0800780c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800780c:	b480      	push	{r7}
 800780e:	b085      	sub	sp, #20
 8007810:	af00      	add	r7, sp, #0
 8007812:	4603      	mov	r3, r0
 8007814:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007816:	2300      	movs	r3, #0
 8007818:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800781a:	79fb      	ldrb	r3, [r7, #7]
 800781c:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 800781e:	e005      	b.n	800782c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	3301      	adds	r3, #1
 8007824:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8007826:	7afb      	ldrb	r3, [r7, #11]
 8007828:	3b0a      	subs	r3, #10
 800782a:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 800782c:	7afb      	ldrb	r3, [r7, #11]
 800782e:	2b09      	cmp	r3, #9
 8007830:	d8f6      	bhi.n	8007820 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	b2db      	uxtb	r3, r3
 8007836:	011b      	lsls	r3, r3, #4
 8007838:	b2da      	uxtb	r2, r3
 800783a:	7afb      	ldrb	r3, [r7, #11]
 800783c:	4313      	orrs	r3, r2
 800783e:	b2db      	uxtb	r3, r3
}
 8007840:	4618      	mov	r0, r3
 8007842:	3714      	adds	r7, #20
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr

0800784c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b086      	sub	sp, #24
 8007850:	af00      	add	r7, sp, #0
 8007852:	60f8      	str	r0, [r7, #12]
 8007854:	60b9      	str	r1, [r7, #8]
 8007856:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800785e:	2b01      	cmp	r3, #1
 8007860:	d101      	bne.n	8007866 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8007862:	2302      	movs	r3, #2
 8007864:	e0a8      	b.n	80079b8 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2201      	movs	r2, #1
 800786a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2202      	movs	r2, #2
 8007872:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	22ca      	movs	r2, #202	@ 0xca
 800787c:	625a      	str	r2, [r3, #36]	@ 0x24
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	2253      	movs	r2, #83	@ 0x53
 8007884:	625a      	str	r2, [r3, #36]	@ 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	689b      	ldr	r3, [r3, #8]
 800788c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007890:	2b00      	cmp	r3, #0
 8007892:	d020      	beq.n	80078d6 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8007894:	f7fc fa12 	bl	8003cbc <HAL_GetTick>
 8007898:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800789a:	e015      	b.n	80078c8 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800789c:	f7fc fa0e 	bl	8003cbc <HAL_GetTick>
 80078a0:	4602      	mov	r2, r0
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	1ad3      	subs	r3, r2, r3
 80078a6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80078aa:	d90d      	bls.n	80078c8 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	22ff      	movs	r2, #255	@ 0xff
 80078b2:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2203      	movs	r2, #3
 80078b8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2200      	movs	r2, #0
 80078c0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80078c4:	2303      	movs	r3, #3
 80078c6:	e077      	b.n	80079b8 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	68db      	ldr	r3, [r3, #12]
 80078ce:	f003 0304 	and.w	r3, r3, #4
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d1e2      	bne.n	800789c <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	689a      	ldr	r2, [r3, #8]
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80078e4:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	68db      	ldr	r3, [r3, #12]
 80078ec:	b2da      	uxtb	r2, r3
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80078f6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80078f8:	f7fc f9e0 	bl	8003cbc <HAL_GetTick>
 80078fc:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80078fe:	e015      	b.n	800792c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007900:	f7fc f9dc 	bl	8003cbc <HAL_GetTick>
 8007904:	4602      	mov	r2, r0
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	1ad3      	subs	r3, r2, r3
 800790a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800790e:	d90d      	bls.n	800792c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	22ff      	movs	r2, #255	@ 0xff
 8007916:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2203      	movs	r2, #3
 800791c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2200      	movs	r2, #0
 8007924:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8007928:	2303      	movs	r3, #3
 800792a:	e045      	b.n	80079b8 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	68db      	ldr	r3, [r3, #12]
 8007932:	f003 0304 	and.w	r3, r3, #4
 8007936:	2b00      	cmp	r3, #0
 8007938:	d0e2      	beq.n	8007900 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	68ba      	ldr	r2, [r7, #8]
 8007940:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	689a      	ldr	r2, [r3, #8]
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f022 0207 	bic.w	r2, r2, #7
 8007950:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	6899      	ldr	r1, [r3, #8]
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	687a      	ldr	r2, [r7, #4]
 800795e:	430a      	orrs	r2, r1
 8007960:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8007962:	4b17      	ldr	r3, [pc, #92]	@ (80079c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007964:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007968:	4a15      	ldr	r2, [pc, #84]	@ (80079c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800796a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800796e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8007972:	4b13      	ldr	r3, [pc, #76]	@ (80079c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a12      	ldr	r2, [pc, #72]	@ (80079c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007978:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800797c:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	689a      	ldr	r2, [r3, #8]
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800798c:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	689a      	ldr	r2, [r3, #8]
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800799c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	22ff      	movs	r2, #255	@ 0xff
 80079a4:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2201      	movs	r2, #1
 80079aa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2200      	movs	r2, #0
 80079b2:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80079b6:	2300      	movs	r3, #0
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3718      	adds	r7, #24
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}
 80079c0:	58000800 	.word	0x58000800

080079c4 <LL_RCC_GetUSARTClockSource>:
{
 80079c4:	b480      	push	{r7}
 80079c6:	b083      	sub	sp, #12
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80079cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80079d0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	4013      	ands	r3, r2
}
 80079d8:	4618      	mov	r0, r3
 80079da:	370c      	adds	r7, #12
 80079dc:	46bd      	mov	sp, r7
 80079de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e2:	4770      	bx	lr

080079e4 <LL_RCC_GetLPUARTClockSource>:
{
 80079e4:	b480      	push	{r7}
 80079e6:	b083      	sub	sp, #12
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80079ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80079f0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	4013      	ands	r3, r2
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	370c      	adds	r7, #12
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr

08007a04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b082      	sub	sp, #8
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d101      	bne.n	8007a16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007a12:	2301      	movs	r3, #1
 8007a14:	e042      	b.n	8007a9c <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d106      	bne.n	8007a2e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2200      	movs	r2, #0
 8007a24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f7fb ffd5 	bl	80039d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2224      	movs	r2, #36	@ 0x24
 8007a32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	681a      	ldr	r2, [r3, #0]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f022 0201 	bic.w	r2, r2, #1
 8007a44:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d002      	beq.n	8007a54 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f000 fe32 	bl	80086b8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f000 fc07 	bl	8008268 <UART_SetConfig>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	2b01      	cmp	r3, #1
 8007a5e:	d101      	bne.n	8007a64 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007a60:	2301      	movs	r3, #1
 8007a62:	e01b      	b.n	8007a9c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	685a      	ldr	r2, [r3, #4]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007a72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	689a      	ldr	r2, [r3, #8]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007a82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	681a      	ldr	r2, [r3, #0]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f042 0201 	orr.w	r2, r2, #1
 8007a92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f000 feb1 	bl	80087fc <UART_CheckIdleState>
 8007a9a:	4603      	mov	r3, r0
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3708      	adds	r7, #8
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}

08007aa4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b08a      	sub	sp, #40	@ 0x28
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	60f8      	str	r0, [r7, #12]
 8007aac:	60b9      	str	r1, [r7, #8]
 8007aae:	4613      	mov	r3, r2
 8007ab0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ab8:	2b20      	cmp	r3, #32
 8007aba:	d167      	bne.n	8007b8c <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d002      	beq.n	8007ac8 <HAL_UART_Transmit_DMA+0x24>
 8007ac2:	88fb      	ldrh	r3, [r7, #6]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d101      	bne.n	8007acc <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007ac8:	2301      	movs	r3, #1
 8007aca:	e060      	b.n	8007b8e <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	68ba      	ldr	r2, [r7, #8]
 8007ad0:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	88fa      	ldrh	r2, [r7, #6]
 8007ad6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	88fa      	ldrh	r2, [r7, #6]
 8007ade:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2221      	movs	r2, #33	@ 0x21
 8007aee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d028      	beq.n	8007b4c <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007afe:	4a26      	ldr	r2, [pc, #152]	@ (8007b98 <HAL_UART_Transmit_DMA+0xf4>)
 8007b00:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007b06:	4a25      	ldr	r2, [pc, #148]	@ (8007b9c <HAL_UART_Transmit_DMA+0xf8>)
 8007b08:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007b0e:	4a24      	ldr	r2, [pc, #144]	@ (8007ba0 <HAL_UART_Transmit_DMA+0xfc>)
 8007b10:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007b16:	2200      	movs	r2, #0
 8007b18:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b22:	4619      	mov	r1, r3
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	3328      	adds	r3, #40	@ 0x28
 8007b2a:	461a      	mov	r2, r3
 8007b2c:	88fb      	ldrh	r3, [r7, #6]
 8007b2e:	f7fc fb37 	bl	80041a0 <HAL_DMA_Start_IT>
 8007b32:	4603      	mov	r3, r0
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d009      	beq.n	8007b4c <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	2210      	movs	r2, #16
 8007b3c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	2220      	movs	r2, #32
 8007b44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8007b48:	2301      	movs	r3, #1
 8007b4a:	e020      	b.n	8007b8e <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	2240      	movs	r2, #64	@ 0x40
 8007b52:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	3308      	adds	r3, #8
 8007b5a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	e853 3f00 	ldrex	r3, [r3]
 8007b62:	613b      	str	r3, [r7, #16]
   return(result);
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	3308      	adds	r3, #8
 8007b72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b74:	623a      	str	r2, [r7, #32]
 8007b76:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b78:	69f9      	ldr	r1, [r7, #28]
 8007b7a:	6a3a      	ldr	r2, [r7, #32]
 8007b7c:	e841 2300 	strex	r3, r2, [r1]
 8007b80:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b82:	69bb      	ldr	r3, [r7, #24]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d1e5      	bne.n	8007b54 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	e000      	b.n	8007b8e <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8007b8c:	2302      	movs	r3, #2
  }
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3728      	adds	r7, #40	@ 0x28
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}
 8007b96:	bf00      	nop
 8007b98:	08008b79 	.word	0x08008b79
 8007b9c:	08008c13 	.word	0x08008c13
 8007ba0:	08008c2f 	.word	0x08008c2f

08007ba4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b0ba      	sub	sp, #232	@ 0xe8
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	69db      	ldr	r3, [r3, #28]
 8007bb2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	689b      	ldr	r3, [r3, #8]
 8007bc6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007bca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007bce:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007bd2:	4013      	ands	r3, r2
 8007bd4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007bd8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d11b      	bne.n	8007c18 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007be0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007be4:	f003 0320 	and.w	r3, r3, #32
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d015      	beq.n	8007c18 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007bec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007bf0:	f003 0320 	and.w	r3, r3, #32
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d105      	bne.n	8007c04 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007bf8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007bfc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d009      	beq.n	8007c18 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	f000 8300 	beq.w	800820e <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	4798      	blx	r3
      }
      return;
 8007c16:	e2fa      	b.n	800820e <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007c18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	f000 8123 	beq.w	8007e68 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007c22:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007c26:	4b8d      	ldr	r3, [pc, #564]	@ (8007e5c <HAL_UART_IRQHandler+0x2b8>)
 8007c28:	4013      	ands	r3, r2
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d106      	bne.n	8007c3c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007c2e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007c32:	4b8b      	ldr	r3, [pc, #556]	@ (8007e60 <HAL_UART_IRQHandler+0x2bc>)
 8007c34:	4013      	ands	r3, r2
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	f000 8116 	beq.w	8007e68 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007c3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c40:	f003 0301 	and.w	r3, r3, #1
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d011      	beq.n	8007c6c <HAL_UART_IRQHandler+0xc8>
 8007c48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d00b      	beq.n	8007c6c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	2201      	movs	r2, #1
 8007c5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c62:	f043 0201 	orr.w	r2, r3, #1
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007c6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c70:	f003 0302 	and.w	r3, r3, #2
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d011      	beq.n	8007c9c <HAL_UART_IRQHandler+0xf8>
 8007c78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c7c:	f003 0301 	and.w	r3, r3, #1
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d00b      	beq.n	8007c9c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	2202      	movs	r2, #2
 8007c8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c92:	f043 0204 	orr.w	r2, r3, #4
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007c9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ca0:	f003 0304 	and.w	r3, r3, #4
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d011      	beq.n	8007ccc <HAL_UART_IRQHandler+0x128>
 8007ca8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007cac:	f003 0301 	and.w	r3, r3, #1
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d00b      	beq.n	8007ccc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	2204      	movs	r2, #4
 8007cba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cc2:	f043 0202 	orr.w	r2, r3, #2
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007ccc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007cd0:	f003 0308 	and.w	r3, r3, #8
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d017      	beq.n	8007d08 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007cd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007cdc:	f003 0320 	and.w	r3, r3, #32
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d105      	bne.n	8007cf0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007ce4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007ce8:	4b5c      	ldr	r3, [pc, #368]	@ (8007e5c <HAL_UART_IRQHandler+0x2b8>)
 8007cea:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d00b      	beq.n	8007d08 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	2208      	movs	r2, #8
 8007cf6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cfe:	f043 0208 	orr.w	r2, r3, #8
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007d08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d012      	beq.n	8007d3a <HAL_UART_IRQHandler+0x196>
 8007d14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d18:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d00c      	beq.n	8007d3a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007d28:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d30:	f043 0220 	orr.w	r2, r3, #32
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	f000 8266 	beq.w	8008212 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007d46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d4a:	f003 0320 	and.w	r3, r3, #32
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d013      	beq.n	8007d7a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007d52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d56:	f003 0320 	and.w	r3, r3, #32
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d105      	bne.n	8007d6a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007d5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d007      	beq.n	8007d7a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d003      	beq.n	8007d7a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d80:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	689b      	ldr	r3, [r3, #8]
 8007d8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d8e:	2b40      	cmp	r3, #64	@ 0x40
 8007d90:	d005      	beq.n	8007d9e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007d92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007d96:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d054      	beq.n	8007e48 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f000 fe84 	bl	8008aac <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	689b      	ldr	r3, [r3, #8]
 8007daa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dae:	2b40      	cmp	r3, #64	@ 0x40
 8007db0:	d146      	bne.n	8007e40 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	3308      	adds	r3, #8
 8007db8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007dc0:	e853 3f00 	ldrex	r3, [r3]
 8007dc4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007dc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007dcc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007dd0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	3308      	adds	r3, #8
 8007dda:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007dde:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007de2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007de6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007dea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007dee:	e841 2300 	strex	r3, r2, [r1]
 8007df2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007df6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d1d9      	bne.n	8007db2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d017      	beq.n	8007e38 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e0e:	4a15      	ldr	r2, [pc, #84]	@ (8007e64 <HAL_UART_IRQHandler+0x2c0>)
 8007e10:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f7fc fa9b 	bl	8004354 <HAL_DMA_Abort_IT>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d019      	beq.n	8007e58 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e2c:	687a      	ldr	r2, [r7, #4]
 8007e2e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007e32:	4610      	mov	r0, r2
 8007e34:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e36:	e00f      	b.n	8007e58 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f000 f9ff 	bl	800823c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e3e:	e00b      	b.n	8007e58 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f000 f9fb 	bl	800823c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e46:	e007      	b.n	8007e58 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f000 f9f7 	bl	800823c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2200      	movs	r2, #0
 8007e52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007e56:	e1dc      	b.n	8008212 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e58:	bf00      	nop
    return;
 8007e5a:	e1da      	b.n	8008212 <HAL_UART_IRQHandler+0x66e>
 8007e5c:	10000001 	.word	0x10000001
 8007e60:	04000120 	.word	0x04000120
 8007e64:	08008caf 	.word	0x08008caf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	f040 8170 	bne.w	8008152 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007e72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e76:	f003 0310 	and.w	r3, r3, #16
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	f000 8169 	beq.w	8008152 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007e80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e84:	f003 0310 	and.w	r3, r3, #16
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	f000 8162 	beq.w	8008152 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	2210      	movs	r2, #16
 8007e94:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	689b      	ldr	r3, [r3, #8]
 8007e9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ea0:	2b40      	cmp	r3, #64	@ 0x40
 8007ea2:	f040 80d8 	bne.w	8008056 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007eb4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	f000 80af 	beq.w	800801c <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007ec4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007ec8:	429a      	cmp	r2, r3
 8007eca:	f080 80a7 	bcs.w	800801c <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007ed4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f003 0320 	and.w	r3, r3, #32
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	f040 8087 	bne.w	8007ffa <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ef4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007ef8:	e853 3f00 	ldrex	r3, [r3]
 8007efc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007f00:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007f04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007f08:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	461a      	mov	r2, r3
 8007f12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007f16:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007f1a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f1e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007f22:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007f26:	e841 2300 	strex	r3, r2, [r1]
 8007f2a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007f2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d1da      	bne.n	8007eec <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	3308      	adds	r3, #8
 8007f3c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007f40:	e853 3f00 	ldrex	r3, [r3]
 8007f44:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007f46:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007f48:	f023 0301 	bic.w	r3, r3, #1
 8007f4c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	3308      	adds	r3, #8
 8007f56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007f5a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007f5e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f60:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007f62:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007f66:	e841 2300 	strex	r3, r2, [r1]
 8007f6a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007f6c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d1e1      	bne.n	8007f36 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	3308      	adds	r3, #8
 8007f78:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f7a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007f7c:	e853 3f00 	ldrex	r3, [r3]
 8007f80:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007f82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007f84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f88:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	3308      	adds	r3, #8
 8007f92:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007f96:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007f98:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f9a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007f9c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007f9e:	e841 2300 	strex	r3, r2, [r1]
 8007fa2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007fa4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d1e3      	bne.n	8007f72 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2220      	movs	r2, #32
 8007fae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fbe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007fc0:	e853 3f00 	ldrex	r3, [r3]
 8007fc4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007fc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007fc8:	f023 0310 	bic.w	r3, r3, #16
 8007fcc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	461a      	mov	r2, r3
 8007fd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007fda:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007fdc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fde:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007fe0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007fe2:	e841 2300 	strex	r3, r2, [r1]
 8007fe6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007fe8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d1e4      	bne.n	8007fb8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f7fc f94e 	bl	8004296 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2202      	movs	r2, #2
 8007ffe:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800800c:	b29b      	uxth	r3, r3
 800800e:	1ad3      	subs	r3, r2, r3
 8008010:	b29b      	uxth	r3, r3
 8008012:	4619      	mov	r1, r3
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f000 f91b 	bl	8008250 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800801a:	e0fc      	b.n	8008216 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008022:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008026:	429a      	cmp	r2, r3
 8008028:	f040 80f5 	bne.w	8008216 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f003 0320 	and.w	r3, r3, #32
 800803a:	2b20      	cmp	r3, #32
 800803c:	f040 80eb 	bne.w	8008216 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2202      	movs	r2, #2
 8008044:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800804c:	4619      	mov	r1, r3
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f000 f8fe 	bl	8008250 <HAL_UARTEx_RxEventCallback>
      return;
 8008054:	e0df      	b.n	8008216 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008062:	b29b      	uxth	r3, r3
 8008064:	1ad3      	subs	r3, r2, r3
 8008066:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008070:	b29b      	uxth	r3, r3
 8008072:	2b00      	cmp	r3, #0
 8008074:	f000 80d1 	beq.w	800821a <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8008078:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800807c:	2b00      	cmp	r3, #0
 800807e:	f000 80cc 	beq.w	800821a <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800808a:	e853 3f00 	ldrex	r3, [r3]
 800808e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008090:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008092:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008096:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	461a      	mov	r2, r3
 80080a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80080a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80080a6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80080aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80080ac:	e841 2300 	strex	r3, r2, [r1]
 80080b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80080b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d1e4      	bne.n	8008082 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	3308      	adds	r3, #8
 80080be:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080c2:	e853 3f00 	ldrex	r3, [r3]
 80080c6:	623b      	str	r3, [r7, #32]
   return(result);
 80080c8:	6a3b      	ldr	r3, [r7, #32]
 80080ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80080ce:	f023 0301 	bic.w	r3, r3, #1
 80080d2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	3308      	adds	r3, #8
 80080dc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80080e0:	633a      	str	r2, [r7, #48]	@ 0x30
 80080e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080e4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80080e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080e8:	e841 2300 	strex	r3, r2, [r1]
 80080ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80080ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d1e1      	bne.n	80080b8 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2220      	movs	r2, #32
 80080f8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2200      	movs	r2, #0
 8008100:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2200      	movs	r2, #0
 8008106:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	e853 3f00 	ldrex	r3, [r3]
 8008114:	60fb      	str	r3, [r7, #12]
   return(result);
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	f023 0310 	bic.w	r3, r3, #16
 800811c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	461a      	mov	r2, r3
 8008126:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800812a:	61fb      	str	r3, [r7, #28]
 800812c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800812e:	69b9      	ldr	r1, [r7, #24]
 8008130:	69fa      	ldr	r2, [r7, #28]
 8008132:	e841 2300 	strex	r3, r2, [r1]
 8008136:	617b      	str	r3, [r7, #20]
   return(result);
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d1e4      	bne.n	8008108 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2202      	movs	r2, #2
 8008142:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008144:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008148:	4619      	mov	r1, r3
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f000 f880 	bl	8008250 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008150:	e063      	b.n	800821a <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008152:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008156:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800815a:	2b00      	cmp	r3, #0
 800815c:	d00e      	beq.n	800817c <HAL_UART_IRQHandler+0x5d8>
 800815e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008162:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008166:	2b00      	cmp	r3, #0
 8008168:	d008      	beq.n	800817c <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008172:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f000 fdd7 	bl	8008d28 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800817a:	e051      	b.n	8008220 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800817c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008180:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008184:	2b00      	cmp	r3, #0
 8008186:	d014      	beq.n	80081b2 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008188:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800818c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008190:	2b00      	cmp	r3, #0
 8008192:	d105      	bne.n	80081a0 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008194:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008198:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800819c:	2b00      	cmp	r3, #0
 800819e:	d008      	beq.n	80081b2 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d03a      	beq.n	800821e <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	4798      	blx	r3
    }
    return;
 80081b0:	e035      	b.n	800821e <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80081b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d009      	beq.n	80081d2 <HAL_UART_IRQHandler+0x62e>
 80081be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80081c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d003      	beq.n	80081d2 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 fd81 	bl	8008cd2 <UART_EndTransmit_IT>
    return;
 80081d0:	e026      	b.n	8008220 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80081d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d009      	beq.n	80081f2 <HAL_UART_IRQHandler+0x64e>
 80081de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80081e2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d003      	beq.n	80081f2 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f000 fdb0 	bl	8008d50 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80081f0:	e016      	b.n	8008220 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80081f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081f6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d010      	beq.n	8008220 <HAL_UART_IRQHandler+0x67c>
 80081fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008202:	2b00      	cmp	r3, #0
 8008204:	da0c      	bge.n	8008220 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f000 fd98 	bl	8008d3c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800820c:	e008      	b.n	8008220 <HAL_UART_IRQHandler+0x67c>
      return;
 800820e:	bf00      	nop
 8008210:	e006      	b.n	8008220 <HAL_UART_IRQHandler+0x67c>
    return;
 8008212:	bf00      	nop
 8008214:	e004      	b.n	8008220 <HAL_UART_IRQHandler+0x67c>
      return;
 8008216:	bf00      	nop
 8008218:	e002      	b.n	8008220 <HAL_UART_IRQHandler+0x67c>
      return;
 800821a:	bf00      	nop
 800821c:	e000      	b.n	8008220 <HAL_UART_IRQHandler+0x67c>
    return;
 800821e:	bf00      	nop
  }
}
 8008220:	37e8      	adds	r7, #232	@ 0xe8
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}
 8008226:	bf00      	nop

08008228 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008228:	b480      	push	{r7}
 800822a:	b083      	sub	sp, #12
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008230:	bf00      	nop
 8008232:	370c      	adds	r7, #12
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr

0800823c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800823c:	b480      	push	{r7}
 800823e:	b083      	sub	sp, #12
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008244:	bf00      	nop
 8008246:	370c      	adds	r7, #12
 8008248:	46bd      	mov	sp, r7
 800824a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824e:	4770      	bx	lr

08008250 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008250:	b480      	push	{r7}
 8008252:	b083      	sub	sp, #12
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
 8008258:	460b      	mov	r3, r1
 800825a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800825c:	bf00      	nop
 800825e:	370c      	adds	r7, #12
 8008260:	46bd      	mov	sp, r7
 8008262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008266:	4770      	bx	lr

08008268 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008268:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800826c:	b08c      	sub	sp, #48	@ 0x30
 800826e:	af00      	add	r7, sp, #0
 8008270:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008272:	2300      	movs	r3, #0
 8008274:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008278:	697b      	ldr	r3, [r7, #20]
 800827a:	689a      	ldr	r2, [r3, #8]
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	691b      	ldr	r3, [r3, #16]
 8008280:	431a      	orrs	r2, r3
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	695b      	ldr	r3, [r3, #20]
 8008286:	431a      	orrs	r2, r3
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	69db      	ldr	r3, [r3, #28]
 800828c:	4313      	orrs	r3, r2
 800828e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	681a      	ldr	r2, [r3, #0]
 8008296:	4baf      	ldr	r3, [pc, #700]	@ (8008554 <UART_SetConfig+0x2ec>)
 8008298:	4013      	ands	r3, r2
 800829a:	697a      	ldr	r2, [r7, #20]
 800829c:	6812      	ldr	r2, [r2, #0]
 800829e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80082a0:	430b      	orrs	r3, r1
 80082a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	685b      	ldr	r3, [r3, #4]
 80082aa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	68da      	ldr	r2, [r3, #12]
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	430a      	orrs	r2, r1
 80082b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	699b      	ldr	r3, [r3, #24]
 80082be:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4aa4      	ldr	r2, [pc, #656]	@ (8008558 <UART_SetConfig+0x2f0>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d004      	beq.n	80082d4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	6a1b      	ldr	r3, [r3, #32]
 80082ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80082d0:	4313      	orrs	r3, r2
 80082d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	689b      	ldr	r3, [r3, #8]
 80082da:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80082de:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80082e2:	697a      	ldr	r2, [r7, #20]
 80082e4:	6812      	ldr	r2, [r2, #0]
 80082e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80082e8:	430b      	orrs	r3, r1
 80082ea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082f2:	f023 010f 	bic.w	r1, r3, #15
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	430a      	orrs	r2, r1
 8008300:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4a95      	ldr	r2, [pc, #596]	@ (800855c <UART_SetConfig+0x2f4>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d125      	bne.n	8008358 <UART_SetConfig+0xf0>
 800830c:	2003      	movs	r0, #3
 800830e:	f7ff fb59 	bl	80079c4 <LL_RCC_GetUSARTClockSource>
 8008312:	4603      	mov	r3, r0
 8008314:	2b03      	cmp	r3, #3
 8008316:	d81b      	bhi.n	8008350 <UART_SetConfig+0xe8>
 8008318:	a201      	add	r2, pc, #4	@ (adr r2, 8008320 <UART_SetConfig+0xb8>)
 800831a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800831e:	bf00      	nop
 8008320:	08008331 	.word	0x08008331
 8008324:	08008341 	.word	0x08008341
 8008328:	08008339 	.word	0x08008339
 800832c:	08008349 	.word	0x08008349
 8008330:	2301      	movs	r3, #1
 8008332:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008336:	e042      	b.n	80083be <UART_SetConfig+0x156>
 8008338:	2302      	movs	r3, #2
 800833a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800833e:	e03e      	b.n	80083be <UART_SetConfig+0x156>
 8008340:	2304      	movs	r3, #4
 8008342:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008346:	e03a      	b.n	80083be <UART_SetConfig+0x156>
 8008348:	2308      	movs	r3, #8
 800834a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800834e:	e036      	b.n	80083be <UART_SetConfig+0x156>
 8008350:	2310      	movs	r3, #16
 8008352:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008356:	e032      	b.n	80083be <UART_SetConfig+0x156>
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4a7e      	ldr	r2, [pc, #504]	@ (8008558 <UART_SetConfig+0x2f0>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d12a      	bne.n	80083b8 <UART_SetConfig+0x150>
 8008362:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8008366:	f7ff fb3d 	bl	80079e4 <LL_RCC_GetLPUARTClockSource>
 800836a:	4603      	mov	r3, r0
 800836c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008370:	d01a      	beq.n	80083a8 <UART_SetConfig+0x140>
 8008372:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008376:	d81b      	bhi.n	80083b0 <UART_SetConfig+0x148>
 8008378:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800837c:	d00c      	beq.n	8008398 <UART_SetConfig+0x130>
 800837e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008382:	d815      	bhi.n	80083b0 <UART_SetConfig+0x148>
 8008384:	2b00      	cmp	r3, #0
 8008386:	d003      	beq.n	8008390 <UART_SetConfig+0x128>
 8008388:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800838c:	d008      	beq.n	80083a0 <UART_SetConfig+0x138>
 800838e:	e00f      	b.n	80083b0 <UART_SetConfig+0x148>
 8008390:	2300      	movs	r3, #0
 8008392:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008396:	e012      	b.n	80083be <UART_SetConfig+0x156>
 8008398:	2302      	movs	r3, #2
 800839a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800839e:	e00e      	b.n	80083be <UART_SetConfig+0x156>
 80083a0:	2304      	movs	r3, #4
 80083a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083a6:	e00a      	b.n	80083be <UART_SetConfig+0x156>
 80083a8:	2308      	movs	r3, #8
 80083aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083ae:	e006      	b.n	80083be <UART_SetConfig+0x156>
 80083b0:	2310      	movs	r3, #16
 80083b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083b6:	e002      	b.n	80083be <UART_SetConfig+0x156>
 80083b8:	2310      	movs	r3, #16
 80083ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4a65      	ldr	r2, [pc, #404]	@ (8008558 <UART_SetConfig+0x2f0>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	f040 8097 	bne.w	80084f8 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80083ca:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80083ce:	2b08      	cmp	r3, #8
 80083d0:	d823      	bhi.n	800841a <UART_SetConfig+0x1b2>
 80083d2:	a201      	add	r2, pc, #4	@ (adr r2, 80083d8 <UART_SetConfig+0x170>)
 80083d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083d8:	080083fd 	.word	0x080083fd
 80083dc:	0800841b 	.word	0x0800841b
 80083e0:	08008405 	.word	0x08008405
 80083e4:	0800841b 	.word	0x0800841b
 80083e8:	0800840b 	.word	0x0800840b
 80083ec:	0800841b 	.word	0x0800841b
 80083f0:	0800841b 	.word	0x0800841b
 80083f4:	0800841b 	.word	0x0800841b
 80083f8:	08008413 	.word	0x08008413
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80083fc:	f7fe fa90 	bl	8006920 <HAL_RCC_GetPCLK1Freq>
 8008400:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008402:	e010      	b.n	8008426 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008404:	4b56      	ldr	r3, [pc, #344]	@ (8008560 <UART_SetConfig+0x2f8>)
 8008406:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008408:	e00d      	b.n	8008426 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800840a:	f7fe fa09 	bl	8006820 <HAL_RCC_GetSysClockFreq>
 800840e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008410:	e009      	b.n	8008426 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008412:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008416:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008418:	e005      	b.n	8008426 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800841a:	2300      	movs	r3, #0
 800841c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800841e:	2301      	movs	r3, #1
 8008420:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008424:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008428:	2b00      	cmp	r3, #0
 800842a:	f000 812b 	beq.w	8008684 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008432:	4a4c      	ldr	r2, [pc, #304]	@ (8008564 <UART_SetConfig+0x2fc>)
 8008434:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008438:	461a      	mov	r2, r3
 800843a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800843c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008440:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	685a      	ldr	r2, [r3, #4]
 8008446:	4613      	mov	r3, r2
 8008448:	005b      	lsls	r3, r3, #1
 800844a:	4413      	add	r3, r2
 800844c:	69ba      	ldr	r2, [r7, #24]
 800844e:	429a      	cmp	r2, r3
 8008450:	d305      	bcc.n	800845e <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	685b      	ldr	r3, [r3, #4]
 8008456:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008458:	69ba      	ldr	r2, [r7, #24]
 800845a:	429a      	cmp	r2, r3
 800845c:	d903      	bls.n	8008466 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800845e:	2301      	movs	r3, #1
 8008460:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008464:	e10e      	b.n	8008684 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008468:	2200      	movs	r2, #0
 800846a:	60bb      	str	r3, [r7, #8]
 800846c:	60fa      	str	r2, [r7, #12]
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008472:	4a3c      	ldr	r2, [pc, #240]	@ (8008564 <UART_SetConfig+0x2fc>)
 8008474:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008478:	b29b      	uxth	r3, r3
 800847a:	2200      	movs	r2, #0
 800847c:	603b      	str	r3, [r7, #0]
 800847e:	607a      	str	r2, [r7, #4]
 8008480:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008484:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008488:	f7f8 fbd6 	bl	8000c38 <__aeabi_uldivmod>
 800848c:	4602      	mov	r2, r0
 800848e:	460b      	mov	r3, r1
 8008490:	4610      	mov	r0, r2
 8008492:	4619      	mov	r1, r3
 8008494:	f04f 0200 	mov.w	r2, #0
 8008498:	f04f 0300 	mov.w	r3, #0
 800849c:	020b      	lsls	r3, r1, #8
 800849e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80084a2:	0202      	lsls	r2, r0, #8
 80084a4:	6979      	ldr	r1, [r7, #20]
 80084a6:	6849      	ldr	r1, [r1, #4]
 80084a8:	0849      	lsrs	r1, r1, #1
 80084aa:	2000      	movs	r0, #0
 80084ac:	460c      	mov	r4, r1
 80084ae:	4605      	mov	r5, r0
 80084b0:	eb12 0804 	adds.w	r8, r2, r4
 80084b4:	eb43 0905 	adc.w	r9, r3, r5
 80084b8:	697b      	ldr	r3, [r7, #20]
 80084ba:	685b      	ldr	r3, [r3, #4]
 80084bc:	2200      	movs	r2, #0
 80084be:	469a      	mov	sl, r3
 80084c0:	4693      	mov	fp, r2
 80084c2:	4652      	mov	r2, sl
 80084c4:	465b      	mov	r3, fp
 80084c6:	4640      	mov	r0, r8
 80084c8:	4649      	mov	r1, r9
 80084ca:	f7f8 fbb5 	bl	8000c38 <__aeabi_uldivmod>
 80084ce:	4602      	mov	r2, r0
 80084d0:	460b      	mov	r3, r1
 80084d2:	4613      	mov	r3, r2
 80084d4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80084d6:	6a3b      	ldr	r3, [r7, #32]
 80084d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80084dc:	d308      	bcc.n	80084f0 <UART_SetConfig+0x288>
 80084de:	6a3b      	ldr	r3, [r7, #32]
 80084e0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80084e4:	d204      	bcs.n	80084f0 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	6a3a      	ldr	r2, [r7, #32]
 80084ec:	60da      	str	r2, [r3, #12]
 80084ee:	e0c9      	b.n	8008684 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 80084f0:	2301      	movs	r3, #1
 80084f2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80084f6:	e0c5      	b.n	8008684 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	69db      	ldr	r3, [r3, #28]
 80084fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008500:	d16d      	bne.n	80085de <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8008502:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008506:	3b01      	subs	r3, #1
 8008508:	2b07      	cmp	r3, #7
 800850a:	d82d      	bhi.n	8008568 <UART_SetConfig+0x300>
 800850c:	a201      	add	r2, pc, #4	@ (adr r2, 8008514 <UART_SetConfig+0x2ac>)
 800850e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008512:	bf00      	nop
 8008514:	08008535 	.word	0x08008535
 8008518:	0800853d 	.word	0x0800853d
 800851c:	08008569 	.word	0x08008569
 8008520:	08008543 	.word	0x08008543
 8008524:	08008569 	.word	0x08008569
 8008528:	08008569 	.word	0x08008569
 800852c:	08008569 	.word	0x08008569
 8008530:	0800854b 	.word	0x0800854b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008534:	f7fe fa0a 	bl	800694c <HAL_RCC_GetPCLK2Freq>
 8008538:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800853a:	e01b      	b.n	8008574 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800853c:	4b08      	ldr	r3, [pc, #32]	@ (8008560 <UART_SetConfig+0x2f8>)
 800853e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008540:	e018      	b.n	8008574 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008542:	f7fe f96d 	bl	8006820 <HAL_RCC_GetSysClockFreq>
 8008546:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008548:	e014      	b.n	8008574 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800854a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800854e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008550:	e010      	b.n	8008574 <UART_SetConfig+0x30c>
 8008552:	bf00      	nop
 8008554:	cfff69f3 	.word	0xcfff69f3
 8008558:	40008000 	.word	0x40008000
 800855c:	40013800 	.word	0x40013800
 8008560:	00f42400 	.word	0x00f42400
 8008564:	080137a4 	.word	0x080137a4
      default:
        pclk = 0U;
 8008568:	2300      	movs	r3, #0
 800856a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800856c:	2301      	movs	r3, #1
 800856e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008572:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008576:	2b00      	cmp	r3, #0
 8008578:	f000 8084 	beq.w	8008684 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800857c:	697b      	ldr	r3, [r7, #20]
 800857e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008580:	4a4b      	ldr	r2, [pc, #300]	@ (80086b0 <UART_SetConfig+0x448>)
 8008582:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008586:	461a      	mov	r2, r3
 8008588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800858a:	fbb3 f3f2 	udiv	r3, r3, r2
 800858e:	005a      	lsls	r2, r3, #1
 8008590:	697b      	ldr	r3, [r7, #20]
 8008592:	685b      	ldr	r3, [r3, #4]
 8008594:	085b      	lsrs	r3, r3, #1
 8008596:	441a      	add	r2, r3
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	685b      	ldr	r3, [r3, #4]
 800859c:	fbb2 f3f3 	udiv	r3, r2, r3
 80085a0:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80085a2:	6a3b      	ldr	r3, [r7, #32]
 80085a4:	2b0f      	cmp	r3, #15
 80085a6:	d916      	bls.n	80085d6 <UART_SetConfig+0x36e>
 80085a8:	6a3b      	ldr	r3, [r7, #32]
 80085aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80085ae:	d212      	bcs.n	80085d6 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80085b0:	6a3b      	ldr	r3, [r7, #32]
 80085b2:	b29b      	uxth	r3, r3
 80085b4:	f023 030f 	bic.w	r3, r3, #15
 80085b8:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80085ba:	6a3b      	ldr	r3, [r7, #32]
 80085bc:	085b      	lsrs	r3, r3, #1
 80085be:	b29b      	uxth	r3, r3
 80085c0:	f003 0307 	and.w	r3, r3, #7
 80085c4:	b29a      	uxth	r2, r3
 80085c6:	8bfb      	ldrh	r3, [r7, #30]
 80085c8:	4313      	orrs	r3, r2
 80085ca:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	8bfa      	ldrh	r2, [r7, #30]
 80085d2:	60da      	str	r2, [r3, #12]
 80085d4:	e056      	b.n	8008684 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80085d6:	2301      	movs	r3, #1
 80085d8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80085dc:	e052      	b.n	8008684 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80085de:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80085e2:	3b01      	subs	r3, #1
 80085e4:	2b07      	cmp	r3, #7
 80085e6:	d822      	bhi.n	800862e <UART_SetConfig+0x3c6>
 80085e8:	a201      	add	r2, pc, #4	@ (adr r2, 80085f0 <UART_SetConfig+0x388>)
 80085ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085ee:	bf00      	nop
 80085f0:	08008611 	.word	0x08008611
 80085f4:	08008619 	.word	0x08008619
 80085f8:	0800862f 	.word	0x0800862f
 80085fc:	0800861f 	.word	0x0800861f
 8008600:	0800862f 	.word	0x0800862f
 8008604:	0800862f 	.word	0x0800862f
 8008608:	0800862f 	.word	0x0800862f
 800860c:	08008627 	.word	0x08008627
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008610:	f7fe f99c 	bl	800694c <HAL_RCC_GetPCLK2Freq>
 8008614:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008616:	e010      	b.n	800863a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008618:	4b26      	ldr	r3, [pc, #152]	@ (80086b4 <UART_SetConfig+0x44c>)
 800861a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800861c:	e00d      	b.n	800863a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800861e:	f7fe f8ff 	bl	8006820 <HAL_RCC_GetSysClockFreq>
 8008622:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008624:	e009      	b.n	800863a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008626:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800862a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800862c:	e005      	b.n	800863a <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800862e:	2300      	movs	r3, #0
 8008630:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008632:	2301      	movs	r3, #1
 8008634:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008638:	bf00      	nop
    }

    if (pclk != 0U)
 800863a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800863c:	2b00      	cmp	r3, #0
 800863e:	d021      	beq.n	8008684 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008644:	4a1a      	ldr	r2, [pc, #104]	@ (80086b0 <UART_SetConfig+0x448>)
 8008646:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800864a:	461a      	mov	r2, r3
 800864c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800864e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	085b      	lsrs	r3, r3, #1
 8008658:	441a      	add	r2, r3
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008662:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008664:	6a3b      	ldr	r3, [r7, #32]
 8008666:	2b0f      	cmp	r3, #15
 8008668:	d909      	bls.n	800867e <UART_SetConfig+0x416>
 800866a:	6a3b      	ldr	r3, [r7, #32]
 800866c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008670:	d205      	bcs.n	800867e <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008672:	6a3b      	ldr	r3, [r7, #32]
 8008674:	b29a      	uxth	r2, r3
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	60da      	str	r2, [r3, #12]
 800867c:	e002      	b.n	8008684 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800867e:	2301      	movs	r3, #1
 8008680:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	2201      	movs	r2, #1
 8008688:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	2201      	movs	r2, #1
 8008690:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	2200      	movs	r2, #0
 8008698:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	2200      	movs	r2, #0
 800869e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80086a0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3730      	adds	r7, #48	@ 0x30
 80086a8:	46bd      	mov	sp, r7
 80086aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80086ae:	bf00      	nop
 80086b0:	080137a4 	.word	0x080137a4
 80086b4:	00f42400 	.word	0x00f42400

080086b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80086b8:	b480      	push	{r7}
 80086ba:	b083      	sub	sp, #12
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086c4:	f003 0308 	and.w	r3, r3, #8
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d00a      	beq.n	80086e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	685b      	ldr	r3, [r3, #4]
 80086d2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	430a      	orrs	r2, r1
 80086e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086e6:	f003 0301 	and.w	r3, r3, #1
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d00a      	beq.n	8008704 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	685b      	ldr	r3, [r3, #4]
 80086f4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	430a      	orrs	r2, r1
 8008702:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008708:	f003 0302 	and.w	r3, r3, #2
 800870c:	2b00      	cmp	r3, #0
 800870e:	d00a      	beq.n	8008726 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	685b      	ldr	r3, [r3, #4]
 8008716:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	430a      	orrs	r2, r1
 8008724:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800872a:	f003 0304 	and.w	r3, r3, #4
 800872e:	2b00      	cmp	r3, #0
 8008730:	d00a      	beq.n	8008748 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	430a      	orrs	r2, r1
 8008746:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800874c:	f003 0310 	and.w	r3, r3, #16
 8008750:	2b00      	cmp	r3, #0
 8008752:	d00a      	beq.n	800876a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	689b      	ldr	r3, [r3, #8]
 800875a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	430a      	orrs	r2, r1
 8008768:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800876e:	f003 0320 	and.w	r3, r3, #32
 8008772:	2b00      	cmp	r3, #0
 8008774:	d00a      	beq.n	800878c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	689b      	ldr	r3, [r3, #8]
 800877c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	430a      	orrs	r2, r1
 800878a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008790:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008794:	2b00      	cmp	r3, #0
 8008796:	d01a      	beq.n	80087ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	685b      	ldr	r3, [r3, #4]
 800879e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	430a      	orrs	r2, r1
 80087ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80087b6:	d10a      	bne.n	80087ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	685b      	ldr	r3, [r3, #4]
 80087be:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	430a      	orrs	r2, r1
 80087cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d00a      	beq.n	80087f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	685b      	ldr	r3, [r3, #4]
 80087e0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	430a      	orrs	r2, r1
 80087ee:	605a      	str	r2, [r3, #4]
  }
}
 80087f0:	bf00      	nop
 80087f2:	370c      	adds	r7, #12
 80087f4:	46bd      	mov	sp, r7
 80087f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fa:	4770      	bx	lr

080087fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b098      	sub	sp, #96	@ 0x60
 8008800:	af02      	add	r7, sp, #8
 8008802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2200      	movs	r2, #0
 8008808:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800880c:	f7fb fa56 	bl	8003cbc <HAL_GetTick>
 8008810:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f003 0308 	and.w	r3, r3, #8
 800881c:	2b08      	cmp	r3, #8
 800881e:	d12f      	bne.n	8008880 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008820:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008824:	9300      	str	r3, [sp, #0]
 8008826:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008828:	2200      	movs	r2, #0
 800882a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f000 f88e 	bl	8008950 <UART_WaitOnFlagUntilTimeout>
 8008834:	4603      	mov	r3, r0
 8008836:	2b00      	cmp	r3, #0
 8008838:	d022      	beq.n	8008880 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008842:	e853 3f00 	ldrex	r3, [r3]
 8008846:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008848:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800884a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800884e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	461a      	mov	r2, r3
 8008856:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008858:	647b      	str	r3, [r7, #68]	@ 0x44
 800885a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800885c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800885e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008860:	e841 2300 	strex	r3, r2, [r1]
 8008864:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008866:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008868:	2b00      	cmp	r3, #0
 800886a:	d1e6      	bne.n	800883a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2220      	movs	r2, #32
 8008870:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2200      	movs	r2, #0
 8008878:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800887c:	2303      	movs	r3, #3
 800887e:	e063      	b.n	8008948 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f003 0304 	and.w	r3, r3, #4
 800888a:	2b04      	cmp	r3, #4
 800888c:	d149      	bne.n	8008922 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800888e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008892:	9300      	str	r3, [sp, #0]
 8008894:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008896:	2200      	movs	r2, #0
 8008898:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f000 f857 	bl	8008950 <UART_WaitOnFlagUntilTimeout>
 80088a2:	4603      	mov	r3, r0
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d03c      	beq.n	8008922 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088b0:	e853 3f00 	ldrex	r3, [r3]
 80088b4:	623b      	str	r3, [r7, #32]
   return(result);
 80088b6:	6a3b      	ldr	r3, [r7, #32]
 80088b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80088bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	461a      	mov	r2, r3
 80088c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088c6:	633b      	str	r3, [r7, #48]	@ 0x30
 80088c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80088cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80088ce:	e841 2300 	strex	r3, r2, [r1]
 80088d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80088d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d1e6      	bne.n	80088a8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	3308      	adds	r3, #8
 80088e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088e2:	693b      	ldr	r3, [r7, #16]
 80088e4:	e853 3f00 	ldrex	r3, [r3]
 80088e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	f023 0301 	bic.w	r3, r3, #1
 80088f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	3308      	adds	r3, #8
 80088f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80088fa:	61fa      	str	r2, [r7, #28]
 80088fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088fe:	69b9      	ldr	r1, [r7, #24]
 8008900:	69fa      	ldr	r2, [r7, #28]
 8008902:	e841 2300 	strex	r3, r2, [r1]
 8008906:	617b      	str	r3, [r7, #20]
   return(result);
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d1e5      	bne.n	80088da <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2220      	movs	r2, #32
 8008912:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2200      	movs	r2, #0
 800891a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800891e:	2303      	movs	r3, #3
 8008920:	e012      	b.n	8008948 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2220      	movs	r2, #32
 8008926:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2220      	movs	r2, #32
 800892e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2200      	movs	r2, #0
 8008936:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2200      	movs	r2, #0
 800893c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2200      	movs	r2, #0
 8008942:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008946:	2300      	movs	r3, #0
}
 8008948:	4618      	mov	r0, r3
 800894a:	3758      	adds	r7, #88	@ 0x58
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}

08008950 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b084      	sub	sp, #16
 8008954:	af00      	add	r7, sp, #0
 8008956:	60f8      	str	r0, [r7, #12]
 8008958:	60b9      	str	r1, [r7, #8]
 800895a:	603b      	str	r3, [r7, #0]
 800895c:	4613      	mov	r3, r2
 800895e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008960:	e04f      	b.n	8008a02 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008962:	69bb      	ldr	r3, [r7, #24]
 8008964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008968:	d04b      	beq.n	8008a02 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800896a:	f7fb f9a7 	bl	8003cbc <HAL_GetTick>
 800896e:	4602      	mov	r2, r0
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	1ad3      	subs	r3, r2, r3
 8008974:	69ba      	ldr	r2, [r7, #24]
 8008976:	429a      	cmp	r2, r3
 8008978:	d302      	bcc.n	8008980 <UART_WaitOnFlagUntilTimeout+0x30>
 800897a:	69bb      	ldr	r3, [r7, #24]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d101      	bne.n	8008984 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008980:	2303      	movs	r3, #3
 8008982:	e04e      	b.n	8008a22 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f003 0304 	and.w	r3, r3, #4
 800898e:	2b00      	cmp	r3, #0
 8008990:	d037      	beq.n	8008a02 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	2b80      	cmp	r3, #128	@ 0x80
 8008996:	d034      	beq.n	8008a02 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	2b40      	cmp	r3, #64	@ 0x40
 800899c:	d031      	beq.n	8008a02 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	69db      	ldr	r3, [r3, #28]
 80089a4:	f003 0308 	and.w	r3, r3, #8
 80089a8:	2b08      	cmp	r3, #8
 80089aa:	d110      	bne.n	80089ce <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	2208      	movs	r2, #8
 80089b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80089b4:	68f8      	ldr	r0, [r7, #12]
 80089b6:	f000 f879 	bl	8008aac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	2208      	movs	r2, #8
 80089be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	2200      	movs	r2, #0
 80089c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80089ca:	2301      	movs	r3, #1
 80089cc:	e029      	b.n	8008a22 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	69db      	ldr	r3, [r3, #28]
 80089d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80089d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80089dc:	d111      	bne.n	8008a02 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80089e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80089e8:	68f8      	ldr	r0, [r7, #12]
 80089ea:	f000 f85f 	bl	8008aac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2220      	movs	r2, #32
 80089f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	2200      	movs	r2, #0
 80089fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80089fe:	2303      	movs	r3, #3
 8008a00:	e00f      	b.n	8008a22 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	69da      	ldr	r2, [r3, #28]
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	4013      	ands	r3, r2
 8008a0c:	68ba      	ldr	r2, [r7, #8]
 8008a0e:	429a      	cmp	r2, r3
 8008a10:	bf0c      	ite	eq
 8008a12:	2301      	moveq	r3, #1
 8008a14:	2300      	movne	r3, #0
 8008a16:	b2db      	uxtb	r3, r3
 8008a18:	461a      	mov	r2, r3
 8008a1a:	79fb      	ldrb	r3, [r7, #7]
 8008a1c:	429a      	cmp	r2, r3
 8008a1e:	d0a0      	beq.n	8008962 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008a20:	2300      	movs	r3, #0
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3710      	adds	r7, #16
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}

08008a2a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008a2a:	b480      	push	{r7}
 8008a2c:	b08f      	sub	sp, #60	@ 0x3c
 8008a2e:	af00      	add	r7, sp, #0
 8008a30:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a38:	6a3b      	ldr	r3, [r7, #32]
 8008a3a:	e853 3f00 	ldrex	r3, [r3]
 8008a3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a40:	69fb      	ldr	r3, [r7, #28]
 8008a42:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008a46:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	461a      	mov	r2, r3
 8008a4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008a52:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a54:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008a56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a58:	e841 2300 	strex	r3, r2, [r1]
 8008a5c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d1e6      	bne.n	8008a32 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	3308      	adds	r3, #8
 8008a6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	e853 3f00 	ldrex	r3, [r3]
 8008a72:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008a7a:	633b      	str	r3, [r7, #48]	@ 0x30
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	3308      	adds	r3, #8
 8008a82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a84:	61ba      	str	r2, [r7, #24]
 8008a86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a88:	6979      	ldr	r1, [r7, #20]
 8008a8a:	69ba      	ldr	r2, [r7, #24]
 8008a8c:	e841 2300 	strex	r3, r2, [r1]
 8008a90:	613b      	str	r3, [r7, #16]
   return(result);
 8008a92:	693b      	ldr	r3, [r7, #16]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d1e5      	bne.n	8008a64 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2220      	movs	r2, #32
 8008a9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8008aa0:	bf00      	nop
 8008aa2:	373c      	adds	r7, #60	@ 0x3c
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aaa:	4770      	bx	lr

08008aac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008aac:	b480      	push	{r7}
 8008aae:	b095      	sub	sp, #84	@ 0x54
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008abc:	e853 3f00 	ldrex	r3, [r3]
 8008ac0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ac4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008ac8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	461a      	mov	r2, r3
 8008ad0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ad2:	643b      	str	r3, [r7, #64]	@ 0x40
 8008ad4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ad6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008ad8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008ada:	e841 2300 	strex	r3, r2, [r1]
 8008ade:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008ae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d1e6      	bne.n	8008ab4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	3308      	adds	r3, #8
 8008aec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aee:	6a3b      	ldr	r3, [r7, #32]
 8008af0:	e853 3f00 	ldrex	r3, [r3]
 8008af4:	61fb      	str	r3, [r7, #28]
   return(result);
 8008af6:	69fb      	ldr	r3, [r7, #28]
 8008af8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008afc:	f023 0301 	bic.w	r3, r3, #1
 8008b00:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	3308      	adds	r3, #8
 8008b08:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008b0a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b0e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008b10:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b12:	e841 2300 	strex	r3, r2, [r1]
 8008b16:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d1e3      	bne.n	8008ae6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b22:	2b01      	cmp	r3, #1
 8008b24:	d118      	bne.n	8008b58 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	e853 3f00 	ldrex	r3, [r3]
 8008b32:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	f023 0310 	bic.w	r3, r3, #16
 8008b3a:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	461a      	mov	r2, r3
 8008b42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b44:	61bb      	str	r3, [r7, #24]
 8008b46:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b48:	6979      	ldr	r1, [r7, #20]
 8008b4a:	69ba      	ldr	r2, [r7, #24]
 8008b4c:	e841 2300 	strex	r3, r2, [r1]
 8008b50:	613b      	str	r3, [r7, #16]
   return(result);
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d1e6      	bne.n	8008b26 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2220      	movs	r2, #32
 8008b5c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2200      	movs	r2, #0
 8008b64:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008b6c:	bf00      	nop
 8008b6e:	3754      	adds	r7, #84	@ 0x54
 8008b70:	46bd      	mov	sp, r7
 8008b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b76:	4770      	bx	lr

08008b78 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b090      	sub	sp, #64	@ 0x40
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b84:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f003 0320 	and.w	r3, r3, #32
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d137      	bne.n	8008c04 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8008b94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b96:	2200      	movs	r2, #0
 8008b98:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008b9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	3308      	adds	r3, #8
 8008ba2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ba6:	e853 3f00 	ldrex	r3, [r3]
 8008baa:	623b      	str	r3, [r7, #32]
   return(result);
 8008bac:	6a3b      	ldr	r3, [r7, #32]
 8008bae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008bb2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008bb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	3308      	adds	r3, #8
 8008bba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008bbc:	633a      	str	r2, [r7, #48]	@ 0x30
 8008bbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bc0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008bc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008bc4:	e841 2300 	strex	r3, r2, [r1]
 8008bc8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008bca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d1e5      	bne.n	8008b9c <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008bd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	e853 3f00 	ldrex	r3, [r3]
 8008bdc:	60fb      	str	r3, [r7, #12]
   return(result);
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008be4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008be6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	461a      	mov	r2, r3
 8008bec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bee:	61fb      	str	r3, [r7, #28]
 8008bf0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bf2:	69b9      	ldr	r1, [r7, #24]
 8008bf4:	69fa      	ldr	r2, [r7, #28]
 8008bf6:	e841 2300 	strex	r3, r2, [r1]
 8008bfa:	617b      	str	r3, [r7, #20]
   return(result);
 8008bfc:	697b      	ldr	r3, [r7, #20]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d1e6      	bne.n	8008bd0 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008c02:	e002      	b.n	8008c0a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008c04:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8008c06:	f7fa fa0d 	bl	8003024 <HAL_UART_TxCpltCallback>
}
 8008c0a:	bf00      	nop
 8008c0c:	3740      	adds	r7, #64	@ 0x40
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}

08008c12 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008c12:	b580      	push	{r7, lr}
 8008c14:	b084      	sub	sp, #16
 8008c16:	af00      	add	r7, sp, #0
 8008c18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c1e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008c20:	68f8      	ldr	r0, [r7, #12]
 8008c22:	f7ff fb01 	bl	8008228 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c26:	bf00      	nop
 8008c28:	3710      	adds	r7, #16
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}

08008c2e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008c2e:	b580      	push	{r7, lr}
 8008c30:	b086      	sub	sp, #24
 8008c32:	af00      	add	r7, sp, #0
 8008c34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c3a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008c3c:	697b      	ldr	r3, [r7, #20]
 8008c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c42:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008c44:	697b      	ldr	r3, [r7, #20]
 8008c46:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008c4a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	689b      	ldr	r3, [r3, #8]
 8008c52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c56:	2b80      	cmp	r3, #128	@ 0x80
 8008c58:	d109      	bne.n	8008c6e <UART_DMAError+0x40>
 8008c5a:	693b      	ldr	r3, [r7, #16]
 8008c5c:	2b21      	cmp	r3, #33	@ 0x21
 8008c5e:	d106      	bne.n	8008c6e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008c60:	697b      	ldr	r3, [r7, #20]
 8008c62:	2200      	movs	r2, #0
 8008c64:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8008c68:	6978      	ldr	r0, [r7, #20]
 8008c6a:	f7ff fede 	bl	8008a2a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008c6e:	697b      	ldr	r3, [r7, #20]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	689b      	ldr	r3, [r3, #8]
 8008c74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c78:	2b40      	cmp	r3, #64	@ 0x40
 8008c7a:	d109      	bne.n	8008c90 <UART_DMAError+0x62>
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	2b22      	cmp	r3, #34	@ 0x22
 8008c80:	d106      	bne.n	8008c90 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	2200      	movs	r2, #0
 8008c86:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8008c8a:	6978      	ldr	r0, [r7, #20]
 8008c8c:	f7ff ff0e 	bl	8008aac <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c96:	f043 0210 	orr.w	r2, r3, #16
 8008c9a:	697b      	ldr	r3, [r7, #20]
 8008c9c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008ca0:	6978      	ldr	r0, [r7, #20]
 8008ca2:	f7ff facb 	bl	800823c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ca6:	bf00      	nop
 8008ca8:	3718      	adds	r7, #24
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}

08008cae <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008cae:	b580      	push	{r7, lr}
 8008cb0:	b084      	sub	sp, #16
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008cc4:	68f8      	ldr	r0, [r7, #12]
 8008cc6:	f7ff fab9 	bl	800823c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008cca:	bf00      	nop
 8008ccc:	3710      	adds	r7, #16
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}

08008cd2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008cd2:	b580      	push	{r7, lr}
 8008cd4:	b088      	sub	sp, #32
 8008cd6:	af00      	add	r7, sp, #0
 8008cd8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	e853 3f00 	ldrex	r3, [r3]
 8008ce6:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008cee:	61fb      	str	r3, [r7, #28]
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	461a      	mov	r2, r3
 8008cf6:	69fb      	ldr	r3, [r7, #28]
 8008cf8:	61bb      	str	r3, [r7, #24]
 8008cfa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cfc:	6979      	ldr	r1, [r7, #20]
 8008cfe:	69ba      	ldr	r2, [r7, #24]
 8008d00:	e841 2300 	strex	r3, r2, [r1]
 8008d04:	613b      	str	r3, [r7, #16]
   return(result);
 8008d06:	693b      	ldr	r3, [r7, #16]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d1e6      	bne.n	8008cda <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2220      	movs	r2, #32
 8008d10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2200      	movs	r2, #0
 8008d18:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f7fa f982 	bl	8003024 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d20:	bf00      	nop
 8008d22:	3720      	adds	r7, #32
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}

08008d28 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b083      	sub	sp, #12
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008d30:	bf00      	nop
 8008d32:	370c      	adds	r7, #12
 8008d34:	46bd      	mov	sp, r7
 8008d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3a:	4770      	bx	lr

08008d3c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b083      	sub	sp, #12
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008d44:	bf00      	nop
 8008d46:	370c      	adds	r7, #12
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4e:	4770      	bx	lr

08008d50 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008d50:	b480      	push	{r7}
 8008d52:	b083      	sub	sp, #12
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008d58:	bf00      	nop
 8008d5a:	370c      	adds	r7, #12
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d62:	4770      	bx	lr

08008d64 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008d64:	b480      	push	{r7}
 8008d66:	b085      	sub	sp, #20
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008d72:	2b01      	cmp	r3, #1
 8008d74:	d101      	bne.n	8008d7a <HAL_UARTEx_DisableFifoMode+0x16>
 8008d76:	2302      	movs	r3, #2
 8008d78:	e027      	b.n	8008dca <HAL_UARTEx_DisableFifoMode+0x66>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2201      	movs	r2, #1
 8008d7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2224      	movs	r2, #36	@ 0x24
 8008d86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	681a      	ldr	r2, [r3, #0]
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f022 0201 	bic.w	r2, r2, #1
 8008da0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008da8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2200      	movs	r2, #0
 8008dae:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	68fa      	ldr	r2, [r7, #12]
 8008db6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2220      	movs	r2, #32
 8008dbc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008dc8:	2300      	movs	r3, #0
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3714      	adds	r7, #20
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd4:	4770      	bx	lr

08008dd6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008dd6:	b580      	push	{r7, lr}
 8008dd8:	b084      	sub	sp, #16
 8008dda:	af00      	add	r7, sp, #0
 8008ddc:	6078      	str	r0, [r7, #4]
 8008dde:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008de6:	2b01      	cmp	r3, #1
 8008de8:	d101      	bne.n	8008dee <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008dea:	2302      	movs	r3, #2
 8008dec:	e02d      	b.n	8008e4a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2201      	movs	r2, #1
 8008df2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2224      	movs	r2, #36	@ 0x24
 8008dfa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	681a      	ldr	r2, [r3, #0]
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f022 0201 	bic.w	r2, r2, #1
 8008e14:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	689b      	ldr	r3, [r3, #8]
 8008e1c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	683a      	ldr	r2, [r7, #0]
 8008e26:	430a      	orrs	r2, r1
 8008e28:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f000 f850 	bl	8008ed0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	68fa      	ldr	r2, [r7, #12]
 8008e36:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2220      	movs	r2, #32
 8008e3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2200      	movs	r2, #0
 8008e44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008e48:	2300      	movs	r3, #0
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3710      	adds	r7, #16
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}

08008e52 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008e52:	b580      	push	{r7, lr}
 8008e54:	b084      	sub	sp, #16
 8008e56:	af00      	add	r7, sp, #0
 8008e58:	6078      	str	r0, [r7, #4]
 8008e5a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008e62:	2b01      	cmp	r3, #1
 8008e64:	d101      	bne.n	8008e6a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008e66:	2302      	movs	r3, #2
 8008e68:	e02d      	b.n	8008ec6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2201      	movs	r2, #1
 8008e6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2224      	movs	r2, #36	@ 0x24
 8008e76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	681a      	ldr	r2, [r3, #0]
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f022 0201 	bic.w	r2, r2, #1
 8008e90:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	689b      	ldr	r3, [r3, #8]
 8008e98:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	683a      	ldr	r2, [r7, #0]
 8008ea2:	430a      	orrs	r2, r1
 8008ea4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f000 f812 	bl	8008ed0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	68fa      	ldr	r2, [r7, #12]
 8008eb2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2220      	movs	r2, #32
 8008eb8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008ec4:	2300      	movs	r3, #0
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	3710      	adds	r7, #16
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}
	...

08008ed0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008ed0:	b480      	push	{r7}
 8008ed2:	b085      	sub	sp, #20
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d108      	bne.n	8008ef2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2201      	movs	r2, #1
 8008ee4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2201      	movs	r2, #1
 8008eec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008ef0:	e031      	b.n	8008f56 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008ef2:	2308      	movs	r3, #8
 8008ef4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008ef6:	2308      	movs	r3, #8
 8008ef8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	689b      	ldr	r3, [r3, #8]
 8008f00:	0e5b      	lsrs	r3, r3, #25
 8008f02:	b2db      	uxtb	r3, r3
 8008f04:	f003 0307 	and.w	r3, r3, #7
 8008f08:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	689b      	ldr	r3, [r3, #8]
 8008f10:	0f5b      	lsrs	r3, r3, #29
 8008f12:	b2db      	uxtb	r3, r3
 8008f14:	f003 0307 	and.w	r3, r3, #7
 8008f18:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008f1a:	7bbb      	ldrb	r3, [r7, #14]
 8008f1c:	7b3a      	ldrb	r2, [r7, #12]
 8008f1e:	4911      	ldr	r1, [pc, #68]	@ (8008f64 <UARTEx_SetNbDataToProcess+0x94>)
 8008f20:	5c8a      	ldrb	r2, [r1, r2]
 8008f22:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008f26:	7b3a      	ldrb	r2, [r7, #12]
 8008f28:	490f      	ldr	r1, [pc, #60]	@ (8008f68 <UARTEx_SetNbDataToProcess+0x98>)
 8008f2a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008f2c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008f30:	b29a      	uxth	r2, r3
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008f38:	7bfb      	ldrb	r3, [r7, #15]
 8008f3a:	7b7a      	ldrb	r2, [r7, #13]
 8008f3c:	4909      	ldr	r1, [pc, #36]	@ (8008f64 <UARTEx_SetNbDataToProcess+0x94>)
 8008f3e:	5c8a      	ldrb	r2, [r1, r2]
 8008f40:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008f44:	7b7a      	ldrb	r2, [r7, #13]
 8008f46:	4908      	ldr	r1, [pc, #32]	@ (8008f68 <UARTEx_SetNbDataToProcess+0x98>)
 8008f48:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008f4a:	fb93 f3f2 	sdiv	r3, r3, r2
 8008f4e:	b29a      	uxth	r2, r3
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008f56:	bf00      	nop
 8008f58:	3714      	adds	r7, #20
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f60:	4770      	bx	lr
 8008f62:	bf00      	nop
 8008f64:	080137bc 	.word	0x080137bc
 8008f68:	080137c4 	.word	0x080137c4

08008f6c <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b088      	sub	sp, #32
 8008f70:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008f72:	2300      	movs	r3, #0
 8008f74:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008f76:	f107 0308 	add.w	r3, r7, #8
 8008f7a:	2218      	movs	r2, #24
 8008f7c:	2100      	movs	r1, #0
 8008f7e:	4618      	mov	r0, r3
 8008f80:	f001 f92d 	bl	800a1de <Osal_MemSet>
  rq.ogf = 0x3f;
 8008f84:	233f      	movs	r3, #63	@ 0x3f
 8008f86:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8008f88:	2381      	movs	r3, #129	@ 0x81
 8008f8a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008f8c:	1dfb      	adds	r3, r7, #7
 8008f8e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008f90:	2301      	movs	r3, #1
 8008f92:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008f94:	f107 0308 	add.w	r3, r7, #8
 8008f98:	2100      	movs	r1, #0
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f001 fba8 	bl	800a6f0 <hci_send_req>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	da01      	bge.n	8008faa <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8008fa6:	23ff      	movs	r3, #255	@ 0xff
 8008fa8:	e000      	b.n	8008fac <aci_gap_set_non_discoverable+0x40>
  return status;
 8008faa:	79fb      	ldrb	r3, [r7, #7]
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	3720      	adds	r7, #32
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bd80      	pop	{r7, pc}

08008fb4 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 8008fb4:	b5b0      	push	{r4, r5, r7, lr}
 8008fb6:	b0ce      	sub	sp, #312	@ 0x138
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	4605      	mov	r5, r0
 8008fbc:	460c      	mov	r4, r1
 8008fbe:	4610      	mov	r0, r2
 8008fc0:	4619      	mov	r1, r3
 8008fc2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008fc6:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8008fca:	462a      	mov	r2, r5
 8008fcc:	701a      	strb	r2, [r3, #0]
 8008fce:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008fd2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8008fd6:	4622      	mov	r2, r4
 8008fd8:	801a      	strh	r2, [r3, #0]
 8008fda:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008fde:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 8008fe2:	4602      	mov	r2, r0
 8008fe4:	801a      	strh	r2, [r3, #0]
 8008fe6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008fea:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8008fee:	460a      	mov	r2, r1
 8008ff0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8008ff2:	f107 0310 	add.w	r3, r7, #16
 8008ff6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8008ffa:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 8008ffe:	3308      	adds	r3, #8
 8009000:	f107 0210 	add.w	r2, r7, #16
 8009004:	4413      	add	r3, r2
 8009006:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800900a:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800900e:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8009012:	4413      	add	r3, r2
 8009014:	3309      	adds	r3, #9
 8009016:	f107 0210 	add.w	r2, r7, #16
 800901a:	4413      	add	r3, r2
 800901c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8009020:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009024:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8009028:	2200      	movs	r2, #0
 800902a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800902c:	2300      	movs	r3, #0
 800902e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 8009032:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009036:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800903a:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 800903e:	7812      	ldrb	r2, [r2, #0]
 8009040:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009042:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009046:	3301      	adds	r3, #1
 8009048:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 800904c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009050:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8009054:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8009058:	8812      	ldrh	r2, [r2, #0]
 800905a:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800905e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009062:	3302      	adds	r3, #2
 8009064:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8009068:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800906c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8009070:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 8009074:	8812      	ldrh	r2, [r2, #0]
 8009076:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800907a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800907e:	3302      	adds	r3, #2
 8009080:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8009084:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009088:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800908c:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8009090:	7812      	ldrb	r2, [r2, #0]
 8009092:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8009094:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009098:	3301      	adds	r3, #1
 800909a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800909e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80090a2:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 80090a6:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80090a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80090ac:	3301      	adds	r3, #1
 80090ae:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 80090b2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80090b6:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 80090ba:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 80090bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80090c0:	3301      	adds	r3, #1
 80090c2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 80090c6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80090ca:	3308      	adds	r3, #8
 80090cc:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 80090d0:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 80090d4:	4618      	mov	r0, r3
 80090d6:	f001 f872 	bl	800a1be <Osal_MemCpy>
    index_input += Local_Name_Length;
 80090da:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 80090de:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80090e2:	4413      	add	r3, r2
 80090e4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 80090e8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80090ec:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 80090f0:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80090f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80090f6:	3301      	adds	r3, #1
 80090f8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 80090fc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009100:	3301      	adds	r3, #1
 8009102:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8009106:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 800910a:	4618      	mov	r0, r3
 800910c:	f001 f857 	bl	800a1be <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8009110:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8009114:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8009118:	4413      	add	r3, r2
 800911a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 800911e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009122:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 8009126:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8009128:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800912c:	3302      	adds	r3, #2
 800912e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 8009132:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009136:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 800913a:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800913c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009140:	3302      	adds	r3, #2
 8009142:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009146:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800914a:	2218      	movs	r2, #24
 800914c:	2100      	movs	r1, #0
 800914e:	4618      	mov	r0, r3
 8009150:	f001 f845 	bl	800a1de <Osal_MemSet>
  rq.ogf = 0x3f;
 8009154:	233f      	movs	r3, #63	@ 0x3f
 8009156:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 800915a:	2383      	movs	r3, #131	@ 0x83
 800915c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009160:	f107 0310 	add.w	r3, r7, #16
 8009164:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009168:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800916c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8009170:	f107 030f 	add.w	r3, r7, #15
 8009174:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009178:	2301      	movs	r3, #1
 800917a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800917e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009182:	2100      	movs	r1, #0
 8009184:	4618      	mov	r0, r3
 8009186:	f001 fab3 	bl	800a6f0 <hci_send_req>
 800918a:	4603      	mov	r3, r0
 800918c:	2b00      	cmp	r3, #0
 800918e:	da01      	bge.n	8009194 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8009190:	23ff      	movs	r3, #255	@ 0xff
 8009192:	e004      	b.n	800919e <aci_gap_set_discoverable+0x1ea>
  return status;
 8009194:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009198:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800919c:	781b      	ldrb	r3, [r3, #0]
}
 800919e:	4618      	mov	r0, r3
 80091a0:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bdb0      	pop	{r4, r5, r7, pc}

080091a8 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b0cc      	sub	sp, #304	@ 0x130
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	4602      	mov	r2, r0
 80091b0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80091b4:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80091b8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 80091ba:	f107 0310 	add.w	r3, r7, #16
 80091be:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80091c2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80091c6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80091ca:	2200      	movs	r2, #0
 80091cc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80091ce:	2300      	movs	r3, #0
 80091d0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 80091d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80091d8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80091dc:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80091e0:	7812      	ldrb	r2, [r2, #0]
 80091e2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80091e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80091e8:	3301      	adds	r3, #1
 80091ea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80091ee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80091f2:	2218      	movs	r2, #24
 80091f4:	2100      	movs	r1, #0
 80091f6:	4618      	mov	r0, r3
 80091f8:	f000 fff1 	bl	800a1de <Osal_MemSet>
  rq.ogf = 0x3f;
 80091fc:	233f      	movs	r3, #63	@ 0x3f
 80091fe:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 8009202:	2385      	movs	r3, #133	@ 0x85
 8009204:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009208:	f107 0310 	add.w	r3, r7, #16
 800920c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009210:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009214:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8009218:	f107 030f 	add.w	r3, r7, #15
 800921c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009220:	2301      	movs	r3, #1
 8009222:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009226:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800922a:	2100      	movs	r1, #0
 800922c:	4618      	mov	r0, r3
 800922e:	f001 fa5f 	bl	800a6f0 <hci_send_req>
 8009232:	4603      	mov	r3, r0
 8009234:	2b00      	cmp	r3, #0
 8009236:	da01      	bge.n	800923c <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8009238:	23ff      	movs	r3, #255	@ 0xff
 800923a:	e004      	b.n	8009246 <aci_gap_set_io_capability+0x9e>
  return status;
 800923c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009240:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009244:	781b      	ldrb	r3, [r3, #0]
}
 8009246:	4618      	mov	r0, r3
 8009248:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}

08009250 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8009250:	b5b0      	push	{r4, r5, r7, lr}
 8009252:	b0cc      	sub	sp, #304	@ 0x130
 8009254:	af00      	add	r7, sp, #0
 8009256:	4605      	mov	r5, r0
 8009258:	460c      	mov	r4, r1
 800925a:	4610      	mov	r0, r2
 800925c:	4619      	mov	r1, r3
 800925e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009262:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8009266:	462a      	mov	r2, r5
 8009268:	701a      	strb	r2, [r3, #0]
 800926a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800926e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8009272:	4622      	mov	r2, r4
 8009274:	701a      	strb	r2, [r3, #0]
 8009276:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800927a:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800927e:	4602      	mov	r2, r0
 8009280:	701a      	strb	r2, [r3, #0]
 8009282:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009286:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800928a:	460a      	mov	r2, r1
 800928c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800928e:	f107 0310 	add.w	r3, r7, #16
 8009292:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8009296:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800929a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800929e:	2200      	movs	r2, #0
 80092a0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80092a2:	2300      	movs	r3, #0
 80092a4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 80092a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80092ac:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80092b0:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80092b4:	7812      	ldrb	r2, [r2, #0]
 80092b6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80092b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80092bc:	3301      	adds	r3, #1
 80092be:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 80092c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80092c6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80092ca:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80092ce:	7812      	ldrb	r2, [r2, #0]
 80092d0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80092d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80092d6:	3301      	adds	r3, #1
 80092d8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 80092dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80092e0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80092e4:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 80092e8:	7812      	ldrb	r2, [r2, #0]
 80092ea:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80092ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80092f0:	3301      	adds	r3, #1
 80092f2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 80092f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80092fa:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80092fe:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8009302:	7812      	ldrb	r2, [r2, #0]
 8009304:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8009306:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800930a:	3301      	adds	r3, #1
 800930c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8009310:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009314:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 8009318:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800931a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800931e:	3301      	adds	r3, #1
 8009320:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8009324:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009328:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 800932c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800932e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009332:	3301      	adds	r3, #1
 8009334:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8009338:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800933c:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8009340:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8009342:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009346:	3301      	adds	r3, #1
 8009348:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 800934c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009350:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8009354:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8009358:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800935c:	3304      	adds	r3, #4
 800935e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8009362:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009366:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800936a:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800936c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009370:	3301      	adds	r3, #1
 8009372:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009376:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800937a:	2218      	movs	r2, #24
 800937c:	2100      	movs	r1, #0
 800937e:	4618      	mov	r0, r3
 8009380:	f000 ff2d 	bl	800a1de <Osal_MemSet>
  rq.ogf = 0x3f;
 8009384:	233f      	movs	r3, #63	@ 0x3f
 8009386:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 800938a:	2386      	movs	r3, #134	@ 0x86
 800938c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009390:	f107 0310 	add.w	r3, r7, #16
 8009394:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009398:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800939c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80093a0:	f107 030f 	add.w	r3, r7, #15
 80093a4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80093a8:	2301      	movs	r3, #1
 80093aa:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80093ae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80093b2:	2100      	movs	r1, #0
 80093b4:	4618      	mov	r0, r3
 80093b6:	f001 f99b 	bl	800a6f0 <hci_send_req>
 80093ba:	4603      	mov	r3, r0
 80093bc:	2b00      	cmp	r3, #0
 80093be:	da01      	bge.n	80093c4 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 80093c0:	23ff      	movs	r3, #255	@ 0xff
 80093c2:	e004      	b.n	80093ce <aci_gap_set_authentication_requirement+0x17e>
  return status;
 80093c4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80093c8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80093cc:	781b      	ldrb	r3, [r3, #0]
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bdb0      	pop	{r4, r5, r7, pc}

080093d8 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b0cc      	sub	sp, #304	@ 0x130
 80093dc:	af00      	add	r7, sp, #0
 80093de:	4602      	mov	r2, r0
 80093e0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80093e4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80093e8:	6019      	str	r1, [r3, #0]
 80093ea:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80093ee:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80093f2:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 80093f4:	f107 0310 	add.w	r3, r7, #16
 80093f8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80093fc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009400:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009404:	2200      	movs	r2, #0
 8009406:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009408:	2300      	movs	r3, #0
 800940a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800940e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009412:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009416:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800941a:	8812      	ldrh	r2, [r2, #0]
 800941c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800941e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009422:	3302      	adds	r3, #2
 8009424:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 8009428:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800942c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009430:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8009434:	6812      	ldr	r2, [r2, #0]
 8009436:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 800943a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800943e:	3304      	adds	r3, #4
 8009440:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009444:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009448:	2218      	movs	r2, #24
 800944a:	2100      	movs	r1, #0
 800944c:	4618      	mov	r0, r3
 800944e:	f000 fec6 	bl	800a1de <Osal_MemSet>
  rq.ogf = 0x3f;
 8009452:	233f      	movs	r3, #63	@ 0x3f
 8009454:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 8009458:	2388      	movs	r3, #136	@ 0x88
 800945a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800945e:	f107 0310 	add.w	r3, r7, #16
 8009462:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009466:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800946a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800946e:	f107 030f 	add.w	r3, r7, #15
 8009472:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009476:	2301      	movs	r3, #1
 8009478:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800947c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009480:	2100      	movs	r1, #0
 8009482:	4618      	mov	r0, r3
 8009484:	f001 f934 	bl	800a6f0 <hci_send_req>
 8009488:	4603      	mov	r3, r0
 800948a:	2b00      	cmp	r3, #0
 800948c:	da01      	bge.n	8009492 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 800948e:	23ff      	movs	r3, #255	@ 0xff
 8009490:	e004      	b.n	800949c <aci_gap_pass_key_resp+0xc4>
  return status;
 8009492:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009496:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800949a:	781b      	ldrb	r3, [r3, #0]
}
 800949c:	4618      	mov	r0, r3
 800949e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}

080094a6 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 80094a6:	b590      	push	{r4, r7, lr}
 80094a8:	b0cd      	sub	sp, #308	@ 0x134
 80094aa:	af00      	add	r7, sp, #0
 80094ac:	4604      	mov	r4, r0
 80094ae:	4608      	mov	r0, r1
 80094b0:	4611      	mov	r1, r2
 80094b2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80094b6:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 80094ba:	6013      	str	r3, [r2, #0]
 80094bc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80094c0:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80094c4:	4622      	mov	r2, r4
 80094c6:	701a      	strb	r2, [r3, #0]
 80094c8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80094cc:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80094d0:	4602      	mov	r2, r0
 80094d2:	701a      	strb	r2, [r3, #0]
 80094d4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80094d8:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 80094dc:	460a      	mov	r2, r1
 80094de:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 80094e0:	f107 0310 	add.w	r3, r7, #16
 80094e4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80094e8:	f107 0308 	add.w	r3, r7, #8
 80094ec:	2207      	movs	r2, #7
 80094ee:	2100      	movs	r1, #0
 80094f0:	4618      	mov	r0, r3
 80094f2:	f000 fe74 	bl	800a1de <Osal_MemSet>
  int index_input = 0;
 80094f6:	2300      	movs	r3, #0
 80094f8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 80094fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009500:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009504:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8009508:	7812      	ldrb	r2, [r2, #0]
 800950a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800950c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009510:	3301      	adds	r3, #1
 8009512:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 8009516:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800951a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800951e:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8009522:	7812      	ldrb	r2, [r2, #0]
 8009524:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009526:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800952a:	3301      	adds	r3, #1
 800952c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 8009530:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009534:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009538:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800953c:	7812      	ldrb	r2, [r2, #0]
 800953e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009540:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009544:	3301      	adds	r3, #1
 8009546:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800954a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800954e:	2218      	movs	r2, #24
 8009550:	2100      	movs	r1, #0
 8009552:	4618      	mov	r0, r3
 8009554:	f000 fe43 	bl	800a1de <Osal_MemSet>
  rq.ogf = 0x3f;
 8009558:	233f      	movs	r3, #63	@ 0x3f
 800955a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 800955e:	238a      	movs	r3, #138	@ 0x8a
 8009560:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009564:	f107 0310 	add.w	r3, r7, #16
 8009568:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800956c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009570:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8009574:	f107 0308 	add.w	r3, r7, #8
 8009578:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 800957c:	2307      	movs	r3, #7
 800957e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009582:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009586:	2100      	movs	r1, #0
 8009588:	4618      	mov	r0, r3
 800958a:	f001 f8b1 	bl	800a6f0 <hci_send_req>
 800958e:	4603      	mov	r3, r0
 8009590:	2b00      	cmp	r3, #0
 8009592:	da01      	bge.n	8009598 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8009594:	23ff      	movs	r3, #255	@ 0xff
 8009596:	e02e      	b.n	80095f6 <aci_gap_init+0x150>
  if ( resp.Status )
 8009598:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800959c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80095a0:	781b      	ldrb	r3, [r3, #0]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d005      	beq.n	80095b2 <aci_gap_init+0x10c>
    return resp.Status;
 80095a6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80095aa:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80095ae:	781b      	ldrb	r3, [r3, #0]
 80095b0:	e021      	b.n	80095f6 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 80095b2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80095b6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80095ba:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80095be:	b29a      	uxth	r2, r3
 80095c0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80095c4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 80095cc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80095d0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80095d4:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80095d8:	b29a      	uxth	r2, r3
 80095da:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80095de:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 80095e0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80095e4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80095e8:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80095ec:	b29a      	uxth	r2, r3
 80095ee:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80095f2:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80095f4:	2300      	movs	r3, #0
}
 80095f6:	4618      	mov	r0, r3
 80095f8:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bd90      	pop	{r4, r7, pc}

08009600 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b0cc      	sub	sp, #304	@ 0x130
 8009604:	af00      	add	r7, sp, #0
 8009606:	4602      	mov	r2, r0
 8009608:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800960c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8009610:	6019      	str	r1, [r3, #0]
 8009612:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009616:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800961a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800961c:	f107 0310 	add.w	r3, r7, #16
 8009620:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8009624:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009628:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800962c:	2200      	movs	r2, #0
 800962e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009630:	2300      	movs	r3, #0
 8009632:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 8009636:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800963a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800963e:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8009642:	7812      	ldrb	r2, [r2, #0]
 8009644:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009646:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800964a:	3301      	adds	r3, #1
 800964c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8009650:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009654:	1c58      	adds	r0, r3, #1
 8009656:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800965a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800965e:	781a      	ldrb	r2, [r3, #0]
 8009660:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009664:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8009668:	6819      	ldr	r1, [r3, #0]
 800966a:	f000 fda8 	bl	800a1be <Osal_MemCpy>
  index_input += AdvDataLen;
 800966e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009672:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8009676:	781b      	ldrb	r3, [r3, #0]
 8009678:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800967c:	4413      	add	r3, r2
 800967e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009682:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009686:	2218      	movs	r2, #24
 8009688:	2100      	movs	r1, #0
 800968a:	4618      	mov	r0, r3
 800968c:	f000 fda7 	bl	800a1de <Osal_MemSet>
  rq.ogf = 0x3f;
 8009690:	233f      	movs	r3, #63	@ 0x3f
 8009692:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 8009696:	238e      	movs	r3, #142	@ 0x8e
 8009698:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800969c:	f107 0310 	add.w	r3, r7, #16
 80096a0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80096a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80096a8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80096ac:	f107 030f 	add.w	r3, r7, #15
 80096b0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80096b4:	2301      	movs	r3, #1
 80096b6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80096ba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80096be:	2100      	movs	r1, #0
 80096c0:	4618      	mov	r0, r3
 80096c2:	f001 f815 	bl	800a6f0 <hci_send_req>
 80096c6:	4603      	mov	r3, r0
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	da01      	bge.n	80096d0 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 80096cc:	23ff      	movs	r3, #255	@ 0xff
 80096ce:	e004      	b.n	80096da <aci_gap_update_adv_data+0xda>
  return status;
 80096d0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80096d4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80096d8:	781b      	ldrb	r3, [r3, #0]
}
 80096da:	4618      	mov	r0, r3
 80096dc:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}

080096e4 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b088      	sub	sp, #32
 80096e8:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80096ea:	2300      	movs	r3, #0
 80096ec:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80096ee:	f107 0308 	add.w	r3, r7, #8
 80096f2:	2218      	movs	r2, #24
 80096f4:	2100      	movs	r1, #0
 80096f6:	4618      	mov	r0, r3
 80096f8:	f000 fd71 	bl	800a1de <Osal_MemSet>
  rq.ogf = 0x3f;
 80096fc:	233f      	movs	r3, #63	@ 0x3f
 80096fe:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8009700:	2392      	movs	r3, #146	@ 0x92
 8009702:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009704:	1dfb      	adds	r3, r7, #7
 8009706:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009708:	2301      	movs	r3, #1
 800970a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800970c:	f107 0308 	add.w	r3, r7, #8
 8009710:	2100      	movs	r1, #0
 8009712:	4618      	mov	r0, r3
 8009714:	f000 ffec 	bl	800a6f0 <hci_send_req>
 8009718:	4603      	mov	r3, r0
 800971a:	2b00      	cmp	r3, #0
 800971c:	da01      	bge.n	8009722 <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 800971e:	23ff      	movs	r3, #255	@ 0xff
 8009720:	e000      	b.n	8009724 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 8009722:	79fb      	ldrb	r3, [r7, #7]
}
 8009724:	4618      	mov	r0, r3
 8009726:	3720      	adds	r7, #32
 8009728:	46bd      	mov	sp, r7
 800972a:	bd80      	pop	{r7, pc}

0800972c <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b0cc      	sub	sp, #304	@ 0x130
 8009730:	af00      	add	r7, sp, #0
 8009732:	4602      	mov	r2, r0
 8009734:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009738:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800973c:	801a      	strh	r2, [r3, #0]
 800973e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009742:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8009746:	460a      	mov	r2, r1
 8009748:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 800974a:	f107 0310 	add.w	r3, r7, #16
 800974e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8009752:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009756:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800975a:	2200      	movs	r2, #0
 800975c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800975e:	2300      	movs	r3, #0
 8009760:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8009764:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009768:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800976c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8009770:	8812      	ldrh	r2, [r2, #0]
 8009772:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009774:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009778:	3302      	adds	r3, #2
 800977a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 800977e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009782:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009786:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800978a:	7812      	ldrb	r2, [r2, #0]
 800978c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800978e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009792:	3301      	adds	r3, #1
 8009794:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009798:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800979c:	2218      	movs	r2, #24
 800979e:	2100      	movs	r1, #0
 80097a0:	4618      	mov	r0, r3
 80097a2:	f000 fd1c 	bl	800a1de <Osal_MemSet>
  rq.ogf = 0x3f;
 80097a6:	233f      	movs	r3, #63	@ 0x3f
 80097a8:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 80097ac:	23a5      	movs	r3, #165	@ 0xa5
 80097ae:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80097b2:	f107 0310 	add.w	r3, r7, #16
 80097b6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80097ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80097be:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80097c2:	f107 030f 	add.w	r3, r7, #15
 80097c6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80097ca:	2301      	movs	r3, #1
 80097cc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80097d0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80097d4:	2100      	movs	r1, #0
 80097d6:	4618      	mov	r0, r3
 80097d8:	f000 ff8a 	bl	800a6f0 <hci_send_req>
 80097dc:	4603      	mov	r3, r0
 80097de:	2b00      	cmp	r3, #0
 80097e0:	da01      	bge.n	80097e6 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 80097e2:	23ff      	movs	r3, #255	@ 0xff
 80097e4:	e004      	b.n	80097f0 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 80097e6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80097ea:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80097ee:	781b      	ldrb	r3, [r3, #0]
}
 80097f0:	4618      	mov	r0, r3
 80097f2:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}

080097fa <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 80097fa:	b580      	push	{r7, lr}
 80097fc:	b088      	sub	sp, #32
 80097fe:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009800:	2300      	movs	r3, #0
 8009802:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009804:	f107 0308 	add.w	r3, r7, #8
 8009808:	2218      	movs	r2, #24
 800980a:	2100      	movs	r1, #0
 800980c:	4618      	mov	r0, r3
 800980e:	f000 fce6 	bl	800a1de <Osal_MemSet>
  rq.ogf = 0x3f;
 8009812:	233f      	movs	r3, #63	@ 0x3f
 8009814:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8009816:	f240 1301 	movw	r3, #257	@ 0x101
 800981a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800981c:	1dfb      	adds	r3, r7, #7
 800981e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009820:	2301      	movs	r3, #1
 8009822:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009824:	f107 0308 	add.w	r3, r7, #8
 8009828:	2100      	movs	r1, #0
 800982a:	4618      	mov	r0, r3
 800982c:	f000 ff60 	bl	800a6f0 <hci_send_req>
 8009830:	4603      	mov	r3, r0
 8009832:	2b00      	cmp	r3, #0
 8009834:	da01      	bge.n	800983a <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8009836:	23ff      	movs	r3, #255	@ 0xff
 8009838:	e000      	b.n	800983c <aci_gatt_init+0x42>
  return status;
 800983a:	79fb      	ldrb	r3, [r7, #7]
}
 800983c:	4618      	mov	r0, r3
 800983e:	3720      	adds	r7, #32
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}

08009844 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8009844:	b590      	push	{r4, r7, lr}
 8009846:	b0cf      	sub	sp, #316	@ 0x13c
 8009848:	af00      	add	r7, sp, #0
 800984a:	4604      	mov	r4, r0
 800984c:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8009850:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 8009854:	6001      	str	r1, [r0, #0]
 8009856:	4610      	mov	r0, r2
 8009858:	4619      	mov	r1, r3
 800985a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800985e:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8009862:	4622      	mov	r2, r4
 8009864:	701a      	strb	r2, [r3, #0]
 8009866:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800986a:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800986e:	4602      	mov	r2, r0
 8009870:	701a      	strb	r2, [r3, #0]
 8009872:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009876:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800987a:	460a      	mov	r2, r1
 800987c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800987e:	f107 0310 	add.w	r3, r7, #16
 8009882:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8009886:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800988a:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800988e:	781b      	ldrb	r3, [r3, #0]
 8009890:	2b01      	cmp	r3, #1
 8009892:	d00a      	beq.n	80098aa <aci_gatt_add_service+0x66>
 8009894:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009898:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800989c:	781b      	ldrb	r3, [r3, #0]
 800989e:	2b02      	cmp	r3, #2
 80098a0:	d101      	bne.n	80098a6 <aci_gatt_add_service+0x62>
 80098a2:	2311      	movs	r3, #17
 80098a4:	e002      	b.n	80098ac <aci_gatt_add_service+0x68>
 80098a6:	2301      	movs	r3, #1
 80098a8:	e000      	b.n	80098ac <aci_gatt_add_service+0x68>
 80098aa:	2303      	movs	r3, #3
 80098ac:	f107 0210 	add.w	r2, r7, #16
 80098b0:	4413      	add	r3, r2
 80098b2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80098b6:	f107 030c 	add.w	r3, r7, #12
 80098ba:	2203      	movs	r2, #3
 80098bc:	2100      	movs	r1, #0
 80098be:	4618      	mov	r0, r3
 80098c0:	f000 fc8d 	bl	800a1de <Osal_MemSet>
  int index_input = 0;
 80098c4:	2300      	movs	r3, #0
 80098c6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 80098ca:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80098ce:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80098d2:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 80098d6:	7812      	ldrb	r2, [r2, #0]
 80098d8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80098da:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80098de:	3301      	adds	r3, #1
 80098e0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 80098e4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80098e8:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80098ec:	781b      	ldrb	r3, [r3, #0]
 80098ee:	2b01      	cmp	r3, #1
 80098f0:	d002      	beq.n	80098f8 <aci_gatt_add_service+0xb4>
 80098f2:	2b02      	cmp	r3, #2
 80098f4:	d004      	beq.n	8009900 <aci_gatt_add_service+0xbc>
 80098f6:	e007      	b.n	8009908 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 80098f8:	2302      	movs	r3, #2
 80098fa:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 80098fe:	e005      	b.n	800990c <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8009900:	2310      	movs	r3, #16
 8009902:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8009906:	e001      	b.n	800990c <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8009908:	2397      	movs	r3, #151	@ 0x97
 800990a:	e06c      	b.n	80099e6 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 800990c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009910:	1c58      	adds	r0, r3, #1
 8009912:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 8009916:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800991a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800991e:	6819      	ldr	r1, [r3, #0]
 8009920:	f000 fc4d 	bl	800a1be <Osal_MemCpy>
    index_input += size;
 8009924:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 8009928:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800992c:	4413      	add	r3, r2
 800992e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 8009932:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009936:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800993a:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800993e:	7812      	ldrb	r2, [r2, #0]
 8009940:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8009942:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009946:	3301      	adds	r3, #1
 8009948:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 800994c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009950:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8009954:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8009958:	7812      	ldrb	r2, [r2, #0]
 800995a:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800995c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009960:	3301      	adds	r3, #1
 8009962:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009966:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800996a:	2218      	movs	r2, #24
 800996c:	2100      	movs	r1, #0
 800996e:	4618      	mov	r0, r3
 8009970:	f000 fc35 	bl	800a1de <Osal_MemSet>
  rq.ogf = 0x3f;
 8009974:	233f      	movs	r3, #63	@ 0x3f
 8009976:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 800997a:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800997e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009982:	f107 0310 	add.w	r3, r7, #16
 8009986:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800998a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800998e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8009992:	f107 030c 	add.w	r3, r7, #12
 8009996:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 800999a:	2303      	movs	r3, #3
 800999c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80099a0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80099a4:	2100      	movs	r1, #0
 80099a6:	4618      	mov	r0, r3
 80099a8:	f000 fea2 	bl	800a6f0 <hci_send_req>
 80099ac:	4603      	mov	r3, r0
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	da01      	bge.n	80099b6 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 80099b2:	23ff      	movs	r3, #255	@ 0xff
 80099b4:	e017      	b.n	80099e6 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 80099b6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80099ba:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80099be:	781b      	ldrb	r3, [r3, #0]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d005      	beq.n	80099d0 <aci_gatt_add_service+0x18c>
    return resp.Status;
 80099c4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80099c8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80099cc:	781b      	ldrb	r3, [r3, #0]
 80099ce:	e00a      	b.n	80099e6 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 80099d0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80099d4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80099d8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80099dc:	b29a      	uxth	r2, r3
 80099de:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80099e2:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80099e4:	2300      	movs	r3, #0
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 80099ec:	46bd      	mov	sp, r7
 80099ee:	bd90      	pop	{r4, r7, pc}

080099f0 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 80099f0:	b590      	push	{r4, r7, lr}
 80099f2:	b0d1      	sub	sp, #324	@ 0x144
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	4604      	mov	r4, r0
 80099f8:	4608      	mov	r0, r1
 80099fa:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 80099fe:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 8009a02:	600a      	str	r2, [r1, #0]
 8009a04:	4619      	mov	r1, r3
 8009a06:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009a0a:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8009a0e:	4622      	mov	r2, r4
 8009a10:	801a      	strh	r2, [r3, #0]
 8009a12:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009a16:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8009a1a:	4602      	mov	r2, r0
 8009a1c:	701a      	strb	r2, [r3, #0]
 8009a1e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009a22:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 8009a26:	460a      	mov	r2, r1
 8009a28:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8009a2a:	f107 0318 	add.w	r3, r7, #24
 8009a2e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8009a32:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009a36:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8009a3a:	781b      	ldrb	r3, [r3, #0]
 8009a3c:	2b01      	cmp	r3, #1
 8009a3e:	d00a      	beq.n	8009a56 <aci_gatt_add_char+0x66>
 8009a40:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009a44:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8009a48:	781b      	ldrb	r3, [r3, #0]
 8009a4a:	2b02      	cmp	r3, #2
 8009a4c:	d101      	bne.n	8009a52 <aci_gatt_add_char+0x62>
 8009a4e:	2313      	movs	r3, #19
 8009a50:	e002      	b.n	8009a58 <aci_gatt_add_char+0x68>
 8009a52:	2303      	movs	r3, #3
 8009a54:	e000      	b.n	8009a58 <aci_gatt_add_char+0x68>
 8009a56:	2305      	movs	r3, #5
 8009a58:	f107 0218 	add.w	r2, r7, #24
 8009a5c:	4413      	add	r3, r2
 8009a5e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8009a62:	f107 0314 	add.w	r3, r7, #20
 8009a66:	2203      	movs	r2, #3
 8009a68:	2100      	movs	r1, #0
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f000 fbb7 	bl	800a1de <Osal_MemSet>
  int index_input = 0;
 8009a70:	2300      	movs	r3, #0
 8009a72:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 8009a76:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8009a7a:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8009a7e:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8009a82:	8812      	ldrh	r2, [r2, #0]
 8009a84:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009a86:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009a8a:	3302      	adds	r3, #2
 8009a8c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8009a90:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8009a94:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8009a98:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8009a9c:	7812      	ldrb	r2, [r2, #0]
 8009a9e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009aa0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009aa4:	3301      	adds	r3, #1
 8009aa6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8009aaa:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009aae:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8009ab2:	781b      	ldrb	r3, [r3, #0]
 8009ab4:	2b01      	cmp	r3, #1
 8009ab6:	d002      	beq.n	8009abe <aci_gatt_add_char+0xce>
 8009ab8:	2b02      	cmp	r3, #2
 8009aba:	d004      	beq.n	8009ac6 <aci_gatt_add_char+0xd6>
 8009abc:	e007      	b.n	8009ace <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 8009abe:	2302      	movs	r3, #2
 8009ac0:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8009ac4:	e005      	b.n	8009ad2 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8009ac6:	2310      	movs	r3, #16
 8009ac8:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8009acc:	e001      	b.n	8009ad2 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8009ace:	2397      	movs	r3, #151	@ 0x97
 8009ad0:	e091      	b.n	8009bf6 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8009ad2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8009ad6:	1cd8      	adds	r0, r3, #3
 8009ad8:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 8009adc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009ae0:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8009ae4:	6819      	ldr	r1, [r3, #0]
 8009ae6:	f000 fb6a 	bl	800a1be <Osal_MemCpy>
    index_input += size;
 8009aea:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8009aee:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8009af2:	4413      	add	r3, r2
 8009af4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8009af8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009afc:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8009b00:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 8009b04:	8812      	ldrh	r2, [r2, #0]
 8009b06:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8009b08:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009b0c:	3302      	adds	r3, #2
 8009b0e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8009b12:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009b16:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8009b1a:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8009b1c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009b20:	3301      	adds	r3, #1
 8009b22:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8009b26:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009b2a:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8009b2e:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8009b30:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009b34:	3301      	adds	r3, #1
 8009b36:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8009b3a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009b3e:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 8009b42:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8009b44:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009b48:	3301      	adds	r3, #1
 8009b4a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8009b4e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009b52:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 8009b56:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8009b58:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009b5c:	3301      	adds	r3, #1
 8009b5e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8009b62:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009b66:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 8009b6a:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8009b6c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009b70:	3301      	adds	r3, #1
 8009b72:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009b76:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8009b7a:	2218      	movs	r2, #24
 8009b7c:	2100      	movs	r1, #0
 8009b7e:	4618      	mov	r0, r3
 8009b80:	f000 fb2d 	bl	800a1de <Osal_MemSet>
  rq.ogf = 0x3f;
 8009b84:	233f      	movs	r3, #63	@ 0x3f
 8009b86:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 8009b8a:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8009b8e:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 8009b92:	f107 0318 	add.w	r3, r7, #24
 8009b96:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 8009b9a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009b9e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 8009ba2:	f107 0314 	add.w	r3, r7, #20
 8009ba6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 8009baa:	2303      	movs	r3, #3
 8009bac:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009bb0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8009bb4:	2100      	movs	r1, #0
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	f000 fd9a 	bl	800a6f0 <hci_send_req>
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	da01      	bge.n	8009bc6 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8009bc2:	23ff      	movs	r3, #255	@ 0xff
 8009bc4:	e017      	b.n	8009bf6 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 8009bc6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009bca:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009bce:	781b      	ldrb	r3, [r3, #0]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d005      	beq.n	8009be0 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8009bd4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009bd8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009bdc:	781b      	ldrb	r3, [r3, #0]
 8009bde:	e00a      	b.n	8009bf6 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8009be0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009be4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009be8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009bec:	b29a      	uxth	r2, r3
 8009bee:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8009bf2:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8009bf4:	2300      	movs	r3, #0
}
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	bd90      	pop	{r4, r7, pc}

08009c00 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8009c00:	b5b0      	push	{r4, r5, r7, lr}
 8009c02:	b0cc      	sub	sp, #304	@ 0x130
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	4605      	mov	r5, r0
 8009c08:	460c      	mov	r4, r1
 8009c0a:	4610      	mov	r0, r2
 8009c0c:	4619      	mov	r1, r3
 8009c0e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009c12:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8009c16:	462a      	mov	r2, r5
 8009c18:	801a      	strh	r2, [r3, #0]
 8009c1a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009c1e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009c22:	4622      	mov	r2, r4
 8009c24:	801a      	strh	r2, [r3, #0]
 8009c26:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009c2a:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 8009c2e:	4602      	mov	r2, r0
 8009c30:	701a      	strb	r2, [r3, #0]
 8009c32:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009c36:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8009c3a:	460a      	mov	r2, r1
 8009c3c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8009c3e:	f107 0310 	add.w	r3, r7, #16
 8009c42:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8009c46:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009c4a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009c4e:	2200      	movs	r2, #0
 8009c50:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009c52:	2300      	movs	r3, #0
 8009c54:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 8009c58:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009c5c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009c60:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8009c64:	8812      	ldrh	r2, [r2, #0]
 8009c66:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009c68:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009c6c:	3302      	adds	r3, #2
 8009c6e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 8009c72:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009c76:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009c7a:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8009c7e:	8812      	ldrh	r2, [r2, #0]
 8009c80:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8009c82:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009c86:	3302      	adds	r3, #2
 8009c88:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 8009c8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009c90:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009c94:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 8009c98:	7812      	ldrb	r2, [r2, #0]
 8009c9a:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8009c9c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009ca0:	3301      	adds	r3, #1
 8009ca2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8009ca6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009caa:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009cae:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 8009cb2:	7812      	ldrb	r2, [r2, #0]
 8009cb4:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8009cb6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009cba:	3301      	adds	r3, #1
 8009cbc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8009cc0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009cc4:	1d98      	adds	r0, r3, #6
 8009cc6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009cca:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8009cce:	781b      	ldrb	r3, [r3, #0]
 8009cd0:	461a      	mov	r2, r3
 8009cd2:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8009cd6:	f000 fa72 	bl	800a1be <Osal_MemCpy>
  index_input += Char_Value_Length;
 8009cda:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009cde:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8009ce2:	781b      	ldrb	r3, [r3, #0]
 8009ce4:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8009ce8:	4413      	add	r3, r2
 8009cea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009cee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009cf2:	2218      	movs	r2, #24
 8009cf4:	2100      	movs	r1, #0
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f000 fa71 	bl	800a1de <Osal_MemSet>
  rq.ogf = 0x3f;
 8009cfc:	233f      	movs	r3, #63	@ 0x3f
 8009cfe:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 8009d02:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8009d06:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009d0a:	f107 0310 	add.w	r3, r7, #16
 8009d0e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009d12:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009d16:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8009d1a:	f107 030f 	add.w	r3, r7, #15
 8009d1e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009d22:	2301      	movs	r3, #1
 8009d24:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009d28:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d2c:	2100      	movs	r1, #0
 8009d2e:	4618      	mov	r0, r3
 8009d30:	f000 fcde 	bl	800a6f0 <hci_send_req>
 8009d34:	4603      	mov	r3, r0
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	da01      	bge.n	8009d3e <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8009d3a:	23ff      	movs	r3, #255	@ 0xff
 8009d3c:	e004      	b.n	8009d48 <aci_gatt_update_char_value+0x148>
  return status;
 8009d3e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009d42:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009d46:	781b      	ldrb	r3, [r3, #0]
}
 8009d48:	4618      	mov	r0, r3
 8009d4a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bdb0      	pop	{r4, r5, r7, pc}

08009d52 <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 8009d52:	b580      	push	{r7, lr}
 8009d54:	b0cc      	sub	sp, #304	@ 0x130
 8009d56:	af00      	add	r7, sp, #0
 8009d58:	4602      	mov	r2, r0
 8009d5a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009d5e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8009d62:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 8009d64:	f107 0310 	add.w	r3, r7, #16
 8009d68:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8009d6c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009d70:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009d74:	2200      	movs	r2, #0
 8009d76:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009d78:	2300      	movs	r3, #0
 8009d7a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8009d7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009d82:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009d86:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8009d8a:	8812      	ldrh	r2, [r2, #0]
 8009d8c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009d8e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009d92:	3302      	adds	r3, #2
 8009d94:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009d98:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d9c:	2218      	movs	r2, #24
 8009d9e:	2100      	movs	r1, #0
 8009da0:	4618      	mov	r0, r3
 8009da2:	f000 fa1c 	bl	800a1de <Osal_MemSet>
  rq.ogf = 0x3f;
 8009da6:	233f      	movs	r3, #63	@ 0x3f
 8009da8:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 8009dac:	f240 1325 	movw	r3, #293	@ 0x125
 8009db0:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009db4:	f107 0310 	add.w	r3, r7, #16
 8009db8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009dbc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009dc0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8009dc4:	f107 030f 	add.w	r3, r7, #15
 8009dc8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009dcc:	2301      	movs	r3, #1
 8009dce:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009dd2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009dd6:	2100      	movs	r1, #0
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f000 fc89 	bl	800a6f0 <hci_send_req>
 8009dde:	4603      	mov	r3, r0
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	da01      	bge.n	8009de8 <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 8009de4:	23ff      	movs	r3, #255	@ 0xff
 8009de6:	e004      	b.n	8009df2 <aci_gatt_confirm_indication+0xa0>
  return status;
 8009de8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009dec:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009df0:	781b      	ldrb	r3, [r3, #0]
}
 8009df2:	4618      	mov	r0, r3
 8009df4:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	bd80      	pop	{r7, pc}

08009dfc <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b0cc      	sub	sp, #304	@ 0x130
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009e06:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8009e0a:	601a      	str	r2, [r3, #0]
 8009e0c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009e10:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8009e14:	4602      	mov	r2, r0
 8009e16:	701a      	strb	r2, [r3, #0]
 8009e18:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009e1c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8009e20:	460a      	mov	r2, r1
 8009e22:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8009e24:	f107 0310 	add.w	r3, r7, #16
 8009e28:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8009e2c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009e30:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009e34:	2200      	movs	r2, #0
 8009e36:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009e38:	2300      	movs	r3, #0
 8009e3a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 8009e3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009e42:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009e46:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8009e4a:	7812      	ldrb	r2, [r2, #0]
 8009e4c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009e4e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009e52:	3301      	adds	r3, #1
 8009e54:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 8009e58:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009e5c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009e60:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8009e64:	7812      	ldrb	r2, [r2, #0]
 8009e66:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009e68:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009e6c:	3301      	adds	r3, #1
 8009e6e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8009e72:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009e76:	1c98      	adds	r0, r3, #2
 8009e78:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009e7c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8009e80:	781a      	ldrb	r2, [r3, #0]
 8009e82:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009e86:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8009e8a:	6819      	ldr	r1, [r3, #0]
 8009e8c:	f000 f997 	bl	800a1be <Osal_MemCpy>
  index_input += Length;
 8009e90:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009e94:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8009e98:	781b      	ldrb	r3, [r3, #0]
 8009e9a:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8009e9e:	4413      	add	r3, r2
 8009ea0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009ea4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009ea8:	2218      	movs	r2, #24
 8009eaa:	2100      	movs	r1, #0
 8009eac:	4618      	mov	r0, r3
 8009eae:	f000 f996 	bl	800a1de <Osal_MemSet>
  rq.ogf = 0x3f;
 8009eb2:	233f      	movs	r3, #63	@ 0x3f
 8009eb4:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 8009eb8:	230c      	movs	r3, #12
 8009eba:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009ebe:	f107 0310 	add.w	r3, r7, #16
 8009ec2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009ec6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009eca:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8009ece:	f107 030f 	add.w	r3, r7, #15
 8009ed2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009edc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009ee0:	2100      	movs	r1, #0
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	f000 fc04 	bl	800a6f0 <hci_send_req>
 8009ee8:	4603      	mov	r3, r0
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	da01      	bge.n	8009ef2 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8009eee:	23ff      	movs	r3, #255	@ 0xff
 8009ef0:	e004      	b.n	8009efc <aci_hal_write_config_data+0x100>
  return status;
 8009ef2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009ef6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009efa:	781b      	ldrb	r3, [r3, #0]
}
 8009efc:	4618      	mov	r0, r3
 8009efe:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}

08009f06 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8009f06:	b580      	push	{r7, lr}
 8009f08:	b0cc      	sub	sp, #304	@ 0x130
 8009f0a:	af00      	add	r7, sp, #0
 8009f0c:	4602      	mov	r2, r0
 8009f0e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009f12:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8009f16:	701a      	strb	r2, [r3, #0]
 8009f18:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009f1c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8009f20:	460a      	mov	r2, r1
 8009f22:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8009f24:	f107 0310 	add.w	r3, r7, #16
 8009f28:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8009f2c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009f30:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009f34:	2200      	movs	r2, #0
 8009f36:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009f38:	2300      	movs	r3, #0
 8009f3a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 8009f3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009f42:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009f46:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8009f4a:	7812      	ldrb	r2, [r2, #0]
 8009f4c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009f4e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009f52:	3301      	adds	r3, #1
 8009f54:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 8009f58:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009f5c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009f60:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8009f64:	7812      	ldrb	r2, [r2, #0]
 8009f66:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009f68:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009f6c:	3301      	adds	r3, #1
 8009f6e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009f72:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009f76:	2218      	movs	r2, #24
 8009f78:	2100      	movs	r1, #0
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	f000 f92f 	bl	800a1de <Osal_MemSet>
  rq.ogf = 0x3f;
 8009f80:	233f      	movs	r3, #63	@ 0x3f
 8009f82:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 8009f86:	230f      	movs	r3, #15
 8009f88:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009f8c:	f107 0310 	add.w	r3, r7, #16
 8009f90:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009f94:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009f98:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8009f9c:	f107 030f 	add.w	r3, r7, #15
 8009fa0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009fa4:	2301      	movs	r3, #1
 8009fa6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009faa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009fae:	2100      	movs	r1, #0
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	f000 fb9d 	bl	800a6f0 <hci_send_req>
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	da01      	bge.n	8009fc0 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8009fbc:	23ff      	movs	r3, #255	@ 0xff
 8009fbe:	e004      	b.n	8009fca <aci_hal_set_tx_power_level+0xc4>
  return status;
 8009fc0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009fc4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009fc8:	781b      	ldrb	r3, [r3, #0]
}
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}

08009fd4 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b0cc      	sub	sp, #304	@ 0x130
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	4602      	mov	r2, r0
 8009fdc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009fe0:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8009fe4:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8009fe6:	f107 0310 	add.w	r3, r7, #16
 8009fea:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8009fee:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009ff2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800a000:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a004:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a008:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800a00c:	8812      	ldrh	r2, [r2, #0]
 800a00e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a010:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a014:	3302      	adds	r3, #2
 800a016:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a01a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a01e:	2218      	movs	r2, #24
 800a020:	2100      	movs	r1, #0
 800a022:	4618      	mov	r0, r3
 800a024:	f000 f8db 	bl	800a1de <Osal_MemSet>
  rq.ogf = 0x3f;
 800a028:	233f      	movs	r3, #63	@ 0x3f
 800a02a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 800a02e:	2318      	movs	r3, #24
 800a030:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800a034:	f107 0310 	add.w	r3, r7, #16
 800a038:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800a03c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a040:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800a044:	f107 030f 	add.w	r3, r7, #15
 800a048:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800a04c:	2301      	movs	r3, #1
 800a04e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a052:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a056:	2100      	movs	r1, #0
 800a058:	4618      	mov	r0, r3
 800a05a:	f000 fb49 	bl	800a6f0 <hci_send_req>
 800a05e:	4603      	mov	r3, r0
 800a060:	2b00      	cmp	r3, #0
 800a062:	da01      	bge.n	800a068 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 800a064:	23ff      	movs	r3, #255	@ 0xff
 800a066:	e004      	b.n	800a072 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 800a068:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a06c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a070:	781b      	ldrb	r3, [r3, #0]
}
 800a072:	4618      	mov	r0, r3
 800a074:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd80      	pop	{r7, pc}

0800a07c <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b088      	sub	sp, #32
 800a080:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800a082:	2300      	movs	r3, #0
 800a084:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a086:	f107 0308 	add.w	r3, r7, #8
 800a08a:	2218      	movs	r2, #24
 800a08c:	2100      	movs	r1, #0
 800a08e:	4618      	mov	r0, r3
 800a090:	f000 f8a5 	bl	800a1de <Osal_MemSet>
  rq.ogf = 0x03;
 800a094:	2303      	movs	r3, #3
 800a096:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800a098:	2303      	movs	r3, #3
 800a09a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800a09c:	1dfb      	adds	r3, r7, #7
 800a09e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800a0a0:	2301      	movs	r3, #1
 800a0a2:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a0a4:	f107 0308 	add.w	r3, r7, #8
 800a0a8:	2100      	movs	r1, #0
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	f000 fb20 	bl	800a6f0 <hci_send_req>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	da01      	bge.n	800a0ba <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800a0b6:	23ff      	movs	r3, #255	@ 0xff
 800a0b8:	e000      	b.n	800a0bc <hci_reset+0x40>
  return status;
 800a0ba:	79fb      	ldrb	r3, [r7, #7]
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	3720      	adds	r7, #32
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}

0800a0c4 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800a0c4:	b590      	push	{r4, r7, lr}
 800a0c6:	b0cd      	sub	sp, #308	@ 0x134
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	4604      	mov	r4, r0
 800a0cc:	4608      	mov	r0, r1
 800a0ce:	4611      	mov	r1, r2
 800a0d0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a0d4:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800a0d8:	4622      	mov	r2, r4
 800a0da:	701a      	strb	r2, [r3, #0]
 800a0dc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a0e0:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a0e4:	4602      	mov	r2, r0
 800a0e6:	701a      	strb	r2, [r3, #0]
 800a0e8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a0ec:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800a0f0:	460a      	mov	r2, r1
 800a0f2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800a0f4:	f107 0310 	add.w	r3, r7, #16
 800a0f8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800a0fc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a100:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a104:	2200      	movs	r2, #0
 800a106:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a108:	2300      	movs	r3, #0
 800a10a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800a10e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a112:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a116:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800a11a:	7812      	ldrb	r2, [r2, #0]
 800a11c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a11e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a122:	3301      	adds	r3, #1
 800a124:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 800a128:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a12c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a130:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800a134:	7812      	ldrb	r2, [r2, #0]
 800a136:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800a138:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a13c:	3301      	adds	r3, #1
 800a13e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 800a142:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a146:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a14a:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800a14e:	7812      	ldrb	r2, [r2, #0]
 800a150:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800a152:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a156:	3301      	adds	r3, #1
 800a158:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a15c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a160:	2218      	movs	r2, #24
 800a162:	2100      	movs	r1, #0
 800a164:	4618      	mov	r0, r3
 800a166:	f000 f83a 	bl	800a1de <Osal_MemSet>
  rq.ogf = 0x08;
 800a16a:	2308      	movs	r3, #8
 800a16c:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 800a170:	2331      	movs	r3, #49	@ 0x31
 800a172:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800a176:	f107 0310 	add.w	r3, r7, #16
 800a17a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800a17e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a182:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800a186:	f107 030f 	add.w	r3, r7, #15
 800a18a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800a18e:	2301      	movs	r3, #1
 800a190:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a194:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a198:	2100      	movs	r1, #0
 800a19a:	4618      	mov	r0, r3
 800a19c:	f000 faa8 	bl	800a6f0 <hci_send_req>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	da01      	bge.n	800a1aa <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 800a1a6:	23ff      	movs	r3, #255	@ 0xff
 800a1a8:	e004      	b.n	800a1b4 <hci_le_set_default_phy+0xf0>
  return status;
 800a1aa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a1ae:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a1b2:	781b      	ldrb	r3, [r3, #0]
}
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd90      	pop	{r4, r7, pc}

0800a1be <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800a1be:	b580      	push	{r7, lr}
 800a1c0:	b084      	sub	sp, #16
 800a1c2:	af00      	add	r7, sp, #0
 800a1c4:	60f8      	str	r0, [r7, #12]
 800a1c6:	60b9      	str	r1, [r7, #8]
 800a1c8:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 800a1ca:	687a      	ldr	r2, [r7, #4]
 800a1cc:	68b9      	ldr	r1, [r7, #8]
 800a1ce:	68f8      	ldr	r0, [r7, #12]
 800a1d0:	f004 fc85 	bl	800eade <memcpy>
 800a1d4:	4603      	mov	r3, r0
}
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	3710      	adds	r7, #16
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bd80      	pop	{r7, pc}

0800a1de <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800a1de:	b580      	push	{r7, lr}
 800a1e0:	b084      	sub	sp, #16
 800a1e2:	af00      	add	r7, sp, #0
 800a1e4:	60f8      	str	r0, [r7, #12]
 800a1e6:	60b9      	str	r1, [r7, #8]
 800a1e8:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800a1ea:	687a      	ldr	r2, [r7, #4]
 800a1ec:	68b9      	ldr	r1, [r7, #8]
 800a1ee:	68f8      	ldr	r0, [r7, #12]
 800a1f0:	f004 fbe0 	bl	800e9b4 <memset>
 800a1f4:	4603      	mov	r3, r0
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	3710      	adds	r7, #16
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}

0800a1fe <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800a1fe:	b480      	push	{r7}
 800a200:	af00      	add	r7, sp, #0
  return;
 800a202:	bf00      	nop
}
 800a204:	46bd      	mov	sp, r7
 800a206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20a:	4770      	bx	lr

0800a20c <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800a20c:	b480      	push	{r7}
 800a20e:	af00      	add	r7, sp, #0
  return;
 800a210:	bf00      	nop
}
 800a212:	46bd      	mov	sp, r7
 800a214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a218:	4770      	bx	lr

0800a21a <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800a21a:	b480      	push	{r7}
 800a21c:	af00      	add	r7, sp, #0
  return;
 800a21e:	bf00      	nop
}
 800a220:	46bd      	mov	sp, r7
 800a222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a226:	4770      	bx	lr

0800a228 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800a228:	b480      	push	{r7}
 800a22a:	af00      	add	r7, sp, #0
  return;
 800a22c:	bf00      	nop
}
 800a22e:	46bd      	mov	sp, r7
 800a230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a234:	4770      	bx	lr

0800a236 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800a236:	b480      	push	{r7}
 800a238:	af00      	add	r7, sp, #0
  return;
 800a23a:	bf00      	nop
}
 800a23c:	46bd      	mov	sp, r7
 800a23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a242:	4770      	bx	lr

0800a244 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800a244:	b480      	push	{r7}
 800a246:	af00      	add	r7, sp, #0
  return;
 800a248:	bf00      	nop
}
 800a24a:	46bd      	mov	sp, r7
 800a24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a250:	4770      	bx	lr

0800a252 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 800a252:	b480      	push	{r7}
 800a254:	af00      	add	r7, sp, #0
  return;
 800a256:	bf00      	nop
}
 800a258:	46bd      	mov	sp, r7
 800a25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25e:	4770      	bx	lr

0800a260 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800a260:	b480      	push	{r7}
 800a262:	af00      	add	r7, sp, #0
  return;
 800a264:	bf00      	nop
}
 800a266:	46bd      	mov	sp, r7
 800a268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26c:	4770      	bx	lr

0800a26e <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800a26e:	b480      	push	{r7}
 800a270:	af00      	add	r7, sp, #0
  return;
 800a272:	bf00      	nop
}
 800a274:	46bd      	mov	sp, r7
 800a276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27a:	4770      	bx	lr

0800a27c <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800a27c:	b480      	push	{r7}
 800a27e:	af00      	add	r7, sp, #0
  return;
 800a280:	bf00      	nop
}
 800a282:	46bd      	mov	sp, r7
 800a284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a288:	4770      	bx	lr

0800a28a <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800a28a:	b480      	push	{r7}
 800a28c:	af00      	add	r7, sp, #0
  return;
 800a28e:	bf00      	nop
}
 800a290:	46bd      	mov	sp, r7
 800a292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a296:	4770      	bx	lr

0800a298 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800a298:	b480      	push	{r7}
 800a29a:	af00      	add	r7, sp, #0
  return;
 800a29c:	bf00      	nop
}
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a4:	4770      	bx	lr

0800a2a6 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 800a2a6:	b480      	push	{r7}
 800a2a8:	af00      	add	r7, sp, #0
  return;
 800a2aa:	bf00      	nop
}
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b2:	4770      	bx	lr

0800a2b4 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 800a2b4:	b480      	push	{r7}
 800a2b6:	af00      	add	r7, sp, #0
  return;
 800a2b8:	bf00      	nop
}
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c0:	4770      	bx	lr

0800a2c2 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800a2c2:	b480      	push	{r7}
 800a2c4:	af00      	add	r7, sp, #0
  return;
 800a2c6:	bf00      	nop
}
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ce:	4770      	bx	lr

0800a2d0 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800a2d0:	b480      	push	{r7}
 800a2d2:	af00      	add	r7, sp, #0
  return;
 800a2d4:	bf00      	nop
}
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2dc:	4770      	bx	lr

0800a2de <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800a2de:	b480      	push	{r7}
 800a2e0:	af00      	add	r7, sp, #0
  return;
 800a2e2:	bf00      	nop
}
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ea:	4770      	bx	lr

0800a2ec <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800a2f0:	4b04      	ldr	r3, [pc, #16]	@ (800a304 <SVCCTL_Init+0x18>)
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800a2f6:	4b04      	ldr	r3, [pc, #16]	@ (800a308 <SVCCTL_Init+0x1c>)
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800a2fc:	f000 f806 	bl	800a30c <SVCCTL_SvcInit>

  return;
 800a300:	bf00      	nop
}
 800a302:	bd80      	pop	{r7, pc}
 800a304:	200001f8 	.word	0x200001f8
 800a308:	20000218 	.word	0x20000218

0800a30c <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	af00      	add	r7, sp, #0
  BAS_Init();
 800a310:	f7ff ff75 	bl	800a1fe <BAS_Init>

  BLS_Init();
 800a314:	f7ff ff7a 	bl	800a20c <BLS_Init>

  CRS_STM_Init();
 800a318:	f7ff ff7f 	bl	800a21a <CRS_STM_Init>

  DIS_Init();
 800a31c:	f7ff ff84 	bl	800a228 <DIS_Init>

  EDS_STM_Init();
 800a320:	f7ff ff89 	bl	800a236 <EDS_STM_Init>

  HIDS_Init();
 800a324:	f7ff ff8e 	bl	800a244 <HIDS_Init>

  HRS_Init();
 800a328:	f7ff ff93 	bl	800a252 <HRS_Init>

  HTS_Init();
 800a32c:	f7ff ff98 	bl	800a260 <HTS_Init>

  IAS_Init();
 800a330:	f7ff ff9d 	bl	800a26e <IAS_Init>

  LLS_Init();
 800a334:	f7ff ffa2 	bl	800a27c <LLS_Init>

  TPS_Init();
 800a338:	f7ff ffa7 	bl	800a28a <TPS_Init>

  MOTENV_STM_Init();
 800a33c:	f7ff ffac 	bl	800a298 <MOTENV_STM_Init>

  P2PS_STM_Init();
 800a340:	f7ff ffb1 	bl	800a2a6 <P2PS_STM_Init>

  ZDD_STM_Init();
 800a344:	f7ff ffb6 	bl	800a2b4 <ZDD_STM_Init>

  OTAS_STM_Init();
 800a348:	f7ff ffbb 	bl	800a2c2 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800a34c:	f7ff ffc7 	bl	800a2de <BVOPUS_STM_Init>

  MESH_Init();
 800a350:	f7ff ffbe 	bl	800a2d0 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800a354:	f002 fd28 	bl	800cda8 <SVCCTL_InitCustomSvc>
  
  return;
 800a358:	bf00      	nop
}
 800a35a:	bd80      	pop	{r7, pc}

0800a35c <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800a35c:	b480      	push	{r7}
 800a35e:	b083      	sub	sp, #12
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800a364:	4b09      	ldr	r3, [pc, #36]	@ (800a38c <SVCCTL_RegisterSvcHandler+0x30>)
 800a366:	7f1b      	ldrb	r3, [r3, #28]
 800a368:	4619      	mov	r1, r3
 800a36a:	4a08      	ldr	r2, [pc, #32]	@ (800a38c <SVCCTL_RegisterSvcHandler+0x30>)
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800a372:	4b06      	ldr	r3, [pc, #24]	@ (800a38c <SVCCTL_RegisterSvcHandler+0x30>)
 800a374:	7f1b      	ldrb	r3, [r3, #28]
 800a376:	3301      	adds	r3, #1
 800a378:	b2da      	uxtb	r2, r3
 800a37a:	4b04      	ldr	r3, [pc, #16]	@ (800a38c <SVCCTL_RegisterSvcHandler+0x30>)
 800a37c:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800a37e:	bf00      	nop
}
 800a380:	370c      	adds	r7, #12
 800a382:	46bd      	mov	sp, r7
 800a384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a388:	4770      	bx	lr
 800a38a:	bf00      	nop
 800a38c:	200001f8 	.word	0x200001f8

0800a390 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b086      	sub	sp, #24
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	3301      	adds	r3, #1
 800a39c:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800a39e:	2300      	movs	r3, #0
 800a3a0:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800a3a2:	693b      	ldr	r3, [r7, #16]
 800a3a4:	781b      	ldrb	r3, [r3, #0]
 800a3a6:	2bff      	cmp	r3, #255	@ 0xff
 800a3a8:	d125      	bne.n	800a3f6 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800a3aa:	693b      	ldr	r3, [r7, #16]
 800a3ac:	3302      	adds	r3, #2
 800a3ae:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	881b      	ldrh	r3, [r3, #0]
 800a3b4:	b29b      	uxth	r3, r3
 800a3b6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a3ba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a3be:	d118      	bne.n	800a3f2 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	757b      	strb	r3, [r7, #21]
 800a3c4:	e00d      	b.n	800a3e2 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800a3c6:	7d7b      	ldrb	r3, [r7, #21]
 800a3c8:	4a1a      	ldr	r2, [pc, #104]	@ (800a434 <SVCCTL_UserEvtRx+0xa4>)
 800a3ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a3ce:	6878      	ldr	r0, [r7, #4]
 800a3d0:	4798      	blx	r3
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800a3d6:	7dfb      	ldrb	r3, [r7, #23]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d108      	bne.n	800a3ee <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800a3dc:	7d7b      	ldrb	r3, [r7, #21]
 800a3de:	3301      	adds	r3, #1
 800a3e0:	757b      	strb	r3, [r7, #21]
 800a3e2:	4b14      	ldr	r3, [pc, #80]	@ (800a434 <SVCCTL_UserEvtRx+0xa4>)
 800a3e4:	7f1b      	ldrb	r3, [r3, #28]
 800a3e6:	7d7a      	ldrb	r2, [r7, #21]
 800a3e8:	429a      	cmp	r2, r3
 800a3ea:	d3ec      	bcc.n	800a3c6 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800a3ec:	e002      	b.n	800a3f4 <SVCCTL_UserEvtRx+0x64>
              break;
 800a3ee:	bf00      	nop
          break;
 800a3f0:	e000      	b.n	800a3f4 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800a3f2:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800a3f4:	e000      	b.n	800a3f8 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800a3f6:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 800a3f8:	7dfb      	ldrb	r3, [r7, #23]
 800a3fa:	2b02      	cmp	r3, #2
 800a3fc:	d00f      	beq.n	800a41e <SVCCTL_UserEvtRx+0x8e>
 800a3fe:	2b02      	cmp	r3, #2
 800a400:	dc10      	bgt.n	800a424 <SVCCTL_UserEvtRx+0x94>
 800a402:	2b00      	cmp	r3, #0
 800a404:	d002      	beq.n	800a40c <SVCCTL_UserEvtRx+0x7c>
 800a406:	2b01      	cmp	r3, #1
 800a408:	d006      	beq.n	800a418 <SVCCTL_UserEvtRx+0x88>
 800a40a:	e00b      	b.n	800a424 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800a40c:	6878      	ldr	r0, [r7, #4]
 800a40e:	f001 fcad 	bl	800bd6c <SVCCTL_App_Notification>
 800a412:	4603      	mov	r3, r0
 800a414:	75bb      	strb	r3, [r7, #22]
      break;
 800a416:	e008      	b.n	800a42a <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800a418:	2301      	movs	r3, #1
 800a41a:	75bb      	strb	r3, [r7, #22]
      break;
 800a41c:	e005      	b.n	800a42a <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800a41e:	2300      	movs	r3, #0
 800a420:	75bb      	strb	r3, [r7, #22]
      break;
 800a422:	e002      	b.n	800a42a <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800a424:	2301      	movs	r3, #1
 800a426:	75bb      	strb	r3, [r7, #22]
      break;
 800a428:	bf00      	nop
  }

  return (return_status);
 800a42a:	7dbb      	ldrb	r3, [r7, #22]
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	3718      	adds	r7, #24
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}
 800a434:	200001f8 	.word	0x200001f8

0800a438 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b088      	sub	sp, #32
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800a440:	f107 030c 	add.w	r3, r7, #12
 800a444:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800a44c:	69fb      	ldr	r3, [r7, #28]
 800a44e:	212e      	movs	r1, #46	@ 0x2e
 800a450:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 800a454:	f000 fae8 	bl	800aa28 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800a458:	69fb      	ldr	r3, [r7, #28]
 800a45a:	330b      	adds	r3, #11
 800a45c:	78db      	ldrb	r3, [r3, #3]
}
 800a45e:	4618      	mov	r0, r3
 800a460:	3720      	adds	r7, #32
 800a462:	46bd      	mov	sp, r7
 800a464:	bd80      	pop	{r7, pc}

0800a466 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800a466:	b580      	push	{r7, lr}
 800a468:	b088      	sub	sp, #32
 800a46a:	af00      	add	r7, sp, #0
 800a46c:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800a46e:	f107 030c 	add.w	r3, r7, #12
 800a472:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800a47a:	69fb      	ldr	r3, [r7, #28]
 800a47c:	210f      	movs	r1, #15
 800a47e:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 800a482:	f000 fad1 	bl	800aa28 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800a486:	69fb      	ldr	r3, [r7, #28]
 800a488:	330b      	adds	r3, #11
 800a48a:	78db      	ldrb	r3, [r3, #3]
}
 800a48c:	4618      	mov	r0, r3
 800a48e:	3720      	adds	r7, #32
 800a490:	46bd      	mov	sp, r7
 800a492:	bd80      	pop	{r7, pc}

0800a494 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b088      	sub	sp, #32
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800a49c:	f107 030c 	add.w	r3, r7, #12
 800a4a0:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800a4a2:	69fb      	ldr	r3, [r7, #28]
 800a4a4:	687a      	ldr	r2, [r7, #4]
 800a4a6:	2110      	movs	r1, #16
 800a4a8:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 800a4ac:	f000 fabc 	bl	800aa28 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800a4b0:	69fb      	ldr	r3, [r7, #28]
 800a4b2:	330b      	adds	r3, #11
 800a4b4:	78db      	ldrb	r3, [r3, #3]
}
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	3720      	adds	r7, #32
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	bd80      	pop	{r7, pc}
	...

0800a4c0 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800a4c0:	b480      	push	{r7}
 800a4c2:	b08b      	sub	sp, #44	@ 0x2c
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800a4d8:	2300      	movs	r3, #0
 800a4da:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800a4dc:	2300      	movs	r3, #0
 800a4de:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800a4e8:	4b4a      	ldr	r3, [pc, #296]	@ (800a614 <SHCI_GetWirelessFwInfo+0x154>)
 800a4ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a4ec:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800a4f0:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800a4f2:	693b      	ldr	r3, [r7, #16]
 800a4f4:	009b      	lsls	r3, r3, #2
 800a4f6:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800a4fa:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800a502:	68bb      	ldr	r3, [r7, #8]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	4a44      	ldr	r2, [pc, #272]	@ (800a618 <SHCI_GetWirelessFwInfo+0x158>)
 800a508:	4293      	cmp	r3, r2
 800a50a:	d10f      	bne.n	800a52c <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	695b      	ldr	r3, [r3, #20]
 800a510:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800a512:	68bb      	ldr	r3, [r7, #8]
 800a514:	699b      	ldr	r3, [r3, #24]
 800a516:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800a518:	68bb      	ldr	r3, [r7, #8]
 800a51a:	69db      	ldr	r3, [r3, #28]
 800a51c:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800a51e:	68bb      	ldr	r3, [r7, #8]
 800a520:	68db      	ldr	r3, [r3, #12]
 800a522:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800a524:	68bb      	ldr	r3, [r7, #8]
 800a526:	691b      	ldr	r3, [r3, #16]
 800a528:	617b      	str	r3, [r7, #20]
 800a52a:	e01a      	b.n	800a562 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800a52c:	693b      	ldr	r3, [r7, #16]
 800a52e:	009b      	lsls	r3, r3, #2
 800a530:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800a534:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800a538:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	691b      	ldr	r3, [r3, #16]
 800a540:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	695b      	ldr	r3, [r3, #20]
 800a548:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	699b      	ldr	r3, [r3, #24]
 800a550:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	685b      	ldr	r3, [r3, #4]
 800a558:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	689b      	ldr	r3, [r3, #8]
 800a560:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800a562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a564:	0e1b      	lsrs	r3, r3, #24
 800a566:	b2da      	uxtb	r2, r3
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800a56c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a56e:	0c1b      	lsrs	r3, r3, #16
 800a570:	b2da      	uxtb	r2, r3
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800a576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a578:	0a1b      	lsrs	r3, r3, #8
 800a57a:	b2da      	uxtb	r2, r3
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800a580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a582:	091b      	lsrs	r3, r3, #4
 800a584:	b2db      	uxtb	r3, r3
 800a586:	f003 030f 	and.w	r3, r3, #15
 800a58a:	b2da      	uxtb	r2, r3
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800a590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a592:	b2db      	uxtb	r3, r3
 800a594:	f003 030f 	and.w	r3, r3, #15
 800a598:	b2da      	uxtb	r2, r3
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800a59e:	6a3b      	ldr	r3, [r7, #32]
 800a5a0:	0e1b      	lsrs	r3, r3, #24
 800a5a2:	b2da      	uxtb	r2, r3
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800a5a8:	6a3b      	ldr	r3, [r7, #32]
 800a5aa:	0c1b      	lsrs	r3, r3, #16
 800a5ac:	b2da      	uxtb	r2, r3
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800a5b2:	6a3b      	ldr	r3, [r7, #32]
 800a5b4:	0a1b      	lsrs	r3, r3, #8
 800a5b6:	b2da      	uxtb	r2, r3
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800a5bc:	6a3b      	ldr	r3, [r7, #32]
 800a5be:	b2da      	uxtb	r2, r3
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800a5c4:	69fb      	ldr	r3, [r7, #28]
 800a5c6:	b2da      	uxtb	r2, r3
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800a5cc:	69bb      	ldr	r3, [r7, #24]
 800a5ce:	0e1b      	lsrs	r3, r3, #24
 800a5d0:	b2da      	uxtb	r2, r3
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800a5d6:	69bb      	ldr	r3, [r7, #24]
 800a5d8:	0c1b      	lsrs	r3, r3, #16
 800a5da:	b2da      	uxtb	r2, r3
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800a5e0:	69bb      	ldr	r3, [r7, #24]
 800a5e2:	0a1b      	lsrs	r3, r3, #8
 800a5e4:	b2da      	uxtb	r2, r3
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800a5ea:	697b      	ldr	r3, [r7, #20]
 800a5ec:	0e1b      	lsrs	r3, r3, #24
 800a5ee:	b2da      	uxtb	r2, r3
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800a5f4:	697b      	ldr	r3, [r7, #20]
 800a5f6:	0c1b      	lsrs	r3, r3, #16
 800a5f8:	b2da      	uxtb	r2, r3
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800a5fe:	697b      	ldr	r3, [r7, #20]
 800a600:	b2da      	uxtb	r2, r3
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800a606:	2300      	movs	r3, #0
}
 800a608:	4618      	mov	r0, r3
 800a60a:	372c      	adds	r7, #44	@ 0x2c
 800a60c:	46bd      	mov	sp, r7
 800a60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a612:	4770      	bx	lr
 800a614:	58004000 	.word	0x58004000
 800a618:	a94656b9 	.word	0xa94656b9

0800a61c <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b082      	sub	sp, #8
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
 800a624:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	685b      	ldr	r3, [r3, #4]
 800a62a:	4a08      	ldr	r2, [pc, #32]	@ (800a64c <hci_init+0x30>)
 800a62c:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800a62e:	4a08      	ldr	r2, [pc, #32]	@ (800a650 <hci_init+0x34>)
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800a634:	4806      	ldr	r0, [pc, #24]	@ (800a650 <hci_init+0x34>)
 800a636:	f000 f979 	bl	800a92c <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	4618      	mov	r0, r3
 800a640:	f000 f8da 	bl	800a7f8 <TlInit>

  return;
 800a644:	bf00      	nop
}
 800a646:	3708      	adds	r7, #8
 800a648:	46bd      	mov	sp, r7
 800a64a:	bd80      	pop	{r7, pc}
 800a64c:	20002490 	.word	0x20002490
 800a650:	20002468 	.word	0x20002468

0800a654 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b084      	sub	sp, #16
 800a658:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800a65a:	4822      	ldr	r0, [pc, #136]	@ (800a6e4 <hci_user_evt_proc+0x90>)
 800a65c:	f000 fe10 	bl	800b280 <LST_is_empty>
 800a660:	4603      	mov	r3, r0
 800a662:	2b00      	cmp	r3, #0
 800a664:	d12b      	bne.n	800a6be <hci_user_evt_proc+0x6a>
 800a666:	4b20      	ldr	r3, [pc, #128]	@ (800a6e8 <hci_user_evt_proc+0x94>)
 800a668:	781b      	ldrb	r3, [r3, #0]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d027      	beq.n	800a6be <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800a66e:	f107 030c 	add.w	r3, r7, #12
 800a672:	4619      	mov	r1, r3
 800a674:	481b      	ldr	r0, [pc, #108]	@ (800a6e4 <hci_user_evt_proc+0x90>)
 800a676:	f000 fe92 	bl	800b39e <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800a67a:	4b1c      	ldr	r3, [pc, #112]	@ (800a6ec <hci_user_evt_proc+0x98>)
 800a67c:	69db      	ldr	r3, [r3, #28]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d00c      	beq.n	800a69c <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800a686:	2301      	movs	r3, #1
 800a688:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800a68a:	4b18      	ldr	r3, [pc, #96]	@ (800a6ec <hci_user_evt_proc+0x98>)
 800a68c:	69db      	ldr	r3, [r3, #28]
 800a68e:	1d3a      	adds	r2, r7, #4
 800a690:	4610      	mov	r0, r2
 800a692:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800a694:	793a      	ldrb	r2, [r7, #4]
 800a696:	4b14      	ldr	r3, [pc, #80]	@ (800a6e8 <hci_user_evt_proc+0x94>)
 800a698:	701a      	strb	r2, [r3, #0]
 800a69a:	e002      	b.n	800a6a2 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800a69c:	4b12      	ldr	r3, [pc, #72]	@ (800a6e8 <hci_user_evt_proc+0x94>)
 800a69e:	2201      	movs	r2, #1
 800a6a0:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800a6a2:	4b11      	ldr	r3, [pc, #68]	@ (800a6e8 <hci_user_evt_proc+0x94>)
 800a6a4:	781b      	ldrb	r3, [r3, #0]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d004      	beq.n	800a6b4 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	f000 fc0d 	bl	800aecc <TL_MM_EvtDone>
 800a6b2:	e004      	b.n	800a6be <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	4619      	mov	r1, r3
 800a6b8:	480a      	ldr	r0, [pc, #40]	@ (800a6e4 <hci_user_evt_proc+0x90>)
 800a6ba:	f000 fe03 	bl	800b2c4 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800a6be:	4809      	ldr	r0, [pc, #36]	@ (800a6e4 <hci_user_evt_proc+0x90>)
 800a6c0:	f000 fdde 	bl	800b280 <LST_is_empty>
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d107      	bne.n	800a6da <hci_user_evt_proc+0x86>
 800a6ca:	4b07      	ldr	r3, [pc, #28]	@ (800a6e8 <hci_user_evt_proc+0x94>)
 800a6cc:	781b      	ldrb	r3, [r3, #0]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d003      	beq.n	800a6da <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800a6d2:	4804      	ldr	r0, [pc, #16]	@ (800a6e4 <hci_user_evt_proc+0x90>)
 800a6d4:	f002 fa18 	bl	800cb08 <hci_notify_asynch_evt>
  }


  return;
 800a6d8:	bf00      	nop
 800a6da:	bf00      	nop
}
 800a6dc:	3710      	adds	r7, #16
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bd80      	pop	{r7, pc}
 800a6e2:	bf00      	nop
 800a6e4:	20000220 	.word	0x20000220
 800a6e8:	2000022c 	.word	0x2000022c
 800a6ec:	20002468 	.word	0x20002468

0800a6f0 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b088      	sub	sp, #32
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
 800a6f8:	460b      	mov	r3, r1
 800a6fa:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800a6fc:	2000      	movs	r0, #0
 800a6fe:	f000 f8d1 	bl	800a8a4 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800a702:	2300      	movs	r3, #0
 800a704:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	885b      	ldrh	r3, [r3, #2]
 800a70a:	b21b      	sxth	r3, r3
 800a70c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a710:	b21a      	sxth	r2, r3
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	881b      	ldrh	r3, [r3, #0]
 800a716:	029b      	lsls	r3, r3, #10
 800a718:	b21b      	sxth	r3, r3
 800a71a:	4313      	orrs	r3, r2
 800a71c:	b21b      	sxth	r3, r3
 800a71e:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 800a720:	4b33      	ldr	r3, [pc, #204]	@ (800a7f0 <hci_send_req+0x100>)
 800a722:	2201      	movs	r2, #1
 800a724:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	68db      	ldr	r3, [r3, #12]
 800a72a:	b2d9      	uxtb	r1, r3
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	689a      	ldr	r2, [r3, #8]
 800a730:	8bbb      	ldrh	r3, [r7, #28]
 800a732:	4618      	mov	r0, r3
 800a734:	f000 f890 	bl	800a858 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800a738:	e04e      	b.n	800a7d8 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800a73a:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800a73e:	f002 f9fa 	bl	800cb36 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800a742:	e043      	b.n	800a7cc <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800a744:	f107 030c 	add.w	r3, r7, #12
 800a748:	4619      	mov	r1, r3
 800a74a:	482a      	ldr	r0, [pc, #168]	@ (800a7f4 <hci_send_req+0x104>)
 800a74c:	f000 fe27 	bl	800b39e <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	7a5b      	ldrb	r3, [r3, #9]
 800a754:	2b0f      	cmp	r3, #15
 800a756:	d114      	bne.n	800a782 <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	330b      	adds	r3, #11
 800a75c:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800a75e:	693b      	ldr	r3, [r7, #16]
 800a760:	885b      	ldrh	r3, [r3, #2]
 800a762:	b29b      	uxth	r3, r3
 800a764:	8bba      	ldrh	r2, [r7, #28]
 800a766:	429a      	cmp	r2, r3
 800a768:	d104      	bne.n	800a774 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	691b      	ldr	r3, [r3, #16]
 800a76e:	693a      	ldr	r2, [r7, #16]
 800a770:	7812      	ldrb	r2, [r2, #0]
 800a772:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800a774:	693b      	ldr	r3, [r7, #16]
 800a776:	785b      	ldrb	r3, [r3, #1]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d027      	beq.n	800a7cc <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800a77c:	2301      	movs	r3, #1
 800a77e:	77fb      	strb	r3, [r7, #31]
 800a780:	e024      	b.n	800a7cc <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	330b      	adds	r3, #11
 800a786:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800a788:	69bb      	ldr	r3, [r7, #24]
 800a78a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a78e:	b29b      	uxth	r3, r3
 800a790:	8bba      	ldrh	r2, [r7, #28]
 800a792:	429a      	cmp	r2, r3
 800a794:	d114      	bne.n	800a7c0 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	7a9b      	ldrb	r3, [r3, #10]
 800a79a:	3b03      	subs	r3, #3
 800a79c:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	695a      	ldr	r2, [r3, #20]
 800a7a2:	7dfb      	ldrb	r3, [r7, #23]
 800a7a4:	429a      	cmp	r2, r3
 800a7a6:	bfa8      	it	ge
 800a7a8:	461a      	movge	r2, r3
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	6918      	ldr	r0, [r3, #16]
 800a7b2:	69bb      	ldr	r3, [r7, #24]
 800a7b4:	1cd9      	adds	r1, r3, #3
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	695b      	ldr	r3, [r3, #20]
 800a7ba:	461a      	mov	r2, r3
 800a7bc:	f004 f98f 	bl	800eade <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800a7c0:	69bb      	ldr	r3, [r7, #24]
 800a7c2:	781b      	ldrb	r3, [r3, #0]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d001      	beq.n	800a7cc <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800a7c8:	2301      	movs	r3, #1
 800a7ca:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800a7cc:	4809      	ldr	r0, [pc, #36]	@ (800a7f4 <hci_send_req+0x104>)
 800a7ce:	f000 fd57 	bl	800b280 <LST_is_empty>
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d0b5      	beq.n	800a744 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800a7d8:	7ffb      	ldrb	r3, [r7, #31]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d0ad      	beq.n	800a73a <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800a7de:	2001      	movs	r0, #1
 800a7e0:	f000 f860 	bl	800a8a4 <NotifyCmdStatus>

  return 0;
 800a7e4:	2300      	movs	r3, #0
}
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	3720      	adds	r7, #32
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	bd80      	pop	{r7, pc}
 800a7ee:	bf00      	nop
 800a7f0:	20002494 	.word	0x20002494
 800a7f4:	20002488 	.word	0x20002488

0800a7f8 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b086      	sub	sp, #24
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800a800:	480f      	ldr	r0, [pc, #60]	@ (800a840 <TlInit+0x48>)
 800a802:	f000 fd2d 	bl	800b260 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800a806:	4a0f      	ldr	r2, [pc, #60]	@ (800a844 <TlInit+0x4c>)
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800a80c:	480e      	ldr	r0, [pc, #56]	@ (800a848 <TlInit+0x50>)
 800a80e:	f000 fd27 	bl	800b260 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800a812:	4b0e      	ldr	r3, [pc, #56]	@ (800a84c <TlInit+0x54>)
 800a814:	2201      	movs	r2, #1
 800a816:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800a818:	4b0d      	ldr	r3, [pc, #52]	@ (800a850 <TlInit+0x58>)
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d00a      	beq.n	800a836 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800a824:	4b0b      	ldr	r3, [pc, #44]	@ (800a854 <TlInit+0x5c>)
 800a826:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800a828:	4b09      	ldr	r3, [pc, #36]	@ (800a850 <TlInit+0x58>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	f107 0208 	add.w	r2, r7, #8
 800a830:	4610      	mov	r0, r2
 800a832:	4798      	blx	r3
  }

  return;
 800a834:	bf00      	nop
 800a836:	bf00      	nop
}
 800a838:	3718      	adds	r7, #24
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}
 800a83e:	bf00      	nop
 800a840:	20002488 	.word	0x20002488
 800a844:	20000228 	.word	0x20000228
 800a848:	20000220 	.word	0x20000220
 800a84c:	2000022c 	.word	0x2000022c
 800a850:	20002468 	.word	0x20002468
 800a854:	0800a8e5 	.word	0x0800a8e5

0800a858 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b082      	sub	sp, #8
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	4603      	mov	r3, r0
 800a860:	603a      	str	r2, [r7, #0]
 800a862:	80fb      	strh	r3, [r7, #6]
 800a864:	460b      	mov	r3, r1
 800a866:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800a868:	4b0c      	ldr	r3, [pc, #48]	@ (800a89c <SendCmd+0x44>)
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	88fa      	ldrh	r2, [r7, #6]
 800a86e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800a872:	4b0a      	ldr	r3, [pc, #40]	@ (800a89c <SendCmd+0x44>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	797a      	ldrb	r2, [r7, #5]
 800a878:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800a87a:	4b08      	ldr	r3, [pc, #32]	@ (800a89c <SendCmd+0x44>)
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	330c      	adds	r3, #12
 800a880:	797a      	ldrb	r2, [r7, #5]
 800a882:	6839      	ldr	r1, [r7, #0]
 800a884:	4618      	mov	r0, r3
 800a886:	f004 f92a 	bl	800eade <memcpy>

  hciContext.io.Send(0,0);
 800a88a:	4b05      	ldr	r3, [pc, #20]	@ (800a8a0 <SendCmd+0x48>)
 800a88c:	691b      	ldr	r3, [r3, #16]
 800a88e:	2100      	movs	r1, #0
 800a890:	2000      	movs	r0, #0
 800a892:	4798      	blx	r3

  return;
 800a894:	bf00      	nop
}
 800a896:	3708      	adds	r7, #8
 800a898:	46bd      	mov	sp, r7
 800a89a:	bd80      	pop	{r7, pc}
 800a89c:	20000228 	.word	0x20000228
 800a8a0:	20002468 	.word	0x20002468

0800a8a4 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b082      	sub	sp, #8
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800a8ae:	79fb      	ldrb	r3, [r7, #7]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d108      	bne.n	800a8c6 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800a8b4:	4b0a      	ldr	r3, [pc, #40]	@ (800a8e0 <NotifyCmdStatus+0x3c>)
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d00d      	beq.n	800a8d8 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800a8bc:	4b08      	ldr	r3, [pc, #32]	@ (800a8e0 <NotifyCmdStatus+0x3c>)
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	2000      	movs	r0, #0
 800a8c2:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800a8c4:	e008      	b.n	800a8d8 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800a8c6:	4b06      	ldr	r3, [pc, #24]	@ (800a8e0 <NotifyCmdStatus+0x3c>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d004      	beq.n	800a8d8 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800a8ce:	4b04      	ldr	r3, [pc, #16]	@ (800a8e0 <NotifyCmdStatus+0x3c>)
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	2001      	movs	r0, #1
 800a8d4:	4798      	blx	r3
  return;
 800a8d6:	bf00      	nop
 800a8d8:	bf00      	nop
}
 800a8da:	3708      	adds	r7, #8
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	bd80      	pop	{r7, pc}
 800a8e0:	20002490 	.word	0x20002490

0800a8e4 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b082      	sub	sp, #8
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	7a5b      	ldrb	r3, [r3, #9]
 800a8f0:	2b0f      	cmp	r3, #15
 800a8f2:	d003      	beq.n	800a8fc <TlEvtReceived+0x18>
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	7a5b      	ldrb	r3, [r3, #9]
 800a8f8:	2b0e      	cmp	r3, #14
 800a8fa:	d107      	bne.n	800a90c <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800a8fc:	6879      	ldr	r1, [r7, #4]
 800a8fe:	4809      	ldr	r0, [pc, #36]	@ (800a924 <TlEvtReceived+0x40>)
 800a900:	f000 fd06 	bl	800b310 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800a904:	2000      	movs	r0, #0
 800a906:	f002 f90b 	bl	800cb20 <hci_cmd_resp_release>
 800a90a:	e006      	b.n	800a91a <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800a90c:	6879      	ldr	r1, [r7, #4]
 800a90e:	4806      	ldr	r0, [pc, #24]	@ (800a928 <TlEvtReceived+0x44>)
 800a910:	f000 fcfe 	bl	800b310 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800a914:	4804      	ldr	r0, [pc, #16]	@ (800a928 <TlEvtReceived+0x44>)
 800a916:	f002 f8f7 	bl	800cb08 <hci_notify_asynch_evt>
  }

  return;
 800a91a:	bf00      	nop
}
 800a91c:	3708      	adds	r7, #8
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd80      	pop	{r7, pc}
 800a922:	bf00      	nop
 800a924:	20002488 	.word	0x20002488
 800a928:	20000220 	.word	0x20000220

0800a92c <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800a92c:	b480      	push	{r7}
 800a92e:	b083      	sub	sp, #12
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	4a05      	ldr	r2, [pc, #20]	@ (800a94c <hci_register_io_bus+0x20>)
 800a938:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	4a04      	ldr	r2, [pc, #16]	@ (800a950 <hci_register_io_bus+0x24>)
 800a93e:	611a      	str	r2, [r3, #16]

  return;
 800a940:	bf00      	nop
}
 800a942:	370c      	adds	r7, #12
 800a944:	46bd      	mov	sp, r7
 800a946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94a:	4770      	bx	lr
 800a94c:	0800ac45 	.word	0x0800ac45
 800a950:	0800acad 	.word	0x0800acad

0800a954 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b082      	sub	sp, #8
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
 800a95c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	685b      	ldr	r3, [r3, #4]
 800a962:	4a08      	ldr	r2, [pc, #32]	@ (800a984 <shci_init+0x30>)
 800a964:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800a966:	4a08      	ldr	r2, [pc, #32]	@ (800a988 <shci_init+0x34>)
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800a96c:	4806      	ldr	r0, [pc, #24]	@ (800a988 <shci_init+0x34>)
 800a96e:	f000 f915 	bl	800ab9c <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	4618      	mov	r0, r3
 800a978:	f000 f898 	bl	800aaac <TlInit>

  return;
 800a97c:	bf00      	nop
}
 800a97e:	3708      	adds	r7, #8
 800a980:	46bd      	mov	sp, r7
 800a982:	bd80      	pop	{r7, pc}
 800a984:	200024b8 	.word	0x200024b8
 800a988:	20002498 	.word	0x20002498

0800a98c <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b084      	sub	sp, #16
 800a990:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800a992:	4822      	ldr	r0, [pc, #136]	@ (800aa1c <shci_user_evt_proc+0x90>)
 800a994:	f000 fc74 	bl	800b280 <LST_is_empty>
 800a998:	4603      	mov	r3, r0
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d12b      	bne.n	800a9f6 <shci_user_evt_proc+0x6a>
 800a99e:	4b20      	ldr	r3, [pc, #128]	@ (800aa20 <shci_user_evt_proc+0x94>)
 800a9a0:	781b      	ldrb	r3, [r3, #0]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d027      	beq.n	800a9f6 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800a9a6:	f107 030c 	add.w	r3, r7, #12
 800a9aa:	4619      	mov	r1, r3
 800a9ac:	481b      	ldr	r0, [pc, #108]	@ (800aa1c <shci_user_evt_proc+0x90>)
 800a9ae:	f000 fcf6 	bl	800b39e <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800a9b2:	4b1c      	ldr	r3, [pc, #112]	@ (800aa24 <shci_user_evt_proc+0x98>)
 800a9b4:	69db      	ldr	r3, [r3, #28]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d00c      	beq.n	800a9d4 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800a9be:	2301      	movs	r3, #1
 800a9c0:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800a9c2:	4b18      	ldr	r3, [pc, #96]	@ (800aa24 <shci_user_evt_proc+0x98>)
 800a9c4:	69db      	ldr	r3, [r3, #28]
 800a9c6:	1d3a      	adds	r2, r7, #4
 800a9c8:	4610      	mov	r0, r2
 800a9ca:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800a9cc:	793a      	ldrb	r2, [r7, #4]
 800a9ce:	4b14      	ldr	r3, [pc, #80]	@ (800aa20 <shci_user_evt_proc+0x94>)
 800a9d0:	701a      	strb	r2, [r3, #0]
 800a9d2:	e002      	b.n	800a9da <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800a9d4:	4b12      	ldr	r3, [pc, #72]	@ (800aa20 <shci_user_evt_proc+0x94>)
 800a9d6:	2201      	movs	r2, #1
 800a9d8:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800a9da:	4b11      	ldr	r3, [pc, #68]	@ (800aa20 <shci_user_evt_proc+0x94>)
 800a9dc:	781b      	ldrb	r3, [r3, #0]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d004      	beq.n	800a9ec <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	f000 fa71 	bl	800aecc <TL_MM_EvtDone>
 800a9ea:	e004      	b.n	800a9f6 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	4619      	mov	r1, r3
 800a9f0:	480a      	ldr	r0, [pc, #40]	@ (800aa1c <shci_user_evt_proc+0x90>)
 800a9f2:	f000 fc67 	bl	800b2c4 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800a9f6:	4809      	ldr	r0, [pc, #36]	@ (800aa1c <shci_user_evt_proc+0x90>)
 800a9f8:	f000 fc42 	bl	800b280 <LST_is_empty>
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d107      	bne.n	800aa12 <shci_user_evt_proc+0x86>
 800aa02:	4b07      	ldr	r3, [pc, #28]	@ (800aa20 <shci_user_evt_proc+0x94>)
 800aa04:	781b      	ldrb	r3, [r3, #0]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d003      	beq.n	800aa12 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800aa0a:	4804      	ldr	r0, [pc, #16]	@ (800aa1c <shci_user_evt_proc+0x90>)
 800aa0c:	f7f7 fc0b 	bl	8002226 <shci_notify_asynch_evt>
  }


  return;
 800aa10:	bf00      	nop
 800aa12:	bf00      	nop
}
 800aa14:	3710      	adds	r7, #16
 800aa16:	46bd      	mov	sp, r7
 800aa18:	bd80      	pop	{r7, pc}
 800aa1a:	bf00      	nop
 800aa1c:	20000230 	.word	0x20000230
 800aa20:	20000240 	.word	0x20000240
 800aa24:	20002498 	.word	0x20002498

0800aa28 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b084      	sub	sp, #16
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	60ba      	str	r2, [r7, #8]
 800aa30:	607b      	str	r3, [r7, #4]
 800aa32:	4603      	mov	r3, r0
 800aa34:	81fb      	strh	r3, [r7, #14]
 800aa36:	460b      	mov	r3, r1
 800aa38:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800aa3a:	2000      	movs	r0, #0
 800aa3c:	f000 f868 	bl	800ab10 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800aa40:	4b17      	ldr	r3, [pc, #92]	@ (800aaa0 <shci_send+0x78>)
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	89fa      	ldrh	r2, [r7, #14]
 800aa46:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800aa4a:	4b15      	ldr	r3, [pc, #84]	@ (800aaa0 <shci_send+0x78>)
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	7b7a      	ldrb	r2, [r7, #13]
 800aa50:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800aa52:	4b13      	ldr	r3, [pc, #76]	@ (800aaa0 <shci_send+0x78>)
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	330c      	adds	r3, #12
 800aa58:	7b7a      	ldrb	r2, [r7, #13]
 800aa5a:	68b9      	ldr	r1, [r7, #8]
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	f004 f83e 	bl	800eade <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 800aa62:	4b10      	ldr	r3, [pc, #64]	@ (800aaa4 <shci_send+0x7c>)
 800aa64:	2201      	movs	r2, #1
 800aa66:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 800aa68:	4b0f      	ldr	r3, [pc, #60]	@ (800aaa8 <shci_send+0x80>)
 800aa6a:	691b      	ldr	r3, [r3, #16]
 800aa6c:	2100      	movs	r1, #0
 800aa6e:	2000      	movs	r0, #0
 800aa70:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800aa72:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800aa76:	f7f7 fbed 	bl	8002254 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	f103 0008 	add.w	r0, r3, #8
 800aa80:	4b07      	ldr	r3, [pc, #28]	@ (800aaa0 <shci_send+0x78>)
 800aa82:	6819      	ldr	r1, [r3, #0]
 800aa84:	4b06      	ldr	r3, [pc, #24]	@ (800aaa0 <shci_send+0x78>)
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	789b      	ldrb	r3, [r3, #2]
 800aa8a:	3303      	adds	r3, #3
 800aa8c:	461a      	mov	r2, r3
 800aa8e:	f004 f826 	bl	800eade <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800aa92:	2001      	movs	r0, #1
 800aa94:	f000 f83c 	bl	800ab10 <Cmd_SetStatus>

  return;
 800aa98:	bf00      	nop
}
 800aa9a:	3710      	adds	r7, #16
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	bd80      	pop	{r7, pc}
 800aaa0:	2000023c 	.word	0x2000023c
 800aaa4:	200024bc 	.word	0x200024bc
 800aaa8:	20002498 	.word	0x20002498

0800aaac <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b086      	sub	sp, #24
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800aab4:	4a10      	ldr	r2, [pc, #64]	@ (800aaf8 <TlInit+0x4c>)
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800aaba:	4810      	ldr	r0, [pc, #64]	@ (800aafc <TlInit+0x50>)
 800aabc:	f000 fbd0 	bl	800b260 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800aac0:	2001      	movs	r0, #1
 800aac2:	f000 f825 	bl	800ab10 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800aac6:	4b0e      	ldr	r3, [pc, #56]	@ (800ab00 <TlInit+0x54>)
 800aac8:	2201      	movs	r2, #1
 800aaca:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800aacc:	4b0d      	ldr	r3, [pc, #52]	@ (800ab04 <TlInit+0x58>)
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d00c      	beq.n	800aaee <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800aad8:	4b0b      	ldr	r3, [pc, #44]	@ (800ab08 <TlInit+0x5c>)
 800aada:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800aadc:	4b0b      	ldr	r3, [pc, #44]	@ (800ab0c <TlInit+0x60>)
 800aade:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800aae0:	4b08      	ldr	r3, [pc, #32]	@ (800ab04 <TlInit+0x58>)
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	f107 020c 	add.w	r2, r7, #12
 800aae8:	4610      	mov	r0, r2
 800aaea:	4798      	blx	r3
  }

  return;
 800aaec:	bf00      	nop
 800aaee:	bf00      	nop
}
 800aaf0:	3718      	adds	r7, #24
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	bd80      	pop	{r7, pc}
 800aaf6:	bf00      	nop
 800aaf8:	2000023c 	.word	0x2000023c
 800aafc:	20000230 	.word	0x20000230
 800ab00:	20000240 	.word	0x20000240
 800ab04:	20002498 	.word	0x20002498
 800ab08:	0800ab61 	.word	0x0800ab61
 800ab0c:	0800ab79 	.word	0x0800ab79

0800ab10 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b082      	sub	sp, #8
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	4603      	mov	r3, r0
 800ab18:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800ab1a:	79fb      	ldrb	r3, [r7, #7]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d10b      	bne.n	800ab38 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800ab20:	4b0d      	ldr	r3, [pc, #52]	@ (800ab58 <Cmd_SetStatus+0x48>)
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d003      	beq.n	800ab30 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800ab28:	4b0b      	ldr	r3, [pc, #44]	@ (800ab58 <Cmd_SetStatus+0x48>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	2000      	movs	r0, #0
 800ab2e:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800ab30:	4b0a      	ldr	r3, [pc, #40]	@ (800ab5c <Cmd_SetStatus+0x4c>)
 800ab32:	2200      	movs	r2, #0
 800ab34:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800ab36:	e00b      	b.n	800ab50 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800ab38:	4b08      	ldr	r3, [pc, #32]	@ (800ab5c <Cmd_SetStatus+0x4c>)
 800ab3a:	2201      	movs	r2, #1
 800ab3c:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800ab3e:	4b06      	ldr	r3, [pc, #24]	@ (800ab58 <Cmd_SetStatus+0x48>)
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d004      	beq.n	800ab50 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800ab46:	4b04      	ldr	r3, [pc, #16]	@ (800ab58 <Cmd_SetStatus+0x48>)
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	2001      	movs	r0, #1
 800ab4c:	4798      	blx	r3
  return;
 800ab4e:	bf00      	nop
 800ab50:	bf00      	nop
}
 800ab52:	3708      	adds	r7, #8
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}
 800ab58:	200024b8 	.word	0x200024b8
 800ab5c:	20000238 	.word	0x20000238

0800ab60 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b082      	sub	sp, #8
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800ab68:	2000      	movs	r0, #0
 800ab6a:	f7f7 fb68 	bl	800223e <shci_cmd_resp_release>

  return;
 800ab6e:	bf00      	nop
}
 800ab70:	3708      	adds	r7, #8
 800ab72:	46bd      	mov	sp, r7
 800ab74:	bd80      	pop	{r7, pc}
	...

0800ab78 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b082      	sub	sp, #8
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800ab80:	6879      	ldr	r1, [r7, #4]
 800ab82:	4805      	ldr	r0, [pc, #20]	@ (800ab98 <TlUserEvtReceived+0x20>)
 800ab84:	f000 fbc4 	bl	800b310 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800ab88:	4803      	ldr	r0, [pc, #12]	@ (800ab98 <TlUserEvtReceived+0x20>)
 800ab8a:	f7f7 fb4c 	bl	8002226 <shci_notify_asynch_evt>

  return;
 800ab8e:	bf00      	nop
}
 800ab90:	3708      	adds	r7, #8
 800ab92:	46bd      	mov	sp, r7
 800ab94:	bd80      	pop	{r7, pc}
 800ab96:	bf00      	nop
 800ab98:	20000230 	.word	0x20000230

0800ab9c <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800ab9c:	b480      	push	{r7}
 800ab9e:	b083      	sub	sp, #12
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	4a05      	ldr	r2, [pc, #20]	@ (800abbc <shci_register_io_bus+0x20>)
 800aba8:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	4a04      	ldr	r2, [pc, #16]	@ (800abc0 <shci_register_io_bus+0x24>)
 800abae:	611a      	str	r2, [r3, #16]

  return;
 800abb0:	bf00      	nop
}
 800abb2:	370c      	adds	r7, #12
 800abb4:	46bd      	mov	sp, r7
 800abb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abba:	4770      	bx	lr
 800abbc:	0800ad59 	.word	0x0800ad59
 800abc0:	0800adad 	.word	0x0800adad

0800abc4 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800abc8:	f002 fb28 	bl	800d21c <HW_IPCC_Enable>

  return;
 800abcc:	bf00      	nop
}
 800abce:	bd80      	pop	{r7, pc}

0800abd0 <TL_Init>:


void TL_Init( void )
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800abd4:	4b10      	ldr	r3, [pc, #64]	@ (800ac18 <TL_Init+0x48>)
 800abd6:	4a11      	ldr	r2, [pc, #68]	@ (800ac1c <TL_Init+0x4c>)
 800abd8:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800abda:	4b0f      	ldr	r3, [pc, #60]	@ (800ac18 <TL_Init+0x48>)
 800abdc:	4a10      	ldr	r2, [pc, #64]	@ (800ac20 <TL_Init+0x50>)
 800abde:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800abe0:	4b0d      	ldr	r3, [pc, #52]	@ (800ac18 <TL_Init+0x48>)
 800abe2:	4a10      	ldr	r2, [pc, #64]	@ (800ac24 <TL_Init+0x54>)
 800abe4:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800abe6:	4b0c      	ldr	r3, [pc, #48]	@ (800ac18 <TL_Init+0x48>)
 800abe8:	4a0f      	ldr	r2, [pc, #60]	@ (800ac28 <TL_Init+0x58>)
 800abea:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800abec:	4b0a      	ldr	r3, [pc, #40]	@ (800ac18 <TL_Init+0x48>)
 800abee:	4a0f      	ldr	r2, [pc, #60]	@ (800ac2c <TL_Init+0x5c>)
 800abf0:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800abf2:	4b09      	ldr	r3, [pc, #36]	@ (800ac18 <TL_Init+0x48>)
 800abf4:	4a0e      	ldr	r2, [pc, #56]	@ (800ac30 <TL_Init+0x60>)
 800abf6:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800abf8:	4b07      	ldr	r3, [pc, #28]	@ (800ac18 <TL_Init+0x48>)
 800abfa:	4a0e      	ldr	r2, [pc, #56]	@ (800ac34 <TL_Init+0x64>)
 800abfc:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800abfe:	4b06      	ldr	r3, [pc, #24]	@ (800ac18 <TL_Init+0x48>)
 800ac00:	4a0d      	ldr	r2, [pc, #52]	@ (800ac38 <TL_Init+0x68>)
 800ac02:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800ac04:	4b04      	ldr	r3, [pc, #16]	@ (800ac18 <TL_Init+0x48>)
 800ac06:	4a0d      	ldr	r2, [pc, #52]	@ (800ac3c <TL_Init+0x6c>)
 800ac08:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800ac0a:	4b03      	ldr	r3, [pc, #12]	@ (800ac18 <TL_Init+0x48>)
 800ac0c:	4a0c      	ldr	r2, [pc, #48]	@ (800ac40 <TL_Init+0x70>)
 800ac0e:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800ac10:	f002 fb18 	bl	800d244 <HW_IPCC_Init>

  return;
 800ac14:	bf00      	nop
}
 800ac16:	bd80      	pop	{r7, pc}
 800ac18:	20030000 	.word	0x20030000
 800ac1c:	20030028 	.word	0x20030028
 800ac20:	20030048 	.word	0x20030048
 800ac24:	20030058 	.word	0x20030058
 800ac28:	20030068 	.word	0x20030068
 800ac2c:	20030070 	.word	0x20030070
 800ac30:	20030078 	.word	0x20030078
 800ac34:	20030080 	.word	0x20030080
 800ac38:	2003009c 	.word	0x2003009c
 800ac3c:	200300a0 	.word	0x200300a0
 800ac40:	200300ac 	.word	0x200300ac

0800ac44 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b084      	sub	sp, #16
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800ac50:	4811      	ldr	r0, [pc, #68]	@ (800ac98 <TL_BLE_Init+0x54>)
 800ac52:	f000 fb05 	bl	800b260 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800ac56:	4b11      	ldr	r3, [pc, #68]	@ (800ac9c <TL_BLE_Init+0x58>)
 800ac58:	685b      	ldr	r3, [r3, #4]
 800ac5a:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	689a      	ldr	r2, [r3, #8]
 800ac60:	68bb      	ldr	r3, [r7, #8]
 800ac62:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	68da      	ldr	r2, [r3, #12]
 800ac68:	68bb      	ldr	r3, [r7, #8]
 800ac6a:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800ac6c:	68bb      	ldr	r3, [r7, #8]
 800ac6e:	4a0c      	ldr	r2, [pc, #48]	@ (800aca0 <TL_BLE_Init+0x5c>)
 800ac70:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800ac72:	68bb      	ldr	r3, [r7, #8]
 800ac74:	4a08      	ldr	r2, [pc, #32]	@ (800ac98 <TL_BLE_Init+0x54>)
 800ac76:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800ac78:	f002 fafa 	bl	800d270 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	4a08      	ldr	r2, [pc, #32]	@ (800aca4 <TL_BLE_Init+0x60>)
 800ac82:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	685b      	ldr	r3, [r3, #4]
 800ac88:	4a07      	ldr	r2, [pc, #28]	@ (800aca8 <TL_BLE_Init+0x64>)
 800ac8a:	6013      	str	r3, [r2, #0]

  return 0;
 800ac8c:	2300      	movs	r3, #0
}
 800ac8e:	4618      	mov	r0, r3
 800ac90:	3710      	adds	r7, #16
 800ac92:	46bd      	mov	sp, r7
 800ac94:	bd80      	pop	{r7, pc}
 800ac96:	bf00      	nop
 800ac98:	200300c8 	.word	0x200300c8
 800ac9c:	20030000 	.word	0x20030000
 800aca0:	20030a58 	.word	0x20030a58
 800aca4:	200024c8 	.word	0x200024c8
 800aca8:	200024cc 	.word	0x200024cc

0800acac <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b082      	sub	sp, #8
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
 800acb4:	460b      	mov	r3, r1
 800acb6:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800acb8:	4b09      	ldr	r3, [pc, #36]	@ (800ace0 <TL_BLE_SendCmd+0x34>)
 800acba:	685b      	ldr	r3, [r3, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	2201      	movs	r2, #1
 800acc0:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800acc2:	4b07      	ldr	r3, [pc, #28]	@ (800ace0 <TL_BLE_SendCmd+0x34>)
 800acc4:	685b      	ldr	r3, [r3, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	4619      	mov	r1, r3
 800acca:	2001      	movs	r0, #1
 800accc:	f000 f96c 	bl	800afa8 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800acd0:	f002 fad8 	bl	800d284 <HW_IPCC_BLE_SendCmd>

  return 0;
 800acd4:	2300      	movs	r3, #0
}
 800acd6:	4618      	mov	r0, r3
 800acd8:	3708      	adds	r7, #8
 800acda:	46bd      	mov	sp, r7
 800acdc:	bd80      	pop	{r7, pc}
 800acde:	bf00      	nop
 800ace0:	20030000 	.word	0x20030000

0800ace4 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b082      	sub	sp, #8
 800ace8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800acea:	e01c      	b.n	800ad26 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800acec:	1d3b      	adds	r3, r7, #4
 800acee:	4619      	mov	r1, r3
 800acf0:	4812      	ldr	r0, [pc, #72]	@ (800ad3c <HW_IPCC_BLE_RxEvtNot+0x58>)
 800acf2:	f000 fb54 	bl	800b39e <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	7a5b      	ldrb	r3, [r3, #9]
 800acfa:	2b0f      	cmp	r3, #15
 800acfc:	d003      	beq.n	800ad06 <HW_IPCC_BLE_RxEvtNot+0x22>
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	7a5b      	ldrb	r3, [r3, #9]
 800ad02:	2b0e      	cmp	r3, #14
 800ad04:	d105      	bne.n	800ad12 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	4619      	mov	r1, r3
 800ad0a:	2002      	movs	r0, #2
 800ad0c:	f000 f94c 	bl	800afa8 <OutputDbgTrace>
 800ad10:	e004      	b.n	800ad1c <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	4619      	mov	r1, r3
 800ad16:	2003      	movs	r0, #3
 800ad18:	f000 f946 	bl	800afa8 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800ad1c:	4b08      	ldr	r3, [pc, #32]	@ (800ad40 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	687a      	ldr	r2, [r7, #4]
 800ad22:	4610      	mov	r0, r2
 800ad24:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800ad26:	4805      	ldr	r0, [pc, #20]	@ (800ad3c <HW_IPCC_BLE_RxEvtNot+0x58>)
 800ad28:	f000 faaa 	bl	800b280 <LST_is_empty>
 800ad2c:	4603      	mov	r3, r0
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d0dc      	beq.n	800acec <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800ad32:	bf00      	nop
}
 800ad34:	3708      	adds	r7, #8
 800ad36:	46bd      	mov	sp, r7
 800ad38:	bd80      	pop	{r7, pc}
 800ad3a:	bf00      	nop
 800ad3c:	200300c8 	.word	0x200300c8
 800ad40:	200024c8 	.word	0x200024c8

0800ad44 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800ad48:	4b02      	ldr	r3, [pc, #8]	@ (800ad54 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	4798      	blx	r3

  return;
 800ad4e:	bf00      	nop
}
 800ad50:	bd80      	pop	{r7, pc}
 800ad52:	bf00      	nop
 800ad54:	200024cc 	.word	0x200024cc

0800ad58 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b084      	sub	sp, #16
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800ad64:	480d      	ldr	r0, [pc, #52]	@ (800ad9c <TL_SYS_Init+0x44>)
 800ad66:	f000 fa7b 	bl	800b260 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800ad6a:	4b0d      	ldr	r3, [pc, #52]	@ (800ada0 <TL_SYS_Init+0x48>)
 800ad6c:	68db      	ldr	r3, [r3, #12]
 800ad6e:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	689a      	ldr	r2, [r3, #8]
 800ad74:	68bb      	ldr	r3, [r7, #8]
 800ad76:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800ad78:	68bb      	ldr	r3, [r7, #8]
 800ad7a:	4a08      	ldr	r2, [pc, #32]	@ (800ad9c <TL_SYS_Init+0x44>)
 800ad7c:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800ad7e:	f002 faa3 	bl	800d2c8 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	4a07      	ldr	r2, [pc, #28]	@ (800ada4 <TL_SYS_Init+0x4c>)
 800ad88:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	685b      	ldr	r3, [r3, #4]
 800ad8e:	4a06      	ldr	r2, [pc, #24]	@ (800ada8 <TL_SYS_Init+0x50>)
 800ad90:	6013      	str	r3, [r2, #0]

  return 0;
 800ad92:	2300      	movs	r3, #0
}
 800ad94:	4618      	mov	r0, r3
 800ad96:	3710      	adds	r7, #16
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	bd80      	pop	{r7, pc}
 800ad9c:	200300d0 	.word	0x200300d0
 800ada0:	20030000 	.word	0x20030000
 800ada4:	200024d0 	.word	0x200024d0
 800ada8:	200024d4 	.word	0x200024d4

0800adac <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b082      	sub	sp, #8
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
 800adb4:	460b      	mov	r3, r1
 800adb6:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800adb8:	4b09      	ldr	r3, [pc, #36]	@ (800ade0 <TL_SYS_SendCmd+0x34>)
 800adba:	68db      	ldr	r3, [r3, #12]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	2210      	movs	r2, #16
 800adc0:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800adc2:	4b07      	ldr	r3, [pc, #28]	@ (800ade0 <TL_SYS_SendCmd+0x34>)
 800adc4:	68db      	ldr	r3, [r3, #12]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	4619      	mov	r1, r3
 800adca:	2004      	movs	r0, #4
 800adcc:	f000 f8ec 	bl	800afa8 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800add0:	f002 fa84 	bl	800d2dc <HW_IPCC_SYS_SendCmd>

  return 0;
 800add4:	2300      	movs	r3, #0
}
 800add6:	4618      	mov	r0, r3
 800add8:	3708      	adds	r7, #8
 800adda:	46bd      	mov	sp, r7
 800addc:	bd80      	pop	{r7, pc}
 800adde:	bf00      	nop
 800ade0:	20030000 	.word	0x20030000

0800ade4 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800ade8:	4b07      	ldr	r3, [pc, #28]	@ (800ae08 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800adea:	68db      	ldr	r3, [r3, #12]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	4619      	mov	r1, r3
 800adf0:	2005      	movs	r0, #5
 800adf2:	f000 f8d9 	bl	800afa8 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800adf6:	4b05      	ldr	r3, [pc, #20]	@ (800ae0c <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	4a03      	ldr	r2, [pc, #12]	@ (800ae08 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800adfc:	68d2      	ldr	r2, [r2, #12]
 800adfe:	6812      	ldr	r2, [r2, #0]
 800ae00:	4610      	mov	r0, r2
 800ae02:	4798      	blx	r3

  return;
 800ae04:	bf00      	nop
}
 800ae06:	bd80      	pop	{r7, pc}
 800ae08:	20030000 	.word	0x20030000
 800ae0c:	200024d0 	.word	0x200024d0

0800ae10 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b082      	sub	sp, #8
 800ae14:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800ae16:	e00e      	b.n	800ae36 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800ae18:	1d3b      	adds	r3, r7, #4
 800ae1a:	4619      	mov	r1, r3
 800ae1c:	480b      	ldr	r0, [pc, #44]	@ (800ae4c <HW_IPCC_SYS_EvtNot+0x3c>)
 800ae1e:	f000 fabe 	bl	800b39e <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	4619      	mov	r1, r3
 800ae26:	2006      	movs	r0, #6
 800ae28:	f000 f8be 	bl	800afa8 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800ae2c:	4b08      	ldr	r3, [pc, #32]	@ (800ae50 <HW_IPCC_SYS_EvtNot+0x40>)
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	687a      	ldr	r2, [r7, #4]
 800ae32:	4610      	mov	r0, r2
 800ae34:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800ae36:	4805      	ldr	r0, [pc, #20]	@ (800ae4c <HW_IPCC_SYS_EvtNot+0x3c>)
 800ae38:	f000 fa22 	bl	800b280 <LST_is_empty>
 800ae3c:	4603      	mov	r3, r0
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d0ea      	beq.n	800ae18 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800ae42:	bf00      	nop
}
 800ae44:	3708      	adds	r7, #8
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bd80      	pop	{r7, pc}
 800ae4a:	bf00      	nop
 800ae4c:	200300d0 	.word	0x200300d0
 800ae50:	200024d4 	.word	0x200024d4

0800ae54 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b082      	sub	sp, #8
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800ae5c:	4817      	ldr	r0, [pc, #92]	@ (800aebc <TL_MM_Init+0x68>)
 800ae5e:	f000 f9ff 	bl	800b260 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800ae62:	4817      	ldr	r0, [pc, #92]	@ (800aec0 <TL_MM_Init+0x6c>)
 800ae64:	f000 f9fc 	bl	800b260 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800ae68:	4b16      	ldr	r3, [pc, #88]	@ (800aec4 <TL_MM_Init+0x70>)
 800ae6a:	691b      	ldr	r3, [r3, #16]
 800ae6c:	4a16      	ldr	r2, [pc, #88]	@ (800aec8 <TL_MM_Init+0x74>)
 800ae6e:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800ae70:	4b15      	ldr	r3, [pc, #84]	@ (800aec8 <TL_MM_Init+0x74>)
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	687a      	ldr	r2, [r7, #4]
 800ae76:	6892      	ldr	r2, [r2, #8]
 800ae78:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800ae7a:	4b13      	ldr	r3, [pc, #76]	@ (800aec8 <TL_MM_Init+0x74>)
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	687a      	ldr	r2, [r7, #4]
 800ae80:	68d2      	ldr	r2, [r2, #12]
 800ae82:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800ae84:	4b10      	ldr	r3, [pc, #64]	@ (800aec8 <TL_MM_Init+0x74>)
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	4a0c      	ldr	r2, [pc, #48]	@ (800aebc <TL_MM_Init+0x68>)
 800ae8a:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800ae8c:	4b0e      	ldr	r3, [pc, #56]	@ (800aec8 <TL_MM_Init+0x74>)
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	687a      	ldr	r2, [r7, #4]
 800ae92:	6812      	ldr	r2, [r2, #0]
 800ae94:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800ae96:	4b0c      	ldr	r3, [pc, #48]	@ (800aec8 <TL_MM_Init+0x74>)
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	687a      	ldr	r2, [r7, #4]
 800ae9c:	6852      	ldr	r2, [r2, #4]
 800ae9e:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800aea0:	4b09      	ldr	r3, [pc, #36]	@ (800aec8 <TL_MM_Init+0x74>)
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	687a      	ldr	r2, [r7, #4]
 800aea6:	6912      	ldr	r2, [r2, #16]
 800aea8:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800aeaa:	4b07      	ldr	r3, [pc, #28]	@ (800aec8 <TL_MM_Init+0x74>)
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	687a      	ldr	r2, [r7, #4]
 800aeb0:	6952      	ldr	r2, [r2, #20]
 800aeb2:	619a      	str	r2, [r3, #24]

  return;
 800aeb4:	bf00      	nop
}
 800aeb6:	3708      	adds	r7, #8
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	bd80      	pop	{r7, pc}
 800aebc:	200300b8 	.word	0x200300b8
 800aec0:	200024c0 	.word	0x200024c0
 800aec4:	20030000 	.word	0x20030000
 800aec8:	200024d8 	.word	0x200024d8

0800aecc <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b082      	sub	sp, #8
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800aed4:	6879      	ldr	r1, [r7, #4]
 800aed6:	4807      	ldr	r0, [pc, #28]	@ (800aef4 <TL_MM_EvtDone+0x28>)
 800aed8:	f000 fa1a 	bl	800b310 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800aedc:	6879      	ldr	r1, [r7, #4]
 800aede:	2000      	movs	r0, #0
 800aee0:	f000 f862 	bl	800afa8 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800aee4:	4804      	ldr	r0, [pc, #16]	@ (800aef8 <TL_MM_EvtDone+0x2c>)
 800aee6:	f002 fa1f 	bl	800d328 <HW_IPCC_MM_SendFreeBuf>

  return;
 800aeea:	bf00      	nop
}
 800aeec:	3708      	adds	r7, #8
 800aeee:	46bd      	mov	sp, r7
 800aef0:	bd80      	pop	{r7, pc}
 800aef2:	bf00      	nop
 800aef4:	200024c0 	.word	0x200024c0
 800aef8:	0800aefd 	.word	0x0800aefd

0800aefc <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b082      	sub	sp, #8
 800af00:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800af02:	e00c      	b.n	800af1e <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800af04:	1d3b      	adds	r3, r7, #4
 800af06:	4619      	mov	r1, r3
 800af08:	480a      	ldr	r0, [pc, #40]	@ (800af34 <SendFreeBuf+0x38>)
 800af0a:	f000 fa48 	bl	800b39e <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800af0e:	4b0a      	ldr	r3, [pc, #40]	@ (800af38 <SendFreeBuf+0x3c>)
 800af10:	691b      	ldr	r3, [r3, #16]
 800af12:	691b      	ldr	r3, [r3, #16]
 800af14:	687a      	ldr	r2, [r7, #4]
 800af16:	4611      	mov	r1, r2
 800af18:	4618      	mov	r0, r3
 800af1a:	f000 f9f9 	bl	800b310 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800af1e:	4805      	ldr	r0, [pc, #20]	@ (800af34 <SendFreeBuf+0x38>)
 800af20:	f000 f9ae 	bl	800b280 <LST_is_empty>
 800af24:	4603      	mov	r3, r0
 800af26:	2b00      	cmp	r3, #0
 800af28:	d0ec      	beq.n	800af04 <SendFreeBuf+0x8>
  }

  return;
 800af2a:	bf00      	nop
}
 800af2c:	3708      	adds	r7, #8
 800af2e:	46bd      	mov	sp, r7
 800af30:	bd80      	pop	{r7, pc}
 800af32:	bf00      	nop
 800af34:	200024c0 	.word	0x200024c0
 800af38:	20030000 	.word	0x20030000

0800af3c <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800af40:	4805      	ldr	r0, [pc, #20]	@ (800af58 <TL_TRACES_Init+0x1c>)
 800af42:	f000 f98d 	bl	800b260 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800af46:	4b05      	ldr	r3, [pc, #20]	@ (800af5c <TL_TRACES_Init+0x20>)
 800af48:	695b      	ldr	r3, [r3, #20]
 800af4a:	4a03      	ldr	r2, [pc, #12]	@ (800af58 <TL_TRACES_Init+0x1c>)
 800af4c:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800af4e:	f002 fa21 	bl	800d394 <HW_IPCC_TRACES_Init>

  return;
 800af52:	bf00      	nop
}
 800af54:	bd80      	pop	{r7, pc}
 800af56:	bf00      	nop
 800af58:	200300c0 	.word	0x200300c0
 800af5c:	20030000 	.word	0x20030000

0800af60 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b082      	sub	sp, #8
 800af64:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800af66:	e008      	b.n	800af7a <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800af68:	1d3b      	adds	r3, r7, #4
 800af6a:	4619      	mov	r1, r3
 800af6c:	4808      	ldr	r0, [pc, #32]	@ (800af90 <HW_IPCC_TRACES_EvtNot+0x30>)
 800af6e:	f000 fa16 	bl	800b39e <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	4618      	mov	r0, r3
 800af76:	f000 f80d 	bl	800af94 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800af7a:	4805      	ldr	r0, [pc, #20]	@ (800af90 <HW_IPCC_TRACES_EvtNot+0x30>)
 800af7c:	f000 f980 	bl	800b280 <LST_is_empty>
 800af80:	4603      	mov	r3, r0
 800af82:	2b00      	cmp	r3, #0
 800af84:	d0f0      	beq.n	800af68 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800af86:	bf00      	nop
}
 800af88:	3708      	adds	r7, #8
 800af8a:	46bd      	mov	sp, r7
 800af8c:	bd80      	pop	{r7, pc}
 800af8e:	bf00      	nop
 800af90:	200300c0 	.word	0x200300c0

0800af94 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800af94:	b480      	push	{r7}
 800af96:	b083      	sub	sp, #12
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800af9c:	bf00      	nop
 800af9e:	370c      	adds	r7, #12
 800afa0:	46bd      	mov	sp, r7
 800afa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa6:	4770      	bx	lr

0800afa8 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800afa8:	b480      	push	{r7}
 800afaa:	b087      	sub	sp, #28
 800afac:	af00      	add	r7, sp, #0
 800afae:	4603      	mov	r3, r0
 800afb0:	6039      	str	r1, [r7, #0]
 800afb2:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;
  TL_EvtSerial_t *p_cmd_rsp_packet;

  switch(packet_type)
 800afb4:	79fb      	ldrb	r3, [r7, #7]
 800afb6:	2b06      	cmp	r3, #6
 800afb8:	d845      	bhi.n	800b046 <OutputDbgTrace+0x9e>
 800afba:	a201      	add	r2, pc, #4	@ (adr r2, 800afc0 <OutputDbgTrace+0x18>)
 800afbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afc0:	0800afdd 	.word	0x0800afdd
 800afc4:	0800b001 	.word	0x0800b001
 800afc8:	0800b007 	.word	0x0800b007
 800afcc:	0800b01b 	.word	0x0800b01b
 800afd0:	0800b027 	.word	0x0800b027
 800afd4:	0800b02d 	.word	0x0800b02d
 800afd8:	0800b03b 	.word	0x0800b03b
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800afdc:	683b      	ldr	r3, [r7, #0]
 800afde:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800afe0:	697b      	ldr	r3, [r7, #20]
 800afe2:	7a5b      	ldrb	r3, [r3, #9]
 800afe4:	2bff      	cmp	r3, #255	@ 0xff
 800afe6:	d005      	beq.n	800aff4 <OutputDbgTrace+0x4c>
 800afe8:	2bff      	cmp	r3, #255	@ 0xff
 800afea:	dc05      	bgt.n	800aff8 <OutputDbgTrace+0x50>
 800afec:	2b0e      	cmp	r3, #14
 800afee:	d005      	beq.n	800affc <OutputDbgTrace+0x54>
 800aff0:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800aff2:	e001      	b.n	800aff8 <OutputDbgTrace+0x50>
          break;
 800aff4:	bf00      	nop
 800aff6:	e027      	b.n	800b048 <OutputDbgTrace+0xa0>
          break;
 800aff8:	bf00      	nop
 800affa:	e025      	b.n	800b048 <OutputDbgTrace+0xa0>
          break;
 800affc:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800affe:	e023      	b.n	800b048 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	60fb      	str	r3, [r7, #12]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800b004:	e020      	b.n	800b048 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800b00a:	697b      	ldr	r3, [r7, #20]
 800b00c:	7a5b      	ldrb	r3, [r3, #9]
 800b00e:	2b0e      	cmp	r3, #14
 800b010:	d001      	beq.n	800b016 <OutputDbgTrace+0x6e>
 800b012:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800b014:	e000      	b.n	800b018 <OutputDbgTrace+0x70>
          break;
 800b016:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b018:	e016      	b.n	800b048 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800b01e:	697b      	ldr	r3, [r7, #20]
 800b020:	7a5b      	ldrb	r3, [r3, #9]
 800b022:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b024:	e010      	b.n	800b048 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	60fb      	str	r3, [r7, #12]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800b02a:	e00d      	b.n	800b048 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_cmd_rsp_packet = (TL_EvtSerial_t*)buffer;
 800b02c:	683b      	ldr	r3, [r7, #0]
 800b02e:	613b      	str	r3, [r7, #16]
      switch(p_cmd_rsp_packet->evt.evtcode)
 800b030:	693b      	ldr	r3, [r7, #16]
 800b032:	785b      	ldrb	r3, [r3, #1]
 800b034:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_cmd_rsp_packet->evt.evtcode);
          break;
 800b036:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_rsp_packet->evt, p_cmd_rsp_packet->evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b038:	e006      	b.n	800b048 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b03a:	683b      	ldr	r3, [r7, #0]
 800b03c:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800b03e:	697b      	ldr	r3, [r7, #20]
 800b040:	7a5b      	ldrb	r3, [r3, #9]
 800b042:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b044:	e000      	b.n	800b048 <OutputDbgTrace+0xa0>

    default:
      break;
 800b046:	bf00      	nop
  }

  return;
 800b048:	bf00      	nop
}
 800b04a:	371c      	adds	r7, #28
 800b04c:	46bd      	mov	sp, r7
 800b04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b052:	4770      	bx	lr

0800b054 <DbgTraceGetFileName>:
 * @param  *fullPath Fullpath string (path + filename)
 * @retval char* Pointer on filename string
 */

const char *DbgTraceGetFileName(const char *fullpath)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b084      	sub	sp, #16
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
  const char *ret = fullpath;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	60fb      	str	r3, [r7, #12]

  if (strrchr(fullpath, '\\') != NULL)
 800b060:	215c      	movs	r1, #92	@ 0x5c
 800b062:	6878      	ldr	r0, [r7, #4]
 800b064:	f003 fcae 	bl	800e9c4 <strrchr>
 800b068:	4603      	mov	r3, r0
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d007      	beq.n	800b07e <DbgTraceGetFileName+0x2a>
  {
    ret = strrchr(fullpath, '\\') + 1;
 800b06e:	215c      	movs	r1, #92	@ 0x5c
 800b070:	6878      	ldr	r0, [r7, #4]
 800b072:	f003 fca7 	bl	800e9c4 <strrchr>
 800b076:	4603      	mov	r3, r0
 800b078:	3301      	adds	r3, #1
 800b07a:	60fb      	str	r3, [r7, #12]
 800b07c:	e00d      	b.n	800b09a <DbgTraceGetFileName+0x46>
  }
  else if (strrchr(fullpath, '/') != NULL)
 800b07e:	212f      	movs	r1, #47	@ 0x2f
 800b080:	6878      	ldr	r0, [r7, #4]
 800b082:	f003 fc9f 	bl	800e9c4 <strrchr>
 800b086:	4603      	mov	r3, r0
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d006      	beq.n	800b09a <DbgTraceGetFileName+0x46>
  {
    ret = strrchr(fullpath, '/') + 1;
 800b08c:	212f      	movs	r1, #47	@ 0x2f
 800b08e:	6878      	ldr	r0, [r7, #4]
 800b090:	f003 fc98 	bl	800e9c4 <strrchr>
 800b094:	4603      	mov	r3, r0
 800b096:	3301      	adds	r3, #1
 800b098:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800b09a:	68fb      	ldr	r3, [r7, #12]
}
 800b09c:	4618      	mov	r0, r3
 800b09e:	3710      	adds	r7, #16
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	bd80      	pop	{r7, pc}

0800b0a4 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b086      	sub	sp, #24
 800b0a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b0aa:	f3ef 8310 	mrs	r3, PRIMASK
 800b0ae:	60fb      	str	r3, [r7, #12]
  return(result);
 800b0b0:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 800b0b2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b0b4:	b672      	cpsid	i
}
 800b0b6:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 800b0b8:	1cbb      	adds	r3, r7, #2
 800b0ba:	4619      	mov	r1, r3
 800b0bc:	4812      	ldr	r0, [pc, #72]	@ (800b108 <DbgTrace_TxCpltCallback+0x64>)
 800b0be:	f000 fbe5 	bl	800b88c <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 800b0c2:	1cbb      	adds	r3, r7, #2
 800b0c4:	4619      	mov	r1, r3
 800b0c6:	4810      	ldr	r0, [pc, #64]	@ (800b108 <DbgTrace_TxCpltCallback+0x64>)
 800b0c8:	f000 fccf 	bl	800ba6a <CircularQueue_Sense>
 800b0cc:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 800b0ce:	693b      	ldr	r3, [r7, #16]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d00c      	beq.n	800b0ee <DbgTrace_TxCpltCallback+0x4a>
 800b0d4:	697b      	ldr	r3, [r7, #20]
 800b0d6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b0d8:	68bb      	ldr	r3, [r7, #8]
 800b0da:	f383 8810 	msr	PRIMASK, r3
}
 800b0de:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 800b0e0:	887b      	ldrh	r3, [r7, #2]
 800b0e2:	4a0a      	ldr	r2, [pc, #40]	@ (800b10c <DbgTrace_TxCpltCallback+0x68>)
 800b0e4:	4619      	mov	r1, r3
 800b0e6:	6938      	ldr	r0, [r7, #16]
 800b0e8:	f7f6 fcfb 	bl	8001ae2 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 800b0ec:	e008      	b.n	800b100 <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 800b0ee:	4b08      	ldr	r3, [pc, #32]	@ (800b110 <DbgTrace_TxCpltCallback+0x6c>)
 800b0f0:	2201      	movs	r2, #1
 800b0f2:	701a      	strb	r2, [r3, #0]
 800b0f4:	697b      	ldr	r3, [r7, #20]
 800b0f6:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	f383 8810 	msr	PRIMASK, r3
}
 800b0fe:	bf00      	nop
}
 800b100:	bf00      	nop
 800b102:	3718      	adds	r7, #24
 800b104:	46bd      	mov	sp, r7
 800b106:	bd80      	pop	{r7, pc}
 800b108:	200024dc 	.word	0x200024dc
 800b10c:	0800b0a5 	.word	0x0800b0a5
 800b110:	20000015 	.word	0x20000015

0800b114 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b082      	sub	sp, #8
 800b118:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 800b11a:	f7f6 fcdc 	bl	8001ad6 <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 800b11e:	2302      	movs	r3, #2
 800b120:	9300      	str	r3, [sp, #0]
 800b122:	2300      	movs	r3, #0
 800b124:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800b128:	4903      	ldr	r1, [pc, #12]	@ (800b138 <DbgTraceInit+0x24>)
 800b12a:	4804      	ldr	r0, [pc, #16]	@ (800b13c <DbgTraceInit+0x28>)
 800b12c:	f000 f956 	bl	800b3dc <CircularQueue_Init>
#endif 
#endif
  return;
 800b130:	bf00      	nop
}
 800b132:	46bd      	mov	sp, r7
 800b134:	bd80      	pop	{r7, pc}
 800b136:	bf00      	nop
 800b138:	200024fc 	.word	0x200024fc
 800b13c:	200024dc 	.word	0x200024dc

0800b140 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b084      	sub	sp, #16
 800b144:	af00      	add	r7, sp, #0
 800b146:	60f8      	str	r0, [r7, #12]
 800b148:	60b9      	str	r1, [r7, #8]
 800b14a:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 800b14c:	687a      	ldr	r2, [r7, #4]
 800b14e:	68b9      	ldr	r1, [r7, #8]
 800b150:	68f8      	ldr	r0, [r7, #12]
 800b152:	f000 f805 	bl	800b160 <DbgTraceWrite>
 800b156:	4603      	mov	r3, r0
}
 800b158:	4618      	mov	r0, r3
 800b15a:	3710      	adds	r7, #16
 800b15c:	46bd      	mov	sp, r7
 800b15e:	bd80      	pop	{r7, pc}

0800b160 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b08a      	sub	sp, #40	@ 0x28
 800b164:	af00      	add	r7, sp, #0
 800b166:	60f8      	str	r0, [r7, #12]
 800b168:	60b9      	str	r1, [r7, #8]
 800b16a:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 800b16c:	2300      	movs	r3, #0
 800b16e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b170:	f3ef 8310 	mrs	r3, PRIMASK
 800b174:	61bb      	str	r3, [r7, #24]
  return(result);
 800b176:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 800b178:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b180:	d102      	bne.n	800b188 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 800b182:	2300      	movs	r3, #0
 800b184:	627b      	str	r3, [r7, #36]	@ 0x24
 800b186:	e037      	b.n	800b1f8 <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	2b01      	cmp	r3, #1
 800b18c:	d006      	beq.n	800b19c <DbgTraceWrite+0x3c>
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	2b02      	cmp	r3, #2
 800b192:	d003      	beq.n	800b19c <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 800b194:	f04f 33ff 	mov.w	r3, #4294967295
 800b198:	627b      	str	r3, [r7, #36]	@ 0x24
 800b19a:	e02d      	b.n	800b1f8 <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d02a      	beq.n	800b1f8 <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800b1a6:	b672      	cpsid	i
}
 800b1a8:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	b29a      	uxth	r2, r3
 800b1ae:	2301      	movs	r3, #1
 800b1b0:	68b9      	ldr	r1, [r7, #8]
 800b1b2:	4814      	ldr	r0, [pc, #80]	@ (800b204 <DbgTraceWrite+0xa4>)
 800b1b4:	f000 f944 	bl	800b440 <CircularQueue_Add>
 800b1b8:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 800b1ba:	69fb      	ldr	r3, [r7, #28]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d015      	beq.n	800b1ec <DbgTraceWrite+0x8c>
 800b1c0:	4b11      	ldr	r3, [pc, #68]	@ (800b208 <DbgTraceWrite+0xa8>)
 800b1c2:	781b      	ldrb	r3, [r3, #0]
 800b1c4:	b2db      	uxtb	r3, r3
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d010      	beq.n	800b1ec <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 800b1ca:	4b0f      	ldr	r3, [pc, #60]	@ (800b208 <DbgTraceWrite+0xa8>)
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	701a      	strb	r2, [r3, #0]
 800b1d0:	6a3b      	ldr	r3, [r7, #32]
 800b1d2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b1d4:	697b      	ldr	r3, [r7, #20]
 800b1d6:	f383 8810 	msr	PRIMASK, r3
}
 800b1da:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	b29b      	uxth	r3, r3
 800b1e0:	4a0a      	ldr	r2, [pc, #40]	@ (800b20c <DbgTraceWrite+0xac>)
 800b1e2:	4619      	mov	r1, r3
 800b1e4:	69f8      	ldr	r0, [r7, #28]
 800b1e6:	f7f6 fc7c 	bl	8001ae2 <DbgOutputTraces>
 800b1ea:	e005      	b.n	800b1f8 <DbgTraceWrite+0x98>
 800b1ec:	6a3b      	ldr	r3, [r7, #32]
 800b1ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b1f0:	693b      	ldr	r3, [r7, #16]
 800b1f2:	f383 8810 	msr	PRIMASK, r3
}
 800b1f6:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 800b1f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	3728      	adds	r7, #40	@ 0x28
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bd80      	pop	{r7, pc}
 800b202:	bf00      	nop
 800b204:	200024dc 	.word	0x200024dc
 800b208:	20000015 	.word	0x20000015
 800b20c:	0800b0a5 	.word	0x0800b0a5

0800b210 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800b210:	b480      	push	{r7}
 800b212:	b085      	sub	sp, #20
 800b214:	af00      	add	r7, sp, #0
 800b216:	4603      	mov	r3, r0
 800b218:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800b21a:	4b0f      	ldr	r3, [pc, #60]	@ (800b258 <OTP_Read+0x48>)
 800b21c:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800b21e:	e002      	b.n	800b226 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	3b08      	subs	r3, #8
 800b224:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	3307      	adds	r3, #7
 800b22a:	781b      	ldrb	r3, [r3, #0]
 800b22c:	79fa      	ldrb	r2, [r7, #7]
 800b22e:	429a      	cmp	r2, r3
 800b230:	d003      	beq.n	800b23a <OTP_Read+0x2a>
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	4a09      	ldr	r2, [pc, #36]	@ (800b25c <OTP_Read+0x4c>)
 800b236:	4293      	cmp	r3, r2
 800b238:	d1f2      	bne.n	800b220 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	3307      	adds	r3, #7
 800b23e:	781b      	ldrb	r3, [r3, #0]
 800b240:	79fa      	ldrb	r2, [r7, #7]
 800b242:	429a      	cmp	r2, r3
 800b244:	d001      	beq.n	800b24a <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800b246:	2300      	movs	r3, #0
 800b248:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800b24a:	68fb      	ldr	r3, [r7, #12]
}
 800b24c:	4618      	mov	r0, r3
 800b24e:	3714      	adds	r7, #20
 800b250:	46bd      	mov	sp, r7
 800b252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b256:	4770      	bx	lr
 800b258:	1fff73f8 	.word	0x1fff73f8
 800b25c:	1fff7000 	.word	0x1fff7000

0800b260 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800b260:	b480      	push	{r7}
 800b262:	b083      	sub	sp, #12
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	687a      	ldr	r2, [r7, #4]
 800b26c:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	687a      	ldr	r2, [r7, #4]
 800b272:	605a      	str	r2, [r3, #4]
}
 800b274:	bf00      	nop
 800b276:	370c      	adds	r7, #12
 800b278:	46bd      	mov	sp, r7
 800b27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27e:	4770      	bx	lr

0800b280 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800b280:	b480      	push	{r7}
 800b282:	b087      	sub	sp, #28
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b288:	f3ef 8310 	mrs	r3, PRIMASK
 800b28c:	60fb      	str	r3, [r7, #12]
  return(result);
 800b28e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b290:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800b292:	b672      	cpsid	i
}
 800b294:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	687a      	ldr	r2, [r7, #4]
 800b29c:	429a      	cmp	r2, r3
 800b29e:	d102      	bne.n	800b2a6 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800b2a0:	2301      	movs	r3, #1
 800b2a2:	75fb      	strb	r3, [r7, #23]
 800b2a4:	e001      	b.n	800b2aa <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	75fb      	strb	r3, [r7, #23]
 800b2aa:	693b      	ldr	r3, [r7, #16]
 800b2ac:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b2ae:	68bb      	ldr	r3, [r7, #8]
 800b2b0:	f383 8810 	msr	PRIMASK, r3
}
 800b2b4:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800b2b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	371c      	adds	r7, #28
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c2:	4770      	bx	lr

0800b2c4 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	b087      	sub	sp, #28
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
 800b2cc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b2ce:	f3ef 8310 	mrs	r3, PRIMASK
 800b2d2:	60fb      	str	r3, [r7, #12]
  return(result);
 800b2d4:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b2d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b2d8:	b672      	cpsid	i
}
 800b2da:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681a      	ldr	r2, [r3, #0]
 800b2e0:	683b      	ldr	r3, [r7, #0]
 800b2e2:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800b2e4:	683b      	ldr	r3, [r7, #0]
 800b2e6:	687a      	ldr	r2, [r7, #4]
 800b2e8:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	683a      	ldr	r2, [r7, #0]
 800b2ee:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800b2f0:	683b      	ldr	r3, [r7, #0]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	683a      	ldr	r2, [r7, #0]
 800b2f6:	605a      	str	r2, [r3, #4]
 800b2f8:	697b      	ldr	r3, [r7, #20]
 800b2fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b2fc:	693b      	ldr	r3, [r7, #16]
 800b2fe:	f383 8810 	msr	PRIMASK, r3
}
 800b302:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800b304:	bf00      	nop
 800b306:	371c      	adds	r7, #28
 800b308:	46bd      	mov	sp, r7
 800b30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30e:	4770      	bx	lr

0800b310 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800b310:	b480      	push	{r7}
 800b312:	b087      	sub	sp, #28
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
 800b318:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b31a:	f3ef 8310 	mrs	r3, PRIMASK
 800b31e:	60fb      	str	r3, [r7, #12]
  return(result);
 800b320:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b322:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b324:	b672      	cpsid	i
}
 800b326:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800b328:	683b      	ldr	r3, [r7, #0]
 800b32a:	687a      	ldr	r2, [r7, #4]
 800b32c:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	685a      	ldr	r2, [r3, #4]
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	683a      	ldr	r2, [r7, #0]
 800b33a:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800b33c:	683b      	ldr	r3, [r7, #0]
 800b33e:	685b      	ldr	r3, [r3, #4]
 800b340:	683a      	ldr	r2, [r7, #0]
 800b342:	601a      	str	r2, [r3, #0]
 800b344:	697b      	ldr	r3, [r7, #20]
 800b346:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b348:	693b      	ldr	r3, [r7, #16]
 800b34a:	f383 8810 	msr	PRIMASK, r3
}
 800b34e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800b350:	bf00      	nop
 800b352:	371c      	adds	r7, #28
 800b354:	46bd      	mov	sp, r7
 800b356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35a:	4770      	bx	lr

0800b35c <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800b35c:	b480      	push	{r7}
 800b35e:	b087      	sub	sp, #28
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b364:	f3ef 8310 	mrs	r3, PRIMASK
 800b368:	60fb      	str	r3, [r7, #12]
  return(result);
 800b36a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b36c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b36e:	b672      	cpsid	i
}
 800b370:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	685b      	ldr	r3, [r3, #4]
 800b376:	687a      	ldr	r2, [r7, #4]
 800b378:	6812      	ldr	r2, [r2, #0]
 800b37a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	687a      	ldr	r2, [r7, #4]
 800b382:	6852      	ldr	r2, [r2, #4]
 800b384:	605a      	str	r2, [r3, #4]
 800b386:	697b      	ldr	r3, [r7, #20]
 800b388:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b38a:	693b      	ldr	r3, [r7, #16]
 800b38c:	f383 8810 	msr	PRIMASK, r3
}
 800b390:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800b392:	bf00      	nop
 800b394:	371c      	adds	r7, #28
 800b396:	46bd      	mov	sp, r7
 800b398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39c:	4770      	bx	lr

0800b39e <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800b39e:	b580      	push	{r7, lr}
 800b3a0:	b086      	sub	sp, #24
 800b3a2:	af00      	add	r7, sp, #0
 800b3a4:	6078      	str	r0, [r7, #4]
 800b3a6:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b3a8:	f3ef 8310 	mrs	r3, PRIMASK
 800b3ac:	60fb      	str	r3, [r7, #12]
  return(result);
 800b3ae:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b3b0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b3b2:	b672      	cpsid	i
}
 800b3b4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681a      	ldr	r2, [r3, #0]
 800b3ba:	683b      	ldr	r3, [r7, #0]
 800b3bc:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	f7ff ffca 	bl	800b35c <LST_remove_node>
 800b3c8:	697b      	ldr	r3, [r7, #20]
 800b3ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b3cc:	693b      	ldr	r3, [r7, #16]
 800b3ce:	f383 8810 	msr	PRIMASK, r3
}
 800b3d2:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800b3d4:	bf00      	nop
 800b3d6:	3718      	adds	r7, #24
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	bd80      	pop	{r7, pc}

0800b3dc <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 800b3dc:	b480      	push	{r7}
 800b3de:	b085      	sub	sp, #20
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	60f8      	str	r0, [r7, #12]
 800b3e4:	60b9      	str	r1, [r7, #8]
 800b3e6:	607a      	str	r2, [r7, #4]
 800b3e8:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	68ba      	ldr	r2, [r7, #8]
 800b3ee:	601a      	str	r2, [r3, #0]
  q->first = 0;
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	2200      	movs	r2, #0
 800b400:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	2200      	movs	r2, #0
 800b406:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	687a      	ldr	r2, [r7, #4]
 800b40c:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	887a      	ldrh	r2, [r7, #2]
 800b412:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	7e3a      	ldrb	r2, [r7, #24]
 800b418:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 800b41a:	7e3b      	ldrb	r3, [r7, #24]
 800b41c:	f003 0302 	and.w	r3, r3, #2
 800b420:	2b00      	cmp	r3, #0
 800b422:	d006      	beq.n	800b432 <CircularQueue_Init+0x56>
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	891b      	ldrh	r3, [r3, #8]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d002      	beq.n	800b432 <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 800b42c:	f04f 33ff 	mov.w	r3, #4294967295
 800b430:	e000      	b.n	800b434 <CircularQueue_Init+0x58>
  }
  return 0;
 800b432:	2300      	movs	r3, #0
}
 800b434:	4618      	mov	r0, r3
 800b436:	3714      	adds	r7, #20
 800b438:	46bd      	mov	sp, r7
 800b43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43e:	4770      	bx	lr

0800b440 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b08e      	sub	sp, #56	@ 0x38
 800b444:	af00      	add	r7, sp, #0
 800b446:	60f8      	str	r0, [r7, #12]
 800b448:	60b9      	str	r1, [r7, #8]
 800b44a:	603b      	str	r3, [r7, #0]
 800b44c:	4613      	mov	r3, r2
 800b44e:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 800b450:	2300      	movs	r3, #0
 800b452:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 800b454:	2300      	movs	r3, #0
 800b456:	86fb      	strh	r3, [r7, #54]	@ 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size element (q->elementsize == 0) */
 800b458:	2300      	movs	r3, #0
 800b45a:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 800b45c:	2300      	movs	r3, #0
 800b45e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b460:	2300      	movs	r3, #0
 800b462:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 800b464:	2300      	movs	r3, #0
 800b466:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicate size of parta of element that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 800b468:	2300      	movs	r3, #0
 800b46a:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	891b      	ldrh	r3, [r3, #8]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d101      	bne.n	800b478 <CircularQueue_Add+0x38>
 800b474:	2302      	movs	r3, #2
 800b476:	e000      	b.n	800b47a <CircularQueue_Add+0x3a>
 800b478:	2300      	movs	r3, #0
 800b47a:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	695b      	ldr	r3, [r3, #20]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d029      	beq.n	800b4d8 <CircularQueue_Add+0x98>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	891b      	ldrh	r3, [r3, #8]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d122      	bne.n	800b4d2 <CircularQueue_Add+0x92>
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	681a      	ldr	r2, [r3, #0]
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	691b      	ldr	r3, [r3, #16]
 800b494:	4413      	add	r3, r2
 800b496:	781b      	ldrb	r3, [r3, #0]
 800b498:	4618      	mov	r0, r3
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	681a      	ldr	r2, [r3, #0]
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	691b      	ldr	r3, [r3, #16]
 800b4a2:	1c59      	adds	r1, r3, #1
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	685b      	ldr	r3, [r3, #4]
 800b4a8:	4299      	cmp	r1, r3
 800b4aa:	d306      	bcc.n	800b4ba <CircularQueue_Add+0x7a>
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	6919      	ldr	r1, [r3, #16]
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	685b      	ldr	r3, [r3, #4]
 800b4b4:	1acb      	subs	r3, r1, r3
 800b4b6:	3301      	adds	r3, #1
 800b4b8:	e002      	b.n	800b4c0 <CircularQueue_Add+0x80>
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	691b      	ldr	r3, [r3, #16]
 800b4be:	3301      	adds	r3, #1
 800b4c0:	4413      	add	r3, r2
 800b4c2:	781b      	ldrb	r3, [r3, #0]
 800b4c4:	021b      	lsls	r3, r3, #8
 800b4c6:	b29b      	uxth	r3, r3
 800b4c8:	4403      	add	r3, r0
 800b4ca:	b29b      	uxth	r3, r3
 800b4cc:	3302      	adds	r3, #2
 800b4ce:	b29b      	uxth	r3, r3
 800b4d0:	e001      	b.n	800b4d6 <CircularQueue_Add+0x96>
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	891b      	ldrh	r3, [r3, #8]
 800b4d6:	86fb      	strh	r3, [r7, #54]	@ 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	891b      	ldrh	r3, [r3, #8]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d002      	beq.n	800b4e6 <CircularQueue_Add+0xa6>
  {
    elementSize = q->elementSize;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	891b      	ldrh	r3, [r3, #8]
 800b4e4:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	691a      	ldr	r2, [r3, #16]
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	68db      	ldr	r3, [r3, #12]
 800b4ee:	429a      	cmp	r2, r3
 800b4f0:	d307      	bcc.n	800b502 <CircularQueue_Add+0xc2>
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	685a      	ldr	r2, [r3, #4]
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	6919      	ldr	r1, [r3, #16]
 800b4fa:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b4fc:	440b      	add	r3, r1
 800b4fe:	1ad3      	subs	r3, r2, r3
 800b500:	e000      	b.n	800b504 <CircularQueue_Add+0xc4>
 800b502:	2300      	movs	r3, #0
 800b504:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 800b506:	88fa      	ldrh	r2, [r7, #6]
 800b508:	7ffb      	ldrb	r3, [r7, #31]
 800b50a:	4413      	add	r3, r2
 800b50c:	461a      	mov	r2, r3
 800b50e:	683b      	ldr	r3, [r7, #0]
 800b510:	fb02 f303 	mul.w	r3, r2, r3
 800b514:	69ba      	ldr	r2, [r7, #24]
 800b516:	429a      	cmp	r2, r3
 800b518:	d80b      	bhi.n	800b532 <CircularQueue_Add+0xf2>
 800b51a:	88fa      	ldrh	r2, [r7, #6]
 800b51c:	7ffb      	ldrb	r3, [r7, #31]
 800b51e:	4413      	add	r3, r2
 800b520:	461a      	mov	r2, r3
 800b522:	69bb      	ldr	r3, [r7, #24]
 800b524:	fbb3 f1f2 	udiv	r1, r3, r2
 800b528:	fb01 f202 	mul.w	r2, r1, r2
 800b52c:	1a9b      	subs	r3, r3, r2
 800b52e:	b2db      	uxtb	r3, r3
 800b530:	e000      	b.n	800b534 <CircularQueue_Add+0xf4>
 800b532:	2300      	movs	r3, #0
 800b534:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 800b536:	7dfa      	ldrb	r2, [r7, #23]
 800b538:	7ffb      	ldrb	r3, [r7, #31]
 800b53a:	429a      	cmp	r2, r3
 800b53c:	bf8c      	ite	hi
 800b53e:	2301      	movhi	r3, #1
 800b540:	2300      	movls	r3, #0
 800b542:	b2db      	uxtb	r3, r3
 800b544:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 800b546:	7fbb      	ldrb	r3, [r7, #30]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d008      	beq.n	800b55e <CircularQueue_Add+0x11e>
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	7f1b      	ldrb	r3, [r3, #28]
 800b550:	f003 0301 	and.w	r3, r3, #1
 800b554:	2b00      	cmp	r3, #0
 800b556:	d002      	beq.n	800b55e <CircularQueue_Add+0x11e>
 800b558:	7dfb      	ldrb	r3, [r7, #23]
 800b55a:	b29b      	uxth	r3, r3
 800b55c:	e000      	b.n	800b560 <CircularQueue_Add+0x120>
 800b55e:	8bbb      	ldrh	r3, [r7, #28]
 800b560:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 800b562:	7fbb      	ldrb	r3, [r7, #30]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d008      	beq.n	800b57a <CircularQueue_Add+0x13a>
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	7f1b      	ldrb	r3, [r3, #28]
 800b56c:	f003 0302 	and.w	r3, r3, #2
 800b570:	2b00      	cmp	r3, #0
 800b572:	d002      	beq.n	800b57a <CircularQueue_Add+0x13a>
 800b574:	7ffb      	ldrb	r3, [r7, #31]
 800b576:	b29b      	uxth	r3, r3
 800b578:	e000      	b.n	800b57c <CircularQueue_Add+0x13c>
 800b57a:	8bbb      	ldrh	r3, [r7, #28]
 800b57c:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 800b57e:	88fb      	ldrh	r3, [r7, #6]
 800b580:	2b00      	cmp	r3, #0
 800b582:	f000 817e 	beq.w	800b882 <CircularQueue_Add+0x442>
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	695a      	ldr	r2, [r3, #20]
 800b58a:	88f9      	ldrh	r1, [r7, #6]
 800b58c:	7ffb      	ldrb	r3, [r7, #31]
 800b58e:	440b      	add	r3, r1
 800b590:	4619      	mov	r1, r3
 800b592:	683b      	ldr	r3, [r7, #0]
 800b594:	fb01 f303 	mul.w	r3, r1, r3
 800b598:	441a      	add	r2, r3
 800b59a:	8bbb      	ldrh	r3, [r7, #28]
 800b59c:	441a      	add	r2, r3
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	685b      	ldr	r3, [r3, #4]
 800b5a2:	429a      	cmp	r2, r3
 800b5a4:	f200 816d 	bhi.w	800b882 <CircularQueue_Add+0x442>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b5ac:	e14a      	b.n	800b844 <CircularQueue_Add+0x404>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	691a      	ldr	r2, [r3, #16]
 800b5b2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b5b4:	441a      	add	r2, r3
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	685b      	ldr	r3, [r3, #4]
 800b5ba:	429a      	cmp	r2, r3
 800b5bc:	d307      	bcc.n	800b5ce <CircularQueue_Add+0x18e>
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	691a      	ldr	r2, [r3, #16]
 800b5c2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b5c4:	441a      	add	r2, r3
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	685b      	ldr	r3, [r3, #4]
 800b5ca:	1ad3      	subs	r3, r2, r3
 800b5cc:	e003      	b.n	800b5d6 <CircularQueue_Add+0x196>
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	691a      	ldr	r2, [r3, #16]
 800b5d2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b5d4:	4413      	add	r3, r2
 800b5d6:	68fa      	ldr	r2, [r7, #12]
 800b5d8:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	691b      	ldr	r3, [r3, #16]
 800b5de:	633b      	str	r3, [r7, #48]	@ 0x30
      
      /* store the element  */
      /* store first the element size if element size is variable */
      if (q->elementSize == 0) 
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	891b      	ldrh	r3, [r3, #8]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d130      	bne.n	800b64a <CircularQueue_Add+0x20a>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	681a      	ldr	r2, [r3, #0]
 800b5ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5ee:	1c59      	adds	r1, r3, #1
 800b5f0:	6339      	str	r1, [r7, #48]	@ 0x30
 800b5f2:	4413      	add	r3, r2
 800b5f4:	88fa      	ldrh	r2, [r7, #6]
 800b5f6:	b2d2      	uxtb	r2, r2
 800b5f8:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	685b      	ldr	r3, [r3, #4]
 800b5fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b600:	429a      	cmp	r2, r3
 800b602:	d304      	bcc.n	800b60e <CircularQueue_Add+0x1ce>
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	685b      	ldr	r3, [r3, #4]
 800b608:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b60a:	1ad3      	subs	r3, r2, r3
 800b60c:	e000      	b.n	800b610 <CircularQueue_Add+0x1d0>
 800b60e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b610:	633b      	str	r3, [r7, #48]	@ 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 800b612:	88fb      	ldrh	r3, [r7, #6]
 800b614:	0a1b      	lsrs	r3, r3, #8
 800b616:	b298      	uxth	r0, r3
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	681a      	ldr	r2, [r3, #0]
 800b61c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b61e:	1c59      	adds	r1, r3, #1
 800b620:	6339      	str	r1, [r7, #48]	@ 0x30
 800b622:	4413      	add	r3, r2
 800b624:	b2c2      	uxtb	r2, r0
 800b626:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	685b      	ldr	r3, [r3, #4]
 800b62c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b62e:	429a      	cmp	r2, r3
 800b630:	d304      	bcc.n	800b63c <CircularQueue_Add+0x1fc>
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	685b      	ldr	r3, [r3, #4]
 800b636:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b638:	1ad3      	subs	r3, r2, r3
 800b63a:	e000      	b.n	800b63e <CircularQueue_Add+0x1fe>
 800b63c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b63e:	633b      	str	r3, [r7, #48]	@ 0x30
        q->byteCount += 2;
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	695b      	ldr	r3, [r3, #20]
 800b644:	1c9a      	adds	r2, r3, #2
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 800b64a:	88fa      	ldrh	r2, [r7, #6]
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	6859      	ldr	r1, [r3, #4]
 800b650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b652:	1acb      	subs	r3, r1, r3
 800b654:	4293      	cmp	r3, r2
 800b656:	bf28      	it	cs
 800b658:	4613      	movcs	r3, r2
 800b65a:	62bb      	str	r3, [r7, #40]	@ 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In this case part of data will copied at the end of the buffer and the rest a the beginning */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 800b65c:	88fb      	ldrh	r3, [r7, #6]
 800b65e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b660:	429a      	cmp	r2, r3
 800b662:	d007      	beq.n	800b674 <CircularQueue_Add+0x234>
 800b664:	88fb      	ldrh	r3, [r7, #6]
 800b666:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b668:	429a      	cmp	r2, r3
 800b66a:	d225      	bcs.n	800b6b8 <CircularQueue_Add+0x278>
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	7f1b      	ldrb	r3, [r3, #28]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d121      	bne.n	800b6b8 <CircularQueue_Add+0x278>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	681a      	ldr	r2, [r3, #0]
 800b678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b67a:	18d0      	adds	r0, r2, r3
 800b67c:	88fb      	ldrh	r3, [r7, #6]
 800b67e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b680:	fb02 f303 	mul.w	r3, r2, r3
 800b684:	68ba      	ldr	r2, [r7, #8]
 800b686:	4413      	add	r3, r2
 800b688:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b68a:	4619      	mov	r1, r3
 800b68c:	f003 fa27 	bl	800eade <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	695a      	ldr	r2, [r3, #20]
 800b694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b696:	441a      	add	r2, r3
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 800b69c:	2300      	movs	r3, #0
 800b69e:	633b      	str	r3, [r7, #48]	@ 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 800b6a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6a2:	627b      	str	r3, [r7, #36]	@ 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 800b6a4:	88fa      	ldrh	r2, [r7, #6]
 800b6a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6a8:	1ad3      	subs	r3, r2, r3
 800b6aa:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* set the current element Size, will be used to calaculate next last position at beginning of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800b6ac:	7ffb      	ldrb	r3, [r7, #31]
 800b6ae:	b29a      	uxth	r2, r3
 800b6b0:	88fb      	ldrh	r3, [r7, #6]
 800b6b2:	4413      	add	r3, r2
 800b6b4:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800b6b6:	e0a4      	b.n	800b802 <CircularQueue_Add+0x3c2>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 800b6b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	f000 80a1 	beq.w	800b802 <CircularQueue_Add+0x3c2>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	7f1b      	ldrb	r3, [r3, #28]
 800b6c4:	f003 0301 	and.w	r3, r3, #1
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d03a      	beq.n	800b742 <CircularQueue_Add+0x302>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	891b      	ldrh	r3, [r3, #8]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d10d      	bne.n	800b6f0 <CircularQueue_Add+0x2b0>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	681a      	ldr	r2, [r3, #0]
 800b6d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6da:	3b02      	subs	r3, #2
 800b6dc:	4413      	add	r3, r2
 800b6de:	22ff      	movs	r2, #255	@ 0xff
 800b6e0:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	681a      	ldr	r2, [r3, #0]
 800b6e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6e8:	3b01      	subs	r3, #1
 800b6ea:	4413      	add	r3, r2
 800b6ec:	22ff      	movs	r2, #255	@ 0xff
 800b6ee:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	695a      	ldr	r2, [r3, #20]
 800b6f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6f6:	441a      	add	r2, r3
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	627b      	str	r3, [r7, #36]	@ 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 800b700:	88fb      	ldrh	r3, [r7, #6]
 800b702:	62bb      	str	r3, [r7, #40]	@ 0x28
          /* Wrap */
          curBuffPosition = 0; 
 800b704:	2300      	movs	r3, #0
 800b706:	633b      	str	r3, [r7, #48]	@ 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	891b      	ldrh	r3, [r3, #8]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d16f      	bne.n	800b7f0 <CircularQueue_Add+0x3b0>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	681a      	ldr	r2, [r3, #0]
 800b714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b716:	1c59      	adds	r1, r3, #1
 800b718:	6339      	str	r1, [r7, #48]	@ 0x30
 800b71a:	4413      	add	r3, r2
 800b71c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b71e:	b2d2      	uxtb	r2, r2
 800b720:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800b722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b724:	0a18      	lsrs	r0, r3, #8
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	681a      	ldr	r2, [r3, #0]
 800b72a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b72c:	1c59      	adds	r1, r3, #1
 800b72e:	6339      	str	r1, [r7, #48]	@ 0x30
 800b730:	4413      	add	r3, r2
 800b732:	b2c2      	uxtb	r2, r0
 800b734:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	695b      	ldr	r3, [r3, #20]
 800b73a:	1c9a      	adds	r2, r3, #2
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	615a      	str	r2, [r3, #20]
 800b740:	e056      	b.n	800b7f0 <CircularQueue_Add+0x3b0>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	7f1b      	ldrb	r3, [r3, #28]
 800b746:	f003 0302 	and.w	r3, r3, #2
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d050      	beq.n	800b7f0 <CircularQueue_Add+0x3b0>
        {
          if (q->elementSize == 0)
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	891b      	ldrh	r3, [r3, #8]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d14a      	bne.n	800b7ec <CircularQueue_Add+0x3ac>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	681a      	ldr	r2, [r3, #0]
 800b75a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b75c:	3b02      	subs	r3, #2
 800b75e:	4413      	add	r3, r2
 800b760:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b762:	b2d2      	uxtb	r2, r2
 800b764:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800b766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b768:	0a19      	lsrs	r1, r3, #8
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	681a      	ldr	r2, [r3, #0]
 800b76e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b770:	3b01      	subs	r3, #1
 800b772:	4413      	add	r3, r2
 800b774:	b2ca      	uxtb	r2, r1
 800b776:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	681a      	ldr	r2, [r3, #0]
 800b77c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b77e:	18d0      	adds	r0, r2, r3
 800b780:	88fb      	ldrh	r3, [r7, #6]
 800b782:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b784:	fb02 f303 	mul.w	r3, r2, r3
 800b788:	68ba      	ldr	r2, [r7, #8]
 800b78a:	4413      	add	r3, r2
 800b78c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b78e:	4619      	mov	r1, r3
 800b790:	f003 f9a5 	bl	800eade <memcpy>
             q->byteCount += NbBytesToCopy; 
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	695a      	ldr	r2, [r3, #20]
 800b798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b79a:	441a      	add	r2, r3
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 800b7a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7a2:	627b      	str	r3, [r7, #36]	@ 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 800b7a4:	88fa      	ldrh	r2, [r7, #6]
 800b7a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7a8:	1ad3      	subs	r3, r2, r3
 800b7aa:	62bb      	str	r3, [r7, #40]	@ 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	699b      	ldr	r3, [r3, #24]
 800b7b0:	1c5a      	adds	r2, r3, #1
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	633b      	str	r3, [r7, #48]	@ 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	681a      	ldr	r2, [r3, #0]
 800b7be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7c0:	1c59      	adds	r1, r3, #1
 800b7c2:	6339      	str	r1, [r7, #48]	@ 0x30
 800b7c4:	4413      	add	r3, r2
 800b7c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b7c8:	b2d2      	uxtb	r2, r2
 800b7ca:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800b7cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7ce:	0a18      	lsrs	r0, r3, #8
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	681a      	ldr	r2, [r3, #0]
 800b7d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7d6:	1c59      	adds	r1, r3, #1
 800b7d8:	6339      	str	r1, [r7, #48]	@ 0x30
 800b7da:	4413      	add	r3, r2
 800b7dc:	b2c2      	uxtb	r2, r0
 800b7de:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	695b      	ldr	r3, [r3, #20]
 800b7e4:	1c9a      	adds	r2, r3, #2
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	615a      	str	r2, [r3, #20]
 800b7ea:	e001      	b.n	800b7f0 <CircularQueue_Add+0x3b0>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	e049      	b.n	800b884 <CircularQueue_Add+0x444>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800b7f0:	7ffb      	ldrb	r3, [r7, #31]
 800b7f2:	b29a      	uxth	r2, r3
 800b7f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7f6:	b29b      	uxth	r3, r3
 800b7f8:	4413      	add	r3, r2
 800b7fa:	86fb      	strh	r3, [r7, #54]	@ 0x36
        q->last = 0;        
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	2200      	movs	r2, #0
 800b800:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaining byte to copy */
      if (NbBytesToCopy)      
 800b802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b804:	2b00      	cmp	r3, #0
 800b806:	d015      	beq.n	800b834 <CircularQueue_Add+0x3f4>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	681a      	ldr	r2, [r3, #0]
 800b80c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b80e:	18d0      	adds	r0, r2, r3
 800b810:	88fb      	ldrh	r3, [r7, #6]
 800b812:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b814:	fb03 f202 	mul.w	r2, r3, r2
 800b818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b81a:	4413      	add	r3, r2
 800b81c:	68ba      	ldr	r2, [r7, #8]
 800b81e:	4413      	add	r3, r2
 800b820:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b822:	4619      	mov	r1, r3
 800b824:	f003 f95b 	bl	800eade <memcpy>
        q->byteCount += NbBytesToCopy;
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	695a      	ldr	r2, [r3, #20]
 800b82c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b82e:	441a      	add	r2, r3
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	699b      	ldr	r3, [r3, #24]
 800b838:	1c5a      	adds	r2, r3, #1
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 800b83e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b840:	3301      	adds	r3, #1
 800b842:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b844:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	429a      	cmp	r2, r3
 800b84a:	f4ff aeb0 	bcc.w	800b5ae <CircularQueue_Add+0x16e>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	681a      	ldr	r2, [r3, #0]
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	6919      	ldr	r1, [r3, #16]
 800b856:	7ffb      	ldrb	r3, [r7, #31]
 800b858:	4419      	add	r1, r3
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	685b      	ldr	r3, [r3, #4]
 800b85e:	4299      	cmp	r1, r3
 800b860:	d307      	bcc.n	800b872 <CircularQueue_Add+0x432>
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	6919      	ldr	r1, [r3, #16]
 800b866:	7ffb      	ldrb	r3, [r7, #31]
 800b868:	4419      	add	r1, r3
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	685b      	ldr	r3, [r3, #4]
 800b86e:	1acb      	subs	r3, r1, r3
 800b870:	e003      	b.n	800b87a <CircularQueue_Add+0x43a>
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	6919      	ldr	r1, [r3, #16]
 800b876:	7ffb      	ldrb	r3, [r7, #31]
 800b878:	440b      	add	r3, r1
 800b87a:	4413      	add	r3, r2
 800b87c:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 800b87e:	6a3b      	ldr	r3, [r7, #32]
 800b880:	e000      	b.n	800b884 <CircularQueue_Add+0x444>
    return NULL;
 800b882:	2300      	movs	r3, #0
}
 800b884:	4618      	mov	r0, r3
 800b886:	3738      	adds	r7, #56	@ 0x38
 800b888:	46bd      	mov	sp, r7
 800b88a:	bd80      	pop	{r7, pc}

0800b88c <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 800b88c:	b480      	push	{r7}
 800b88e:	b085      	sub	sp, #20
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
 800b894:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800b896:	2300      	movs	r3, #0
 800b898:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 800b89a:	2300      	movs	r3, #0
 800b89c:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	891b      	ldrh	r3, [r3, #8]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d101      	bne.n	800b8aa <CircularQueue_Remove+0x1e>
 800b8a6:	2302      	movs	r3, #2
 800b8a8:	e000      	b.n	800b8ac <CircularQueue_Remove+0x20>
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	695b      	ldr	r3, [r3, #20]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	f000 80ca 	beq.w	800ba50 <CircularQueue_Remove+0x1c4>
  {
    /* retrieve element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	891b      	ldrh	r3, [r3, #8]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d120      	bne.n	800b906 <CircularQueue_Remove+0x7a>
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681a      	ldr	r2, [r3, #0]
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	68db      	ldr	r3, [r3, #12]
 800b8cc:	4413      	add	r3, r2
 800b8ce:	781b      	ldrb	r3, [r3, #0]
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	681a      	ldr	r2, [r3, #0]
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	68db      	ldr	r3, [r3, #12]
 800b8da:	1c59      	adds	r1, r3, #1
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	685b      	ldr	r3, [r3, #4]
 800b8e0:	4299      	cmp	r1, r3
 800b8e2:	d306      	bcc.n	800b8f2 <CircularQueue_Remove+0x66>
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	68d9      	ldr	r1, [r3, #12]
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	685b      	ldr	r3, [r3, #4]
 800b8ec:	1acb      	subs	r3, r1, r3
 800b8ee:	3301      	adds	r3, #1
 800b8f0:	e002      	b.n	800b8f8 <CircularQueue_Remove+0x6c>
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	68db      	ldr	r3, [r3, #12]
 800b8f6:	3301      	adds	r3, #1
 800b8f8:	4413      	add	r3, r2
 800b8fa:	781b      	ldrb	r3, [r3, #0]
 800b8fc:	021b      	lsls	r3, r3, #8
 800b8fe:	b29b      	uxth	r3, r3
 800b900:	4403      	add	r3, r0
 800b902:	b29b      	uxth	r3, r3
 800b904:	e001      	b.n	800b90a <CircularQueue_Remove+0x7e>
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	891b      	ldrh	r3, [r3, #8]
 800b90a:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	7f1b      	ldrb	r3, [r3, #28]
 800b910:	f003 0301 	and.w	r3, r3, #1
 800b914:	2b00      	cmp	r3, #0
 800b916:	d056      	beq.n	800b9c6 <CircularQueue_Remove+0x13a>
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	7f1b      	ldrb	r3, [r3, #28]
 800b91c:	f003 0302 	and.w	r3, r3, #2
 800b920:	2b00      	cmp	r3, #0
 800b922:	d150      	bne.n	800b9c6 <CircularQueue_Remove+0x13a>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800b924:	897b      	ldrh	r3, [r7, #10]
 800b926:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b92a:	4293      	cmp	r3, r2
 800b92c:	d103      	bne.n	800b936 <CircularQueue_Remove+0xaa>
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	891b      	ldrh	r3, [r3, #8]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d012      	beq.n	800b95c <CircularQueue_Remove+0xd0>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	68da      	ldr	r2, [r3, #12]
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800b93e:	429a      	cmp	r2, r3
 800b940:	d941      	bls.n	800b9c6 <CircularQueue_Remove+0x13a>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	891b      	ldrh	r3, [r3, #8]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d03d      	beq.n	800b9c6 <CircularQueue_Remove+0x13a>
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	685a      	ldr	r2, [r3, #4]
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	68db      	ldr	r3, [r3, #12]
 800b952:	1ad3      	subs	r3, r2, r3
 800b954:	687a      	ldr	r2, [r7, #4]
 800b956:	8912      	ldrh	r2, [r2, #8]
 800b958:	4293      	cmp	r3, r2
 800b95a:	d234      	bcs.n	800b9c6 <CircularQueue_Remove+0x13a>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	695a      	ldr	r2, [r3, #20]
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	68d9      	ldr	r1, [r3, #12]
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	685b      	ldr	r3, [r3, #4]
 800b968:	1acb      	subs	r3, r1, r3
 800b96a:	441a      	add	r2, r3
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	2200      	movs	r2, #0
 800b974:	60da      	str	r2, [r3, #12]
          /* retrieve the right size after the wrap [if variable size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	891b      	ldrh	r3, [r3, #8]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d120      	bne.n	800b9c0 <CircularQueue_Remove+0x134>
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681a      	ldr	r2, [r3, #0]
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	68db      	ldr	r3, [r3, #12]
 800b986:	4413      	add	r3, r2
 800b988:	781b      	ldrb	r3, [r3, #0]
 800b98a:	4618      	mov	r0, r3
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681a      	ldr	r2, [r3, #0]
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	68db      	ldr	r3, [r3, #12]
 800b994:	1c59      	adds	r1, r3, #1
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	685b      	ldr	r3, [r3, #4]
 800b99a:	4299      	cmp	r1, r3
 800b99c:	d306      	bcc.n	800b9ac <CircularQueue_Remove+0x120>
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	68d9      	ldr	r1, [r3, #12]
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	685b      	ldr	r3, [r3, #4]
 800b9a6:	1acb      	subs	r3, r1, r3
 800b9a8:	3301      	adds	r3, #1
 800b9aa:	e002      	b.n	800b9b2 <CircularQueue_Remove+0x126>
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	68db      	ldr	r3, [r3, #12]
 800b9b0:	3301      	adds	r3, #1
 800b9b2:	4413      	add	r3, r2
 800b9b4:	781b      	ldrb	r3, [r3, #0]
 800b9b6:	021b      	lsls	r3, r3, #8
 800b9b8:	b29b      	uxth	r3, r3
 800b9ba:	4403      	add	r3, r0
 800b9bc:	b29b      	uxth	r3, r3
 800b9be:	e001      	b.n	800b9c4 <CircularQueue_Remove+0x138>
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	891b      	ldrh	r3, [r3, #8]
 800b9c4:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retrieve element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681a      	ldr	r2, [r3, #0]
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	68d9      	ldr	r1, [r3, #12]
 800b9ce:	7a7b      	ldrb	r3, [r7, #9]
 800b9d0:	4419      	add	r1, r3
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	685b      	ldr	r3, [r3, #4]
 800b9d6:	4299      	cmp	r1, r3
 800b9d8:	d307      	bcc.n	800b9ea <CircularQueue_Remove+0x15e>
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	68d9      	ldr	r1, [r3, #12]
 800b9de:	7a7b      	ldrb	r3, [r7, #9]
 800b9e0:	4419      	add	r1, r3
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	685b      	ldr	r3, [r3, #4]
 800b9e6:	1acb      	subs	r3, r1, r3
 800b9e8:	e003      	b.n	800b9f2 <CircularQueue_Remove+0x166>
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	68d9      	ldr	r1, [r3, #12]
 800b9ee:	7a7b      	ldrb	r3, [r7, #9]
 800b9f0:	440b      	add	r3, r1
 800b9f2:	4413      	add	r3, r2
 800b9f4:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	695b      	ldr	r3, [r3, #20]
 800b9fa:	8979      	ldrh	r1, [r7, #10]
 800b9fc:	7a7a      	ldrb	r2, [r7, #9]
 800b9fe:	440a      	add	r2, r1
 800ba00:	1a9a      	subs	r2, r3, r2
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	695b      	ldr	r3, [r3, #20]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d01b      	beq.n	800ba46 <CircularQueue_Remove+0x1ba>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	68da      	ldr	r2, [r3, #12]
 800ba12:	897b      	ldrh	r3, [r7, #10]
 800ba14:	441a      	add	r2, r3
 800ba16:	7a7b      	ldrb	r3, [r7, #9]
 800ba18:	441a      	add	r2, r3
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	685b      	ldr	r3, [r3, #4]
 800ba1e:	429a      	cmp	r2, r3
 800ba20:	d309      	bcc.n	800ba36 <CircularQueue_Remove+0x1aa>
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	68da      	ldr	r2, [r3, #12]
 800ba26:	897b      	ldrh	r3, [r7, #10]
 800ba28:	441a      	add	r2, r3
 800ba2a:	7a7b      	ldrb	r3, [r7, #9]
 800ba2c:	441a      	add	r2, r3
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	685b      	ldr	r3, [r3, #4]
 800ba32:	1ad3      	subs	r3, r2, r3
 800ba34:	e005      	b.n	800ba42 <CircularQueue_Remove+0x1b6>
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	68da      	ldr	r2, [r3, #12]
 800ba3a:	897b      	ldrh	r3, [r7, #10]
 800ba3c:	441a      	add	r2, r3
 800ba3e:	7a7b      	ldrb	r3, [r7, #9]
 800ba40:	4413      	add	r3, r2
 800ba42:	687a      	ldr	r2, [r7, #4]
 800ba44:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	699b      	ldr	r3, [r3, #24]
 800ba4a:	1e5a      	subs	r2, r3, #1
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 800ba50:	683b      	ldr	r3, [r7, #0]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d002      	beq.n	800ba5c <CircularQueue_Remove+0x1d0>
  {
    *elementSize = eltSize;
 800ba56:	683b      	ldr	r3, [r7, #0]
 800ba58:	897a      	ldrh	r2, [r7, #10]
 800ba5a:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 800ba5c:	68fb      	ldr	r3, [r7, #12]
}
 800ba5e:	4618      	mov	r0, r3
 800ba60:	3714      	adds	r7, #20
 800ba62:	46bd      	mov	sp, r7
 800ba64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba68:	4770      	bx	lr

0800ba6a <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 800ba6a:	b480      	push	{r7}
 800ba6c:	b087      	sub	sp, #28
 800ba6e:	af00      	add	r7, sp, #0
 800ba70:	6078      	str	r0, [r7, #4]
 800ba72:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800ba74:	2300      	movs	r3, #0
 800ba76:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 800ba78:	2300      	movs	r3, #0
 800ba7a:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	891b      	ldrh	r3, [r3, #8]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d101      	bne.n	800ba88 <CircularQueue_Sense+0x1e>
 800ba84:	2302      	movs	r3, #2
 800ba86:	e000      	b.n	800ba8a <CircularQueue_Sense+0x20>
 800ba88:	2300      	movs	r3, #0
 800ba8a:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 800ba90:	2300      	movs	r3, #0
 800ba92:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	695b      	ldr	r3, [r3, #20]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	f000 808e 	beq.w	800bbba <CircularQueue_Sense+0x150>
  {
    FirstElemetPos = q->first;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	68db      	ldr	r3, [r3, #12]
 800baa2:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	891b      	ldrh	r3, [r3, #8]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d120      	bne.n	800baee <CircularQueue_Sense+0x84>
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681a      	ldr	r2, [r3, #0]
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	68db      	ldr	r3, [r3, #12]
 800bab4:	4413      	add	r3, r2
 800bab6:	781b      	ldrb	r3, [r3, #0]
 800bab8:	4618      	mov	r0, r3
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681a      	ldr	r2, [r3, #0]
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	68db      	ldr	r3, [r3, #12]
 800bac2:	1c59      	adds	r1, r3, #1
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	685b      	ldr	r3, [r3, #4]
 800bac8:	4299      	cmp	r1, r3
 800baca:	d306      	bcc.n	800bada <CircularQueue_Sense+0x70>
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	68d9      	ldr	r1, [r3, #12]
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	685b      	ldr	r3, [r3, #4]
 800bad4:	1acb      	subs	r3, r1, r3
 800bad6:	3301      	adds	r3, #1
 800bad8:	e002      	b.n	800bae0 <CircularQueue_Sense+0x76>
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	68db      	ldr	r3, [r3, #12]
 800bade:	3301      	adds	r3, #1
 800bae0:	4413      	add	r3, r2
 800bae2:	781b      	ldrb	r3, [r3, #0]
 800bae4:	021b      	lsls	r3, r3, #8
 800bae6:	b29b      	uxth	r3, r3
 800bae8:	4403      	add	r3, r0
 800baea:	b29b      	uxth	r3, r3
 800baec:	e001      	b.n	800baf2 <CircularQueue_Sense+0x88>
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	891b      	ldrh	r3, [r3, #8]
 800baf2:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	7f1b      	ldrb	r3, [r3, #28]
 800baf8:	f003 0301 	and.w	r3, r3, #1
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d047      	beq.n	800bb90 <CircularQueue_Sense+0x126>
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	7f1b      	ldrb	r3, [r3, #28]
 800bb04:	f003 0302 	and.w	r3, r3, #2
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d141      	bne.n	800bb90 <CircularQueue_Sense+0x126>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800bb0c:	8a7b      	ldrh	r3, [r7, #18]
 800bb0e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800bb12:	4293      	cmp	r3, r2
 800bb14:	d103      	bne.n	800bb1e <CircularQueue_Sense+0xb4>
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	891b      	ldrh	r3, [r3, #8]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d012      	beq.n	800bb44 <CircularQueue_Sense+0xda>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	68da      	ldr	r2, [r3, #12]
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800bb26:	429a      	cmp	r2, r3
 800bb28:	d932      	bls.n	800bb90 <CircularQueue_Sense+0x126>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	891b      	ldrh	r3, [r3, #8]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d02e      	beq.n	800bb90 <CircularQueue_Sense+0x126>
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	685a      	ldr	r2, [r3, #4]
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	68db      	ldr	r3, [r3, #12]
 800bb3a:	1ad3      	subs	r3, r2, r3
 800bb3c:	687a      	ldr	r2, [r7, #4]
 800bb3e:	8912      	ldrh	r2, [r2, #8]
 800bb40:	4293      	cmp	r3, r2
 800bb42:	d225      	bcs.n	800bb90 <CircularQueue_Sense+0x126>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800bb44:	2300      	movs	r3, #0
 800bb46:	60fb      	str	r3, [r7, #12]

        /* retrieve the right size after the wrap [if variable size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	891b      	ldrh	r3, [r3, #8]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d11c      	bne.n	800bb8a <CircularQueue_Sense+0x120>
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681a      	ldr	r2, [r3, #0]
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	4413      	add	r3, r2
 800bb58:	781b      	ldrb	r3, [r3, #0]
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681a      	ldr	r2, [r3, #0]
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	1c59      	adds	r1, r3, #1
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	685b      	ldr	r3, [r3, #4]
 800bb68:	4299      	cmp	r1, r3
 800bb6a:	d305      	bcc.n	800bb78 <CircularQueue_Sense+0x10e>
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	685b      	ldr	r3, [r3, #4]
 800bb70:	68f9      	ldr	r1, [r7, #12]
 800bb72:	1acb      	subs	r3, r1, r3
 800bb74:	3301      	adds	r3, #1
 800bb76:	e001      	b.n	800bb7c <CircularQueue_Sense+0x112>
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	3301      	adds	r3, #1
 800bb7c:	4413      	add	r3, r2
 800bb7e:	781b      	ldrb	r3, [r3, #0]
 800bb80:	021b      	lsls	r3, r3, #8
 800bb82:	b29b      	uxth	r3, r3
 800bb84:	4403      	add	r3, r0
 800bb86:	b29b      	uxth	r3, r3
 800bb88:	e001      	b.n	800bb8e <CircularQueue_Sense+0x124>
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	891b      	ldrh	r3, [r3, #8]
 800bb8e:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681a      	ldr	r2, [r3, #0]
 800bb94:	7af9      	ldrb	r1, [r7, #11]
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	4419      	add	r1, r3
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	685b      	ldr	r3, [r3, #4]
 800bb9e:	4299      	cmp	r1, r3
 800bba0:	d306      	bcc.n	800bbb0 <CircularQueue_Sense+0x146>
 800bba2:	7af9      	ldrb	r1, [r7, #11]
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	4419      	add	r1, r3
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	685b      	ldr	r3, [r3, #4]
 800bbac:	1acb      	subs	r3, r1, r3
 800bbae:	e002      	b.n	800bbb6 <CircularQueue_Sense+0x14c>
 800bbb0:	7af9      	ldrb	r1, [r7, #11]
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	440b      	add	r3, r1
 800bbb6:	4413      	add	r3, r2
 800bbb8:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 800bbba:	683b      	ldr	r3, [r7, #0]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d002      	beq.n	800bbc6 <CircularQueue_Sense+0x15c>
  {
    *elementSize = eltSize;
 800bbc0:	683b      	ldr	r3, [r7, #0]
 800bbc2:	8a7a      	ldrh	r2, [r7, #18]
 800bbc4:	801a      	strh	r2, [r3, #0]
  }
  return x;
 800bbc6:	697b      	ldr	r3, [r7, #20]
}
 800bbc8:	4618      	mov	r0, r3
 800bbca:	371c      	adds	r7, #28
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd2:	4770      	bx	lr

0800bbd4 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800bbd4:	b480      	push	{r7}
 800bbd6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800bbd8:	4b03      	ldr	r3, [pc, #12]	@ (800bbe8 <LL_FLASH_GetUDN+0x14>)
 800bbda:	681b      	ldr	r3, [r3, #0]
}
 800bbdc:	4618      	mov	r0, r3
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe4:	4770      	bx	lr
 800bbe6:	bf00      	nop
 800bbe8:	1fff7580 	.word	0x1fff7580

0800bbec <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800bbec:	b480      	push	{r7}
 800bbee:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800bbf0:	4b03      	ldr	r3, [pc, #12]	@ (800bc00 <LL_FLASH_GetDeviceID+0x14>)
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	b2db      	uxtb	r3, r3
}
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfe:	4770      	bx	lr
 800bc00:	1fff7584 	.word	0x1fff7584

0800bc04 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800bc04:	b480      	push	{r7}
 800bc06:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800bc08:	4b03      	ldr	r3, [pc, #12]	@ (800bc18 <LL_FLASH_GetSTCompanyID+0x14>)
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	0a1b      	lsrs	r3, r3, #8
}
 800bc0e:	4618      	mov	r0, r3
 800bc10:	46bd      	mov	sp, r7
 800bc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc16:	4770      	bx	lr
 800bc18:	1fff7584 	.word	0x1fff7584

0800bc1c <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 800bc1c:	b5b0      	push	{r4, r5, r7, lr}
 800bc1e:	b090      	sub	sp, #64	@ 0x40
 800bc20:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800bc22:	2392      	movs	r3, #146	@ 0x92
 800bc24:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */
 //UTIL_SEQ_RegTask( 1<<CFG_MY_TASK, UTIL_SEQ_RFU, myTask);
// UTIL_SEQ_SetTask(1 << CFG_MY_TASK, CFG_SCH_PRIO_0);
  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800bc28:	4b45      	ldr	r3, [pc, #276]	@ (800bd40 <APP_BLE_Init+0x124>)
 800bc2a:	1d3c      	adds	r4, r7, #4
 800bc2c:	461d      	mov	r5, r3
 800bc2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bc30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bc32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bc34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bc36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bc38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bc3a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800bc3e:	c403      	stmia	r4!, {r0, r1}
 800bc40:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800bc42:	f000 fba5 	bl	800c390 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800bc46:	2101      	movs	r1, #1
 800bc48:	2002      	movs	r0, #2
 800bc4a:	f001 fbcb 	bl	800d3e4 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800bc4e:	4a3d      	ldr	r2, [pc, #244]	@ (800bd44 <APP_BLE_Init+0x128>)
 800bc50:	2100      	movs	r1, #0
 800bc52:	2002      	movs	r0, #2
 800bc54:	f001 fcf2 	bl	800d63c <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 800bc58:	1d3b      	adds	r3, r7, #4
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	f7fe fbec 	bl	800a438 <SHCI_C2_BLE_Init>
 800bc60:	4603      	mov	r3, r0
 800bc62:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 800bc66:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d012      	beq.n	800bc94 <APP_BLE_Init+0x78>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 800bc6e:	4836      	ldr	r0, [pc, #216]	@ (800bd48 <APP_BLE_Init+0x12c>)
 800bc70:	f7ff f9f0 	bl	800b054 <DbgTraceGetFileName>
 800bc74:	4601      	mov	r1, r0
 800bc76:	f240 1347 	movw	r3, #327	@ 0x147
 800bc7a:	4a34      	ldr	r2, [pc, #208]	@ (800bd4c <APP_BLE_Init+0x130>)
 800bc7c:	4834      	ldr	r0, [pc, #208]	@ (800bd50 <APP_BLE_Init+0x134>)
 800bc7e:	f002 fd29 	bl	800e6d4 <iprintf>
 800bc82:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800bc86:	4619      	mov	r1, r3
 800bc88:	4832      	ldr	r0, [pc, #200]	@ (800bd54 <APP_BLE_Init+0x138>)
 800bc8a:	f002 fd23 	bl	800e6d4 <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800bc8e:	f7f7 fbc3 	bl	8003418 <Error_Handler>
 800bc92:	e00c      	b.n	800bcae <APP_BLE_Init+0x92>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 800bc94:	482c      	ldr	r0, [pc, #176]	@ (800bd48 <APP_BLE_Init+0x12c>)
 800bc96:	f7ff f9dd 	bl	800b054 <DbgTraceGetFileName>
 800bc9a:	4601      	mov	r1, r0
 800bc9c:	f240 134d 	movw	r3, #333	@ 0x14d
 800bca0:	4a2a      	ldr	r2, [pc, #168]	@ (800bd4c <APP_BLE_Init+0x130>)
 800bca2:	482b      	ldr	r0, [pc, #172]	@ (800bd50 <APP_BLE_Init+0x134>)
 800bca4:	f002 fd16 	bl	800e6d4 <iprintf>
 800bca8:	482b      	ldr	r0, [pc, #172]	@ (800bd58 <APP_BLE_Init+0x13c>)
 800bcaa:	f002 fd13 	bl	800e6d4 <iprintf>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800bcae:	f000 fb85 	bl	800c3bc <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800bcb2:	f7fe fb1b 	bl	800a2ec <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800bcb6:	4b29      	ldr	r3, [pc, #164]	@ (800bd5c <APP_BLE_Init+0x140>)
 800bcb8:	2200      	movs	r2, #0
 800bcba:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800bcbe:	4b27      	ldr	r3, [pc, #156]	@ (800bd5c <APP_BLE_Init+0x140>)
 800bcc0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800bcc4:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800bcc6:	4a26      	ldr	r2, [pc, #152]	@ (800bd60 <APP_BLE_Init+0x144>)
 800bcc8:	2100      	movs	r1, #0
 800bcca:	2001      	movs	r0, #1
 800bccc:	f001 fcb6 	bl	800d63c <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 800bcd0:	2006      	movs	r0, #6
 800bcd2:	f7fe f97f 	bl	8009fd4 <aci_hal_set_radio_activity_mask>
 800bcd6:	4603      	mov	r3, r0
 800bcd8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (ret != BLE_STATUS_SUCCESS)
 800bcdc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d010      	beq.n	800bd06 <APP_BLE_Init+0xea>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 800bce4:	4818      	ldr	r0, [pc, #96]	@ (800bd48 <APP_BLE_Init+0x12c>)
 800bce6:	f7ff f9b5 	bl	800b054 <DbgTraceGetFileName>
 800bcea:	4601      	mov	r1, r0
 800bcec:	f240 1371 	movw	r3, #369	@ 0x171
 800bcf0:	4a16      	ldr	r2, [pc, #88]	@ (800bd4c <APP_BLE_Init+0x130>)
 800bcf2:	4817      	ldr	r0, [pc, #92]	@ (800bd50 <APP_BLE_Init+0x134>)
 800bcf4:	f002 fcee 	bl	800e6d4 <iprintf>
 800bcf8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800bcfc:	4619      	mov	r1, r3
 800bcfe:	4819      	ldr	r0, [pc, #100]	@ (800bd64 <APP_BLE_Init+0x148>)
 800bd00:	f002 fce8 	bl	800e6d4 <iprintf>
 800bd04:	e00c      	b.n	800bd20 <APP_BLE_Init+0x104>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 800bd06:	4810      	ldr	r0, [pc, #64]	@ (800bd48 <APP_BLE_Init+0x12c>)
 800bd08:	f7ff f9a4 	bl	800b054 <DbgTraceGetFileName>
 800bd0c:	4601      	mov	r1, r0
 800bd0e:	f240 1375 	movw	r3, #373	@ 0x175
 800bd12:	4a0e      	ldr	r2, [pc, #56]	@ (800bd4c <APP_BLE_Init+0x130>)
 800bd14:	480e      	ldr	r0, [pc, #56]	@ (800bd50 <APP_BLE_Init+0x134>)
 800bd16:	f002 fcdd 	bl	800e6d4 <iprintf>
 800bd1a:	4813      	ldr	r0, [pc, #76]	@ (800bd68 <APP_BLE_Init+0x14c>)
 800bd1c:	f002 fcda 	bl	800e6d4 <iprintf>
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 800bd20:	f000 ff82 	bl	800cc28 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800bd24:	4b0d      	ldr	r3, [pc, #52]	@ (800bd5c <APP_BLE_Init+0x140>)
 800bd26:	2200      	movs	r2, #0
 800bd28:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800bd2a:	4b0c      	ldr	r3, [pc, #48]	@ (800bd5c <APP_BLE_Init+0x140>)
 800bd2c:	2200      	movs	r2, #0
 800bd2e:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 800bd30:	2001      	movs	r0, #1
 800bd32:	f000 fdd7 	bl	800c8e4 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 800bd36:	bf00      	nop
}
 800bd38:	3740      	adds	r7, #64	@ 0x40
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	bdb0      	pop	{r4, r5, r7, pc}
 800bd3e:	bf00      	nop
 800bd40:	08012620 	.word	0x08012620
 800bd44:	0800a655 	.word	0x0800a655
 800bd48:	08012514 	.word	0x08012514
 800bd4c:	080137f4 	.word	0x080137f4
 800bd50:	08012530 	.word	0x08012530
 800bd54:	08012544 	.word	0x08012544
 800bd58:	0801257c 	.word	0x0801257c
 800bd5c:	20003504 	.word	0x20003504
 800bd60:	0800ca69 	.word	0x0800ca69
 800bd64:	080125a4 	.word	0x080125a4
 800bd68:	080125e8 	.word	0x080125e8

0800bd6c <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 800bd6c:	b5b0      	push	{r4, r5, r7, lr}
 800bd6e:	b090      	sub	sp, #64	@ 0x40
 800bd70:	af04      	add	r7, sp, #16
 800bd72:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 800bd74:	2392      	movs	r3, #146	@ 0x92
 800bd76:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	3301      	adds	r3, #1
 800bd7e:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (p_event_pckt->evt)
 800bd80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd82:	781b      	ldrb	r3, [r3, #0]
 800bd84:	2bff      	cmp	r3, #255	@ 0xff
 800bd86:	f000 8143 	beq.w	800c010 <SVCCTL_App_Notification+0x2a4>
 800bd8a:	2bff      	cmp	r3, #255	@ 0xff
 800bd8c:	f300 82cd 	bgt.w	800c32a <SVCCTL_App_Notification+0x5be>
 800bd90:	2b3e      	cmp	r3, #62	@ 0x3e
 800bd92:	d06a      	beq.n	800be6a <SVCCTL_App_Notification+0xfe>
 800bd94:	2b3e      	cmp	r3, #62	@ 0x3e
 800bd96:	f300 82c8 	bgt.w	800c32a <SVCCTL_App_Notification+0x5be>
 800bd9a:	2b05      	cmp	r3, #5
 800bd9c:	d002      	beq.n	800bda4 <SVCCTL_App_Notification+0x38>
 800bd9e:	2b10      	cmp	r3, #16
 800bda0:	d042      	beq.n	800be28 <SVCCTL_App_Notification+0xbc>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800bda2:	e2c2      	b.n	800c32a <SVCCTL_App_Notification+0x5be>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 800bda4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bda6:	3302      	adds	r3, #2
 800bda8:	60bb      	str	r3, [r7, #8]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800bdaa:	68bb      	ldr	r3, [r7, #8]
 800bdac:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800bdb0:	b29a      	uxth	r2, r3
 800bdb2:	4bab      	ldr	r3, [pc, #684]	@ (800c060 <SVCCTL_App_Notification+0x2f4>)
 800bdb4:	8adb      	ldrh	r3, [r3, #22]
 800bdb6:	429a      	cmp	r2, r3
 800bdb8:	d128      	bne.n	800be0c <SVCCTL_App_Notification+0xa0>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800bdba:	4ba9      	ldr	r3, [pc, #676]	@ (800c060 <SVCCTL_App_Notification+0x2f4>)
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800bdc0:	4ba7      	ldr	r3, [pc, #668]	@ (800c060 <SVCCTL_App_Notification+0x2f4>)
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
        APP_DBG_MSG(">>== HCI_DISCONNECTION_COMPLETE_EVT_CODE\n");
 800bdc8:	48a6      	ldr	r0, [pc, #664]	@ (800c064 <SVCCTL_App_Notification+0x2f8>)
 800bdca:	f7ff f943 	bl	800b054 <DbgTraceGetFileName>
 800bdce:	4601      	mov	r1, r0
 800bdd0:	f240 13b9 	movw	r3, #441	@ 0x1b9
 800bdd4:	4aa4      	ldr	r2, [pc, #656]	@ (800c068 <SVCCTL_App_Notification+0x2fc>)
 800bdd6:	48a5      	ldr	r0, [pc, #660]	@ (800c06c <SVCCTL_App_Notification+0x300>)
 800bdd8:	f002 fc7c 	bl	800e6d4 <iprintf>
 800bddc:	48a4      	ldr	r0, [pc, #656]	@ (800c070 <SVCCTL_App_Notification+0x304>)
 800bdde:	f002 fce9 	bl	800e7b4 <puts>
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 800bde2:	48a0      	ldr	r0, [pc, #640]	@ (800c064 <SVCCTL_App_Notification+0x2f8>)
 800bde4:	f7ff f936 	bl	800b054 <DbgTraceGetFileName>
 800bde8:	4601      	mov	r1, r0
 800bdea:	f44f 73dd 	mov.w	r3, #442	@ 0x1ba
 800bdee:	4a9e      	ldr	r2, [pc, #632]	@ (800c068 <SVCCTL_App_Notification+0x2fc>)
 800bdf0:	489e      	ldr	r0, [pc, #632]	@ (800c06c <SVCCTL_App_Notification+0x300>)
 800bdf2:	f002 fc6f 	bl	800e6d4 <iprintf>
 800bdf6:	68bb      	ldr	r3, [r7, #8]
 800bdf8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800bdfc:	b29b      	uxth	r3, r3
 800bdfe:	4619      	mov	r1, r3
 800be00:	68bb      	ldr	r3, [r7, #8]
 800be02:	78db      	ldrb	r3, [r3, #3]
 800be04:	461a      	mov	r2, r3
 800be06:	489b      	ldr	r0, [pc, #620]	@ (800c074 <SVCCTL_App_Notification+0x308>)
 800be08:	f002 fc64 	bl	800e6d4 <iprintf>
      Adv_Request(APP_BLE_FAST_ADV);
 800be0c:	2001      	movs	r0, #1
 800be0e:	f000 fd69 	bl	800c8e4 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 800be12:	4b99      	ldr	r3, [pc, #612]	@ (800c078 <SVCCTL_App_Notification+0x30c>)
 800be14:	2201      	movs	r2, #1
 800be16:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800be18:	4b91      	ldr	r3, [pc, #580]	@ (800c060 <SVCCTL_App_Notification+0x2f4>)
 800be1a:	8ada      	ldrh	r2, [r3, #22]
 800be1c:	4b96      	ldr	r3, [pc, #600]	@ (800c078 <SVCCTL_App_Notification+0x30c>)
 800be1e:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 800be20:	4895      	ldr	r0, [pc, #596]	@ (800c078 <SVCCTL_App_Notification+0x30c>)
 800be22:	f000 feed 	bl	800cc00 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800be26:	e283      	b.n	800c330 <SVCCTL_App_Notification+0x5c4>
      p_hardware_error_event = (hci_hardware_error_event_rp0 *)p_event_pckt->data;
 800be28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be2a:	3302      	adds	r3, #2
 800be2c:	60fb      	str	r3, [r7, #12]
      APP_DBG_MSG(">>== HCI_HARDWARE_ERROR_EVT_CODE\n");
 800be2e:	488d      	ldr	r0, [pc, #564]	@ (800c064 <SVCCTL_App_Notification+0x2f8>)
 800be30:	f7ff f910 	bl	800b054 <DbgTraceGetFileName>
 800be34:	4601      	mov	r1, r0
 800be36:	f44f 73ee 	mov.w	r3, #476	@ 0x1dc
 800be3a:	4a8b      	ldr	r2, [pc, #556]	@ (800c068 <SVCCTL_App_Notification+0x2fc>)
 800be3c:	488b      	ldr	r0, [pc, #556]	@ (800c06c <SVCCTL_App_Notification+0x300>)
 800be3e:	f002 fc49 	bl	800e6d4 <iprintf>
 800be42:	488e      	ldr	r0, [pc, #568]	@ (800c07c <SVCCTL_App_Notification+0x310>)
 800be44:	f002 fcb6 	bl	800e7b4 <puts>
      APP_DBG_MSG("Hardware Code = 0x%02X\n",p_hardware_error_event->Hardware_Code);
 800be48:	4886      	ldr	r0, [pc, #536]	@ (800c064 <SVCCTL_App_Notification+0x2f8>)
 800be4a:	f7ff f903 	bl	800b054 <DbgTraceGetFileName>
 800be4e:	4601      	mov	r1, r0
 800be50:	f240 13dd 	movw	r3, #477	@ 0x1dd
 800be54:	4a84      	ldr	r2, [pc, #528]	@ (800c068 <SVCCTL_App_Notification+0x2fc>)
 800be56:	4885      	ldr	r0, [pc, #532]	@ (800c06c <SVCCTL_App_Notification+0x300>)
 800be58:	f002 fc3c 	bl	800e6d4 <iprintf>
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	781b      	ldrb	r3, [r3, #0]
 800be60:	4619      	mov	r1, r3
 800be62:	4887      	ldr	r0, [pc, #540]	@ (800c080 <SVCCTL_App_Notification+0x314>)
 800be64:	f002 fc36 	bl	800e6d4 <iprintf>
      break; /* HCI_HARDWARE_ERROR_EVT_CODE */
 800be68:	e262      	b.n	800c330 <SVCCTL_App_Notification+0x5c4>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 800be6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be6c:	3302      	adds	r3, #2
 800be6e:	61bb      	str	r3, [r7, #24]
      switch (p_meta_evt->subevent)
 800be70:	69bb      	ldr	r3, [r7, #24]
 800be72:	781b      	ldrb	r3, [r3, #0]
 800be74:	2b01      	cmp	r3, #1
 800be76:	d042      	beq.n	800befe <SVCCTL_App_Notification+0x192>
 800be78:	2b03      	cmp	r3, #3
 800be7a:	f040 80c7 	bne.w	800c00c <SVCCTL_App_Notification+0x2a0>
          p_connection_update_complete_event = (hci_le_connection_update_complete_event_rp0 *) p_meta_evt->data;
 800be7e:	69bb      	ldr	r3, [r7, #24]
 800be80:	3301      	adds	r3, #1
 800be82:	617b      	str	r3, [r7, #20]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE\n");
 800be84:	4877      	ldr	r0, [pc, #476]	@ (800c064 <SVCCTL_App_Notification+0x2f8>)
 800be86:	f7ff f8e5 	bl	800b054 <DbgTraceGetFileName>
 800be8a:	4601      	mov	r1, r0
 800be8c:	f240 13ef 	movw	r3, #495	@ 0x1ef
 800be90:	4a75      	ldr	r2, [pc, #468]	@ (800c068 <SVCCTL_App_Notification+0x2fc>)
 800be92:	4876      	ldr	r0, [pc, #472]	@ (800c06c <SVCCTL_App_Notification+0x300>)
 800be94:	f002 fc1e 	bl	800e6d4 <iprintf>
 800be98:	487a      	ldr	r0, [pc, #488]	@ (800c084 <SVCCTL_App_Notification+0x318>)
 800be9a:	f002 fc8b 	bl	800e7b4 <puts>
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800be9e:	4871      	ldr	r0, [pc, #452]	@ (800c064 <SVCCTL_App_Notification+0x2f8>)
 800bea0:	f7ff f8d8 	bl	800b054 <DbgTraceGetFileName>
 800bea4:	4601      	mov	r1, r0
 800bea6:	f44f 73f8 	mov.w	r3, #496	@ 0x1f0
 800beaa:	4a6f      	ldr	r2, [pc, #444]	@ (800c068 <SVCCTL_App_Notification+0x2fc>)
 800beac:	486f      	ldr	r0, [pc, #444]	@ (800c06c <SVCCTL_App_Notification+0x300>)
 800beae:	f002 fc11 	bl	800e6d4 <iprintf>
 800beb2:	697b      	ldr	r3, [r7, #20]
 800beb4:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800beb8:	b29b      	uxth	r3, r3
 800beba:	4618      	mov	r0, r3
 800bebc:	f7f4 fb0a 	bl	80004d4 <__aeabi_i2d>
 800bec0:	f04f 0200 	mov.w	r2, #0
 800bec4:	4b70      	ldr	r3, [pc, #448]	@ (800c088 <SVCCTL_App_Notification+0x31c>)
 800bec6:	f7f4 fb6f 	bl	80005a8 <__aeabi_dmul>
 800beca:	4602      	mov	r2, r0
 800becc:	460b      	mov	r3, r1
 800bece:	4610      	mov	r0, r2
 800bed0:	4619      	mov	r1, r3
 800bed2:	697b      	ldr	r3, [r7, #20]
 800bed4:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800bed8:	b29b      	uxth	r3, r3
 800beda:	461c      	mov	r4, r3
 800bedc:	697b      	ldr	r3, [r7, #20]
 800bede:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800bee2:	b29b      	uxth	r3, r3
 800bee4:	461a      	mov	r2, r3
 800bee6:	4613      	mov	r3, r2
 800bee8:	009b      	lsls	r3, r3, #2
 800beea:	4413      	add	r3, r2
 800beec:	005b      	lsls	r3, r3, #1
 800beee:	9301      	str	r3, [sp, #4]
 800bef0:	9400      	str	r4, [sp, #0]
 800bef2:	4602      	mov	r2, r0
 800bef4:	460b      	mov	r3, r1
 800bef6:	4865      	ldr	r0, [pc, #404]	@ (800c08c <SVCCTL_App_Notification+0x320>)
 800bef8:	f002 fbec 	bl	800e6d4 <iprintf>
          break;
 800befc:	e087      	b.n	800c00e <SVCCTL_App_Notification+0x2a2>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 800befe:	69bb      	ldr	r3, [r7, #24]
 800bf00:	3301      	adds	r3, #1
 800bf02:	613b      	str	r3, [r7, #16]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE - Connection handle: 0x%x\n", p_connection_complete_event->Connection_Handle);
 800bf04:	4857      	ldr	r0, [pc, #348]	@ (800c064 <SVCCTL_App_Notification+0x2f8>)
 800bf06:	f7ff f8a5 	bl	800b054 <DbgTraceGetFileName>
 800bf0a:	4601      	mov	r1, r0
 800bf0c:	f240 2302 	movw	r3, #514	@ 0x202
 800bf10:	4a55      	ldr	r2, [pc, #340]	@ (800c068 <SVCCTL_App_Notification+0x2fc>)
 800bf12:	4856      	ldr	r0, [pc, #344]	@ (800c06c <SVCCTL_App_Notification+0x300>)
 800bf14:	f002 fbde 	bl	800e6d4 <iprintf>
 800bf18:	693b      	ldr	r3, [r7, #16]
 800bf1a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800bf1e:	b29b      	uxth	r3, r3
 800bf20:	4619      	mov	r1, r3
 800bf22:	485b      	ldr	r0, [pc, #364]	@ (800c090 <SVCCTL_App_Notification+0x324>)
 800bf24:	f002 fbd6 	bl	800e6d4 <iprintf>
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800bf28:	484e      	ldr	r0, [pc, #312]	@ (800c064 <SVCCTL_App_Notification+0x2f8>)
 800bf2a:	f7ff f893 	bl	800b054 <DbgTraceGetFileName>
 800bf2e:	4601      	mov	r1, r0
 800bf30:	f240 2303 	movw	r3, #515	@ 0x203
 800bf34:	4a4c      	ldr	r2, [pc, #304]	@ (800c068 <SVCCTL_App_Notification+0x2fc>)
 800bf36:	484d      	ldr	r0, [pc, #308]	@ (800c06c <SVCCTL_App_Notification+0x300>)
 800bf38:	f002 fbcc 	bl	800e6d4 <iprintf>
 800bf3c:	693b      	ldr	r3, [r7, #16]
 800bf3e:	7a9b      	ldrb	r3, [r3, #10]
 800bf40:	4618      	mov	r0, r3
 800bf42:	693b      	ldr	r3, [r7, #16]
 800bf44:	7a5b      	ldrb	r3, [r3, #9]
 800bf46:	461c      	mov	r4, r3
 800bf48:	693b      	ldr	r3, [r7, #16]
 800bf4a:	7a1b      	ldrb	r3, [r3, #8]
 800bf4c:	461d      	mov	r5, r3
 800bf4e:	693b      	ldr	r3, [r7, #16]
 800bf50:	79db      	ldrb	r3, [r3, #7]
 800bf52:	461a      	mov	r2, r3
 800bf54:	693b      	ldr	r3, [r7, #16]
 800bf56:	799b      	ldrb	r3, [r3, #6]
 800bf58:	4619      	mov	r1, r3
 800bf5a:	693b      	ldr	r3, [r7, #16]
 800bf5c:	795b      	ldrb	r3, [r3, #5]
 800bf5e:	9302      	str	r3, [sp, #8]
 800bf60:	9101      	str	r1, [sp, #4]
 800bf62:	9200      	str	r2, [sp, #0]
 800bf64:	462b      	mov	r3, r5
 800bf66:	4622      	mov	r2, r4
 800bf68:	4601      	mov	r1, r0
 800bf6a:	484a      	ldr	r0, [pc, #296]	@ (800c094 <SVCCTL_App_Notification+0x328>)
 800bf6c:	f002 fbb2 	bl	800e6d4 <iprintf>
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800bf70:	483c      	ldr	r0, [pc, #240]	@ (800c064 <SVCCTL_App_Notification+0x2f8>)
 800bf72:	f7ff f86f 	bl	800b054 <DbgTraceGetFileName>
 800bf76:	4601      	mov	r1, r0
 800bf78:	f240 230a 	movw	r3, #522	@ 0x20a
 800bf7c:	4a3a      	ldr	r2, [pc, #232]	@ (800c068 <SVCCTL_App_Notification+0x2fc>)
 800bf7e:	483b      	ldr	r0, [pc, #236]	@ (800c06c <SVCCTL_App_Notification+0x300>)
 800bf80:	f002 fba8 	bl	800e6d4 <iprintf>
 800bf84:	693b      	ldr	r3, [r7, #16]
 800bf86:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 800bf8a:	b29b      	uxth	r3, r3
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	f7f4 faa1 	bl	80004d4 <__aeabi_i2d>
 800bf92:	f04f 0200 	mov.w	r2, #0
 800bf96:	4b3c      	ldr	r3, [pc, #240]	@ (800c088 <SVCCTL_App_Notification+0x31c>)
 800bf98:	f7f4 fb06 	bl	80005a8 <__aeabi_dmul>
 800bf9c:	4602      	mov	r2, r0
 800bf9e:	460b      	mov	r3, r1
 800bfa0:	4610      	mov	r0, r2
 800bfa2:	4619      	mov	r1, r3
 800bfa4:	693b      	ldr	r3, [r7, #16]
 800bfa6:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 800bfaa:	b29b      	uxth	r3, r3
 800bfac:	461c      	mov	r4, r3
 800bfae:	693b      	ldr	r3, [r7, #16]
 800bfb0:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 800bfb4:	b29b      	uxth	r3, r3
 800bfb6:	461a      	mov	r2, r3
 800bfb8:	4613      	mov	r3, r2
 800bfba:	009b      	lsls	r3, r3, #2
 800bfbc:	4413      	add	r3, r2
 800bfbe:	005b      	lsls	r3, r3, #1
 800bfc0:	9301      	str	r3, [sp, #4]
 800bfc2:	9400      	str	r4, [sp, #0]
 800bfc4:	4602      	mov	r2, r0
 800bfc6:	460b      	mov	r3, r1
 800bfc8:	4830      	ldr	r0, [pc, #192]	@ (800c08c <SVCCTL_App_Notification+0x320>)
 800bfca:	f002 fb83 	bl	800e6d4 <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800bfce:	4b24      	ldr	r3, [pc, #144]	@ (800c060 <SVCCTL_App_Notification+0x2f4>)
 800bfd0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800bfd4:	2b04      	cmp	r3, #4
 800bfd6:	d104      	bne.n	800bfe2 <SVCCTL_App_Notification+0x276>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800bfd8:	4b21      	ldr	r3, [pc, #132]	@ (800c060 <SVCCTL_App_Notification+0x2f4>)
 800bfda:	2206      	movs	r2, #6
 800bfdc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 800bfe0:	e003      	b.n	800bfea <SVCCTL_App_Notification+0x27e>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800bfe2:	4b1f      	ldr	r3, [pc, #124]	@ (800c060 <SVCCTL_App_Notification+0x2f4>)
 800bfe4:	2205      	movs	r2, #5
 800bfe6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 800bfea:	693b      	ldr	r3, [r7, #16]
 800bfec:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800bff0:	b29a      	uxth	r2, r3
 800bff2:	4b1b      	ldr	r3, [pc, #108]	@ (800c060 <SVCCTL_App_Notification+0x2f4>)
 800bff4:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 800bff6:	4b20      	ldr	r3, [pc, #128]	@ (800c078 <SVCCTL_App_Notification+0x30c>)
 800bff8:	2200      	movs	r2, #0
 800bffa:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800bffc:	4b18      	ldr	r3, [pc, #96]	@ (800c060 <SVCCTL_App_Notification+0x2f4>)
 800bffe:	8ada      	ldrh	r2, [r3, #22]
 800c000:	4b1d      	ldr	r3, [pc, #116]	@ (800c078 <SVCCTL_App_Notification+0x30c>)
 800c002:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 800c004:	481c      	ldr	r0, [pc, #112]	@ (800c078 <SVCCTL_App_Notification+0x30c>)
 800c006:	f000 fdfb 	bl	800cc00 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800c00a:	e000      	b.n	800c00e <SVCCTL_App_Notification+0x2a2>
          break;
 800c00c:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800c00e:	e18f      	b.n	800c330 <SVCCTL_App_Notification+0x5c4>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 800c010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c012:	3302      	adds	r3, #2
 800c014:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (p_blecore_evt->ecode)
 800c016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c018:	881b      	ldrh	r3, [r3, #0]
 800c01a:	b29b      	uxth	r3, r3
 800c01c:	f640 420e 	movw	r2, #3086	@ 0xc0e
 800c020:	4293      	cmp	r3, r2
 800c022:	f000 814a 	beq.w	800c2ba <SVCCTL_App_Notification+0x54e>
 800c026:	f640 420e 	movw	r2, #3086	@ 0xc0e
 800c02a:	4293      	cmp	r3, r2
 800c02c:	f300 817f 	bgt.w	800c32e <SVCCTL_App_Notification+0x5c2>
 800c030:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c034:	f000 8175 	beq.w	800c322 <SVCCTL_App_Notification+0x5b6>
 800c038:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c03c:	f300 8177 	bgt.w	800c32e <SVCCTL_App_Notification+0x5c2>
 800c040:	f240 420a 	movw	r2, #1034	@ 0x40a
 800c044:	4293      	cmp	r3, r2
 800c046:	f300 8172 	bgt.w	800c32e <SVCCTL_App_Notification+0x5c2>
 800c04a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c04e:	dc23      	bgt.n	800c098 <SVCCTL_App_Notification+0x32c>
 800c050:	2b04      	cmp	r3, #4
 800c052:	f000 8168 	beq.w	800c326 <SVCCTL_App_Notification+0x5ba>
 800c056:	2b06      	cmp	r3, #6
 800c058:	f000 8142 	beq.w	800c2e0 <SVCCTL_App_Notification+0x574>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800c05c:	e167      	b.n	800c32e <SVCCTL_App_Notification+0x5c2>
 800c05e:	bf00      	nop
 800c060:	20003504 	.word	0x20003504
 800c064:	08012514 	.word	0x08012514
 800c068:	08013804 	.word	0x08013804
 800c06c:	08012530 	.word	0x08012530
 800c070:	0801265c 	.word	0x0801265c
 800c074:	08012688 	.word	0x08012688
 800c078:	20003588 	.word	0x20003588
 800c07c:	080126c4 	.word	0x080126c4
 800c080:	080126e8 	.word	0x080126e8
 800c084:	08012700 	.word	0x08012700
 800c088:	3ff40000 	.word	0x3ff40000
 800c08c:	08012734 	.word	0x08012734
 800c090:	080127a0 	.word	0x080127a0
 800c094:	080127e8 	.word	0x080127e8
 800c098:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 800c09c:	2b09      	cmp	r3, #9
 800c09e:	f200 8146 	bhi.w	800c32e <SVCCTL_App_Notification+0x5c2>
 800c0a2:	a201      	add	r2, pc, #4	@ (adr r2, 800c0a8 <SVCCTL_App_Notification+0x33c>)
 800c0a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0a8:	0800c235 	.word	0x0800c235
 800c0ac:	0800c109 	.word	0x0800c109
 800c0b0:	0800c32f 	.word	0x0800c32f
 800c0b4:	0800c32f 	.word	0x0800c32f
 800c0b8:	0800c32f 	.word	0x0800c32f
 800c0bc:	0800c32f 	.word	0x0800c32f
 800c0c0:	0800c0d1 	.word	0x0800c0d1
 800c0c4:	0800c32f 	.word	0x0800c32f
 800c0c8:	0800c17b 	.word	0x0800c17b
 800c0cc:	0800c0ed 	.word	0x0800c0ed
          APP_DBG_MSG(">>== ACI_GAP_PROC_COMPLETE_VSEVT_CODE \r");
 800c0d0:	489a      	ldr	r0, [pc, #616]	@ (800c33c <SVCCTL_App_Notification+0x5d0>)
 800c0d2:	f7fe ffbf 	bl	800b054 <DbgTraceGetFileName>
 800c0d6:	4601      	mov	r1, r0
 800c0d8:	f44f 7313 	mov.w	r3, #588	@ 0x24c
 800c0dc:	4a98      	ldr	r2, [pc, #608]	@ (800c340 <SVCCTL_App_Notification+0x5d4>)
 800c0de:	4899      	ldr	r0, [pc, #612]	@ (800c344 <SVCCTL_App_Notification+0x5d8>)
 800c0e0:	f002 faf8 	bl	800e6d4 <iprintf>
 800c0e4:	4898      	ldr	r0, [pc, #608]	@ (800c348 <SVCCTL_App_Notification+0x5dc>)
 800c0e6:	f002 faf5 	bl	800e6d4 <iprintf>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 800c0ea:	e11d      	b.n	800c328 <SVCCTL_App_Notification+0x5bc>
          APP_DBG_MSG(">>== ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE\n");
 800c0ec:	4893      	ldr	r0, [pc, #588]	@ (800c33c <SVCCTL_App_Notification+0x5d0>)
 800c0ee:	f7fe ffb1 	bl	800b054 <DbgTraceGetFileName>
 800c0f2:	4601      	mov	r1, r0
 800c0f4:	f44f 7317 	mov.w	r3, #604	@ 0x25c
 800c0f8:	4a91      	ldr	r2, [pc, #580]	@ (800c340 <SVCCTL_App_Notification+0x5d4>)
 800c0fa:	4892      	ldr	r0, [pc, #584]	@ (800c344 <SVCCTL_App_Notification+0x5d8>)
 800c0fc:	f002 faea 	bl	800e6d4 <iprintf>
 800c100:	4892      	ldr	r0, [pc, #584]	@ (800c34c <SVCCTL_App_Notification+0x5e0>)
 800c102:	f002 fb57 	bl	800e7b4 <puts>
          break;
 800c106:	e10f      	b.n	800c328 <SVCCTL_App_Notification+0x5bc>
          APP_DBG_MSG(">>== ACI_GAP_PASS_KEY_REQ_VSEVT_CODE \n");
 800c108:	488c      	ldr	r0, [pc, #560]	@ (800c33c <SVCCTL_App_Notification+0x5d0>)
 800c10a:	f7fe ffa3 	bl	800b054 <DbgTraceGetFileName>
 800c10e:	4601      	mov	r1, r0
 800c110:	f240 2363 	movw	r3, #611	@ 0x263
 800c114:	4a8a      	ldr	r2, [pc, #552]	@ (800c340 <SVCCTL_App_Notification+0x5d4>)
 800c116:	488b      	ldr	r0, [pc, #556]	@ (800c344 <SVCCTL_App_Notification+0x5d8>)
 800c118:	f002 fadc 	bl	800e6d4 <iprintf>
 800c11c:	488c      	ldr	r0, [pc, #560]	@ (800c350 <SVCCTL_App_Notification+0x5e4>)
 800c11e:	f002 fb49 	bl	800e7b4 <puts>
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 800c122:	4b8c      	ldr	r3, [pc, #560]	@ (800c354 <SVCCTL_App_Notification+0x5e8>)
 800c124:	8adb      	ldrh	r3, [r3, #22]
 800c126:	498c      	ldr	r1, [pc, #560]	@ (800c358 <SVCCTL_App_Notification+0x5ec>)
 800c128:	4618      	mov	r0, r3
 800c12a:	f7fd f955 	bl	80093d8 <aci_gap_pass_key_resp>
 800c12e:	4603      	mov	r3, r0
 800c130:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          if (ret != BLE_STATUS_SUCCESS)
 800c134:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d010      	beq.n	800c15e <SVCCTL_App_Notification+0x3f2>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Fail, reason: 0x%x\n", ret);
 800c13c:	487f      	ldr	r0, [pc, #508]	@ (800c33c <SVCCTL_App_Notification+0x5d0>)
 800c13e:	f7fe ff89 	bl	800b054 <DbgTraceGetFileName>
 800c142:	4601      	mov	r1, r0
 800c144:	f44f 731a 	mov.w	r3, #616	@ 0x268
 800c148:	4a7d      	ldr	r2, [pc, #500]	@ (800c340 <SVCCTL_App_Notification+0x5d4>)
 800c14a:	487e      	ldr	r0, [pc, #504]	@ (800c344 <SVCCTL_App_Notification+0x5d8>)
 800c14c:	f002 fac2 	bl	800e6d4 <iprintf>
 800c150:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c154:	4619      	mov	r1, r3
 800c156:	4881      	ldr	r0, [pc, #516]	@ (800c35c <SVCCTL_App_Notification+0x5f0>)
 800c158:	f002 fabc 	bl	800e6d4 <iprintf>
          break;
 800c15c:	e0e4      	b.n	800c328 <SVCCTL_App_Notification+0x5bc>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Success \n");
 800c15e:	4877      	ldr	r0, [pc, #476]	@ (800c33c <SVCCTL_App_Notification+0x5d0>)
 800c160:	f7fe ff78 	bl	800b054 <DbgTraceGetFileName>
 800c164:	4601      	mov	r1, r0
 800c166:	f44f 731b 	mov.w	r3, #620	@ 0x26c
 800c16a:	4a75      	ldr	r2, [pc, #468]	@ (800c340 <SVCCTL_App_Notification+0x5d4>)
 800c16c:	4875      	ldr	r0, [pc, #468]	@ (800c344 <SVCCTL_App_Notification+0x5d8>)
 800c16e:	f002 fab1 	bl	800e6d4 <iprintf>
 800c172:	487b      	ldr	r0, [pc, #492]	@ (800c360 <SVCCTL_App_Notification+0x5f4>)
 800c174:	f002 fb1e 	bl	800e7b4 <puts>
          break;
 800c178:	e0d6      	b.n	800c328 <SVCCTL_App_Notification+0x5bc>
          APP_DBG_MSG(">>== ACI_GAP_NUMERIC_COMPARISON_VALUE_VSEVT_CODE\n");
 800c17a:	4870      	ldr	r0, [pc, #448]	@ (800c33c <SVCCTL_App_Notification+0x5d0>)
 800c17c:	f7fe ff6a 	bl	800b054 <DbgTraceGetFileName>
 800c180:	4601      	mov	r1, r0
 800c182:	f44f 731d 	mov.w	r3, #628	@ 0x274
 800c186:	4a6e      	ldr	r2, [pc, #440]	@ (800c340 <SVCCTL_App_Notification+0x5d4>)
 800c188:	486e      	ldr	r0, [pc, #440]	@ (800c344 <SVCCTL_App_Notification+0x5d8>)
 800c18a:	f002 faa3 	bl	800e6d4 <iprintf>
 800c18e:	4875      	ldr	r0, [pc, #468]	@ (800c364 <SVCCTL_App_Notification+0x5f8>)
 800c190:	f002 fb10 	bl	800e7b4 <puts>
          APP_DBG_MSG("     - numeric_value = %ld\n",
 800c194:	4869      	ldr	r0, [pc, #420]	@ (800c33c <SVCCTL_App_Notification+0x5d0>)
 800c196:	f7fe ff5d 	bl	800b054 <DbgTraceGetFileName>
 800c19a:	4601      	mov	r1, r0
 800c19c:	f240 2375 	movw	r3, #629	@ 0x275
 800c1a0:	4a67      	ldr	r2, [pc, #412]	@ (800c340 <SVCCTL_App_Notification+0x5d4>)
 800c1a2:	4868      	ldr	r0, [pc, #416]	@ (800c344 <SVCCTL_App_Notification+0x5d8>)
 800c1a4:	f002 fa96 	bl	800e6d4 <iprintf>
 800c1a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1aa:	3302      	adds	r3, #2
 800c1ac:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800c1b0:	4619      	mov	r1, r3
 800c1b2:	486d      	ldr	r0, [pc, #436]	@ (800c368 <SVCCTL_App_Notification+0x5fc>)
 800c1b4:	f002 fa8e 	bl	800e6d4 <iprintf>
          APP_DBG_MSG("     - Hex_value = %lx\n",
 800c1b8:	4860      	ldr	r0, [pc, #384]	@ (800c33c <SVCCTL_App_Notification+0x5d0>)
 800c1ba:	f7fe ff4b 	bl	800b054 <DbgTraceGetFileName>
 800c1be:	4601      	mov	r1, r0
 800c1c0:	f240 2377 	movw	r3, #631	@ 0x277
 800c1c4:	4a5e      	ldr	r2, [pc, #376]	@ (800c340 <SVCCTL_App_Notification+0x5d4>)
 800c1c6:	485f      	ldr	r0, [pc, #380]	@ (800c344 <SVCCTL_App_Notification+0x5d8>)
 800c1c8:	f002 fa84 	bl	800e6d4 <iprintf>
 800c1cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1ce:	3302      	adds	r3, #2
 800c1d0:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800c1d4:	4619      	mov	r1, r3
 800c1d6:	4865      	ldr	r0, [pc, #404]	@ (800c36c <SVCCTL_App_Notification+0x600>)
 800c1d8:	f002 fa7c 	bl	800e6d4 <iprintf>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 800c1dc:	4b5d      	ldr	r3, [pc, #372]	@ (800c354 <SVCCTL_App_Notification+0x5e8>)
 800c1de:	8adb      	ldrh	r3, [r3, #22]
 800c1e0:	2101      	movs	r1, #1
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	f7fd faa2 	bl	800972c <aci_gap_numeric_comparison_value_confirm_yesno>
 800c1e8:	4603      	mov	r3, r0
 800c1ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          if (ret != BLE_STATUS_SUCCESS)
 800c1ee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d010      	beq.n	800c218 <SVCCTL_App_Notification+0x4ac>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Fail, reason: 0x%x\n", ret);
 800c1f6:	4851      	ldr	r0, [pc, #324]	@ (800c33c <SVCCTL_App_Notification+0x5d0>)
 800c1f8:	f7fe ff2c 	bl	800b054 <DbgTraceGetFileName>
 800c1fc:	4601      	mov	r1, r0
 800c1fe:	f44f 731f 	mov.w	r3, #636	@ 0x27c
 800c202:	4a4f      	ldr	r2, [pc, #316]	@ (800c340 <SVCCTL_App_Notification+0x5d4>)
 800c204:	484f      	ldr	r0, [pc, #316]	@ (800c344 <SVCCTL_App_Notification+0x5d8>)
 800c206:	f002 fa65 	bl	800e6d4 <iprintf>
 800c20a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c20e:	4619      	mov	r1, r3
 800c210:	4857      	ldr	r0, [pc, #348]	@ (800c370 <SVCCTL_App_Notification+0x604>)
 800c212:	f002 fa5f 	bl	800e6d4 <iprintf>
          break;
 800c216:	e087      	b.n	800c328 <SVCCTL_App_Notification+0x5bc>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Success \n");
 800c218:	4848      	ldr	r0, [pc, #288]	@ (800c33c <SVCCTL_App_Notification+0x5d0>)
 800c21a:	f7fe ff1b 	bl	800b054 <DbgTraceGetFileName>
 800c21e:	4601      	mov	r1, r0
 800c220:	f44f 7320 	mov.w	r3, #640	@ 0x280
 800c224:	4a46      	ldr	r2, [pc, #280]	@ (800c340 <SVCCTL_App_Notification+0x5d4>)
 800c226:	4847      	ldr	r0, [pc, #284]	@ (800c344 <SVCCTL_App_Notification+0x5d8>)
 800c228:	f002 fa54 	bl	800e6d4 <iprintf>
 800c22c:	4851      	ldr	r0, [pc, #324]	@ (800c374 <SVCCTL_App_Notification+0x608>)
 800c22e:	f002 fac1 	bl	800e7b4 <puts>
          break;
 800c232:	e079      	b.n	800c328 <SVCCTL_App_Notification+0x5bc>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 800c234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c236:	3302      	adds	r3, #2
 800c238:	623b      	str	r3, [r7, #32]
          APP_DBG_MSG(">>== ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE\n");
 800c23a:	4840      	ldr	r0, [pc, #256]	@ (800c33c <SVCCTL_App_Notification+0x5d0>)
 800c23c:	f7fe ff0a 	bl	800b054 <DbgTraceGetFileName>
 800c240:	4601      	mov	r1, r0
 800c242:	f240 238a 	movw	r3, #650	@ 0x28a
 800c246:	4a3e      	ldr	r2, [pc, #248]	@ (800c340 <SVCCTL_App_Notification+0x5d4>)
 800c248:	483e      	ldr	r0, [pc, #248]	@ (800c344 <SVCCTL_App_Notification+0x5d8>)
 800c24a:	f002 fa43 	bl	800e6d4 <iprintf>
 800c24e:	484a      	ldr	r0, [pc, #296]	@ (800c378 <SVCCTL_App_Notification+0x60c>)
 800c250:	f002 fab0 	bl	800e7b4 <puts>
          if (p_pairing_complete->Status != 0)
 800c254:	6a3b      	ldr	r3, [r7, #32]
 800c256:	789b      	ldrb	r3, [r3, #2]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d013      	beq.n	800c284 <SVCCTL_App_Notification+0x518>
            APP_DBG_MSG("     - Pairing KO \n     - Status: 0x%x\n     - Reason: 0x%x\n", p_pairing_complete->Status, p_pairing_complete->Reason);
 800c25c:	4837      	ldr	r0, [pc, #220]	@ (800c33c <SVCCTL_App_Notification+0x5d0>)
 800c25e:	f7fe fef9 	bl	800b054 <DbgTraceGetFileName>
 800c262:	4601      	mov	r1, r0
 800c264:	f240 238d 	movw	r3, #653	@ 0x28d
 800c268:	4a35      	ldr	r2, [pc, #212]	@ (800c340 <SVCCTL_App_Notification+0x5d4>)
 800c26a:	4836      	ldr	r0, [pc, #216]	@ (800c344 <SVCCTL_App_Notification+0x5d8>)
 800c26c:	f002 fa32 	bl	800e6d4 <iprintf>
 800c270:	6a3b      	ldr	r3, [r7, #32]
 800c272:	789b      	ldrb	r3, [r3, #2]
 800c274:	4619      	mov	r1, r3
 800c276:	6a3b      	ldr	r3, [r7, #32]
 800c278:	78db      	ldrb	r3, [r3, #3]
 800c27a:	461a      	mov	r2, r3
 800c27c:	483f      	ldr	r0, [pc, #252]	@ (800c37c <SVCCTL_App_Notification+0x610>)
 800c27e:	f002 fa29 	bl	800e6d4 <iprintf>
 800c282:	e00c      	b.n	800c29e <SVCCTL_App_Notification+0x532>
            APP_DBG_MSG("     - Pairing Success\n");
 800c284:	482d      	ldr	r0, [pc, #180]	@ (800c33c <SVCCTL_App_Notification+0x5d0>)
 800c286:	f7fe fee5 	bl	800b054 <DbgTraceGetFileName>
 800c28a:	4601      	mov	r1, r0
 800c28c:	f240 2391 	movw	r3, #657	@ 0x291
 800c290:	4a2b      	ldr	r2, [pc, #172]	@ (800c340 <SVCCTL_App_Notification+0x5d4>)
 800c292:	482c      	ldr	r0, [pc, #176]	@ (800c344 <SVCCTL_App_Notification+0x5d8>)
 800c294:	f002 fa1e 	bl	800e6d4 <iprintf>
 800c298:	4839      	ldr	r0, [pc, #228]	@ (800c380 <SVCCTL_App_Notification+0x614>)
 800c29a:	f002 fa8b 	bl	800e7b4 <puts>
          APP_DBG_MSG("\n");
 800c29e:	4827      	ldr	r0, [pc, #156]	@ (800c33c <SVCCTL_App_Notification+0x5d0>)
 800c2a0:	f7fe fed8 	bl	800b054 <DbgTraceGetFileName>
 800c2a4:	4601      	mov	r1, r0
 800c2a6:	f240 2393 	movw	r3, #659	@ 0x293
 800c2aa:	4a25      	ldr	r2, [pc, #148]	@ (800c340 <SVCCTL_App_Notification+0x5d4>)
 800c2ac:	4825      	ldr	r0, [pc, #148]	@ (800c344 <SVCCTL_App_Notification+0x5d8>)
 800c2ae:	f002 fa11 	bl	800e6d4 <iprintf>
 800c2b2:	200a      	movs	r0, #10
 800c2b4:	f002 fa20 	bl	800e6f8 <putchar>
          break;
 800c2b8:	e036      	b.n	800c328 <SVCCTL_App_Notification+0x5bc>
          APP_DBG_MSG(">>== ACI_GATT_INDICATION_VSEVT_CODE \r");
 800c2ba:	4820      	ldr	r0, [pc, #128]	@ (800c33c <SVCCTL_App_Notification+0x5d0>)
 800c2bc:	f7fe feca 	bl	800b054 <DbgTraceGetFileName>
 800c2c0:	4601      	mov	r1, r0
 800c2c2:	f44f 7327 	mov.w	r3, #668	@ 0x29c
 800c2c6:	4a1e      	ldr	r2, [pc, #120]	@ (800c340 <SVCCTL_App_Notification+0x5d4>)
 800c2c8:	481e      	ldr	r0, [pc, #120]	@ (800c344 <SVCCTL_App_Notification+0x5d8>)
 800c2ca:	f002 fa03 	bl	800e6d4 <iprintf>
 800c2ce:	482d      	ldr	r0, [pc, #180]	@ (800c384 <SVCCTL_App_Notification+0x618>)
 800c2d0:	f002 fa00 	bl	800e6d4 <iprintf>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 800c2d4:	4b1f      	ldr	r3, [pc, #124]	@ (800c354 <SVCCTL_App_Notification+0x5e8>)
 800c2d6:	8adb      	ldrh	r3, [r3, #22]
 800c2d8:	4618      	mov	r0, r3
 800c2da:	f7fd fd3a 	bl	8009d52 <aci_gatt_confirm_indication>
        break;
 800c2de:	e023      	b.n	800c328 <SVCCTL_App_Notification+0x5bc>
	      p_fw_error_event = (aci_hal_fw_error_event_rp0 *)p_blecore_evt->data;
 800c2e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2e2:	3302      	adds	r3, #2
 800c2e4:	61fb      	str	r3, [r7, #28]
          APP_DBG_MSG(">>== ACI_HAL_FW_ERROR_VSEVT_CODE\n");
 800c2e6:	4815      	ldr	r0, [pc, #84]	@ (800c33c <SVCCTL_App_Notification+0x5d0>)
 800c2e8:	f7fe feb4 	bl	800b054 <DbgTraceGetFileName>
 800c2ec:	4601      	mov	r1, r0
 800c2ee:	f240 23a7 	movw	r3, #679	@ 0x2a7
 800c2f2:	4a13      	ldr	r2, [pc, #76]	@ (800c340 <SVCCTL_App_Notification+0x5d4>)
 800c2f4:	4813      	ldr	r0, [pc, #76]	@ (800c344 <SVCCTL_App_Notification+0x5d8>)
 800c2f6:	f002 f9ed 	bl	800e6d4 <iprintf>
 800c2fa:	4823      	ldr	r0, [pc, #140]	@ (800c388 <SVCCTL_App_Notification+0x61c>)
 800c2fc:	f002 fa5a 	bl	800e7b4 <puts>
          APP_DBG_MSG("FW Error Type = 0x%02X\n", p_fw_error_event->FW_Error_Type);
 800c300:	480e      	ldr	r0, [pc, #56]	@ (800c33c <SVCCTL_App_Notification+0x5d0>)
 800c302:	f7fe fea7 	bl	800b054 <DbgTraceGetFileName>
 800c306:	4601      	mov	r1, r0
 800c308:	f44f 732a 	mov.w	r3, #680	@ 0x2a8
 800c30c:	4a0c      	ldr	r2, [pc, #48]	@ (800c340 <SVCCTL_App_Notification+0x5d4>)
 800c30e:	480d      	ldr	r0, [pc, #52]	@ (800c344 <SVCCTL_App_Notification+0x5d8>)
 800c310:	f002 f9e0 	bl	800e6d4 <iprintf>
 800c314:	69fb      	ldr	r3, [r7, #28]
 800c316:	781b      	ldrb	r3, [r3, #0]
 800c318:	4619      	mov	r1, r3
 800c31a:	481c      	ldr	r0, [pc, #112]	@ (800c38c <SVCCTL_App_Notification+0x620>)
 800c31c:	f002 f9da 	bl	800e6d4 <iprintf>
          break;
 800c320:	e002      	b.n	800c328 <SVCCTL_App_Notification+0x5bc>
          break;
 800c322:	bf00      	nop
 800c324:	e003      	b.n	800c32e <SVCCTL_App_Notification+0x5c2>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800c326:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800c328:	e001      	b.n	800c32e <SVCCTL_App_Notification+0x5c2>
      break;
 800c32a:	bf00      	nop
 800c32c:	e000      	b.n	800c330 <SVCCTL_App_Notification+0x5c4>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800c32e:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800c330:	2301      	movs	r3, #1
}
 800c332:	4618      	mov	r0, r3
 800c334:	3730      	adds	r7, #48	@ 0x30
 800c336:	46bd      	mov	sp, r7
 800c338:	bdb0      	pop	{r4, r5, r7, pc}
 800c33a:	bf00      	nop
 800c33c:	08012514 	.word	0x08012514
 800c340:	08013804 	.word	0x08013804
 800c344:	08012530 	.word	0x08012530
 800c348:	08012838 	.word	0x08012838
 800c34c:	08012860 	.word	0x08012860
 800c350:	08012890 	.word	0x08012890
 800c354:	20003504 	.word	0x20003504
 800c358:	0001b207 	.word	0x0001b207
 800c35c:	080128b8 	.word	0x080128b8
 800c360:	080128ec 	.word	0x080128ec
 800c364:	08012914 	.word	0x08012914
 800c368:	08012948 	.word	0x08012948
 800c36c:	08012964 	.word	0x08012964
 800c370:	0801297c 	.word	0x0801297c
 800c374:	080129cc 	.word	0x080129cc
 800c378:	08012a14 	.word	0x08012a14
 800c37c:	08012a40 	.word	0x08012a40
 800c380:	08012a7c 	.word	0x08012a7c
 800c384:	08012a94 	.word	0x08012a94
 800c388:	08012abc 	.word	0x08012abc
 800c38c:	08012ae0 	.word	0x08012ae0

0800c390 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b082      	sub	sp, #8
 800c394:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800c396:	4b06      	ldr	r3, [pc, #24]	@ (800c3b0 <Ble_Tl_Init+0x20>)
 800c398:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800c39a:	4b06      	ldr	r3, [pc, #24]	@ (800c3b4 <Ble_Tl_Init+0x24>)
 800c39c:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800c39e:	463b      	mov	r3, r7
 800c3a0:	4619      	mov	r1, r3
 800c3a2:	4805      	ldr	r0, [pc, #20]	@ (800c3b8 <Ble_Tl_Init+0x28>)
 800c3a4:	f7fe f93a 	bl	800a61c <hci_init>

  return;
 800c3a8:	bf00      	nop
}
 800c3aa:	3708      	adds	r7, #8
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	bd80      	pop	{r7, pc}
 800c3b0:	200300d8 	.word	0x200300d8
 800c3b4:	0800cb85 	.word	0x0800cb85
 800c3b8:	0800cb4d 	.word	0x0800cb4d

0800c3bc <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 800c3bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3be:	b08d      	sub	sp, #52	@ 0x34
 800c3c0:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800c3c6:	2392      	movs	r3, #146	@ 0x92
 800c3c8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init*/

  APP_DBG_MSG("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 800c3ca:	48a3      	ldr	r0, [pc, #652]	@ (800c658 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800c3cc:	f7fe fe42 	bl	800b054 <DbgTraceGetFileName>
 800c3d0:	4601      	mov	r1, r0
 800c3d2:	f240 23e6 	movw	r3, #742	@ 0x2e6
 800c3d6:	4aa1      	ldr	r2, [pc, #644]	@ (800c65c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800c3d8:	48a1      	ldr	r0, [pc, #644]	@ (800c660 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800c3da:	f002 f97b 	bl	800e6d4 <iprintf>
 800c3de:	48a1      	ldr	r0, [pc, #644]	@ (800c664 <Ble_Hci_Gap_Gatt_Init+0x2a8>)
 800c3e0:	f002 f9e8 	bl	800e7b4 <puts>

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 800c3e4:	f7fd fe4a 	bl	800a07c <hci_reset>
 800c3e8:	4603      	mov	r3, r0
 800c3ea:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800c3ec:	7dfb      	ldrb	r3, [r7, #23]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d00f      	beq.n	800c412 <Ble_Hci_Gap_Gatt_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n", ret);
 800c3f2:	4899      	ldr	r0, [pc, #612]	@ (800c658 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800c3f4:	f7fe fe2e 	bl	800b054 <DbgTraceGetFileName>
 800c3f8:	4601      	mov	r1, r0
 800c3fa:	f240 23ef 	movw	r3, #751	@ 0x2ef
 800c3fe:	4a97      	ldr	r2, [pc, #604]	@ (800c65c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800c400:	4897      	ldr	r0, [pc, #604]	@ (800c660 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800c402:	f002 f967 	bl	800e6d4 <iprintf>
 800c406:	7dfb      	ldrb	r3, [r7, #23]
 800c408:	4619      	mov	r1, r3
 800c40a:	4897      	ldr	r0, [pc, #604]	@ (800c668 <Ble_Hci_Gap_Gatt_Init+0x2ac>)
 800c40c:	f002 f962 	bl	800e6d4 <iprintf>
 800c410:	e00c      	b.n	800c42c <Ble_Hci_Gap_Gatt_Init+0x70>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_reset command\n");
 800c412:	4891      	ldr	r0, [pc, #580]	@ (800c658 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800c414:	f7fe fe1e 	bl	800b054 <DbgTraceGetFileName>
 800c418:	4601      	mov	r1, r0
 800c41a:	f240 23f3 	movw	r3, #755	@ 0x2f3
 800c41e:	4a8f      	ldr	r2, [pc, #572]	@ (800c65c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800c420:	488f      	ldr	r0, [pc, #572]	@ (800c660 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800c422:	f002 f957 	bl	800e6d4 <iprintf>
 800c426:	4891      	ldr	r0, [pc, #580]	@ (800c66c <Ble_Hci_Gap_Gatt_Init+0x2b0>)
 800c428:	f002 f9c4 	bl	800e7b4 <puts>
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800c42c:	f000 fad8 	bl	800c9e0 <BleGetBdAddress>
 800c430:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 800c432:	693a      	ldr	r2, [r7, #16]
 800c434:	2106      	movs	r1, #6
 800c436:	2000      	movs	r0, #0
 800c438:	f7fd fce0 	bl	8009dfc <aci_hal_write_config_data>
 800c43c:	4603      	mov	r3, r0
 800c43e:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800c440:	7dfb      	ldrb	r3, [r7, #23]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d00f      	beq.n	800c466 <Ble_Hci_Gap_Gatt_Init+0xaa>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET, result: 0x%x \n", ret);
 800c446:	4884      	ldr	r0, [pc, #528]	@ (800c658 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800c448:	f7fe fe04 	bl	800b054 <DbgTraceGetFileName>
 800c44c:	4601      	mov	r1, r0
 800c44e:	f240 23fd 	movw	r3, #765	@ 0x2fd
 800c452:	4a82      	ldr	r2, [pc, #520]	@ (800c65c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800c454:	4882      	ldr	r0, [pc, #520]	@ (800c660 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800c456:	f002 f93d 	bl	800e6d4 <iprintf>
 800c45a:	7dfb      	ldrb	r3, [r7, #23]
 800c45c:	4619      	mov	r1, r3
 800c45e:	4884      	ldr	r0, [pc, #528]	@ (800c670 <Ble_Hci_Gap_Gatt_Init+0x2b4>)
 800c460:	f002 f938 	bl	800e6d4 <iprintf>
 800c464:	e035      	b.n	800c4d2 <Ble_Hci_Gap_Gatt_Init+0x116>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET\n");
 800c466:	487c      	ldr	r0, [pc, #496]	@ (800c658 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800c468:	f7fe fdf4 	bl	800b054 <DbgTraceGetFileName>
 800c46c:	4601      	mov	r1, r0
 800c46e:	f240 3301 	movw	r3, #769	@ 0x301
 800c472:	4a7a      	ldr	r2, [pc, #488]	@ (800c65c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800c474:	487a      	ldr	r0, [pc, #488]	@ (800c660 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800c476:	f002 f92d 	bl	800e6d4 <iprintf>
 800c47a:	487e      	ldr	r0, [pc, #504]	@ (800c674 <Ble_Hci_Gap_Gatt_Init+0x2b8>)
 800c47c:	f002 f99a 	bl	800e7b4 <puts>
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 800c480:	4875      	ldr	r0, [pc, #468]	@ (800c658 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800c482:	f7fe fde7 	bl	800b054 <DbgTraceGetFileName>
 800c486:	4601      	mov	r1, r0
 800c488:	f240 3302 	movw	r3, #770	@ 0x302
 800c48c:	4a73      	ldr	r2, [pc, #460]	@ (800c65c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800c48e:	4874      	ldr	r0, [pc, #464]	@ (800c660 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800c490:	f002 f920 	bl	800e6d4 <iprintf>
 800c494:	693b      	ldr	r3, [r7, #16]
 800c496:	3305      	adds	r3, #5
 800c498:	781b      	ldrb	r3, [r3, #0]
 800c49a:	4618      	mov	r0, r3
 800c49c:	693b      	ldr	r3, [r7, #16]
 800c49e:	3304      	adds	r3, #4
 800c4a0:	781b      	ldrb	r3, [r3, #0]
 800c4a2:	461c      	mov	r4, r3
 800c4a4:	693b      	ldr	r3, [r7, #16]
 800c4a6:	3303      	adds	r3, #3
 800c4a8:	781b      	ldrb	r3, [r3, #0]
 800c4aa:	461d      	mov	r5, r3
 800c4ac:	693b      	ldr	r3, [r7, #16]
 800c4ae:	3302      	adds	r3, #2
 800c4b0:	781b      	ldrb	r3, [r3, #0]
 800c4b2:	461a      	mov	r2, r3
 800c4b4:	693b      	ldr	r3, [r7, #16]
 800c4b6:	3301      	adds	r3, #1
 800c4b8:	781b      	ldrb	r3, [r3, #0]
 800c4ba:	4619      	mov	r1, r3
 800c4bc:	693b      	ldr	r3, [r7, #16]
 800c4be:	781b      	ldrb	r3, [r3, #0]
 800c4c0:	9302      	str	r3, [sp, #8]
 800c4c2:	9101      	str	r1, [sp, #4]
 800c4c4:	9200      	str	r2, [sp, #0]
 800c4c6:	462b      	mov	r3, r5
 800c4c8:	4622      	mov	r2, r4
 800c4ca:	4601      	mov	r1, r0
 800c4cc:	486a      	ldr	r0, [pc, #424]	@ (800c678 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800c4ce:	f002 f901 	bl	800e6d4 <iprintf>
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800c4d2:	4a6a      	ldr	r2, [pc, #424]	@ (800c67c <Ble_Hci_Gap_Gatt_Init+0x2c0>)
 800c4d4:	2110      	movs	r1, #16
 800c4d6:	2018      	movs	r0, #24
 800c4d8:	f7fd fc90 	bl	8009dfc <aci_hal_write_config_data>
 800c4dc:	4603      	mov	r3, r0
 800c4de:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800c4e0:	7dfb      	ldrb	r3, [r7, #23]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d00f      	beq.n	800c506 <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%x \n", ret);
 800c4e6:	485c      	ldr	r0, [pc, #368]	@ (800c658 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800c4e8:	f7fe fdb4 	bl	800b054 <DbgTraceGetFileName>
 800c4ec:	4601      	mov	r1, r0
 800c4ee:	f44f 7349 	mov.w	r3, #804	@ 0x324
 800c4f2:	4a5a      	ldr	r2, [pc, #360]	@ (800c65c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800c4f4:	485a      	ldr	r0, [pc, #360]	@ (800c660 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800c4f6:	f002 f8ed 	bl	800e6d4 <iprintf>
 800c4fa:	7dfb      	ldrb	r3, [r7, #23]
 800c4fc:	4619      	mov	r1, r3
 800c4fe:	4860      	ldr	r0, [pc, #384]	@ (800c680 <Ble_Hci_Gap_Gatt_Init+0x2c4>)
 800c500:	f002 f8e8 	bl	800e6d4 <iprintf>
 800c504:	e00c      	b.n	800c520 <Ble_Hci_Gap_Gatt_Init+0x164>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET\n");
 800c506:	4854      	ldr	r0, [pc, #336]	@ (800c658 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800c508:	f7fe fda4 	bl	800b054 <DbgTraceGetFileName>
 800c50c:	4601      	mov	r1, r0
 800c50e:	f44f 734a 	mov.w	r3, #808	@ 0x328
 800c512:	4a52      	ldr	r2, [pc, #328]	@ (800c65c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800c514:	4852      	ldr	r0, [pc, #328]	@ (800c660 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800c516:	f002 f8dd 	bl	800e6d4 <iprintf>
 800c51a:	485a      	ldr	r0, [pc, #360]	@ (800c684 <Ble_Hci_Gap_Gatt_Init+0x2c8>)
 800c51c:	f002 f94a 	bl	800e7b4 <puts>
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 800c520:	4a59      	ldr	r2, [pc, #356]	@ (800c688 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 800c522:	2110      	movs	r1, #16
 800c524:	2008      	movs	r0, #8
 800c526:	f7fd fc69 	bl	8009dfc <aci_hal_write_config_data>
 800c52a:	4603      	mov	r3, r0
 800c52c:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800c52e:	7dfb      	ldrb	r3, [r7, #23]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d00f      	beq.n	800c554 <Ble_Hci_Gap_Gatt_Init+0x198>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%x \n", ret);
 800c534:	4848      	ldr	r0, [pc, #288]	@ (800c658 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800c536:	f7fe fd8d 	bl	800b054 <DbgTraceGetFileName>
 800c53a:	4601      	mov	r1, r0
 800c53c:	f240 3331 	movw	r3, #817	@ 0x331
 800c540:	4a46      	ldr	r2, [pc, #280]	@ (800c65c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800c542:	4847      	ldr	r0, [pc, #284]	@ (800c660 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800c544:	f002 f8c6 	bl	800e6d4 <iprintf>
 800c548:	7dfb      	ldrb	r3, [r7, #23]
 800c54a:	4619      	mov	r1, r3
 800c54c:	484f      	ldr	r0, [pc, #316]	@ (800c68c <Ble_Hci_Gap_Gatt_Init+0x2d0>)
 800c54e:	f002 f8c1 	bl	800e6d4 <iprintf>
 800c552:	e00c      	b.n	800c56e <Ble_Hci_Gap_Gatt_Init+0x1b2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET\n");
 800c554:	4840      	ldr	r0, [pc, #256]	@ (800c658 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800c556:	f7fe fd7d 	bl	800b054 <DbgTraceGetFileName>
 800c55a:	4601      	mov	r1, r0
 800c55c:	f240 3335 	movw	r3, #821	@ 0x335
 800c560:	4a3e      	ldr	r2, [pc, #248]	@ (800c65c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800c562:	483f      	ldr	r0, [pc, #252]	@ (800c660 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800c564:	f002 f8b6 	bl	800e6d4 <iprintf>
 800c568:	4849      	ldr	r0, [pc, #292]	@ (800c690 <Ble_Hci_Gap_Gatt_Init+0x2d4>)
 800c56a:	f002 f923 	bl	800e7b4 <puts>
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800c56e:	2118      	movs	r1, #24
 800c570:	2001      	movs	r0, #1
 800c572:	f7fd fcc8 	bl	8009f06 <aci_hal_set_tx_power_level>
 800c576:	4603      	mov	r3, r0
 800c578:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800c57a:	7dfb      	ldrb	r3, [r7, #23]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d00f      	beq.n	800c5a0 <Ble_Hci_Gap_Gatt_Init+0x1e4>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n", ret);
 800c580:	4835      	ldr	r0, [pc, #212]	@ (800c658 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800c582:	f7fe fd67 	bl	800b054 <DbgTraceGetFileName>
 800c586:	4601      	mov	r1, r0
 800c588:	f240 333e 	movw	r3, #830	@ 0x33e
 800c58c:	4a33      	ldr	r2, [pc, #204]	@ (800c65c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800c58e:	4834      	ldr	r0, [pc, #208]	@ (800c660 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800c590:	f002 f8a0 	bl	800e6d4 <iprintf>
 800c594:	7dfb      	ldrb	r3, [r7, #23]
 800c596:	4619      	mov	r1, r3
 800c598:	483e      	ldr	r0, [pc, #248]	@ (800c694 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 800c59a:	f002 f89b 	bl	800e6d4 <iprintf>
 800c59e:	e00c      	b.n	800c5ba <Ble_Hci_Gap_Gatt_Init+0x1fe>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
 800c5a0:	482d      	ldr	r0, [pc, #180]	@ (800c658 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800c5a2:	f7fe fd57 	bl	800b054 <DbgTraceGetFileName>
 800c5a6:	4601      	mov	r1, r0
 800c5a8:	f240 3342 	movw	r3, #834	@ 0x342
 800c5ac:	4a2b      	ldr	r2, [pc, #172]	@ (800c65c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800c5ae:	482c      	ldr	r0, [pc, #176]	@ (800c660 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800c5b0:	f002 f890 	bl	800e6d4 <iprintf>
 800c5b4:	4838      	ldr	r0, [pc, #224]	@ (800c698 <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 800c5b6:	f002 f8fd 	bl	800e7b4 <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800c5ba:	f7fd f91e 	bl	80097fa <aci_gatt_init>
 800c5be:	4603      	mov	r3, r0
 800c5c0:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800c5c2:	7dfb      	ldrb	r3, [r7, #23]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d00f      	beq.n	800c5e8 <Ble_Hci_Gap_Gatt_Init+0x22c>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n", ret);
 800c5c8:	4823      	ldr	r0, [pc, #140]	@ (800c658 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800c5ca:	f7fe fd43 	bl	800b054 <DbgTraceGetFileName>
 800c5ce:	4601      	mov	r1, r0
 800c5d0:	f240 334b 	movw	r3, #843	@ 0x34b
 800c5d4:	4a21      	ldr	r2, [pc, #132]	@ (800c65c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800c5d6:	4822      	ldr	r0, [pc, #136]	@ (800c660 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800c5d8:	f002 f87c 	bl	800e6d4 <iprintf>
 800c5dc:	7dfb      	ldrb	r3, [r7, #23]
 800c5de:	4619      	mov	r1, r3
 800c5e0:	482e      	ldr	r0, [pc, #184]	@ (800c69c <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 800c5e2:	f002 f877 	bl	800e6d4 <iprintf>
 800c5e6:	e00c      	b.n	800c602 <Ble_Hci_Gap_Gatt_Init+0x246>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_init command\n");
 800c5e8:	481b      	ldr	r0, [pc, #108]	@ (800c658 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800c5ea:	f7fe fd33 	bl	800b054 <DbgTraceGetFileName>
 800c5ee:	4601      	mov	r1, r0
 800c5f0:	f240 334f 	movw	r3, #847	@ 0x34f
 800c5f4:	4a19      	ldr	r2, [pc, #100]	@ (800c65c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800c5f6:	481a      	ldr	r0, [pc, #104]	@ (800c660 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800c5f8:	f002 f86c 	bl	800e6d4 <iprintf>
 800c5fc:	4828      	ldr	r0, [pc, #160]	@ (800c6a0 <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 800c5fe:	f002 f8d9 	bl	800e7b4 <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800c602:	2300      	movs	r3, #0
 800c604:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800c606:	7bfb      	ldrb	r3, [r7, #15]
 800c608:	f043 0301 	orr.w	r3, r3, #1
 800c60c:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 800c60e:	7bfb      	ldrb	r3, [r7, #15]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d069      	beq.n	800c6e8 <Ble_Hci_Gap_Gatt_Init+0x32c>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 800c614:	4b23      	ldr	r3, [pc, #140]	@ (800c6a4 <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 800c616:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 800c618:	1dba      	adds	r2, r7, #6
 800c61a:	7bf8      	ldrb	r0, [r7, #15]
 800c61c:	1cbb      	adds	r3, r7, #2
 800c61e:	9301      	str	r3, [sp, #4]
 800c620:	1d3b      	adds	r3, r7, #4
 800c622:	9300      	str	r3, [sp, #0]
 800c624:	4613      	mov	r3, r2
 800c626:	2208      	movs	r2, #8
 800c628:	2100      	movs	r1, #0
 800c62a:	f7fc ff3c 	bl	80094a6 <aci_gap_init>
 800c62e:	4603      	mov	r3, r0
 800c630:	75fb      	strb	r3, [r7, #23]
                       CFG_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 800c632:	7dfb      	ldrb	r3, [r7, #23]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d039      	beq.n	800c6ac <Ble_Hci_Gap_Gatt_Init+0x2f0>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n", ret);
 800c638:	4807      	ldr	r0, [pc, #28]	@ (800c658 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800c63a:	f7fe fd0b 	bl	800b054 <DbgTraceGetFileName>
 800c63e:	4601      	mov	r1, r0
 800c640:	f240 336f 	movw	r3, #879	@ 0x36f
 800c644:	4a05      	ldr	r2, [pc, #20]	@ (800c65c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800c646:	4806      	ldr	r0, [pc, #24]	@ (800c660 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800c648:	f002 f844 	bl	800e6d4 <iprintf>
 800c64c:	7dfb      	ldrb	r3, [r7, #23]
 800c64e:	4619      	mov	r1, r3
 800c650:	4815      	ldr	r0, [pc, #84]	@ (800c6a8 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 800c652:	f002 f83f 	bl	800e6d4 <iprintf>
 800c656:	e036      	b.n	800c6c6 <Ble_Hci_Gap_Gatt_Init+0x30a>
 800c658:	08012514 	.word	0x08012514
 800c65c:	0801381c 	.word	0x0801381c
 800c660:	08012530 	.word	0x08012530
 800c664:	08012af8 	.word	0x08012af8
 800c668:	08012b24 	.word	0x08012b24
 800c66c:	08012b54 	.word	0x08012b54
 800c670:	08012b74 	.word	0x08012b74
 800c674:	08012bd0 	.word	0x08012bd0
 800c678:	08012c1c 	.word	0x08012c1c
 800c67c:	080137d4 	.word	0x080137d4
 800c680:	08012c58 	.word	0x08012c58
 800c684:	08012cb0 	.word	0x08012cb0
 800c688:	080137e4 	.word	0x080137e4
 800c68c:	08012cf8 	.word	0x08012cf8
 800c690:	08012d50 	.word	0x08012d50
 800c694:	08012d98 	.word	0x08012d98
 800c698:	08012dd8 	.word	0x08012dd8
 800c69c:	08012e08 	.word	0x08012e08
 800c6a0:	08012e3c 	.word	0x08012e3c
 800c6a4:	08012e60 	.word	0x08012e60
 800c6a8:	08012e6c 	.word	0x08012e6c
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
 800c6ac:	487e      	ldr	r0, [pc, #504]	@ (800c8a8 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800c6ae:	f7fe fcd1 	bl	800b054 <DbgTraceGetFileName>
 800c6b2:	4601      	mov	r1, r0
 800c6b4:	f240 3373 	movw	r3, #883	@ 0x373
 800c6b8:	4a7c      	ldr	r2, [pc, #496]	@ (800c8ac <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800c6ba:	487d      	ldr	r0, [pc, #500]	@ (800c8b0 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800c6bc:	f002 f80a 	bl	800e6d4 <iprintf>
 800c6c0:	487c      	ldr	r0, [pc, #496]	@ (800c8b4 <Ble_Hci_Gap_Gatt_Init+0x4f8>)
 800c6c2:	f002 f877 	bl	800e7b4 <puts>
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800c6c6:	88fc      	ldrh	r4, [r7, #6]
 800c6c8:	88bd      	ldrh	r5, [r7, #4]
 800c6ca:	68b8      	ldr	r0, [r7, #8]
 800c6cc:	f7f3 fda8 	bl	8000220 <strlen>
 800c6d0:	4603      	mov	r3, r0
 800c6d2:	b2da      	uxtb	r2, r3
 800c6d4:	68bb      	ldr	r3, [r7, #8]
 800c6d6:	9300      	str	r3, [sp, #0]
 800c6d8:	4613      	mov	r3, r2
 800c6da:	2200      	movs	r2, #0
 800c6dc:	4629      	mov	r1, r5
 800c6de:	4620      	mov	r0, r4
 800c6e0:	f7fd fa8e 	bl	8009c00 <aci_gatt_update_char_value>
 800c6e4:	4603      	mov	r3, r0
 800c6e6:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 800c6e8:	88f8      	ldrh	r0, [r7, #6]
 800c6ea:	8879      	ldrh	r1, [r7, #2]
 800c6ec:	463b      	mov	r3, r7
 800c6ee:	9300      	str	r3, [sp, #0]
 800c6f0:	2302      	movs	r3, #2
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	f7fd fa84 	bl	8009c00 <aci_gatt_update_char_value>
 800c6f8:	4603      	mov	r3, r0
 800c6fa:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800c6fc:	2202      	movs	r2, #2
 800c6fe:	2102      	movs	r1, #2
 800c700:	2000      	movs	r0, #0
 800c702:	f7fd fcdf 	bl	800a0c4 <hci_le_set_default_phy>
 800c706:	4603      	mov	r3, r0
 800c708:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800c70a:	7dfb      	ldrb	r3, [r7, #23]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d00f      	beq.n	800c730 <Ble_Hci_Gap_Gatt_Init+0x374>
  {
    APP_DBG_MSG("  Fail   : hci_le_set_default_phy command, result: 0x%x \n", ret);
 800c710:	4865      	ldr	r0, [pc, #404]	@ (800c8a8 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800c712:	f7fe fc9f 	bl	800b054 <DbgTraceGetFileName>
 800c716:	4601      	mov	r1, r0
 800c718:	f240 3395 	movw	r3, #917	@ 0x395
 800c71c:	4a63      	ldr	r2, [pc, #396]	@ (800c8ac <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800c71e:	4864      	ldr	r0, [pc, #400]	@ (800c8b0 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800c720:	f001 ffd8 	bl	800e6d4 <iprintf>
 800c724:	7dfb      	ldrb	r3, [r7, #23]
 800c726:	4619      	mov	r1, r3
 800c728:	4863      	ldr	r0, [pc, #396]	@ (800c8b8 <Ble_Hci_Gap_Gatt_Init+0x4fc>)
 800c72a:	f001 ffd3 	bl	800e6d4 <iprintf>
 800c72e:	e00c      	b.n	800c74a <Ble_Hci_Gap_Gatt_Init+0x38e>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_le_set_default_phy command\n");
 800c730:	485d      	ldr	r0, [pc, #372]	@ (800c8a8 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800c732:	f7fe fc8f 	bl	800b054 <DbgTraceGetFileName>
 800c736:	4601      	mov	r1, r0
 800c738:	f240 3399 	movw	r3, #921	@ 0x399
 800c73c:	4a5b      	ldr	r2, [pc, #364]	@ (800c8ac <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800c73e:	485c      	ldr	r0, [pc, #368]	@ (800c8b0 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800c740:	f001 ffc8 	bl	800e6d4 <iprintf>
 800c744:	485d      	ldr	r0, [pc, #372]	@ (800c8bc <Ble_Hci_Gap_Gatt_Init+0x500>)
 800c746:	f002 f835 	bl	800e7b4 <puts>
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800c74a:	4b5d      	ldr	r3, [pc, #372]	@ (800c8c0 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800c74c:	2201      	movs	r2, #1
 800c74e:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800c750:	4b5b      	ldr	r3, [pc, #364]	@ (800c8c0 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800c752:	781b      	ldrb	r3, [r3, #0]
 800c754:	4618      	mov	r0, r3
 800c756:	f7fc fd27 	bl	80091a8 <aci_gap_set_io_capability>
 800c75a:	4603      	mov	r3, r0
 800c75c:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800c75e:	7dfb      	ldrb	r3, [r7, #23]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d00f      	beq.n	800c784 <Ble_Hci_Gap_Gatt_Init+0x3c8>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_io_capability command, result: 0x%x \n", ret);
 800c764:	4850      	ldr	r0, [pc, #320]	@ (800c8a8 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800c766:	f7fe fc75 	bl	800b054 <DbgTraceGetFileName>
 800c76a:	4601      	mov	r1, r0
 800c76c:	f240 33a3 	movw	r3, #931	@ 0x3a3
 800c770:	4a4e      	ldr	r2, [pc, #312]	@ (800c8ac <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800c772:	484f      	ldr	r0, [pc, #316]	@ (800c8b0 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800c774:	f001 ffae 	bl	800e6d4 <iprintf>
 800c778:	7dfb      	ldrb	r3, [r7, #23]
 800c77a:	4619      	mov	r1, r3
 800c77c:	4851      	ldr	r0, [pc, #324]	@ (800c8c4 <Ble_Hci_Gap_Gatt_Init+0x508>)
 800c77e:	f001 ffa9 	bl	800e6d4 <iprintf>
 800c782:	e00c      	b.n	800c79e <Ble_Hci_Gap_Gatt_Init+0x3e2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_io_capability command\n");
 800c784:	4848      	ldr	r0, [pc, #288]	@ (800c8a8 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800c786:	f7fe fc65 	bl	800b054 <DbgTraceGetFileName>
 800c78a:	4601      	mov	r1, r0
 800c78c:	f240 33a7 	movw	r3, #935	@ 0x3a7
 800c790:	4a46      	ldr	r2, [pc, #280]	@ (800c8ac <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800c792:	4847      	ldr	r0, [pc, #284]	@ (800c8b0 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800c794:	f001 ff9e 	bl	800e6d4 <iprintf>
 800c798:	484b      	ldr	r0, [pc, #300]	@ (800c8c8 <Ble_Hci_Gap_Gatt_Init+0x50c>)
 800c79a:	f002 f80b 	bl	800e7b4 <puts>
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800c79e:	4b48      	ldr	r3, [pc, #288]	@ (800c8c0 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800c7a0:	2201      	movs	r2, #1
 800c7a2:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800c7a4:	4b46      	ldr	r3, [pc, #280]	@ (800c8c0 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800c7a6:	2208      	movs	r2, #8
 800c7a8:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800c7aa:	4b45      	ldr	r3, [pc, #276]	@ (800c8c0 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800c7ac:	2210      	movs	r2, #16
 800c7ae:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800c7b0:	4b43      	ldr	r3, [pc, #268]	@ (800c8c0 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800c7b2:	2201      	movs	r2, #1
 800c7b4:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800c7b6:	4b42      	ldr	r3, [pc, #264]	@ (800c8c0 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800c7b8:	4a44      	ldr	r2, [pc, #272]	@ (800c8cc <Ble_Hci_Gap_Gatt_Init+0x510>)
 800c7ba:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800c7bc:	4b40      	ldr	r3, [pc, #256]	@ (800c8c0 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800c7be:	2200      	movs	r2, #0
 800c7c0:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800c7c2:	4b3f      	ldr	r3, [pc, #252]	@ (800c8c0 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800c7c4:	789c      	ldrb	r4, [r3, #2]
 800c7c6:	4b3e      	ldr	r3, [pc, #248]	@ (800c8c0 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800c7c8:	785d      	ldrb	r5, [r3, #1]
 800c7ca:	4b3d      	ldr	r3, [pc, #244]	@ (800c8c0 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800c7cc:	791b      	ldrb	r3, [r3, #4]
 800c7ce:	4a3c      	ldr	r2, [pc, #240]	@ (800c8c0 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800c7d0:	7952      	ldrb	r2, [r2, #5]
 800c7d2:	493b      	ldr	r1, [pc, #236]	@ (800c8c0 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800c7d4:	78c9      	ldrb	r1, [r1, #3]
 800c7d6:	483a      	ldr	r0, [pc, #232]	@ (800c8c0 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800c7d8:	6880      	ldr	r0, [r0, #8]
 800c7da:	2600      	movs	r6, #0
 800c7dc:	9604      	str	r6, [sp, #16]
 800c7de:	9003      	str	r0, [sp, #12]
 800c7e0:	9102      	str	r1, [sp, #8]
 800c7e2:	9201      	str	r2, [sp, #4]
 800c7e4:	9300      	str	r3, [sp, #0]
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	2201      	movs	r2, #1
 800c7ea:	4629      	mov	r1, r5
 800c7ec:	4620      	mov	r0, r4
 800c7ee:	f7fc fd2f 	bl	8009250 <aci_gap_set_authentication_requirement>
 800c7f2:	4603      	mov	r3, r0
 800c7f4:	75fb      	strb	r3, [r7, #23]
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
                                               CFG_IDENTITY_ADDRESS);
  if (ret != BLE_STATUS_SUCCESS)
 800c7f6:	7dfb      	ldrb	r3, [r7, #23]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d00f      	beq.n	800c81c <Ble_Hci_Gap_Gatt_Init+0x460>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%x \n", ret);
 800c7fc:	482a      	ldr	r0, [pc, #168]	@ (800c8a8 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800c7fe:	f7fe fc29 	bl	800b054 <DbgTraceGetFileName>
 800c802:	4601      	mov	r1, r0
 800c804:	f240 33c2 	movw	r3, #962	@ 0x3c2
 800c808:	4a28      	ldr	r2, [pc, #160]	@ (800c8ac <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800c80a:	4829      	ldr	r0, [pc, #164]	@ (800c8b0 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800c80c:	f001 ff62 	bl	800e6d4 <iprintf>
 800c810:	7dfb      	ldrb	r3, [r7, #23]
 800c812:	4619      	mov	r1, r3
 800c814:	482e      	ldr	r0, [pc, #184]	@ (800c8d0 <Ble_Hci_Gap_Gatt_Init+0x514>)
 800c816:	f001 ff5d 	bl	800e6d4 <iprintf>
 800c81a:	e00c      	b.n	800c836 <Ble_Hci_Gap_Gatt_Init+0x47a>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_authentication_requirement command\n");
 800c81c:	4822      	ldr	r0, [pc, #136]	@ (800c8a8 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800c81e:	f7fe fc19 	bl	800b054 <DbgTraceGetFileName>
 800c822:	4601      	mov	r1, r0
 800c824:	f240 33c6 	movw	r3, #966	@ 0x3c6
 800c828:	4a20      	ldr	r2, [pc, #128]	@ (800c8ac <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800c82a:	4821      	ldr	r0, [pc, #132]	@ (800c8b0 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800c82c:	f001 ff52 	bl	800e6d4 <iprintf>
 800c830:	4828      	ldr	r0, [pc, #160]	@ (800c8d4 <Ble_Hci_Gap_Gatt_Init+0x518>)
 800c832:	f001 ffbf 	bl	800e7b4 <puts>
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800c836:	4b22      	ldr	r3, [pc, #136]	@ (800c8c0 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800c838:	789b      	ldrb	r3, [r3, #2]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d023      	beq.n	800c886 <Ble_Hci_Gap_Gatt_Init+0x4ca>
  {
    ret = aci_gap_configure_whitelist();
 800c83e:	f7fc ff51 	bl	80096e4 <aci_gap_configure_filter_accept_list>
 800c842:	4603      	mov	r3, r0
 800c844:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
 800c846:	7dfb      	ldrb	r3, [r7, #23]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d00f      	beq.n	800c86c <Ble_Hci_Gap_Gatt_Init+0x4b0>
    {
      APP_DBG_MSG("  Fail   : aci_gap_configure_whitelist command, result: 0x%x \n", ret);
 800c84c:	4816      	ldr	r0, [pc, #88]	@ (800c8a8 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800c84e:	f7fe fc01 	bl	800b054 <DbgTraceGetFileName>
 800c852:	4601      	mov	r1, r0
 800c854:	f240 33d1 	movw	r3, #977	@ 0x3d1
 800c858:	4a14      	ldr	r2, [pc, #80]	@ (800c8ac <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800c85a:	4815      	ldr	r0, [pc, #84]	@ (800c8b0 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800c85c:	f001 ff3a 	bl	800e6d4 <iprintf>
 800c860:	7dfb      	ldrb	r3, [r7, #23]
 800c862:	4619      	mov	r1, r3
 800c864:	481c      	ldr	r0, [pc, #112]	@ (800c8d8 <Ble_Hci_Gap_Gatt_Init+0x51c>)
 800c866:	f001 ff35 	bl	800e6d4 <iprintf>
 800c86a:	e00c      	b.n	800c886 <Ble_Hci_Gap_Gatt_Init+0x4ca>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
 800c86c:	480e      	ldr	r0, [pc, #56]	@ (800c8a8 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800c86e:	f7fe fbf1 	bl	800b054 <DbgTraceGetFileName>
 800c872:	4601      	mov	r1, r0
 800c874:	f240 33d5 	movw	r3, #981	@ 0x3d5
 800c878:	4a0c      	ldr	r2, [pc, #48]	@ (800c8ac <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800c87a:	480d      	ldr	r0, [pc, #52]	@ (800c8b0 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800c87c:	f001 ff2a 	bl	800e6d4 <iprintf>
 800c880:	4816      	ldr	r0, [pc, #88]	@ (800c8dc <Ble_Hci_Gap_Gatt_Init+0x520>)
 800c882:	f001 ff97 	bl	800e7b4 <puts>
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
 800c886:	4808      	ldr	r0, [pc, #32]	@ (800c8a8 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800c888:	f7fe fbe4 	bl	800b054 <DbgTraceGetFileName>
 800c88c:	4601      	mov	r1, r0
 800c88e:	f44f 7376 	mov.w	r3, #984	@ 0x3d8
 800c892:	4a06      	ldr	r2, [pc, #24]	@ (800c8ac <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800c894:	4806      	ldr	r0, [pc, #24]	@ (800c8b0 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800c896:	f001 ff1d 	bl	800e6d4 <iprintf>
 800c89a:	4811      	ldr	r0, [pc, #68]	@ (800c8e0 <Ble_Hci_Gap_Gatt_Init+0x524>)
 800c89c:	f001 ff1a 	bl	800e6d4 <iprintf>
}
 800c8a0:	bf00      	nop
 800c8a2:	371c      	adds	r7, #28
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c8a8:	08012514 	.word	0x08012514
 800c8ac:	0801381c 	.word	0x0801381c
 800c8b0:	08012530 	.word	0x08012530
 800c8b4:	08012e9c 	.word	0x08012e9c
 800c8b8:	08012ebc 	.word	0x08012ebc
 800c8bc:	08012ef8 	.word	0x08012ef8
 800c8c0:	20003504 	.word	0x20003504
 800c8c4:	08012f24 	.word	0x08012f24
 800c8c8:	08012f64 	.word	0x08012f64
 800c8cc:	0001b207 	.word	0x0001b207
 800c8d0:	08012f94 	.word	0x08012f94
 800c8d4:	08012fe0 	.word	0x08012fe0
 800c8d8:	0801301c 	.word	0x0801301c
 800c8dc:	0801305c 	.word	0x0801305c
 800c8e0:	0801308c 	.word	0x0801308c

0800c8e4 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b08c      	sub	sp, #48	@ 0x30
 800c8e8:	af08      	add	r7, sp, #32
 800c8ea:	4603      	mov	r3, r0
 800c8ec:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800c8ee:	2392      	movs	r3, #146	@ 0x92
 800c8f0:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 800c8f2:	4a32      	ldr	r2, [pc, #200]	@ (800c9bc <Adv_Request+0xd8>)
 800c8f4:	79fb      	ldrb	r3, [r7, #7]
 800c8f6:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	9306      	str	r3, [sp, #24]
 800c8fe:	2300      	movs	r3, #0
 800c900:	9305      	str	r3, [sp, #20]
 800c902:	2300      	movs	r3, #0
 800c904:	9304      	str	r3, [sp, #16]
 800c906:	2300      	movs	r3, #0
 800c908:	9303      	str	r3, [sp, #12]
 800c90a:	2300      	movs	r3, #0
 800c90c:	9302      	str	r3, [sp, #8]
 800c90e:	2300      	movs	r3, #0
 800c910:	9301      	str	r3, [sp, #4]
 800c912:	2300      	movs	r3, #0
 800c914:	9300      	str	r3, [sp, #0]
 800c916:	2300      	movs	r3, #0
 800c918:	22a0      	movs	r2, #160	@ 0xa0
 800c91a:	2180      	movs	r1, #128	@ 0x80
 800c91c:	2000      	movs	r0, #0
 800c91e:	f7fc fb49 	bl	8008fb4 <aci_gap_set_discoverable>
 800c922:	4603      	mov	r3, r0
 800c924:	73fb      	strb	r3, [r7, #15]
                                 0,
                                 0,
                                 0,
                                 0,
                                 0);
  if (ret != BLE_STATUS_SUCCESS)
 800c926:	7bfb      	ldrb	r3, [r7, #15]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d00f      	beq.n	800c94c <Adv_Request+0x68>
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - fail, result: 0x%x \n", ret);
 800c92c:	4824      	ldr	r0, [pc, #144]	@ (800c9c0 <Adv_Request+0xdc>)
 800c92e:	f7fe fb91 	bl	800b054 <DbgTraceGetFileName>
 800c932:	4601      	mov	r1, r0
 800c934:	f240 33ee 	movw	r3, #1006	@ 0x3ee
 800c938:	4a22      	ldr	r2, [pc, #136]	@ (800c9c4 <Adv_Request+0xe0>)
 800c93a:	4823      	ldr	r0, [pc, #140]	@ (800c9c8 <Adv_Request+0xe4>)
 800c93c:	f001 feca 	bl	800e6d4 <iprintf>
 800c940:	7bfb      	ldrb	r3, [r7, #15]
 800c942:	4619      	mov	r1, r3
 800c944:	4821      	ldr	r0, [pc, #132]	@ (800c9cc <Adv_Request+0xe8>)
 800c946:	f001 fec5 	bl	800e6d4 <iprintf>
 800c94a:	e00c      	b.n	800c966 <Adv_Request+0x82>
  }
  else
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
 800c94c:	481c      	ldr	r0, [pc, #112]	@ (800c9c0 <Adv_Request+0xdc>)
 800c94e:	f7fe fb81 	bl	800b054 <DbgTraceGetFileName>
 800c952:	4601      	mov	r1, r0
 800c954:	f240 33f2 	movw	r3, #1010	@ 0x3f2
 800c958:	4a1a      	ldr	r2, [pc, #104]	@ (800c9c4 <Adv_Request+0xe0>)
 800c95a:	481b      	ldr	r0, [pc, #108]	@ (800c9c8 <Adv_Request+0xe4>)
 800c95c:	f001 feba 	bl	800e6d4 <iprintf>
 800c960:	481b      	ldr	r0, [pc, #108]	@ (800c9d0 <Adv_Request+0xec>)
 800c962:	f001 ff27 	bl	800e7b4 <puts>
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 800c966:	491b      	ldr	r1, [pc, #108]	@ (800c9d4 <Adv_Request+0xf0>)
 800c968:	200c      	movs	r0, #12
 800c96a:	f7fc fe49 	bl	8009600 <aci_gap_update_adv_data>
 800c96e:	4603      	mov	r3, r0
 800c970:	73fb      	strb	r3, [r7, #15]
  if (ret != BLE_STATUS_SUCCESS)
 800c972:	7bfb      	ldrb	r3, [r7, #15]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d00f      	beq.n	800c998 <Adv_Request+0xb4>
  {
      APP_DBG_MSG("==>> Start Fast Advertising Failed , result: %d \n\r", ret);
 800c978:	4811      	ldr	r0, [pc, #68]	@ (800c9c0 <Adv_Request+0xdc>)
 800c97a:	f7fe fb6b 	bl	800b054 <DbgTraceGetFileName>
 800c97e:	4601      	mov	r1, r0
 800c980:	f240 33fd 	movw	r3, #1021	@ 0x3fd
 800c984:	4a0f      	ldr	r2, [pc, #60]	@ (800c9c4 <Adv_Request+0xe0>)
 800c986:	4810      	ldr	r0, [pc, #64]	@ (800c9c8 <Adv_Request+0xe4>)
 800c988:	f001 fea4 	bl	800e6d4 <iprintf>
 800c98c:	7bfb      	ldrb	r3, [r7, #15]
 800c98e:	4619      	mov	r1, r3
 800c990:	4811      	ldr	r0, [pc, #68]	@ (800c9d8 <Adv_Request+0xf4>)
 800c992:	f001 fe9f 	bl	800e6d4 <iprintf>
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 800c996:	e00d      	b.n	800c9b4 <Adv_Request+0xd0>
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
 800c998:	4809      	ldr	r0, [pc, #36]	@ (800c9c0 <Adv_Request+0xdc>)
 800c99a:	f7fe fb5b 	bl	800b054 <DbgTraceGetFileName>
 800c99e:	4601      	mov	r1, r0
 800c9a0:	f240 4301 	movw	r3, #1025	@ 0x401
 800c9a4:	4a07      	ldr	r2, [pc, #28]	@ (800c9c4 <Adv_Request+0xe0>)
 800c9a6:	4808      	ldr	r0, [pc, #32]	@ (800c9c8 <Adv_Request+0xe4>)
 800c9a8:	f001 fe94 	bl	800e6d4 <iprintf>
 800c9ac:	480b      	ldr	r0, [pc, #44]	@ (800c9dc <Adv_Request+0xf8>)
 800c9ae:	f001 fe91 	bl	800e6d4 <iprintf>
  return;
 800c9b2:	bf00      	nop
}
 800c9b4:	3710      	adds	r7, #16
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	bd80      	pop	{r7, pc}
 800c9ba:	bf00      	nop
 800c9bc:	20003504 	.word	0x20003504
 800c9c0:	08012514 	.word	0x08012514
 800c9c4:	08013834 	.word	0x08013834
 800c9c8:	08012530 	.word	0x08012530
 800c9cc:	080130b8 	.word	0x080130b8
 800c9d0:	080130f0 	.word	0x080130f0
 800c9d4:	20000018 	.word	0x20000018
 800c9d8:	08013118 	.word	0x08013118
 800c9dc:	0801314c 	.word	0x0801314c

0800c9e0 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b086      	sub	sp, #24
 800c9e4:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800c9e6:	f7ff f8f5 	bl	800bbd4 <LL_FLASH_GetUDN>
 800c9ea:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 800c9ec:	693b      	ldr	r3, [r7, #16]
 800c9ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9f2:	d023      	beq.n	800ca3c <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800c9f4:	f7ff f906 	bl	800bc04 <LL_FLASH_GetSTCompanyID>
 800c9f8:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800c9fa:	f7ff f8f7 	bl	800bbec <LL_FLASH_GetDeviceID>
 800c9fe:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 800ca00:	693b      	ldr	r3, [r7, #16]
 800ca02:	b2da      	uxtb	r2, r3
 800ca04:	4b16      	ldr	r3, [pc, #88]	@ (800ca60 <BleGetBdAddress+0x80>)
 800ca06:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 800ca08:	693b      	ldr	r3, [r7, #16]
 800ca0a:	0a1b      	lsrs	r3, r3, #8
 800ca0c:	b2da      	uxtb	r2, r3
 800ca0e:	4b14      	ldr	r3, [pc, #80]	@ (800ca60 <BleGetBdAddress+0x80>)
 800ca10:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	b2da      	uxtb	r2, r3
 800ca16:	4b12      	ldr	r3, [pc, #72]	@ (800ca60 <BleGetBdAddress+0x80>)
 800ca18:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800ca1a:	68bb      	ldr	r3, [r7, #8]
 800ca1c:	b2da      	uxtb	r2, r3
 800ca1e:	4b10      	ldr	r3, [pc, #64]	@ (800ca60 <BleGetBdAddress+0x80>)
 800ca20:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800ca22:	68bb      	ldr	r3, [r7, #8]
 800ca24:	0a1b      	lsrs	r3, r3, #8
 800ca26:	b2da      	uxtb	r2, r3
 800ca28:	4b0d      	ldr	r3, [pc, #52]	@ (800ca60 <BleGetBdAddress+0x80>)
 800ca2a:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 800ca2c:	68bb      	ldr	r3, [r7, #8]
 800ca2e:	0c1b      	lsrs	r3, r3, #16
 800ca30:	b2da      	uxtb	r2, r3
 800ca32:	4b0b      	ldr	r3, [pc, #44]	@ (800ca60 <BleGetBdAddress+0x80>)
 800ca34:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800ca36:	4b0a      	ldr	r3, [pc, #40]	@ (800ca60 <BleGetBdAddress+0x80>)
 800ca38:	617b      	str	r3, [r7, #20]
 800ca3a:	e00b      	b.n	800ca54 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 800ca3c:	2000      	movs	r0, #0
 800ca3e:	f7fe fbe7 	bl	800b210 <OTP_Read>
 800ca42:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d002      	beq.n	800ca50 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	617b      	str	r3, [r7, #20]
 800ca4e:	e001      	b.n	800ca54 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 800ca50:	4b04      	ldr	r3, [pc, #16]	@ (800ca64 <BleGetBdAddress+0x84>)
 800ca52:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 800ca54:	697b      	ldr	r3, [r7, #20]
}
 800ca56:	4618      	mov	r0, r3
 800ca58:	3718      	adds	r7, #24
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	bd80      	pop	{r7, pc}
 800ca5e:	bf00      	nop
 800ca60:	200034fc 	.word	0x200034fc
 800ca64:	080137cc 	.word	0x080137cc

0800ca68 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b082      	sub	sp, #8
 800ca6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800ca6e:	4b1f      	ldr	r3, [pc, #124]	@ (800caec <Adv_Cancel+0x84>)
 800ca70:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800ca74:	2b05      	cmp	r3, #5
 800ca76:	d035      	beq.n	800cae4 <Adv_Cancel+0x7c>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800ca78:	2392      	movs	r3, #146	@ 0x92
 800ca7a:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 800ca7c:	f7fc fa76 	bl	8008f6c <aci_gap_set_non_discoverable>
 800ca80:	4603      	mov	r3, r0
 800ca82:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800ca84:	4b19      	ldr	r3, [pc, #100]	@ (800caec <Adv_Cancel+0x84>)
 800ca86:	2200      	movs	r2, #0
 800ca88:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    if (ret != BLE_STATUS_SUCCESS)
 800ca8c:	79fb      	ldrb	r3, [r7, #7]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d00d      	beq.n	800caae <Adv_Cancel+0x46>
    {
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 800ca92:	4817      	ldr	r0, [pc, #92]	@ (800caf0 <Adv_Cancel+0x88>)
 800ca94:	f7fe fade 	bl	800b054 <DbgTraceGetFileName>
 800ca98:	4601      	mov	r1, r0
 800ca9a:	f240 434f 	movw	r3, #1103	@ 0x44f
 800ca9e:	4a15      	ldr	r2, [pc, #84]	@ (800caf4 <Adv_Cancel+0x8c>)
 800caa0:	4815      	ldr	r0, [pc, #84]	@ (800caf8 <Adv_Cancel+0x90>)
 800caa2:	f001 fe17 	bl	800e6d4 <iprintf>
 800caa6:	4815      	ldr	r0, [pc, #84]	@ (800cafc <Adv_Cancel+0x94>)
 800caa8:	f001 fe14 	bl	800e6d4 <iprintf>

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 800caac:	e01a      	b.n	800cae4 <Adv_Cancel+0x7c>
      APP_DBG_MSG("  \r\n\r");
 800caae:	4810      	ldr	r0, [pc, #64]	@ (800caf0 <Adv_Cancel+0x88>)
 800cab0:	f7fe fad0 	bl	800b054 <DbgTraceGetFileName>
 800cab4:	4601      	mov	r1, r0
 800cab6:	f240 4353 	movw	r3, #1107	@ 0x453
 800caba:	4a0e      	ldr	r2, [pc, #56]	@ (800caf4 <Adv_Cancel+0x8c>)
 800cabc:	480e      	ldr	r0, [pc, #56]	@ (800caf8 <Adv_Cancel+0x90>)
 800cabe:	f001 fe09 	bl	800e6d4 <iprintf>
 800cac2:	480f      	ldr	r0, [pc, #60]	@ (800cb00 <Adv_Cancel+0x98>)
 800cac4:	f001 fe06 	bl	800e6d4 <iprintf>
      APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 800cac8:	4809      	ldr	r0, [pc, #36]	@ (800caf0 <Adv_Cancel+0x88>)
 800caca:	f7fe fac3 	bl	800b054 <DbgTraceGetFileName>
 800cace:	4601      	mov	r1, r0
 800cad0:	f240 4354 	movw	r3, #1108	@ 0x454
 800cad4:	4a07      	ldr	r2, [pc, #28]	@ (800caf4 <Adv_Cancel+0x8c>)
 800cad6:	4808      	ldr	r0, [pc, #32]	@ (800caf8 <Adv_Cancel+0x90>)
 800cad8:	f001 fdfc 	bl	800e6d4 <iprintf>
 800cadc:	4809      	ldr	r0, [pc, #36]	@ (800cb04 <Adv_Cancel+0x9c>)
 800cade:	f001 fdf9 	bl	800e6d4 <iprintf>
  return;
 800cae2:	bf00      	nop
 800cae4:	bf00      	nop
}
 800cae6:	3708      	adds	r7, #8
 800cae8:	46bd      	mov	sp, r7
 800caea:	bd80      	pop	{r7, pc}
 800caec:	20003504 	.word	0x20003504
 800caf0:	08012514 	.word	0x08012514
 800caf4:	08013840 	.word	0x08013840
 800caf8:	08012530 	.word	0x08012530
 800cafc:	08013174 	.word	0x08013174
 800cb00:	08013198 	.word	0x08013198
 800cb04:	080131a0 	.word	0x080131a0

0800cb08 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b082      	sub	sp, #8
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800cb10:	2100      	movs	r1, #0
 800cb12:	2002      	movs	r0, #2
 800cb14:	f000 fdb4 	bl	800d680 <UTIL_SEQ_SetTask>

  return;
 800cb18:	bf00      	nop
}
 800cb1a:	3708      	adds	r7, #8
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	bd80      	pop	{r7, pc}

0800cb20 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 800cb20:	b580      	push	{r7, lr}
 800cb22:	b082      	sub	sp, #8
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800cb28:	2001      	movs	r0, #1
 800cb2a:	f000 fe15 	bl	800d758 <UTIL_SEQ_SetEvt>

  return;
 800cb2e:	bf00      	nop
}
 800cb30:	3708      	adds	r7, #8
 800cb32:	46bd      	mov	sp, r7
 800cb34:	bd80      	pop	{r7, pc}

0800cb36 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 800cb36:	b580      	push	{r7, lr}
 800cb38:	b082      	sub	sp, #8
 800cb3a:	af00      	add	r7, sp, #0
 800cb3c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800cb3e:	2001      	movs	r0, #1
 800cb40:	f000 fe2a 	bl	800d798 <UTIL_SEQ_WaitEvt>

  return;
 800cb44:	bf00      	nop
}
 800cb46:	3708      	adds	r7, #8
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	bd80      	pop	{r7, pc}

0800cb4c <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b084      	sub	sp, #16
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	685b      	ldr	r3, [r3, #4]
 800cb5c:	3308      	adds	r3, #8
 800cb5e:	4618      	mov	r0, r3
 800cb60:	f7fd fc16 	bl	800a390 <SVCCTL_UserEvtRx>
 800cb64:	4603      	mov	r3, r0
 800cb66:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800cb68:	7afb      	ldrb	r3, [r7, #11]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d003      	beq.n	800cb76 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	2201      	movs	r2, #1
 800cb72:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800cb74:	e003      	b.n	800cb7e <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	2200      	movs	r2, #0
 800cb7a:	701a      	strb	r2, [r3, #0]
  return;
 800cb7c:	bf00      	nop
}
 800cb7e:	3710      	adds	r7, #16
 800cb80:	46bd      	mov	sp, r7
 800cb82:	bd80      	pop	{r7, pc}

0800cb84 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 800cb84:	b580      	push	{r7, lr}
 800cb86:	b084      	sub	sp, #16
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	4603      	mov	r3, r0
 800cb8c:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800cb8e:	79fb      	ldrb	r3, [r7, #7]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d002      	beq.n	800cb9a <BLE_StatusNot+0x16>
 800cb94:	2b01      	cmp	r3, #1
 800cb96:	d006      	beq.n	800cba6 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 800cb98:	e00b      	b.n	800cbb2 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800cb9a:	2303      	movs	r3, #3
 800cb9c:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800cb9e:	68f8      	ldr	r0, [r7, #12]
 800cba0:	f000 fd9a 	bl	800d6d8 <UTIL_SEQ_PauseTask>
      break;
 800cba4:	e005      	b.n	800cbb2 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800cba6:	2303      	movs	r3, #3
 800cba8:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800cbaa:	68f8      	ldr	r0, [r7, #12]
 800cbac:	f000 fdb4 	bl	800d718 <UTIL_SEQ_ResumeTask>
      break;
 800cbb0:	bf00      	nop
  }

  return;
 800cbb2:	bf00      	nop
}
 800cbb4:	3710      	adds	r7, #16
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	bd80      	pop	{r7, pc}
	...

0800cbbc <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 800cbbc:	b480      	push	{r7}
 800cbbe:	b083      	sub	sp, #12
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	781b      	ldrb	r3, [r3, #0]
 800cbc8:	2b06      	cmp	r3, #6
 800cbca:	d811      	bhi.n	800cbf0 <Custom_STM_App_Notification+0x34>
 800cbcc:	a201      	add	r2, pc, #4	@ (adr r2, 800cbd4 <Custom_STM_App_Notification+0x18>)
 800cbce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbd2:	bf00      	nop
 800cbd4:	0800cbf1 	.word	0x0800cbf1
 800cbd8:	0800cbf1 	.word	0x0800cbf1
 800cbdc:	0800cbf1 	.word	0x0800cbf1
 800cbe0:	0800cbf1 	.word	0x0800cbf1
 800cbe4:	0800cbf1 	.word	0x0800cbf1
 800cbe8:	0800cbf1 	.word	0x0800cbf1
 800cbec:	0800cbf1 	.word	0x0800cbf1

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 800cbf0:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 800cbf2:	bf00      	nop
}
 800cbf4:	370c      	adds	r7, #12
 800cbf6:	46bd      	mov	sp, r7
 800cbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbfc:	4770      	bx	lr
 800cbfe:	bf00      	nop

0800cc00 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 800cc00:	b480      	push	{r7}
 800cc02:	b083      	sub	sp, #12
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	781b      	ldrb	r3, [r3, #0]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d002      	beq.n	800cc16 <Custom_APP_Notification+0x16>
 800cc10:	2b01      	cmp	r3, #1
 800cc12:	d002      	beq.n	800cc1a <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 800cc14:	e002      	b.n	800cc1c <Custom_APP_Notification+0x1c>
      break;
 800cc16:	bf00      	nop
 800cc18:	e000      	b.n	800cc1c <Custom_APP_Notification+0x1c>
      break;
 800cc1a:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 800cc1c:	bf00      	nop
}
 800cc1e:	370c      	adds	r7, #12
 800cc20:	46bd      	mov	sp, r7
 800cc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc26:	4770      	bx	lr

0800cc28 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 800cc28:	b480      	push	{r7}
 800cc2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 800cc2c:	bf00      	nop
}
 800cc2e:	46bd      	mov	sp, r7
 800cc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc34:	4770      	bx	lr
	...

0800cc38 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b08c      	sub	sp, #48	@ 0x30
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 800cc40:	2300      	movs	r3, #0
 800cc42:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	3301      	adds	r3, #1
 800cc4a:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (event_pckt->evt)
 800cc4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc4e:	781b      	ldrb	r3, [r3, #0]
 800cc50:	2bff      	cmp	r3, #255	@ 0xff
 800cc52:	f040 80a0 	bne.w	800cd96 <Custom_STM_Event_Handler+0x15e>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800cc56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc58:	3302      	adds	r3, #2
 800cc5a:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (blecore_evt->ecode)
 800cc5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc5e:	881b      	ldrh	r3, [r3, #0]
 800cc60:	b29b      	uxth	r3, r3
 800cc62:	f6a3 4301 	subw	r3, r3, #3073	@ 0xc01
 800cc66:	2b1a      	cmp	r3, #26
 800cc68:	f200 8091 	bhi.w	800cd8e <Custom_STM_Event_Handler+0x156>
 800cc6c:	a201      	add	r2, pc, #4	@ (adr r2, 800cc74 <Custom_STM_Event_Handler+0x3c>)
 800cc6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc72:	bf00      	nop
 800cc74:	0800cce1 	.word	0x0800cce1
 800cc78:	0800cd8f 	.word	0x0800cd8f
 800cc7c:	0800cd8f 	.word	0x0800cd8f
 800cc80:	0800cd8f 	.word	0x0800cd8f
 800cc84:	0800cd8f 	.word	0x0800cd8f
 800cc88:	0800cd8f 	.word	0x0800cd8f
 800cc8c:	0800cd8f 	.word	0x0800cd8f
 800cc90:	0800cd8f 	.word	0x0800cd8f
 800cc94:	0800cd8f 	.word	0x0800cd8f
 800cc98:	0800cd8f 	.word	0x0800cd8f
 800cc9c:	0800cd8f 	.word	0x0800cd8f
 800cca0:	0800cd8f 	.word	0x0800cd8f
 800cca4:	0800cd8f 	.word	0x0800cd8f
 800cca8:	0800cd8f 	.word	0x0800cd8f
 800ccac:	0800cd8f 	.word	0x0800cd8f
 800ccb0:	0800cd8f 	.word	0x0800cd8f
 800ccb4:	0800cd8f 	.word	0x0800cd8f
 800ccb8:	0800cd8f 	.word	0x0800cd8f
 800ccbc:	0800cd8f 	.word	0x0800cd8f
 800ccc0:	0800cd8f 	.word	0x0800cd8f
 800ccc4:	0800cd8f 	.word	0x0800cd8f
 800ccc8:	0800cd8f 	.word	0x0800cd8f
 800cccc:	0800cd8f 	.word	0x0800cd8f
 800ccd0:	0800cd8f 	.word	0x0800cd8f
 800ccd4:	0800cd8f 	.word	0x0800cd8f
 800ccd8:	0800cd8f 	.word	0x0800cd8f
 800ccdc:	0800cd71 	.word	0x0800cd71
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800cce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cce2:	3302      	adds	r3, #2
 800cce4:	61fb      	str	r3, [r7, #28]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomDatasendHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800cce6:	69fb      	ldr	r3, [r7, #28]
 800cce8:	885b      	ldrh	r3, [r3, #2]
 800ccea:	b29b      	uxth	r3, r3
 800ccec:	461a      	mov	r2, r3
 800ccee:	4b2d      	ldr	r3, [pc, #180]	@ (800cda4 <Custom_STM_Event_Handler+0x16c>)
 800ccf0:	885b      	ldrh	r3, [r3, #2]
 800ccf2:	3302      	adds	r3, #2
 800ccf4:	429a      	cmp	r2, r3
 800ccf6:	d12c      	bne.n	800cd52 <Custom_STM_Event_Handler+0x11a>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800ccf8:	2301      	movs	r3, #1
 800ccfa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_1 */

            /* USER CODE END CUSTOM_STM_Service_1_Char_1 */

            switch (attribute_modified->Attr_Data[0])
 800ccfe:	69fb      	ldr	r3, [r7, #28]
 800cd00:	7a1b      	ldrb	r3, [r3, #8]
 800cd02:	2b02      	cmp	r3, #2
 800cd04:	d01d      	beq.n	800cd42 <Custom_STM_Event_Handler+0x10a>
 800cd06:	2b02      	cmp	r3, #2
 800cd08:	dc30      	bgt.n	800cd6c <Custom_STM_Event_Handler+0x134>
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d002      	beq.n	800cd14 <Custom_STM_Event_Handler+0xdc>
 800cd0e:	2b01      	cmp	r3, #1
 800cd10:	d00f      	beq.n	800cd32 <Custom_STM_Event_Handler+0xfa>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_1_default */

                /* USER CODE END CUSTOM_STM_Service_1_Char_1_default */
                break;
 800cd12:	e02b      	b.n	800cd6c <Custom_STM_Event_Handler+0x134>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_DATASEND_NOTIFY_DISABLED_EVT;
 800cd14:	2303      	movs	r3, #3
 800cd16:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800cd18:	f107 0308 	add.w	r3, r7, #8
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	f7ff ff4d 	bl	800cbbc <Custom_STM_App_Notification>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_DATASEND_INDICATE_DISABLED_EVT;
 800cd22:	2305      	movs	r3, #5
 800cd24:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800cd26:	f107 0308 	add.w	r3, r7, #8
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	f7ff ff46 	bl	800cbbc <Custom_STM_App_Notification>
                break;
 800cd30:	e01d      	b.n	800cd6e <Custom_STM_Event_Handler+0x136>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_DATASEND_NOTIFY_ENABLED_EVT;
 800cd32:	2302      	movs	r3, #2
 800cd34:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800cd36:	f107 0308 	add.w	r3, r7, #8
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	f7ff ff3e 	bl	800cbbc <Custom_STM_App_Notification>
                break;
 800cd40:	e015      	b.n	800cd6e <Custom_STM_Event_Handler+0x136>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_DATASEND_INDICATE_ENABLED_EVT;
 800cd42:	2304      	movs	r3, #4
 800cd44:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800cd46:	f107 0308 	add.w	r3, r7, #8
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	f7ff ff36 	bl	800cbbc <Custom_STM_App_Notification>
                break;
 800cd50:	e00d      	b.n	800cd6e <Custom_STM_Event_Handler+0x136>
            }
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomDatasendHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if (attribute_modified->Attr_Handle == (CustomContext.CustomDatasendHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800cd52:	69fb      	ldr	r3, [r7, #28]
 800cd54:	885b      	ldrh	r3, [r3, #2]
 800cd56:	b29b      	uxth	r3, r3
 800cd58:	461a      	mov	r2, r3
 800cd5a:	4b12      	ldr	r3, [pc, #72]	@ (800cda4 <Custom_STM_Event_Handler+0x16c>)
 800cd5c:	885b      	ldrh	r3, [r3, #2]
 800cd5e:	3301      	adds	r3, #1
 800cd60:	429a      	cmp	r2, r3
 800cd62:	d116      	bne.n	800cd92 <Custom_STM_Event_Handler+0x15a>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800cd64:	2301      	movs	r3, #1
 800cd66:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE END CUSTOM_STM_Service_1_Char_1_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
          } /* if (attribute_modified->Attr_Handle == (CustomContext.CustomDatasendHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
          break;
 800cd6a:	e012      	b.n	800cd92 <Custom_STM_Event_Handler+0x15a>
                break;
 800cd6c:	bf00      	nop
          break;
 800cd6e:	e010      	b.n	800cd92 <Custom_STM_Event_Handler+0x15a>
		case ACI_GATT_NOTIFICATION_COMPLETE_VSEVT_CODE:
        {
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */
          notification_complete = (aci_gatt_notification_complete_event_rp0*)blecore_evt->data;
 800cd70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd72:	3302      	adds	r3, #2
 800cd74:	623b      	str	r3, [r7, #32]
          Notification.Custom_Evt_Opcode = CUSTOM_STM_NOTIFICATION_COMPLETE_EVT;
 800cd76:	2306      	movs	r3, #6
 800cd78:	723b      	strb	r3, [r7, #8]
          Notification.AttrHandle = notification_complete->Attr_Handle;
 800cd7a:	6a3b      	ldr	r3, [r7, #32]
 800cd7c:	881b      	ldrh	r3, [r3, #0]
 800cd7e:	b29b      	uxth	r3, r3
 800cd80:	833b      	strh	r3, [r7, #24]
          Custom_STM_App_Notification(&Notification);
 800cd82:	f107 0308 	add.w	r3, r7, #8
 800cd86:	4618      	mov	r0, r3
 800cd88:	f7ff ff18 	bl	800cbbc <Custom_STM_App_Notification>
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */
          break;
 800cd8c:	e002      	b.n	800cd94 <Custom_STM_Event_Handler+0x15c>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 800cd8e:	bf00      	nop
 800cd90:	e002      	b.n	800cd98 <Custom_STM_Event_Handler+0x160>
          break;
 800cd92:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800cd94:	e000      	b.n	800cd98 <Custom_STM_Event_Handler+0x160>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 800cd96:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 800cd98:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}/* end Custom_STM_Event_Handler */
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	3730      	adds	r7, #48	@ 0x30
 800cda0:	46bd      	mov	sp, r7
 800cda2:	bd80      	pop	{r7, pc}
 800cda4:	2000358c 	.word	0x2000358c

0800cda8 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b08c      	sub	sp, #48	@ 0x30
 800cdac:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800cdae:	2392      	movs	r3, #146	@ 0x92
 800cdb0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 800cdb2:	4854      	ldr	r0, [pc, #336]	@ (800cf04 <SVCCTL_InitCustomSvc+0x15c>)
 800cdb4:	f7fd fad2 	bl	800a35c <SVCCTL_RegisterSvcHandler>
   *                              = 5
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 5;
 800cdb8:	2305      	movs	r3, #5
 800cdba:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_MYSVC_UUID(uuid.Char_UUID_128);
 800cdbc:	238f      	movs	r3, #143	@ 0x8f
 800cdbe:	713b      	strb	r3, [r7, #4]
 800cdc0:	23e5      	movs	r3, #229	@ 0xe5
 800cdc2:	717b      	strb	r3, [r7, #5]
 800cdc4:	23b3      	movs	r3, #179	@ 0xb3
 800cdc6:	71bb      	strb	r3, [r7, #6]
 800cdc8:	23d5      	movs	r3, #213	@ 0xd5
 800cdca:	71fb      	strb	r3, [r7, #7]
 800cdcc:	232e      	movs	r3, #46	@ 0x2e
 800cdce:	723b      	strb	r3, [r7, #8]
 800cdd0:	237f      	movs	r3, #127	@ 0x7f
 800cdd2:	727b      	strb	r3, [r7, #9]
 800cdd4:	234a      	movs	r3, #74	@ 0x4a
 800cdd6:	72bb      	strb	r3, [r7, #10]
 800cdd8:	2398      	movs	r3, #152	@ 0x98
 800cdda:	72fb      	strb	r3, [r7, #11]
 800cddc:	232a      	movs	r3, #42	@ 0x2a
 800cdde:	733b      	strb	r3, [r7, #12]
 800cde0:	2348      	movs	r3, #72	@ 0x48
 800cde2:	737b      	strb	r3, [r7, #13]
 800cde4:	237a      	movs	r3, #122	@ 0x7a
 800cde6:	73bb      	strb	r3, [r7, #14]
 800cde8:	23cc      	movs	r3, #204	@ 0xcc
 800cdea:	73fb      	strb	r3, [r7, #15]
 800cdec:	2300      	movs	r3, #0
 800cdee:	743b      	strb	r3, [r7, #16]
 800cdf0:	2300      	movs	r3, #0
 800cdf2:	747b      	strb	r3, [r7, #17]
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	74bb      	strb	r3, [r7, #18]
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 800cdfc:	7dbb      	ldrb	r3, [r7, #22]
 800cdfe:	1d39      	adds	r1, r7, #4
 800ce00:	4a41      	ldr	r2, [pc, #260]	@ (800cf08 <SVCCTL_InitCustomSvc+0x160>)
 800ce02:	9200      	str	r2, [sp, #0]
 800ce04:	2201      	movs	r2, #1
 800ce06:	2002      	movs	r0, #2
 800ce08:	f7fc fd1c 	bl	8009844 <aci_gatt_add_service>
 800ce0c:	4603      	mov	r3, r0
 800ce0e:	75fb      	strb	r3, [r7, #23]
                             (Service_UUID_t *) &uuid,
                             PRIMARY_SERVICE,
                             max_attr_record,
                             &(CustomContext.CustomMysvcHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800ce10:	7dfb      	ldrb	r3, [r7, #23]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d00f      	beq.n	800ce36 <SVCCTL_InitCustomSvc+0x8e>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_service command: MYSVC, error code: 0x%x \n\r", ret);
 800ce16:	483d      	ldr	r0, [pc, #244]	@ (800cf0c <SVCCTL_InitCustomSvc+0x164>)
 800ce18:	f7fe f91c 	bl	800b054 <DbgTraceGetFileName>
 800ce1c:	4601      	mov	r1, r0
 800ce1e:	f240 134b 	movw	r3, #331	@ 0x14b
 800ce22:	4a3b      	ldr	r2, [pc, #236]	@ (800cf10 <SVCCTL_InitCustomSvc+0x168>)
 800ce24:	483b      	ldr	r0, [pc, #236]	@ (800cf14 <SVCCTL_InitCustomSvc+0x16c>)
 800ce26:	f001 fc55 	bl	800e6d4 <iprintf>
 800ce2a:	7dfb      	ldrb	r3, [r7, #23]
 800ce2c:	4619      	mov	r1, r3
 800ce2e:	483a      	ldr	r0, [pc, #232]	@ (800cf18 <SVCCTL_InitCustomSvc+0x170>)
 800ce30:	f001 fc50 	bl	800e6d4 <iprintf>
 800ce34:	e00c      	b.n	800ce50 <SVCCTL_InitCustomSvc+0xa8>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_service command: MYSVC \n\r");
 800ce36:	4835      	ldr	r0, [pc, #212]	@ (800cf0c <SVCCTL_InitCustomSvc+0x164>)
 800ce38:	f7fe f90c 	bl	800b054 <DbgTraceGetFileName>
 800ce3c:	4601      	mov	r1, r0
 800ce3e:	f240 134f 	movw	r3, #335	@ 0x14f
 800ce42:	4a33      	ldr	r2, [pc, #204]	@ (800cf10 <SVCCTL_InitCustomSvc+0x168>)
 800ce44:	4833      	ldr	r0, [pc, #204]	@ (800cf14 <SVCCTL_InitCustomSvc+0x16c>)
 800ce46:	f001 fc45 	bl	800e6d4 <iprintf>
 800ce4a:	4834      	ldr	r0, [pc, #208]	@ (800cf1c <SVCCTL_InitCustomSvc+0x174>)
 800ce4c:	f001 fc42 	bl	800e6d4 <iprintf>
  }

  /**
   *  datasend
   */
  COPY_DATASEND_UUID(uuid.Char_UUID_128);
 800ce50:	2319      	movs	r3, #25
 800ce52:	713b      	strb	r3, [r7, #4]
 800ce54:	23ed      	movs	r3, #237	@ 0xed
 800ce56:	717b      	strb	r3, [r7, #5]
 800ce58:	2382      	movs	r3, #130	@ 0x82
 800ce5a:	71bb      	strb	r3, [r7, #6]
 800ce5c:	23ae      	movs	r3, #174	@ 0xae
 800ce5e:	71fb      	strb	r3, [r7, #7]
 800ce60:	23ed      	movs	r3, #237	@ 0xed
 800ce62:	723b      	strb	r3, [r7, #8]
 800ce64:	2321      	movs	r3, #33	@ 0x21
 800ce66:	727b      	strb	r3, [r7, #9]
 800ce68:	234c      	movs	r3, #76	@ 0x4c
 800ce6a:	72bb      	strb	r3, [r7, #10]
 800ce6c:	239d      	movs	r3, #157	@ 0x9d
 800ce6e:	72fb      	strb	r3, [r7, #11]
 800ce70:	2341      	movs	r3, #65	@ 0x41
 800ce72:	733b      	strb	r3, [r7, #12]
 800ce74:	2345      	movs	r3, #69	@ 0x45
 800ce76:	737b      	strb	r3, [r7, #13]
 800ce78:	2322      	movs	r3, #34	@ 0x22
 800ce7a:	73bb      	strb	r3, [r7, #14]
 800ce7c:	238e      	movs	r3, #142	@ 0x8e
 800ce7e:	73fb      	strb	r3, [r7, #15]
 800ce80:	2300      	movs	r3, #0
 800ce82:	743b      	strb	r3, [r7, #16]
 800ce84:	2300      	movs	r3, #0
 800ce86:	747b      	strb	r3, [r7, #17]
 800ce88:	2300      	movs	r3, #0
 800ce8a:	74bb      	strb	r3, [r7, #18]
 800ce8c:	2300      	movs	r3, #0
 800ce8e:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMysvcHdle,
 800ce90:	4b1d      	ldr	r3, [pc, #116]	@ (800cf08 <SVCCTL_InitCustomSvc+0x160>)
 800ce92:	8818      	ldrh	r0, [r3, #0]
 800ce94:	4b22      	ldr	r3, [pc, #136]	@ (800cf20 <SVCCTL_InitCustomSvc+0x178>)
 800ce96:	881b      	ldrh	r3, [r3, #0]
 800ce98:	1d3a      	adds	r2, r7, #4
 800ce9a:	4922      	ldr	r1, [pc, #136]	@ (800cf24 <SVCCTL_InitCustomSvc+0x17c>)
 800ce9c:	9105      	str	r1, [sp, #20]
 800ce9e:	2100      	movs	r1, #0
 800cea0:	9104      	str	r1, [sp, #16]
 800cea2:	2110      	movs	r1, #16
 800cea4:	9103      	str	r1, [sp, #12]
 800cea6:	2101      	movs	r1, #1
 800cea8:	9102      	str	r1, [sp, #8]
 800ceaa:	2101      	movs	r1, #1
 800ceac:	9101      	str	r1, [sp, #4]
 800ceae:	213b      	movs	r1, #59	@ 0x3b
 800ceb0:	9100      	str	r1, [sp, #0]
 800ceb2:	2102      	movs	r1, #2
 800ceb4:	f7fc fd9c 	bl	80099f0 <aci_gatt_add_char>
 800ceb8:	4603      	mov	r3, r0
 800ceba:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_AUTHEN_READ,
                          GATT_NOTIFY_ATTRIBUTE_WRITE,
                          0x10,
                          CHAR_VALUE_LEN_CONSTANT,
                          &(CustomContext.CustomDatasendHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800cebc:	7dfb      	ldrb	r3, [r7, #23]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d00f      	beq.n	800cee2 <SVCCTL_InitCustomSvc+0x13a>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : DATASEND, error code: 0x%x \n\r", ret);
 800cec2:	4812      	ldr	r0, [pc, #72]	@ (800cf0c <SVCCTL_InitCustomSvc+0x164>)
 800cec4:	f7fe f8c6 	bl	800b054 <DbgTraceGetFileName>
 800cec8:	4601      	mov	r1, r0
 800ceca:	f240 1361 	movw	r3, #353	@ 0x161
 800cece:	4a10      	ldr	r2, [pc, #64]	@ (800cf10 <SVCCTL_InitCustomSvc+0x168>)
 800ced0:	4810      	ldr	r0, [pc, #64]	@ (800cf14 <SVCCTL_InitCustomSvc+0x16c>)
 800ced2:	f001 fbff 	bl	800e6d4 <iprintf>
 800ced6:	7dfb      	ldrb	r3, [r7, #23]
 800ced8:	4619      	mov	r1, r3
 800ceda:	4813      	ldr	r0, [pc, #76]	@ (800cf28 <SVCCTL_InitCustomSvc+0x180>)
 800cedc:	f001 fbfa 	bl	800e6d4 <iprintf>

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 800cee0:	e00d      	b.n	800cefe <SVCCTL_InitCustomSvc+0x156>
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : DATASEND \n\r");
 800cee2:	480a      	ldr	r0, [pc, #40]	@ (800cf0c <SVCCTL_InitCustomSvc+0x164>)
 800cee4:	f7fe f8b6 	bl	800b054 <DbgTraceGetFileName>
 800cee8:	4601      	mov	r1, r0
 800ceea:	f240 1365 	movw	r3, #357	@ 0x165
 800ceee:	4a08      	ldr	r2, [pc, #32]	@ (800cf10 <SVCCTL_InitCustomSvc+0x168>)
 800cef0:	4808      	ldr	r0, [pc, #32]	@ (800cf14 <SVCCTL_InitCustomSvc+0x16c>)
 800cef2:	f001 fbef 	bl	800e6d4 <iprintf>
 800cef6:	480d      	ldr	r0, [pc, #52]	@ (800cf2c <SVCCTL_InitCustomSvc+0x184>)
 800cef8:	f001 fbec 	bl	800e6d4 <iprintf>
  return;
 800cefc:	bf00      	nop
}
 800cefe:	3718      	adds	r7, #24
 800cf00:	46bd      	mov	sp, r7
 800cf02:	bd80      	pop	{r7, pc}
 800cf04:	0800cc39 	.word	0x0800cc39
 800cf08:	2000358c 	.word	0x2000358c
 800cf0c:	080131bc 	.word	0x080131bc
 800cf10:	0801384c 	.word	0x0801384c
 800cf14:	080131dc 	.word	0x080131dc
 800cf18:	080131f0 	.word	0x080131f0
 800cf1c:	08013234 	.word	0x08013234
 800cf20:	20000024 	.word	0x20000024
 800cf24:	2000358e 	.word	0x2000358e
 800cf28:	08013268 	.word	0x08013268
 800cf2c:	080132b0 	.word	0x080132b0

0800cf30 <LL_PWR_EnableBootC2>:
{
 800cf30:	b480      	push	{r7}
 800cf32:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800cf34:	4b05      	ldr	r3, [pc, #20]	@ (800cf4c <LL_PWR_EnableBootC2+0x1c>)
 800cf36:	68db      	ldr	r3, [r3, #12]
 800cf38:	4a04      	ldr	r2, [pc, #16]	@ (800cf4c <LL_PWR_EnableBootC2+0x1c>)
 800cf3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cf3e:	60d3      	str	r3, [r2, #12]
}
 800cf40:	bf00      	nop
 800cf42:	46bd      	mov	sp, r7
 800cf44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf48:	4770      	bx	lr
 800cf4a:	bf00      	nop
 800cf4c:	58000400 	.word	0x58000400

0800cf50 <LL_C2_EXTI_EnableEvent_32_63>:
{
 800cf50:	b480      	push	{r7}
 800cf52:	b083      	sub	sp, #12
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800cf58:	4b06      	ldr	r3, [pc, #24]	@ (800cf74 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800cf5a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800cf5e:	4905      	ldr	r1, [pc, #20]	@ (800cf74 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	4313      	orrs	r3, r2
 800cf64:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 800cf68:	bf00      	nop
 800cf6a:	370c      	adds	r7, #12
 800cf6c:	46bd      	mov	sp, r7
 800cf6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf72:	4770      	bx	lr
 800cf74:	58000800 	.word	0x58000800

0800cf78 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800cf78:	b480      	push	{r7}
 800cf7a:	b083      	sub	sp, #12
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800cf80:	4b05      	ldr	r3, [pc, #20]	@ (800cf98 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800cf82:	6a1a      	ldr	r2, [r3, #32]
 800cf84:	4904      	ldr	r1, [pc, #16]	@ (800cf98 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	4313      	orrs	r3, r2
 800cf8a:	620b      	str	r3, [r1, #32]
}
 800cf8c:	bf00      	nop
 800cf8e:	370c      	adds	r7, #12
 800cf90:	46bd      	mov	sp, r7
 800cf92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf96:	4770      	bx	lr
 800cf98:	58000800 	.word	0x58000800

0800cf9c <LL_AHB3_GRP1_EnableClock>:
{
 800cf9c:	b480      	push	{r7}
 800cf9e:	b085      	sub	sp, #20
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800cfa4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cfa8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800cfaa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	4313      	orrs	r3, r2
 800cfb2:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800cfb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cfb8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	4013      	ands	r3, r2
 800cfbe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800cfc0:	68fb      	ldr	r3, [r7, #12]
}
 800cfc2:	bf00      	nop
 800cfc4:	3714      	adds	r7, #20
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfcc:	4770      	bx	lr

0800cfce <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800cfce:	b480      	push	{r7}
 800cfd0:	b085      	sub	sp, #20
 800cfd2:	af00      	add	r7, sp, #0
 800cfd4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800cfd6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cfda:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800cfde:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	4313      	orrs	r3, r2
 800cfe6:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800cfea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cfee:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	4013      	ands	r3, r2
 800cff6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800cff8:	68fb      	ldr	r3, [r7, #12]
}
 800cffa:	bf00      	nop
 800cffc:	3714      	adds	r7, #20
 800cffe:	46bd      	mov	sp, r7
 800d000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d004:	4770      	bx	lr

0800d006 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 800d006:	b480      	push	{r7}
 800d008:	b083      	sub	sp, #12
 800d00a:	af00      	add	r7, sp, #0
 800d00c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	601a      	str	r2, [r3, #0]
}
 800d01a:	bf00      	nop
 800d01c:	370c      	adds	r7, #12
 800d01e:	46bd      	mov	sp, r7
 800d020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d024:	4770      	bx	lr

0800d026 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 800d026:	b480      	push	{r7}
 800d028:	b083      	sub	sp, #12
 800d02a:	af00      	add	r7, sp, #0
 800d02c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	f043 0201 	orr.w	r2, r3, #1
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	601a      	str	r2, [r3, #0]
}
 800d03a:	bf00      	nop
 800d03c:	370c      	adds	r7, #12
 800d03e:	46bd      	mov	sp, r7
 800d040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d044:	4770      	bx	lr

0800d046 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d046:	b480      	push	{r7}
 800d048:	b083      	sub	sp, #12
 800d04a:	af00      	add	r7, sp, #0
 800d04c:	6078      	str	r0, [r7, #4]
 800d04e:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	685a      	ldr	r2, [r3, #4]
 800d054:	683b      	ldr	r3, [r7, #0]
 800d056:	041b      	lsls	r3, r3, #16
 800d058:	43db      	mvns	r3, r3
 800d05a:	401a      	ands	r2, r3
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	605a      	str	r2, [r3, #4]
}
 800d060:	bf00      	nop
 800d062:	370c      	adds	r7, #12
 800d064:	46bd      	mov	sp, r7
 800d066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06a:	4770      	bx	lr

0800d06c <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d06c:	b480      	push	{r7}
 800d06e:	b083      	sub	sp, #12
 800d070:	af00      	add	r7, sp, #0
 800d072:	6078      	str	r0, [r7, #4]
 800d074:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	685a      	ldr	r2, [r3, #4]
 800d07a:	683b      	ldr	r3, [r7, #0]
 800d07c:	041b      	lsls	r3, r3, #16
 800d07e:	431a      	orrs	r2, r3
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	605a      	str	r2, [r3, #4]
}
 800d084:	bf00      	nop
 800d086:	370c      	adds	r7, #12
 800d088:	46bd      	mov	sp, r7
 800d08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d08e:	4770      	bx	lr

0800d090 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d090:	b480      	push	{r7}
 800d092:	b083      	sub	sp, #12
 800d094:	af00      	add	r7, sp, #0
 800d096:	6078      	str	r0, [r7, #4]
 800d098:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	685a      	ldr	r2, [r3, #4]
 800d09e:	683b      	ldr	r3, [r7, #0]
 800d0a0:	43db      	mvns	r3, r3
 800d0a2:	401a      	ands	r2, r3
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	605a      	str	r2, [r3, #4]
}
 800d0a8:	bf00      	nop
 800d0aa:	370c      	adds	r7, #12
 800d0ac:	46bd      	mov	sp, r7
 800d0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b2:	4770      	bx	lr

0800d0b4 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d0b4:	b480      	push	{r7}
 800d0b6:	b083      	sub	sp, #12
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	6078      	str	r0, [r7, #4]
 800d0bc:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	683a      	ldr	r2, [r7, #0]
 800d0c2:	609a      	str	r2, [r3, #8]
}
 800d0c4:	bf00      	nop
 800d0c6:	370c      	adds	r7, #12
 800d0c8:	46bd      	mov	sp, r7
 800d0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ce:	4770      	bx	lr

0800d0d0 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d0d0:	b480      	push	{r7}
 800d0d2:	b083      	sub	sp, #12
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	6078      	str	r0, [r7, #4]
 800d0d8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800d0da:	683b      	ldr	r3, [r7, #0]
 800d0dc:	041a      	lsls	r2, r3, #16
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	609a      	str	r2, [r3, #8]
}
 800d0e2:	bf00      	nop
 800d0e4:	370c      	adds	r7, #12
 800d0e6:	46bd      	mov	sp, r7
 800d0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ec:	4770      	bx	lr

0800d0ee <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800d0ee:	b480      	push	{r7}
 800d0f0:	b083      	sub	sp, #12
 800d0f2:	af00      	add	r7, sp, #0
 800d0f4:	6078      	str	r0, [r7, #4]
 800d0f6:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	68da      	ldr	r2, [r3, #12]
 800d0fc:	683b      	ldr	r3, [r7, #0]
 800d0fe:	4013      	ands	r3, r2
 800d100:	683a      	ldr	r2, [r7, #0]
 800d102:	429a      	cmp	r2, r3
 800d104:	d101      	bne.n	800d10a <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800d106:	2301      	movs	r3, #1
 800d108:	e000      	b.n	800d10c <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800d10a:	2300      	movs	r3, #0
}
 800d10c:	4618      	mov	r0, r3
 800d10e:	370c      	adds	r7, #12
 800d110:	46bd      	mov	sp, r7
 800d112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d116:	4770      	bx	lr

0800d118 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800d118:	b480      	push	{r7}
 800d11a:	b083      	sub	sp, #12
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	6078      	str	r0, [r7, #4]
 800d120:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	69da      	ldr	r2, [r3, #28]
 800d126:	683b      	ldr	r3, [r7, #0]
 800d128:	4013      	ands	r3, r2
 800d12a:	683a      	ldr	r2, [r7, #0]
 800d12c:	429a      	cmp	r2, r3
 800d12e:	d101      	bne.n	800d134 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800d130:	2301      	movs	r3, #1
 800d132:	e000      	b.n	800d136 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800d134:	2300      	movs	r3, #0
}
 800d136:	4618      	mov	r0, r3
 800d138:	370c      	adds	r7, #12
 800d13a:	46bd      	mov	sp, r7
 800d13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d140:	4770      	bx	lr
	...

0800d144 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800d144:	b580      	push	{r7, lr}
 800d146:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800d148:	2102      	movs	r1, #2
 800d14a:	4818      	ldr	r0, [pc, #96]	@ (800d1ac <HW_IPCC_Rx_Handler+0x68>)
 800d14c:	f7ff ffe4 	bl	800d118 <LL_C2_IPCC_IsActiveFlag_CHx>
 800d150:	4603      	mov	r3, r0
 800d152:	2b00      	cmp	r3, #0
 800d154:	d008      	beq.n	800d168 <HW_IPCC_Rx_Handler+0x24>
 800d156:	4b15      	ldr	r3, [pc, #84]	@ (800d1ac <HW_IPCC_Rx_Handler+0x68>)
 800d158:	685b      	ldr	r3, [r3, #4]
 800d15a:	f003 0302 	and.w	r3, r3, #2
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d102      	bne.n	800d168 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 800d162:	f000 f8d5 	bl	800d310 <HW_IPCC_SYS_EvtHandler>
 800d166:	e01e      	b.n	800d1a6 <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800d168:	2101      	movs	r1, #1
 800d16a:	4810      	ldr	r0, [pc, #64]	@ (800d1ac <HW_IPCC_Rx_Handler+0x68>)
 800d16c:	f7ff ffd4 	bl	800d118 <LL_C2_IPCC_IsActiveFlag_CHx>
 800d170:	4603      	mov	r3, r0
 800d172:	2b00      	cmp	r3, #0
 800d174:	d008      	beq.n	800d188 <HW_IPCC_Rx_Handler+0x44>
 800d176:	4b0d      	ldr	r3, [pc, #52]	@ (800d1ac <HW_IPCC_Rx_Handler+0x68>)
 800d178:	685b      	ldr	r3, [r3, #4]
 800d17a:	f003 0301 	and.w	r3, r3, #1
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d102      	bne.n	800d188 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 800d182:	f000 f889 	bl	800d298 <HW_IPCC_BLE_EvtHandler>
 800d186:	e00e      	b.n	800d1a6 <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800d188:	2108      	movs	r1, #8
 800d18a:	4808      	ldr	r0, [pc, #32]	@ (800d1ac <HW_IPCC_Rx_Handler+0x68>)
 800d18c:	f7ff ffc4 	bl	800d118 <LL_C2_IPCC_IsActiveFlag_CHx>
 800d190:	4603      	mov	r3, r0
 800d192:	2b00      	cmp	r3, #0
 800d194:	d008      	beq.n	800d1a8 <HW_IPCC_Rx_Handler+0x64>
 800d196:	4b05      	ldr	r3, [pc, #20]	@ (800d1ac <HW_IPCC_Rx_Handler+0x68>)
 800d198:	685b      	ldr	r3, [r3, #4]
 800d19a:	f003 0308 	and.w	r3, r3, #8
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d102      	bne.n	800d1a8 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 800d1a2:	f000 f901 	bl	800d3a8 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800d1a6:	bf00      	nop
 800d1a8:	bf00      	nop
}
 800d1aa:	bd80      	pop	{r7, pc}
 800d1ac:	58000c00 	.word	0x58000c00

0800d1b0 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800d1b4:	2102      	movs	r1, #2
 800d1b6:	4818      	ldr	r0, [pc, #96]	@ (800d218 <HW_IPCC_Tx_Handler+0x68>)
 800d1b8:	f7ff ff99 	bl	800d0ee <LL_C1_IPCC_IsActiveFlag_CHx>
 800d1bc:	4603      	mov	r3, r0
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d108      	bne.n	800d1d4 <HW_IPCC_Tx_Handler+0x24>
 800d1c2:	4b15      	ldr	r3, [pc, #84]	@ (800d218 <HW_IPCC_Tx_Handler+0x68>)
 800d1c4:	685b      	ldr	r3, [r3, #4]
 800d1c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d102      	bne.n	800d1d4 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800d1ce:	f000 f893 	bl	800d2f8 <HW_IPCC_SYS_CmdEvtHandler>
 800d1d2:	e01e      	b.n	800d212 <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800d1d4:	2108      	movs	r1, #8
 800d1d6:	4810      	ldr	r0, [pc, #64]	@ (800d218 <HW_IPCC_Tx_Handler+0x68>)
 800d1d8:	f7ff ff89 	bl	800d0ee <LL_C1_IPCC_IsActiveFlag_CHx>
 800d1dc:	4603      	mov	r3, r0
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d108      	bne.n	800d1f4 <HW_IPCC_Tx_Handler+0x44>
 800d1e2:	4b0d      	ldr	r3, [pc, #52]	@ (800d218 <HW_IPCC_Tx_Handler+0x68>)
 800d1e4:	685b      	ldr	r3, [r3, #4]
 800d1e6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d102      	bne.n	800d1f4 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 800d1ee:	f000 f8bd 	bl	800d36c <HW_IPCC_MM_FreeBufHandler>
 800d1f2:	e00e      	b.n	800d212 <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800d1f4:	2120      	movs	r1, #32
 800d1f6:	4808      	ldr	r0, [pc, #32]	@ (800d218 <HW_IPCC_Tx_Handler+0x68>)
 800d1f8:	f7ff ff79 	bl	800d0ee <LL_C1_IPCC_IsActiveFlag_CHx>
 800d1fc:	4603      	mov	r3, r0
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d108      	bne.n	800d214 <HW_IPCC_Tx_Handler+0x64>
 800d202:	4b05      	ldr	r3, [pc, #20]	@ (800d218 <HW_IPCC_Tx_Handler+0x68>)
 800d204:	685b      	ldr	r3, [r3, #4]
 800d206:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d102      	bne.n	800d214 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800d20e:	f000 f84f 	bl	800d2b0 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800d212:	bf00      	nop
 800d214:	bf00      	nop
}
 800d216:	bd80      	pop	{r7, pc}
 800d218:	58000c00 	.word	0x58000c00

0800d21c <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800d21c:	b580      	push	{r7, lr}
 800d21e:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800d220:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800d224:	f7ff fed3 	bl	800cfce <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800d228:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800d22c:	f7ff fea4 	bl	800cf78 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800d230:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800d234:	f7ff fe8c 	bl	800cf50 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800d238:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800d23a:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800d23c:	f7ff fe78 	bl	800cf30 <LL_PWR_EnableBootC2>

  return;
 800d240:	bf00      	nop
}
 800d242:	bd80      	pop	{r7, pc}

0800d244 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800d244:	b580      	push	{r7, lr}
 800d246:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800d248:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800d24c:	f7ff fea6 	bl	800cf9c <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800d250:	4806      	ldr	r0, [pc, #24]	@ (800d26c <HW_IPCC_Init+0x28>)
 800d252:	f7ff fee8 	bl	800d026 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800d256:	4805      	ldr	r0, [pc, #20]	@ (800d26c <HW_IPCC_Init+0x28>)
 800d258:	f7ff fed5 	bl	800d006 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800d25c:	202c      	movs	r0, #44	@ 0x2c
 800d25e:	f7f6 feb2 	bl	8003fc6 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800d262:	202d      	movs	r0, #45	@ 0x2d
 800d264:	f7f6 feaf 	bl	8003fc6 <HAL_NVIC_EnableIRQ>

  return;
 800d268:	bf00      	nop
}
 800d26a:	bd80      	pop	{r7, pc}
 800d26c:	58000c00 	.word	0x58000c00

0800d270 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800d270:	b580      	push	{r7, lr}
 800d272:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800d274:	2101      	movs	r1, #1
 800d276:	4802      	ldr	r0, [pc, #8]	@ (800d280 <HW_IPCC_BLE_Init+0x10>)
 800d278:	f7ff ff0a 	bl	800d090 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800d27c:	bf00      	nop
}
 800d27e:	bd80      	pop	{r7, pc}
 800d280:	58000c00 	.word	0x58000c00

0800d284 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800d284:	b580      	push	{r7, lr}
 800d286:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800d288:	2101      	movs	r1, #1
 800d28a:	4802      	ldr	r0, [pc, #8]	@ (800d294 <HW_IPCC_BLE_SendCmd+0x10>)
 800d28c:	f7ff ff20 	bl	800d0d0 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800d290:	bf00      	nop
}
 800d292:	bd80      	pop	{r7, pc}
 800d294:	58000c00 	.word	0x58000c00

0800d298 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800d298:	b580      	push	{r7, lr}
 800d29a:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800d29c:	f7fd fd22 	bl	800ace4 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800d2a0:	2101      	movs	r1, #1
 800d2a2:	4802      	ldr	r0, [pc, #8]	@ (800d2ac <HW_IPCC_BLE_EvtHandler+0x14>)
 800d2a4:	f7ff ff06 	bl	800d0b4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800d2a8:	bf00      	nop
}
 800d2aa:	bd80      	pop	{r7, pc}
 800d2ac:	58000c00 	.word	0x58000c00

0800d2b0 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800d2b0:	b580      	push	{r7, lr}
 800d2b2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800d2b4:	2120      	movs	r1, #32
 800d2b6:	4803      	ldr	r0, [pc, #12]	@ (800d2c4 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800d2b8:	f7ff fed8 	bl	800d06c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800d2bc:	f7fd fd42 	bl	800ad44 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800d2c0:	bf00      	nop
}
 800d2c2:	bd80      	pop	{r7, pc}
 800d2c4:	58000c00 	.word	0x58000c00

0800d2c8 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800d2c8:	b580      	push	{r7, lr}
 800d2ca:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800d2cc:	2102      	movs	r1, #2
 800d2ce:	4802      	ldr	r0, [pc, #8]	@ (800d2d8 <HW_IPCC_SYS_Init+0x10>)
 800d2d0:	f7ff fede 	bl	800d090 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800d2d4:	bf00      	nop
}
 800d2d6:	bd80      	pop	{r7, pc}
 800d2d8:	58000c00 	.word	0x58000c00

0800d2dc <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800d2dc:	b580      	push	{r7, lr}
 800d2de:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800d2e0:	2102      	movs	r1, #2
 800d2e2:	4804      	ldr	r0, [pc, #16]	@ (800d2f4 <HW_IPCC_SYS_SendCmd+0x18>)
 800d2e4:	f7ff fef4 	bl	800d0d0 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800d2e8:	2102      	movs	r1, #2
 800d2ea:	4802      	ldr	r0, [pc, #8]	@ (800d2f4 <HW_IPCC_SYS_SendCmd+0x18>)
 800d2ec:	f7ff feab 	bl	800d046 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800d2f0:	bf00      	nop
}
 800d2f2:	bd80      	pop	{r7, pc}
 800d2f4:	58000c00 	.word	0x58000c00

0800d2f8 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800d2fc:	2102      	movs	r1, #2
 800d2fe:	4803      	ldr	r0, [pc, #12]	@ (800d30c <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800d300:	f7ff feb4 	bl	800d06c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800d304:	f7fd fd6e 	bl	800ade4 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800d308:	bf00      	nop
}
 800d30a:	bd80      	pop	{r7, pc}
 800d30c:	58000c00 	.word	0x58000c00

0800d310 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800d310:	b580      	push	{r7, lr}
 800d312:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800d314:	f7fd fd7c 	bl	800ae10 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800d318:	2102      	movs	r1, #2
 800d31a:	4802      	ldr	r0, [pc, #8]	@ (800d324 <HW_IPCC_SYS_EvtHandler+0x14>)
 800d31c:	f7ff feca 	bl	800d0b4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800d320:	bf00      	nop
}
 800d322:	bd80      	pop	{r7, pc}
 800d324:	58000c00 	.word	0x58000c00

0800d328 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800d328:	b580      	push	{r7, lr}
 800d32a:	b082      	sub	sp, #8
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800d330:	2108      	movs	r1, #8
 800d332:	480c      	ldr	r0, [pc, #48]	@ (800d364 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800d334:	f7ff fedb 	bl	800d0ee <LL_C1_IPCC_IsActiveFlag_CHx>
 800d338:	4603      	mov	r3, r0
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d007      	beq.n	800d34e <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800d33e:	4a0a      	ldr	r2, [pc, #40]	@ (800d368 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800d344:	2108      	movs	r1, #8
 800d346:	4807      	ldr	r0, [pc, #28]	@ (800d364 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800d348:	f7ff fe7d 	bl	800d046 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800d34c:	e006      	b.n	800d35c <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800d352:	2108      	movs	r1, #8
 800d354:	4803      	ldr	r0, [pc, #12]	@ (800d364 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800d356:	f7ff febb 	bl	800d0d0 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800d35a:	bf00      	nop
}
 800d35c:	3708      	adds	r7, #8
 800d35e:	46bd      	mov	sp, r7
 800d360:	bd80      	pop	{r7, pc}
 800d362:	bf00      	nop
 800d364:	58000c00 	.word	0x58000c00
 800d368:	20003590 	.word	0x20003590

0800d36c <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800d36c:	b580      	push	{r7, lr}
 800d36e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800d370:	2108      	movs	r1, #8
 800d372:	4806      	ldr	r0, [pc, #24]	@ (800d38c <HW_IPCC_MM_FreeBufHandler+0x20>)
 800d374:	f7ff fe7a 	bl	800d06c <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800d378:	4b05      	ldr	r3, [pc, #20]	@ (800d390 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800d37e:	2108      	movs	r1, #8
 800d380:	4802      	ldr	r0, [pc, #8]	@ (800d38c <HW_IPCC_MM_FreeBufHandler+0x20>)
 800d382:	f7ff fea5 	bl	800d0d0 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800d386:	bf00      	nop
}
 800d388:	bd80      	pop	{r7, pc}
 800d38a:	bf00      	nop
 800d38c:	58000c00 	.word	0x58000c00
 800d390:	20003590 	.word	0x20003590

0800d394 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800d394:	b580      	push	{r7, lr}
 800d396:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800d398:	2108      	movs	r1, #8
 800d39a:	4802      	ldr	r0, [pc, #8]	@ (800d3a4 <HW_IPCC_TRACES_Init+0x10>)
 800d39c:	f7ff fe78 	bl	800d090 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800d3a0:	bf00      	nop
}
 800d3a2:	bd80      	pop	{r7, pc}
 800d3a4:	58000c00 	.word	0x58000c00

0800d3a8 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800d3ac:	f7fd fdd8 	bl	800af60 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800d3b0:	2108      	movs	r1, #8
 800d3b2:	4802      	ldr	r0, [pc, #8]	@ (800d3bc <HW_IPCC_TRACES_EvtHandler+0x14>)
 800d3b4:	f7ff fe7e 	bl	800d0b4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800d3b8:	bf00      	nop
}
 800d3ba:	bd80      	pop	{r7, pc}
 800d3bc:	58000c00 	.word	0x58000c00

0800d3c0 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800d3c0:	b480      	push	{r7}
 800d3c2:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800d3c4:	4b05      	ldr	r3, [pc, #20]	@ (800d3dc <UTIL_LPM_Init+0x1c>)
 800d3c6:	2200      	movs	r2, #0
 800d3c8:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800d3ca:	4b05      	ldr	r3, [pc, #20]	@ (800d3e0 <UTIL_LPM_Init+0x20>)
 800d3cc:	2200      	movs	r2, #0
 800d3ce:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800d3d0:	bf00      	nop
 800d3d2:	46bd      	mov	sp, r7
 800d3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d8:	4770      	bx	lr
 800d3da:	bf00      	nop
 800d3dc:	20003594 	.word	0x20003594
 800d3e0:	20003598 	.word	0x20003598

0800d3e4 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800d3e4:	b480      	push	{r7}
 800d3e6:	b087      	sub	sp, #28
 800d3e8:	af00      	add	r7, sp, #0
 800d3ea:	6078      	str	r0, [r7, #4]
 800d3ec:	460b      	mov	r3, r1
 800d3ee:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d3f0:	f3ef 8310 	mrs	r3, PRIMASK
 800d3f4:	613b      	str	r3, [r7, #16]
  return(result);
 800d3f6:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800d3f8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d3fa:	b672      	cpsid	i
}
 800d3fc:	bf00      	nop
  
  switch(state)
 800d3fe:	78fb      	ldrb	r3, [r7, #3]
 800d400:	2b00      	cmp	r3, #0
 800d402:	d008      	beq.n	800d416 <UTIL_LPM_SetOffMode+0x32>
 800d404:	2b01      	cmp	r3, #1
 800d406:	d10e      	bne.n	800d426 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800d408:	4b0d      	ldr	r3, [pc, #52]	@ (800d440 <UTIL_LPM_SetOffMode+0x5c>)
 800d40a:	681a      	ldr	r2, [r3, #0]
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	4313      	orrs	r3, r2
 800d410:	4a0b      	ldr	r2, [pc, #44]	@ (800d440 <UTIL_LPM_SetOffMode+0x5c>)
 800d412:	6013      	str	r3, [r2, #0]
      break;
 800d414:	e008      	b.n	800d428 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	43da      	mvns	r2, r3
 800d41a:	4b09      	ldr	r3, [pc, #36]	@ (800d440 <UTIL_LPM_SetOffMode+0x5c>)
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	4013      	ands	r3, r2
 800d420:	4a07      	ldr	r2, [pc, #28]	@ (800d440 <UTIL_LPM_SetOffMode+0x5c>)
 800d422:	6013      	str	r3, [r2, #0]
      break;
 800d424:	e000      	b.n	800d428 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800d426:	bf00      	nop
 800d428:	697b      	ldr	r3, [r7, #20]
 800d42a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	f383 8810 	msr	PRIMASK, r3
}
 800d432:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800d434:	bf00      	nop
 800d436:	371c      	adds	r7, #28
 800d438:	46bd      	mov	sp, r7
 800d43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d43e:	4770      	bx	lr
 800d440:	20003598 	.word	0x20003598

0800d444 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800d444:	b580      	push	{r7, lr}
 800d446:	b090      	sub	sp, #64	@ 0x40
 800d448:	af00      	add	r7, sp, #0
 800d44a:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800d44c:	4b73      	ldr	r3, [pc, #460]	@ (800d61c <UTIL_SEQ_Run+0x1d8>)
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 800d452:	4b72      	ldr	r3, [pc, #456]	@ (800d61c <UTIL_SEQ_Run+0x1d8>)
 800d454:	681a      	ldr	r2, [r3, #0]
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	4013      	ands	r3, r2
 800d45a:	4a70      	ldr	r2, [pc, #448]	@ (800d61c <UTIL_SEQ_Run+0x1d8>)
 800d45c:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800d45e:	4b70      	ldr	r3, [pc, #448]	@ (800d620 <UTIL_SEQ_Run+0x1dc>)
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800d464:	4b6f      	ldr	r3, [pc, #444]	@ (800d624 <UTIL_SEQ_Run+0x1e0>)
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800d46a:	4b6f      	ldr	r3, [pc, #444]	@ (800d628 <UTIL_SEQ_Run+0x1e4>)
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 800d470:	4b6e      	ldr	r3, [pc, #440]	@ (800d62c <UTIL_SEQ_Run+0x1e8>)
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800d476:	e08d      	b.n	800d594 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800d478:	2300      	movs	r3, #0
 800d47a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800d47c:	e002      	b.n	800d484 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800d47e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d480:	3301      	adds	r3, #1
 800d482:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800d484:	4a6a      	ldr	r2, [pc, #424]	@ (800d630 <UTIL_SEQ_Run+0x1ec>)
 800d486:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d488:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800d48c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d48e:	401a      	ands	r2, r3
 800d490:	4b62      	ldr	r3, [pc, #392]	@ (800d61c <UTIL_SEQ_Run+0x1d8>)
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	4013      	ands	r3, r2
 800d496:	2b00      	cmp	r3, #0
 800d498:	d0f1      	beq.n	800d47e <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800d49a:	4a65      	ldr	r2, [pc, #404]	@ (800d630 <UTIL_SEQ_Run+0x1ec>)
 800d49c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d49e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800d4a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4a4:	401a      	ands	r2, r3
 800d4a6:	4b5d      	ldr	r3, [pc, #372]	@ (800d61c <UTIL_SEQ_Run+0x1d8>)
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	4013      	ands	r3, r2
 800d4ac:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800d4ae:	4a60      	ldr	r2, [pc, #384]	@ (800d630 <UTIL_SEQ_Run+0x1ec>)
 800d4b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4b2:	00db      	lsls	r3, r3, #3
 800d4b4:	4413      	add	r3, r2
 800d4b6:	685a      	ldr	r2, [r3, #4]
 800d4b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4ba:	4013      	ands	r3, r2
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d106      	bne.n	800d4ce <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800d4c0:	4a5b      	ldr	r2, [pc, #364]	@ (800d630 <UTIL_SEQ_Run+0x1ec>)
 800d4c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4c4:	00db      	lsls	r3, r3, #3
 800d4c6:	4413      	add	r3, r2
 800d4c8:	f04f 32ff 	mov.w	r2, #4294967295
 800d4cc:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800d4ce:	4a58      	ldr	r2, [pc, #352]	@ (800d630 <UTIL_SEQ_Run+0x1ec>)
 800d4d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4d2:	00db      	lsls	r3, r3, #3
 800d4d4:	4413      	add	r3, r2
 800d4d6:	685a      	ldr	r2, [r3, #4]
 800d4d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4da:	4013      	ands	r3, r2
 800d4dc:	4618      	mov	r0, r3
 800d4de:	f000 f9b3 	bl	800d848 <SEQ_BitPosition>
 800d4e2:	4603      	mov	r3, r0
 800d4e4:	461a      	mov	r2, r3
 800d4e6:	4b53      	ldr	r3, [pc, #332]	@ (800d634 <UTIL_SEQ_Run+0x1f0>)
 800d4e8:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800d4ea:	4a51      	ldr	r2, [pc, #324]	@ (800d630 <UTIL_SEQ_Run+0x1ec>)
 800d4ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4ee:	00db      	lsls	r3, r3, #3
 800d4f0:	4413      	add	r3, r2
 800d4f2:	685a      	ldr	r2, [r3, #4]
 800d4f4:	4b4f      	ldr	r3, [pc, #316]	@ (800d634 <UTIL_SEQ_Run+0x1f0>)
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	2101      	movs	r1, #1
 800d4fa:	fa01 f303 	lsl.w	r3, r1, r3
 800d4fe:	43db      	mvns	r3, r3
 800d500:	401a      	ands	r2, r3
 800d502:	494b      	ldr	r1, [pc, #300]	@ (800d630 <UTIL_SEQ_Run+0x1ec>)
 800d504:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d506:	00db      	lsls	r3, r3, #3
 800d508:	440b      	add	r3, r1
 800d50a:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d50c:	f3ef 8310 	mrs	r3, PRIMASK
 800d510:	61bb      	str	r3, [r7, #24]
  return(result);
 800d512:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d514:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800d516:	b672      	cpsid	i
}
 800d518:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800d51a:	4b46      	ldr	r3, [pc, #280]	@ (800d634 <UTIL_SEQ_Run+0x1f0>)
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	2201      	movs	r2, #1
 800d520:	fa02 f303 	lsl.w	r3, r2, r3
 800d524:	43da      	mvns	r2, r3
 800d526:	4b3e      	ldr	r3, [pc, #248]	@ (800d620 <UTIL_SEQ_Run+0x1dc>)
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	4013      	ands	r3, r2
 800d52c:	4a3c      	ldr	r2, [pc, #240]	@ (800d620 <UTIL_SEQ_Run+0x1dc>)
 800d52e:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800d530:	2301      	movs	r3, #1
 800d532:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d534:	e013      	b.n	800d55e <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800d536:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d538:	3b01      	subs	r3, #1
 800d53a:	4a3d      	ldr	r2, [pc, #244]	@ (800d630 <UTIL_SEQ_Run+0x1ec>)
 800d53c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800d540:	4b3c      	ldr	r3, [pc, #240]	@ (800d634 <UTIL_SEQ_Run+0x1f0>)
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	2201      	movs	r2, #1
 800d546:	fa02 f303 	lsl.w	r3, r2, r3
 800d54a:	43da      	mvns	r2, r3
 800d54c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d54e:	3b01      	subs	r3, #1
 800d550:	400a      	ands	r2, r1
 800d552:	4937      	ldr	r1, [pc, #220]	@ (800d630 <UTIL_SEQ_Run+0x1ec>)
 800d554:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800d558:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d55a:	3b01      	subs	r3, #1
 800d55c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d55e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d560:	2b00      	cmp	r3, #0
 800d562:	d1e8      	bne.n	800d536 <UTIL_SEQ_Run+0xf2>
 800d564:	6a3b      	ldr	r3, [r7, #32]
 800d566:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d568:	697b      	ldr	r3, [r7, #20]
 800d56a:	f383 8810 	msr	PRIMASK, r3
}
 800d56e:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800d570:	4b30      	ldr	r3, [pc, #192]	@ (800d634 <UTIL_SEQ_Run+0x1f0>)
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	4a30      	ldr	r2, [pc, #192]	@ (800d638 <UTIL_SEQ_Run+0x1f4>)
 800d576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d57a:	4798      	blx	r3

    local_taskset = TaskSet;
 800d57c:	4b28      	ldr	r3, [pc, #160]	@ (800d620 <UTIL_SEQ_Run+0x1dc>)
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 800d582:	4b28      	ldr	r3, [pc, #160]	@ (800d624 <UTIL_SEQ_Run+0x1e0>)
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 800d588:	4b27      	ldr	r3, [pc, #156]	@ (800d628 <UTIL_SEQ_Run+0x1e4>)
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 800d58e:	4b27      	ldr	r3, [pc, #156]	@ (800d62c <UTIL_SEQ_Run+0x1e8>)
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800d594:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d598:	401a      	ands	r2, r3
 800d59a:	4b20      	ldr	r3, [pc, #128]	@ (800d61c <UTIL_SEQ_Run+0x1d8>)
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	4013      	ands	r3, r2
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d005      	beq.n	800d5b0 <UTIL_SEQ_Run+0x16c>
 800d5a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d5a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5a8:	4013      	ands	r3, r2
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	f43f af64 	beq.w	800d478 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800d5b0:	4b20      	ldr	r3, [pc, #128]	@ (800d634 <UTIL_SEQ_Run+0x1f0>)
 800d5b2:	f04f 32ff 	mov.w	r2, #4294967295
 800d5b6:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800d5b8:	f000 f938 	bl	800d82c <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d5bc:	f3ef 8310 	mrs	r3, PRIMASK
 800d5c0:	613b      	str	r3, [r7, #16]
  return(result);
 800d5c2:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800d5c4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800d5c6:	b672      	cpsid	i
}
 800d5c8:	bf00      	nop
  local_taskset = TaskSet;
 800d5ca:	4b15      	ldr	r3, [pc, #84]	@ (800d620 <UTIL_SEQ_Run+0x1dc>)
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800d5d0:	4b14      	ldr	r3, [pc, #80]	@ (800d624 <UTIL_SEQ_Run+0x1e0>)
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800d5d6:	4b14      	ldr	r3, [pc, #80]	@ (800d628 <UTIL_SEQ_Run+0x1e4>)
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800d5dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d5de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5e0:	401a      	ands	r2, r3
 800d5e2:	4b0e      	ldr	r3, [pc, #56]	@ (800d61c <UTIL_SEQ_Run+0x1d8>)
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	4013      	ands	r3, r2
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d107      	bne.n	800d5fc <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800d5ec:	4b0f      	ldr	r3, [pc, #60]	@ (800d62c <UTIL_SEQ_Run+0x1e8>)
 800d5ee:	681a      	ldr	r2, [r3, #0]
 800d5f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d5f2:	4013      	ands	r3, r2
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d101      	bne.n	800d5fc <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800d5f8:	f7f4 fe01 	bl	80021fe <UTIL_SEQ_Idle>
 800d5fc:	69fb      	ldr	r3, [r7, #28]
 800d5fe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	f383 8810 	msr	PRIMASK, r3
}
 800d606:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800d608:	f000 f917 	bl	800d83a <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800d60c:	4a03      	ldr	r2, [pc, #12]	@ (800d61c <UTIL_SEQ_Run+0x1d8>)
 800d60e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d610:	6013      	str	r3, [r2, #0]

  return;
 800d612:	bf00      	nop
}
 800d614:	3740      	adds	r7, #64	@ 0x40
 800d616:	46bd      	mov	sp, r7
 800d618:	bd80      	pop	{r7, pc}
 800d61a:	bf00      	nop
 800d61c:	2000002c 	.word	0x2000002c
 800d620:	2000359c 	.word	0x2000359c
 800d624:	200035a0 	.word	0x200035a0
 800d628:	20000028 	.word	0x20000028
 800d62c:	200035a4 	.word	0x200035a4
 800d630:	2000362c 	.word	0x2000362c
 800d634:	200035a8 	.word	0x200035a8
 800d638:	200035ac 	.word	0x200035ac

0800d63c <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800d63c:	b580      	push	{r7, lr}
 800d63e:	b088      	sub	sp, #32
 800d640:	af00      	add	r7, sp, #0
 800d642:	60f8      	str	r0, [r7, #12]
 800d644:	60b9      	str	r1, [r7, #8]
 800d646:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d648:	f3ef 8310 	mrs	r3, PRIMASK
 800d64c:	617b      	str	r3, [r7, #20]
  return(result);
 800d64e:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800d650:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800d652:	b672      	cpsid	i
}
 800d654:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800d656:	68f8      	ldr	r0, [r7, #12]
 800d658:	f000 f8f6 	bl	800d848 <SEQ_BitPosition>
 800d65c:	4603      	mov	r3, r0
 800d65e:	4619      	mov	r1, r3
 800d660:	4a06      	ldr	r2, [pc, #24]	@ (800d67c <UTIL_SEQ_RegTask+0x40>)
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800d668:	69fb      	ldr	r3, [r7, #28]
 800d66a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d66c:	69bb      	ldr	r3, [r7, #24]
 800d66e:	f383 8810 	msr	PRIMASK, r3
}
 800d672:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800d674:	bf00      	nop
}
 800d676:	3720      	adds	r7, #32
 800d678:	46bd      	mov	sp, r7
 800d67a:	bd80      	pop	{r7, pc}
 800d67c:	200035ac 	.word	0x200035ac

0800d680 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800d680:	b480      	push	{r7}
 800d682:	b087      	sub	sp, #28
 800d684:	af00      	add	r7, sp, #0
 800d686:	6078      	str	r0, [r7, #4]
 800d688:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d68a:	f3ef 8310 	mrs	r3, PRIMASK
 800d68e:	60fb      	str	r3, [r7, #12]
  return(result);
 800d690:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d692:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d694:	b672      	cpsid	i
}
 800d696:	bf00      	nop

  TaskSet |= TaskId_bm;
 800d698:	4b0d      	ldr	r3, [pc, #52]	@ (800d6d0 <UTIL_SEQ_SetTask+0x50>)
 800d69a:	681a      	ldr	r2, [r3, #0]
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	4313      	orrs	r3, r2
 800d6a0:	4a0b      	ldr	r2, [pc, #44]	@ (800d6d0 <UTIL_SEQ_SetTask+0x50>)
 800d6a2:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800d6a4:	4a0b      	ldr	r2, [pc, #44]	@ (800d6d4 <UTIL_SEQ_SetTask+0x54>)
 800d6a6:	683b      	ldr	r3, [r7, #0]
 800d6a8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	431a      	orrs	r2, r3
 800d6b0:	4908      	ldr	r1, [pc, #32]	@ (800d6d4 <UTIL_SEQ_SetTask+0x54>)
 800d6b2:	683b      	ldr	r3, [r7, #0]
 800d6b4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800d6b8:	697b      	ldr	r3, [r7, #20]
 800d6ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d6bc:	693b      	ldr	r3, [r7, #16]
 800d6be:	f383 8810 	msr	PRIMASK, r3
}
 800d6c2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800d6c4:	bf00      	nop
}
 800d6c6:	371c      	adds	r7, #28
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ce:	4770      	bx	lr
 800d6d0:	2000359c 	.word	0x2000359c
 800d6d4:	2000362c 	.word	0x2000362c

0800d6d8 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800d6d8:	b480      	push	{r7}
 800d6da:	b087      	sub	sp, #28
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d6e0:	f3ef 8310 	mrs	r3, PRIMASK
 800d6e4:	60fb      	str	r3, [r7, #12]
  return(result);
 800d6e6:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d6e8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d6ea:	b672      	cpsid	i
}
 800d6ec:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	43da      	mvns	r2, r3
 800d6f2:	4b08      	ldr	r3, [pc, #32]	@ (800d714 <UTIL_SEQ_PauseTask+0x3c>)
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	4013      	ands	r3, r2
 800d6f8:	4a06      	ldr	r2, [pc, #24]	@ (800d714 <UTIL_SEQ_PauseTask+0x3c>)
 800d6fa:	6013      	str	r3, [r2, #0]
 800d6fc:	697b      	ldr	r3, [r7, #20]
 800d6fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d700:	693b      	ldr	r3, [r7, #16]
 800d702:	f383 8810 	msr	PRIMASK, r3
}
 800d706:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800d708:	bf00      	nop
}
 800d70a:	371c      	adds	r7, #28
 800d70c:	46bd      	mov	sp, r7
 800d70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d712:	4770      	bx	lr
 800d714:	20000028 	.word	0x20000028

0800d718 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800d718:	b480      	push	{r7}
 800d71a:	b087      	sub	sp, #28
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d720:	f3ef 8310 	mrs	r3, PRIMASK
 800d724:	60fb      	str	r3, [r7, #12]
  return(result);
 800d726:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d728:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d72a:	b672      	cpsid	i
}
 800d72c:	bf00      	nop

  TaskMask |= TaskId_bm;
 800d72e:	4b09      	ldr	r3, [pc, #36]	@ (800d754 <UTIL_SEQ_ResumeTask+0x3c>)
 800d730:	681a      	ldr	r2, [r3, #0]
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	4313      	orrs	r3, r2
 800d736:	4a07      	ldr	r2, [pc, #28]	@ (800d754 <UTIL_SEQ_ResumeTask+0x3c>)
 800d738:	6013      	str	r3, [r2, #0]
 800d73a:	697b      	ldr	r3, [r7, #20]
 800d73c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d73e:	693b      	ldr	r3, [r7, #16]
 800d740:	f383 8810 	msr	PRIMASK, r3
}
 800d744:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800d746:	bf00      	nop
}
 800d748:	371c      	adds	r7, #28
 800d74a:	46bd      	mov	sp, r7
 800d74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d750:	4770      	bx	lr
 800d752:	bf00      	nop
 800d754:	20000028 	.word	0x20000028

0800d758 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800d758:	b480      	push	{r7}
 800d75a:	b087      	sub	sp, #28
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d760:	f3ef 8310 	mrs	r3, PRIMASK
 800d764:	60fb      	str	r3, [r7, #12]
  return(result);
 800d766:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d768:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d76a:	b672      	cpsid	i
}
 800d76c:	bf00      	nop

  EvtSet |= EvtId_bm;
 800d76e:	4b09      	ldr	r3, [pc, #36]	@ (800d794 <UTIL_SEQ_SetEvt+0x3c>)
 800d770:	681a      	ldr	r2, [r3, #0]
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	4313      	orrs	r3, r2
 800d776:	4a07      	ldr	r2, [pc, #28]	@ (800d794 <UTIL_SEQ_SetEvt+0x3c>)
 800d778:	6013      	str	r3, [r2, #0]
 800d77a:	697b      	ldr	r3, [r7, #20]
 800d77c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d77e:	693b      	ldr	r3, [r7, #16]
 800d780:	f383 8810 	msr	PRIMASK, r3
}
 800d784:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800d786:	bf00      	nop
}
 800d788:	371c      	adds	r7, #28
 800d78a:	46bd      	mov	sp, r7
 800d78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d790:	4770      	bx	lr
 800d792:	bf00      	nop
 800d794:	200035a0 	.word	0x200035a0

0800d798 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800d798:	b580      	push	{r7, lr}
 800d79a:	b088      	sub	sp, #32
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800d7a0:	4b1f      	ldr	r3, [pc, #124]	@ (800d820 <UTIL_SEQ_WaitEvt+0x88>)
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800d7a6:	4b1e      	ldr	r3, [pc, #120]	@ (800d820 <UTIL_SEQ_WaitEvt+0x88>)
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7ae:	d102      	bne.n	800d7b6 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800d7b0:	2300      	movs	r3, #0
 800d7b2:	61fb      	str	r3, [r7, #28]
 800d7b4:	e005      	b.n	800d7c2 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800d7b6:	4b1a      	ldr	r3, [pc, #104]	@ (800d820 <UTIL_SEQ_WaitEvt+0x88>)
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	2201      	movs	r2, #1
 800d7bc:	fa02 f303 	lsl.w	r3, r2, r3
 800d7c0:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800d7c2:	4b18      	ldr	r3, [pc, #96]	@ (800d824 <UTIL_SEQ_WaitEvt+0x8c>)
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800d7c8:	4a16      	ldr	r2, [pc, #88]	@ (800d824 <UTIL_SEQ_WaitEvt+0x8c>)
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800d7ce:	e003      	b.n	800d7d8 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800d7d0:	6879      	ldr	r1, [r7, #4]
 800d7d2:	69f8      	ldr	r0, [r7, #28]
 800d7d4:	f7f4 fd1a 	bl	800220c <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800d7d8:	4b13      	ldr	r3, [pc, #76]	@ (800d828 <UTIL_SEQ_WaitEvt+0x90>)
 800d7da:	681a      	ldr	r2, [r3, #0]
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	4013      	ands	r3, r2
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d0f5      	beq.n	800d7d0 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800d7e4:	4a0e      	ldr	r2, [pc, #56]	@ (800d820 <UTIL_SEQ_WaitEvt+0x88>)
 800d7e6:	69bb      	ldr	r3, [r7, #24]
 800d7e8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d7ea:	f3ef 8310 	mrs	r3, PRIMASK
 800d7ee:	60bb      	str	r3, [r7, #8]
  return(result);
 800d7f0:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d7f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800d7f4:	b672      	cpsid	i
}
 800d7f6:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	43da      	mvns	r2, r3
 800d7fc:	4b0a      	ldr	r3, [pc, #40]	@ (800d828 <UTIL_SEQ_WaitEvt+0x90>)
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	4013      	ands	r3, r2
 800d802:	4a09      	ldr	r2, [pc, #36]	@ (800d828 <UTIL_SEQ_WaitEvt+0x90>)
 800d804:	6013      	str	r3, [r2, #0]
 800d806:	693b      	ldr	r3, [r7, #16]
 800d808:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	f383 8810 	msr	PRIMASK, r3
}
 800d810:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800d812:	4a04      	ldr	r2, [pc, #16]	@ (800d824 <UTIL_SEQ_WaitEvt+0x8c>)
 800d814:	697b      	ldr	r3, [r7, #20]
 800d816:	6013      	str	r3, [r2, #0]
  return;
 800d818:	bf00      	nop
}
 800d81a:	3720      	adds	r7, #32
 800d81c:	46bd      	mov	sp, r7
 800d81e:	bd80      	pop	{r7, pc}
 800d820:	200035a8 	.word	0x200035a8
 800d824:	200035a4 	.word	0x200035a4
 800d828:	200035a0 	.word	0x200035a0

0800d82c <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800d82c:	b480      	push	{r7}
 800d82e:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800d830:	bf00      	nop
}
 800d832:	46bd      	mov	sp, r7
 800d834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d838:	4770      	bx	lr

0800d83a <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800d83a:	b480      	push	{r7}
 800d83c:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800d83e:	bf00      	nop
}
 800d840:	46bd      	mov	sp, r7
 800d842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d846:	4770      	bx	lr

0800d848 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800d848:	b480      	push	{r7}
 800d84a:	b085      	sub	sp, #20
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	60fb      	str	r3, [r7, #12]
  if (value == 0U)
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d101      	bne.n	800d85e <SEQ_BitPosition+0x16>
    return 32U;
 800d85a:	2320      	movs	r3, #32
 800d85c:	e003      	b.n	800d866 <SEQ_BitPosition+0x1e>
  return __builtin_clz(value);
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	fab3 f383 	clz	r3, r3
 800d864:	b2db      	uxtb	r3, r3
  return (uint8_t)(31 -__CLZ( Value ));
 800d866:	f1c3 031f 	rsb	r3, r3, #31
 800d86a:	b2db      	uxtb	r3, r3
}
 800d86c:	4618      	mov	r0, r3
 800d86e:	3714      	adds	r7, #20
 800d870:	46bd      	mov	sp, r7
 800d872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d876:	4770      	bx	lr

0800d878 <__cvt>:
 800d878:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d87c:	ec57 6b10 	vmov	r6, r7, d0
 800d880:	2f00      	cmp	r7, #0
 800d882:	460c      	mov	r4, r1
 800d884:	4619      	mov	r1, r3
 800d886:	463b      	mov	r3, r7
 800d888:	bfbb      	ittet	lt
 800d88a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800d88e:	461f      	movlt	r7, r3
 800d890:	2300      	movge	r3, #0
 800d892:	232d      	movlt	r3, #45	@ 0x2d
 800d894:	700b      	strb	r3, [r1, #0]
 800d896:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d898:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800d89c:	4691      	mov	r9, r2
 800d89e:	f023 0820 	bic.w	r8, r3, #32
 800d8a2:	bfbc      	itt	lt
 800d8a4:	4632      	movlt	r2, r6
 800d8a6:	4616      	movlt	r6, r2
 800d8a8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d8ac:	d005      	beq.n	800d8ba <__cvt+0x42>
 800d8ae:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800d8b2:	d100      	bne.n	800d8b6 <__cvt+0x3e>
 800d8b4:	3401      	adds	r4, #1
 800d8b6:	2102      	movs	r1, #2
 800d8b8:	e000      	b.n	800d8bc <__cvt+0x44>
 800d8ba:	2103      	movs	r1, #3
 800d8bc:	ab03      	add	r3, sp, #12
 800d8be:	9301      	str	r3, [sp, #4]
 800d8c0:	ab02      	add	r3, sp, #8
 800d8c2:	9300      	str	r3, [sp, #0]
 800d8c4:	ec47 6b10 	vmov	d0, r6, r7
 800d8c8:	4653      	mov	r3, sl
 800d8ca:	4622      	mov	r2, r4
 800d8cc:	f001 f9a4 	bl	800ec18 <_dtoa_r>
 800d8d0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800d8d4:	4605      	mov	r5, r0
 800d8d6:	d119      	bne.n	800d90c <__cvt+0x94>
 800d8d8:	f019 0f01 	tst.w	r9, #1
 800d8dc:	d00e      	beq.n	800d8fc <__cvt+0x84>
 800d8de:	eb00 0904 	add.w	r9, r0, r4
 800d8e2:	2200      	movs	r2, #0
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	4630      	mov	r0, r6
 800d8e8:	4639      	mov	r1, r7
 800d8ea:	f7f3 f8c5 	bl	8000a78 <__aeabi_dcmpeq>
 800d8ee:	b108      	cbz	r0, 800d8f4 <__cvt+0x7c>
 800d8f0:	f8cd 900c 	str.w	r9, [sp, #12]
 800d8f4:	2230      	movs	r2, #48	@ 0x30
 800d8f6:	9b03      	ldr	r3, [sp, #12]
 800d8f8:	454b      	cmp	r3, r9
 800d8fa:	d31e      	bcc.n	800d93a <__cvt+0xc2>
 800d8fc:	9b03      	ldr	r3, [sp, #12]
 800d8fe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d900:	1b5b      	subs	r3, r3, r5
 800d902:	4628      	mov	r0, r5
 800d904:	6013      	str	r3, [r2, #0]
 800d906:	b004      	add	sp, #16
 800d908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d90c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d910:	eb00 0904 	add.w	r9, r0, r4
 800d914:	d1e5      	bne.n	800d8e2 <__cvt+0x6a>
 800d916:	7803      	ldrb	r3, [r0, #0]
 800d918:	2b30      	cmp	r3, #48	@ 0x30
 800d91a:	d10a      	bne.n	800d932 <__cvt+0xba>
 800d91c:	2200      	movs	r2, #0
 800d91e:	2300      	movs	r3, #0
 800d920:	4630      	mov	r0, r6
 800d922:	4639      	mov	r1, r7
 800d924:	f7f3 f8a8 	bl	8000a78 <__aeabi_dcmpeq>
 800d928:	b918      	cbnz	r0, 800d932 <__cvt+0xba>
 800d92a:	f1c4 0401 	rsb	r4, r4, #1
 800d92e:	f8ca 4000 	str.w	r4, [sl]
 800d932:	f8da 3000 	ldr.w	r3, [sl]
 800d936:	4499      	add	r9, r3
 800d938:	e7d3      	b.n	800d8e2 <__cvt+0x6a>
 800d93a:	1c59      	adds	r1, r3, #1
 800d93c:	9103      	str	r1, [sp, #12]
 800d93e:	701a      	strb	r2, [r3, #0]
 800d940:	e7d9      	b.n	800d8f6 <__cvt+0x7e>

0800d942 <__exponent>:
 800d942:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d944:	2900      	cmp	r1, #0
 800d946:	bfba      	itte	lt
 800d948:	4249      	neglt	r1, r1
 800d94a:	232d      	movlt	r3, #45	@ 0x2d
 800d94c:	232b      	movge	r3, #43	@ 0x2b
 800d94e:	2909      	cmp	r1, #9
 800d950:	7002      	strb	r2, [r0, #0]
 800d952:	7043      	strb	r3, [r0, #1]
 800d954:	dd29      	ble.n	800d9aa <__exponent+0x68>
 800d956:	f10d 0307 	add.w	r3, sp, #7
 800d95a:	461d      	mov	r5, r3
 800d95c:	270a      	movs	r7, #10
 800d95e:	461a      	mov	r2, r3
 800d960:	fbb1 f6f7 	udiv	r6, r1, r7
 800d964:	fb07 1416 	mls	r4, r7, r6, r1
 800d968:	3430      	adds	r4, #48	@ 0x30
 800d96a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d96e:	460c      	mov	r4, r1
 800d970:	2c63      	cmp	r4, #99	@ 0x63
 800d972:	f103 33ff 	add.w	r3, r3, #4294967295
 800d976:	4631      	mov	r1, r6
 800d978:	dcf1      	bgt.n	800d95e <__exponent+0x1c>
 800d97a:	3130      	adds	r1, #48	@ 0x30
 800d97c:	1e94      	subs	r4, r2, #2
 800d97e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d982:	1c41      	adds	r1, r0, #1
 800d984:	4623      	mov	r3, r4
 800d986:	42ab      	cmp	r3, r5
 800d988:	d30a      	bcc.n	800d9a0 <__exponent+0x5e>
 800d98a:	f10d 0309 	add.w	r3, sp, #9
 800d98e:	1a9b      	subs	r3, r3, r2
 800d990:	42ac      	cmp	r4, r5
 800d992:	bf88      	it	hi
 800d994:	2300      	movhi	r3, #0
 800d996:	3302      	adds	r3, #2
 800d998:	4403      	add	r3, r0
 800d99a:	1a18      	subs	r0, r3, r0
 800d99c:	b003      	add	sp, #12
 800d99e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d9a0:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d9a4:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d9a8:	e7ed      	b.n	800d986 <__exponent+0x44>
 800d9aa:	2330      	movs	r3, #48	@ 0x30
 800d9ac:	3130      	adds	r1, #48	@ 0x30
 800d9ae:	7083      	strb	r3, [r0, #2]
 800d9b0:	70c1      	strb	r1, [r0, #3]
 800d9b2:	1d03      	adds	r3, r0, #4
 800d9b4:	e7f1      	b.n	800d99a <__exponent+0x58>
	...

0800d9b8 <_printf_float>:
 800d9b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9bc:	b08d      	sub	sp, #52	@ 0x34
 800d9be:	460c      	mov	r4, r1
 800d9c0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800d9c4:	4616      	mov	r6, r2
 800d9c6:	461f      	mov	r7, r3
 800d9c8:	4605      	mov	r5, r0
 800d9ca:	f001 f811 	bl	800e9f0 <_localeconv_r>
 800d9ce:	6803      	ldr	r3, [r0, #0]
 800d9d0:	9304      	str	r3, [sp, #16]
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	f7f2 fc24 	bl	8000220 <strlen>
 800d9d8:	2300      	movs	r3, #0
 800d9da:	930a      	str	r3, [sp, #40]	@ 0x28
 800d9dc:	f8d8 3000 	ldr.w	r3, [r8]
 800d9e0:	9005      	str	r0, [sp, #20]
 800d9e2:	3307      	adds	r3, #7
 800d9e4:	f023 0307 	bic.w	r3, r3, #7
 800d9e8:	f103 0208 	add.w	r2, r3, #8
 800d9ec:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d9f0:	f8d4 b000 	ldr.w	fp, [r4]
 800d9f4:	f8c8 2000 	str.w	r2, [r8]
 800d9f8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d9fc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800da00:	9307      	str	r3, [sp, #28]
 800da02:	f8cd 8018 	str.w	r8, [sp, #24]
 800da06:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800da0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800da0e:	4b9c      	ldr	r3, [pc, #624]	@ (800dc80 <_printf_float+0x2c8>)
 800da10:	f04f 32ff 	mov.w	r2, #4294967295
 800da14:	f7f3 f862 	bl	8000adc <__aeabi_dcmpun>
 800da18:	bb70      	cbnz	r0, 800da78 <_printf_float+0xc0>
 800da1a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800da1e:	4b98      	ldr	r3, [pc, #608]	@ (800dc80 <_printf_float+0x2c8>)
 800da20:	f04f 32ff 	mov.w	r2, #4294967295
 800da24:	f7f3 f83c 	bl	8000aa0 <__aeabi_dcmple>
 800da28:	bb30      	cbnz	r0, 800da78 <_printf_float+0xc0>
 800da2a:	2200      	movs	r2, #0
 800da2c:	2300      	movs	r3, #0
 800da2e:	4640      	mov	r0, r8
 800da30:	4649      	mov	r1, r9
 800da32:	f7f3 f82b 	bl	8000a8c <__aeabi_dcmplt>
 800da36:	b110      	cbz	r0, 800da3e <_printf_float+0x86>
 800da38:	232d      	movs	r3, #45	@ 0x2d
 800da3a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800da3e:	4a91      	ldr	r2, [pc, #580]	@ (800dc84 <_printf_float+0x2cc>)
 800da40:	4b91      	ldr	r3, [pc, #580]	@ (800dc88 <_printf_float+0x2d0>)
 800da42:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800da46:	bf94      	ite	ls
 800da48:	4690      	movls	r8, r2
 800da4a:	4698      	movhi	r8, r3
 800da4c:	2303      	movs	r3, #3
 800da4e:	6123      	str	r3, [r4, #16]
 800da50:	f02b 0304 	bic.w	r3, fp, #4
 800da54:	6023      	str	r3, [r4, #0]
 800da56:	f04f 0900 	mov.w	r9, #0
 800da5a:	9700      	str	r7, [sp, #0]
 800da5c:	4633      	mov	r3, r6
 800da5e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800da60:	4621      	mov	r1, r4
 800da62:	4628      	mov	r0, r5
 800da64:	f000 f9d2 	bl	800de0c <_printf_common>
 800da68:	3001      	adds	r0, #1
 800da6a:	f040 808d 	bne.w	800db88 <_printf_float+0x1d0>
 800da6e:	f04f 30ff 	mov.w	r0, #4294967295
 800da72:	b00d      	add	sp, #52	@ 0x34
 800da74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da78:	4642      	mov	r2, r8
 800da7a:	464b      	mov	r3, r9
 800da7c:	4640      	mov	r0, r8
 800da7e:	4649      	mov	r1, r9
 800da80:	f7f3 f82c 	bl	8000adc <__aeabi_dcmpun>
 800da84:	b140      	cbz	r0, 800da98 <_printf_float+0xe0>
 800da86:	464b      	mov	r3, r9
 800da88:	2b00      	cmp	r3, #0
 800da8a:	bfbc      	itt	lt
 800da8c:	232d      	movlt	r3, #45	@ 0x2d
 800da8e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800da92:	4a7e      	ldr	r2, [pc, #504]	@ (800dc8c <_printf_float+0x2d4>)
 800da94:	4b7e      	ldr	r3, [pc, #504]	@ (800dc90 <_printf_float+0x2d8>)
 800da96:	e7d4      	b.n	800da42 <_printf_float+0x8a>
 800da98:	6863      	ldr	r3, [r4, #4]
 800da9a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800da9e:	9206      	str	r2, [sp, #24]
 800daa0:	1c5a      	adds	r2, r3, #1
 800daa2:	d13b      	bne.n	800db1c <_printf_float+0x164>
 800daa4:	2306      	movs	r3, #6
 800daa6:	6063      	str	r3, [r4, #4]
 800daa8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800daac:	2300      	movs	r3, #0
 800daae:	6022      	str	r2, [r4, #0]
 800dab0:	9303      	str	r3, [sp, #12]
 800dab2:	ab0a      	add	r3, sp, #40	@ 0x28
 800dab4:	e9cd a301 	strd	sl, r3, [sp, #4]
 800dab8:	ab09      	add	r3, sp, #36	@ 0x24
 800daba:	9300      	str	r3, [sp, #0]
 800dabc:	6861      	ldr	r1, [r4, #4]
 800dabe:	ec49 8b10 	vmov	d0, r8, r9
 800dac2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800dac6:	4628      	mov	r0, r5
 800dac8:	f7ff fed6 	bl	800d878 <__cvt>
 800dacc:	9b06      	ldr	r3, [sp, #24]
 800dace:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dad0:	2b47      	cmp	r3, #71	@ 0x47
 800dad2:	4680      	mov	r8, r0
 800dad4:	d129      	bne.n	800db2a <_printf_float+0x172>
 800dad6:	1cc8      	adds	r0, r1, #3
 800dad8:	db02      	blt.n	800dae0 <_printf_float+0x128>
 800dada:	6863      	ldr	r3, [r4, #4]
 800dadc:	4299      	cmp	r1, r3
 800dade:	dd41      	ble.n	800db64 <_printf_float+0x1ac>
 800dae0:	f1aa 0a02 	sub.w	sl, sl, #2
 800dae4:	fa5f fa8a 	uxtb.w	sl, sl
 800dae8:	3901      	subs	r1, #1
 800daea:	4652      	mov	r2, sl
 800daec:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800daf0:	9109      	str	r1, [sp, #36]	@ 0x24
 800daf2:	f7ff ff26 	bl	800d942 <__exponent>
 800daf6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800daf8:	1813      	adds	r3, r2, r0
 800dafa:	2a01      	cmp	r2, #1
 800dafc:	4681      	mov	r9, r0
 800dafe:	6123      	str	r3, [r4, #16]
 800db00:	dc02      	bgt.n	800db08 <_printf_float+0x150>
 800db02:	6822      	ldr	r2, [r4, #0]
 800db04:	07d2      	lsls	r2, r2, #31
 800db06:	d501      	bpl.n	800db0c <_printf_float+0x154>
 800db08:	3301      	adds	r3, #1
 800db0a:	6123      	str	r3, [r4, #16]
 800db0c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800db10:	2b00      	cmp	r3, #0
 800db12:	d0a2      	beq.n	800da5a <_printf_float+0xa2>
 800db14:	232d      	movs	r3, #45	@ 0x2d
 800db16:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800db1a:	e79e      	b.n	800da5a <_printf_float+0xa2>
 800db1c:	9a06      	ldr	r2, [sp, #24]
 800db1e:	2a47      	cmp	r2, #71	@ 0x47
 800db20:	d1c2      	bne.n	800daa8 <_printf_float+0xf0>
 800db22:	2b00      	cmp	r3, #0
 800db24:	d1c0      	bne.n	800daa8 <_printf_float+0xf0>
 800db26:	2301      	movs	r3, #1
 800db28:	e7bd      	b.n	800daa6 <_printf_float+0xee>
 800db2a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800db2e:	d9db      	bls.n	800dae8 <_printf_float+0x130>
 800db30:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800db34:	d118      	bne.n	800db68 <_printf_float+0x1b0>
 800db36:	2900      	cmp	r1, #0
 800db38:	6863      	ldr	r3, [r4, #4]
 800db3a:	dd0b      	ble.n	800db54 <_printf_float+0x19c>
 800db3c:	6121      	str	r1, [r4, #16]
 800db3e:	b913      	cbnz	r3, 800db46 <_printf_float+0x18e>
 800db40:	6822      	ldr	r2, [r4, #0]
 800db42:	07d0      	lsls	r0, r2, #31
 800db44:	d502      	bpl.n	800db4c <_printf_float+0x194>
 800db46:	3301      	adds	r3, #1
 800db48:	440b      	add	r3, r1
 800db4a:	6123      	str	r3, [r4, #16]
 800db4c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800db4e:	f04f 0900 	mov.w	r9, #0
 800db52:	e7db      	b.n	800db0c <_printf_float+0x154>
 800db54:	b913      	cbnz	r3, 800db5c <_printf_float+0x1a4>
 800db56:	6822      	ldr	r2, [r4, #0]
 800db58:	07d2      	lsls	r2, r2, #31
 800db5a:	d501      	bpl.n	800db60 <_printf_float+0x1a8>
 800db5c:	3302      	adds	r3, #2
 800db5e:	e7f4      	b.n	800db4a <_printf_float+0x192>
 800db60:	2301      	movs	r3, #1
 800db62:	e7f2      	b.n	800db4a <_printf_float+0x192>
 800db64:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800db68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800db6a:	4299      	cmp	r1, r3
 800db6c:	db05      	blt.n	800db7a <_printf_float+0x1c2>
 800db6e:	6823      	ldr	r3, [r4, #0]
 800db70:	6121      	str	r1, [r4, #16]
 800db72:	07d8      	lsls	r0, r3, #31
 800db74:	d5ea      	bpl.n	800db4c <_printf_float+0x194>
 800db76:	1c4b      	adds	r3, r1, #1
 800db78:	e7e7      	b.n	800db4a <_printf_float+0x192>
 800db7a:	2900      	cmp	r1, #0
 800db7c:	bfd4      	ite	le
 800db7e:	f1c1 0202 	rsble	r2, r1, #2
 800db82:	2201      	movgt	r2, #1
 800db84:	4413      	add	r3, r2
 800db86:	e7e0      	b.n	800db4a <_printf_float+0x192>
 800db88:	6823      	ldr	r3, [r4, #0]
 800db8a:	055a      	lsls	r2, r3, #21
 800db8c:	d407      	bmi.n	800db9e <_printf_float+0x1e6>
 800db8e:	6923      	ldr	r3, [r4, #16]
 800db90:	4642      	mov	r2, r8
 800db92:	4631      	mov	r1, r6
 800db94:	4628      	mov	r0, r5
 800db96:	47b8      	blx	r7
 800db98:	3001      	adds	r0, #1
 800db9a:	d12b      	bne.n	800dbf4 <_printf_float+0x23c>
 800db9c:	e767      	b.n	800da6e <_printf_float+0xb6>
 800db9e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800dba2:	f240 80dd 	bls.w	800dd60 <_printf_float+0x3a8>
 800dba6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800dbaa:	2200      	movs	r2, #0
 800dbac:	2300      	movs	r3, #0
 800dbae:	f7f2 ff63 	bl	8000a78 <__aeabi_dcmpeq>
 800dbb2:	2800      	cmp	r0, #0
 800dbb4:	d033      	beq.n	800dc1e <_printf_float+0x266>
 800dbb6:	4a37      	ldr	r2, [pc, #220]	@ (800dc94 <_printf_float+0x2dc>)
 800dbb8:	2301      	movs	r3, #1
 800dbba:	4631      	mov	r1, r6
 800dbbc:	4628      	mov	r0, r5
 800dbbe:	47b8      	blx	r7
 800dbc0:	3001      	adds	r0, #1
 800dbc2:	f43f af54 	beq.w	800da6e <_printf_float+0xb6>
 800dbc6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800dbca:	4543      	cmp	r3, r8
 800dbcc:	db02      	blt.n	800dbd4 <_printf_float+0x21c>
 800dbce:	6823      	ldr	r3, [r4, #0]
 800dbd0:	07d8      	lsls	r0, r3, #31
 800dbd2:	d50f      	bpl.n	800dbf4 <_printf_float+0x23c>
 800dbd4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dbd8:	4631      	mov	r1, r6
 800dbda:	4628      	mov	r0, r5
 800dbdc:	47b8      	blx	r7
 800dbde:	3001      	adds	r0, #1
 800dbe0:	f43f af45 	beq.w	800da6e <_printf_float+0xb6>
 800dbe4:	f04f 0900 	mov.w	r9, #0
 800dbe8:	f108 38ff 	add.w	r8, r8, #4294967295
 800dbec:	f104 0a1a 	add.w	sl, r4, #26
 800dbf0:	45c8      	cmp	r8, r9
 800dbf2:	dc09      	bgt.n	800dc08 <_printf_float+0x250>
 800dbf4:	6823      	ldr	r3, [r4, #0]
 800dbf6:	079b      	lsls	r3, r3, #30
 800dbf8:	f100 8103 	bmi.w	800de02 <_printf_float+0x44a>
 800dbfc:	68e0      	ldr	r0, [r4, #12]
 800dbfe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dc00:	4298      	cmp	r0, r3
 800dc02:	bfb8      	it	lt
 800dc04:	4618      	movlt	r0, r3
 800dc06:	e734      	b.n	800da72 <_printf_float+0xba>
 800dc08:	2301      	movs	r3, #1
 800dc0a:	4652      	mov	r2, sl
 800dc0c:	4631      	mov	r1, r6
 800dc0e:	4628      	mov	r0, r5
 800dc10:	47b8      	blx	r7
 800dc12:	3001      	adds	r0, #1
 800dc14:	f43f af2b 	beq.w	800da6e <_printf_float+0xb6>
 800dc18:	f109 0901 	add.w	r9, r9, #1
 800dc1c:	e7e8      	b.n	800dbf0 <_printf_float+0x238>
 800dc1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	dc39      	bgt.n	800dc98 <_printf_float+0x2e0>
 800dc24:	4a1b      	ldr	r2, [pc, #108]	@ (800dc94 <_printf_float+0x2dc>)
 800dc26:	2301      	movs	r3, #1
 800dc28:	4631      	mov	r1, r6
 800dc2a:	4628      	mov	r0, r5
 800dc2c:	47b8      	blx	r7
 800dc2e:	3001      	adds	r0, #1
 800dc30:	f43f af1d 	beq.w	800da6e <_printf_float+0xb6>
 800dc34:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800dc38:	ea59 0303 	orrs.w	r3, r9, r3
 800dc3c:	d102      	bne.n	800dc44 <_printf_float+0x28c>
 800dc3e:	6823      	ldr	r3, [r4, #0]
 800dc40:	07d9      	lsls	r1, r3, #31
 800dc42:	d5d7      	bpl.n	800dbf4 <_printf_float+0x23c>
 800dc44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dc48:	4631      	mov	r1, r6
 800dc4a:	4628      	mov	r0, r5
 800dc4c:	47b8      	blx	r7
 800dc4e:	3001      	adds	r0, #1
 800dc50:	f43f af0d 	beq.w	800da6e <_printf_float+0xb6>
 800dc54:	f04f 0a00 	mov.w	sl, #0
 800dc58:	f104 0b1a 	add.w	fp, r4, #26
 800dc5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc5e:	425b      	negs	r3, r3
 800dc60:	4553      	cmp	r3, sl
 800dc62:	dc01      	bgt.n	800dc68 <_printf_float+0x2b0>
 800dc64:	464b      	mov	r3, r9
 800dc66:	e793      	b.n	800db90 <_printf_float+0x1d8>
 800dc68:	2301      	movs	r3, #1
 800dc6a:	465a      	mov	r2, fp
 800dc6c:	4631      	mov	r1, r6
 800dc6e:	4628      	mov	r0, r5
 800dc70:	47b8      	blx	r7
 800dc72:	3001      	adds	r0, #1
 800dc74:	f43f aefb 	beq.w	800da6e <_printf_float+0xb6>
 800dc78:	f10a 0a01 	add.w	sl, sl, #1
 800dc7c:	e7ee      	b.n	800dc5c <_printf_float+0x2a4>
 800dc7e:	bf00      	nop
 800dc80:	7fefffff 	.word	0x7fefffff
 800dc84:	08013861 	.word	0x08013861
 800dc88:	08013865 	.word	0x08013865
 800dc8c:	08013869 	.word	0x08013869
 800dc90:	0801386d 	.word	0x0801386d
 800dc94:	08013871 	.word	0x08013871
 800dc98:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800dc9a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800dc9e:	4553      	cmp	r3, sl
 800dca0:	bfa8      	it	ge
 800dca2:	4653      	movge	r3, sl
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	4699      	mov	r9, r3
 800dca8:	dc36      	bgt.n	800dd18 <_printf_float+0x360>
 800dcaa:	f04f 0b00 	mov.w	fp, #0
 800dcae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dcb2:	f104 021a 	add.w	r2, r4, #26
 800dcb6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800dcb8:	9306      	str	r3, [sp, #24]
 800dcba:	eba3 0309 	sub.w	r3, r3, r9
 800dcbe:	455b      	cmp	r3, fp
 800dcc0:	dc31      	bgt.n	800dd26 <_printf_float+0x36e>
 800dcc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dcc4:	459a      	cmp	sl, r3
 800dcc6:	dc3a      	bgt.n	800dd3e <_printf_float+0x386>
 800dcc8:	6823      	ldr	r3, [r4, #0]
 800dcca:	07da      	lsls	r2, r3, #31
 800dccc:	d437      	bmi.n	800dd3e <_printf_float+0x386>
 800dcce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dcd0:	ebaa 0903 	sub.w	r9, sl, r3
 800dcd4:	9b06      	ldr	r3, [sp, #24]
 800dcd6:	ebaa 0303 	sub.w	r3, sl, r3
 800dcda:	4599      	cmp	r9, r3
 800dcdc:	bfa8      	it	ge
 800dcde:	4699      	movge	r9, r3
 800dce0:	f1b9 0f00 	cmp.w	r9, #0
 800dce4:	dc33      	bgt.n	800dd4e <_printf_float+0x396>
 800dce6:	f04f 0800 	mov.w	r8, #0
 800dcea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dcee:	f104 0b1a 	add.w	fp, r4, #26
 800dcf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dcf4:	ebaa 0303 	sub.w	r3, sl, r3
 800dcf8:	eba3 0309 	sub.w	r3, r3, r9
 800dcfc:	4543      	cmp	r3, r8
 800dcfe:	f77f af79 	ble.w	800dbf4 <_printf_float+0x23c>
 800dd02:	2301      	movs	r3, #1
 800dd04:	465a      	mov	r2, fp
 800dd06:	4631      	mov	r1, r6
 800dd08:	4628      	mov	r0, r5
 800dd0a:	47b8      	blx	r7
 800dd0c:	3001      	adds	r0, #1
 800dd0e:	f43f aeae 	beq.w	800da6e <_printf_float+0xb6>
 800dd12:	f108 0801 	add.w	r8, r8, #1
 800dd16:	e7ec      	b.n	800dcf2 <_printf_float+0x33a>
 800dd18:	4642      	mov	r2, r8
 800dd1a:	4631      	mov	r1, r6
 800dd1c:	4628      	mov	r0, r5
 800dd1e:	47b8      	blx	r7
 800dd20:	3001      	adds	r0, #1
 800dd22:	d1c2      	bne.n	800dcaa <_printf_float+0x2f2>
 800dd24:	e6a3      	b.n	800da6e <_printf_float+0xb6>
 800dd26:	2301      	movs	r3, #1
 800dd28:	4631      	mov	r1, r6
 800dd2a:	4628      	mov	r0, r5
 800dd2c:	9206      	str	r2, [sp, #24]
 800dd2e:	47b8      	blx	r7
 800dd30:	3001      	adds	r0, #1
 800dd32:	f43f ae9c 	beq.w	800da6e <_printf_float+0xb6>
 800dd36:	9a06      	ldr	r2, [sp, #24]
 800dd38:	f10b 0b01 	add.w	fp, fp, #1
 800dd3c:	e7bb      	b.n	800dcb6 <_printf_float+0x2fe>
 800dd3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dd42:	4631      	mov	r1, r6
 800dd44:	4628      	mov	r0, r5
 800dd46:	47b8      	blx	r7
 800dd48:	3001      	adds	r0, #1
 800dd4a:	d1c0      	bne.n	800dcce <_printf_float+0x316>
 800dd4c:	e68f      	b.n	800da6e <_printf_float+0xb6>
 800dd4e:	9a06      	ldr	r2, [sp, #24]
 800dd50:	464b      	mov	r3, r9
 800dd52:	4442      	add	r2, r8
 800dd54:	4631      	mov	r1, r6
 800dd56:	4628      	mov	r0, r5
 800dd58:	47b8      	blx	r7
 800dd5a:	3001      	adds	r0, #1
 800dd5c:	d1c3      	bne.n	800dce6 <_printf_float+0x32e>
 800dd5e:	e686      	b.n	800da6e <_printf_float+0xb6>
 800dd60:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800dd64:	f1ba 0f01 	cmp.w	sl, #1
 800dd68:	dc01      	bgt.n	800dd6e <_printf_float+0x3b6>
 800dd6a:	07db      	lsls	r3, r3, #31
 800dd6c:	d536      	bpl.n	800dddc <_printf_float+0x424>
 800dd6e:	2301      	movs	r3, #1
 800dd70:	4642      	mov	r2, r8
 800dd72:	4631      	mov	r1, r6
 800dd74:	4628      	mov	r0, r5
 800dd76:	47b8      	blx	r7
 800dd78:	3001      	adds	r0, #1
 800dd7a:	f43f ae78 	beq.w	800da6e <_printf_float+0xb6>
 800dd7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dd82:	4631      	mov	r1, r6
 800dd84:	4628      	mov	r0, r5
 800dd86:	47b8      	blx	r7
 800dd88:	3001      	adds	r0, #1
 800dd8a:	f43f ae70 	beq.w	800da6e <_printf_float+0xb6>
 800dd8e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800dd92:	2200      	movs	r2, #0
 800dd94:	2300      	movs	r3, #0
 800dd96:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dd9a:	f7f2 fe6d 	bl	8000a78 <__aeabi_dcmpeq>
 800dd9e:	b9c0      	cbnz	r0, 800ddd2 <_printf_float+0x41a>
 800dda0:	4653      	mov	r3, sl
 800dda2:	f108 0201 	add.w	r2, r8, #1
 800dda6:	4631      	mov	r1, r6
 800dda8:	4628      	mov	r0, r5
 800ddaa:	47b8      	blx	r7
 800ddac:	3001      	adds	r0, #1
 800ddae:	d10c      	bne.n	800ddca <_printf_float+0x412>
 800ddb0:	e65d      	b.n	800da6e <_printf_float+0xb6>
 800ddb2:	2301      	movs	r3, #1
 800ddb4:	465a      	mov	r2, fp
 800ddb6:	4631      	mov	r1, r6
 800ddb8:	4628      	mov	r0, r5
 800ddba:	47b8      	blx	r7
 800ddbc:	3001      	adds	r0, #1
 800ddbe:	f43f ae56 	beq.w	800da6e <_printf_float+0xb6>
 800ddc2:	f108 0801 	add.w	r8, r8, #1
 800ddc6:	45d0      	cmp	r8, sl
 800ddc8:	dbf3      	blt.n	800ddb2 <_printf_float+0x3fa>
 800ddca:	464b      	mov	r3, r9
 800ddcc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ddd0:	e6df      	b.n	800db92 <_printf_float+0x1da>
 800ddd2:	f04f 0800 	mov.w	r8, #0
 800ddd6:	f104 0b1a 	add.w	fp, r4, #26
 800ddda:	e7f4      	b.n	800ddc6 <_printf_float+0x40e>
 800dddc:	2301      	movs	r3, #1
 800ddde:	4642      	mov	r2, r8
 800dde0:	e7e1      	b.n	800dda6 <_printf_float+0x3ee>
 800dde2:	2301      	movs	r3, #1
 800dde4:	464a      	mov	r2, r9
 800dde6:	4631      	mov	r1, r6
 800dde8:	4628      	mov	r0, r5
 800ddea:	47b8      	blx	r7
 800ddec:	3001      	adds	r0, #1
 800ddee:	f43f ae3e 	beq.w	800da6e <_printf_float+0xb6>
 800ddf2:	f108 0801 	add.w	r8, r8, #1
 800ddf6:	68e3      	ldr	r3, [r4, #12]
 800ddf8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ddfa:	1a5b      	subs	r3, r3, r1
 800ddfc:	4543      	cmp	r3, r8
 800ddfe:	dcf0      	bgt.n	800dde2 <_printf_float+0x42a>
 800de00:	e6fc      	b.n	800dbfc <_printf_float+0x244>
 800de02:	f04f 0800 	mov.w	r8, #0
 800de06:	f104 0919 	add.w	r9, r4, #25
 800de0a:	e7f4      	b.n	800ddf6 <_printf_float+0x43e>

0800de0c <_printf_common>:
 800de0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de10:	4616      	mov	r6, r2
 800de12:	4698      	mov	r8, r3
 800de14:	688a      	ldr	r2, [r1, #8]
 800de16:	690b      	ldr	r3, [r1, #16]
 800de18:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800de1c:	4293      	cmp	r3, r2
 800de1e:	bfb8      	it	lt
 800de20:	4613      	movlt	r3, r2
 800de22:	6033      	str	r3, [r6, #0]
 800de24:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800de28:	4607      	mov	r7, r0
 800de2a:	460c      	mov	r4, r1
 800de2c:	b10a      	cbz	r2, 800de32 <_printf_common+0x26>
 800de2e:	3301      	adds	r3, #1
 800de30:	6033      	str	r3, [r6, #0]
 800de32:	6823      	ldr	r3, [r4, #0]
 800de34:	0699      	lsls	r1, r3, #26
 800de36:	bf42      	ittt	mi
 800de38:	6833      	ldrmi	r3, [r6, #0]
 800de3a:	3302      	addmi	r3, #2
 800de3c:	6033      	strmi	r3, [r6, #0]
 800de3e:	6825      	ldr	r5, [r4, #0]
 800de40:	f015 0506 	ands.w	r5, r5, #6
 800de44:	d106      	bne.n	800de54 <_printf_common+0x48>
 800de46:	f104 0a19 	add.w	sl, r4, #25
 800de4a:	68e3      	ldr	r3, [r4, #12]
 800de4c:	6832      	ldr	r2, [r6, #0]
 800de4e:	1a9b      	subs	r3, r3, r2
 800de50:	42ab      	cmp	r3, r5
 800de52:	dc26      	bgt.n	800dea2 <_printf_common+0x96>
 800de54:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800de58:	6822      	ldr	r2, [r4, #0]
 800de5a:	3b00      	subs	r3, #0
 800de5c:	bf18      	it	ne
 800de5e:	2301      	movne	r3, #1
 800de60:	0692      	lsls	r2, r2, #26
 800de62:	d42b      	bmi.n	800debc <_printf_common+0xb0>
 800de64:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800de68:	4641      	mov	r1, r8
 800de6a:	4638      	mov	r0, r7
 800de6c:	47c8      	blx	r9
 800de6e:	3001      	adds	r0, #1
 800de70:	d01e      	beq.n	800deb0 <_printf_common+0xa4>
 800de72:	6823      	ldr	r3, [r4, #0]
 800de74:	6922      	ldr	r2, [r4, #16]
 800de76:	f003 0306 	and.w	r3, r3, #6
 800de7a:	2b04      	cmp	r3, #4
 800de7c:	bf02      	ittt	eq
 800de7e:	68e5      	ldreq	r5, [r4, #12]
 800de80:	6833      	ldreq	r3, [r6, #0]
 800de82:	1aed      	subeq	r5, r5, r3
 800de84:	68a3      	ldr	r3, [r4, #8]
 800de86:	bf0c      	ite	eq
 800de88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800de8c:	2500      	movne	r5, #0
 800de8e:	4293      	cmp	r3, r2
 800de90:	bfc4      	itt	gt
 800de92:	1a9b      	subgt	r3, r3, r2
 800de94:	18ed      	addgt	r5, r5, r3
 800de96:	2600      	movs	r6, #0
 800de98:	341a      	adds	r4, #26
 800de9a:	42b5      	cmp	r5, r6
 800de9c:	d11a      	bne.n	800ded4 <_printf_common+0xc8>
 800de9e:	2000      	movs	r0, #0
 800dea0:	e008      	b.n	800deb4 <_printf_common+0xa8>
 800dea2:	2301      	movs	r3, #1
 800dea4:	4652      	mov	r2, sl
 800dea6:	4641      	mov	r1, r8
 800dea8:	4638      	mov	r0, r7
 800deaa:	47c8      	blx	r9
 800deac:	3001      	adds	r0, #1
 800deae:	d103      	bne.n	800deb8 <_printf_common+0xac>
 800deb0:	f04f 30ff 	mov.w	r0, #4294967295
 800deb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800deb8:	3501      	adds	r5, #1
 800deba:	e7c6      	b.n	800de4a <_printf_common+0x3e>
 800debc:	18e1      	adds	r1, r4, r3
 800debe:	1c5a      	adds	r2, r3, #1
 800dec0:	2030      	movs	r0, #48	@ 0x30
 800dec2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800dec6:	4422      	add	r2, r4
 800dec8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800decc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ded0:	3302      	adds	r3, #2
 800ded2:	e7c7      	b.n	800de64 <_printf_common+0x58>
 800ded4:	2301      	movs	r3, #1
 800ded6:	4622      	mov	r2, r4
 800ded8:	4641      	mov	r1, r8
 800deda:	4638      	mov	r0, r7
 800dedc:	47c8      	blx	r9
 800dede:	3001      	adds	r0, #1
 800dee0:	d0e6      	beq.n	800deb0 <_printf_common+0xa4>
 800dee2:	3601      	adds	r6, #1
 800dee4:	e7d9      	b.n	800de9a <_printf_common+0x8e>
	...

0800dee8 <_printf_i>:
 800dee8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800deec:	7e0f      	ldrb	r7, [r1, #24]
 800deee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800def0:	2f78      	cmp	r7, #120	@ 0x78
 800def2:	4691      	mov	r9, r2
 800def4:	4680      	mov	r8, r0
 800def6:	460c      	mov	r4, r1
 800def8:	469a      	mov	sl, r3
 800defa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800defe:	d807      	bhi.n	800df10 <_printf_i+0x28>
 800df00:	2f62      	cmp	r7, #98	@ 0x62
 800df02:	d80a      	bhi.n	800df1a <_printf_i+0x32>
 800df04:	2f00      	cmp	r7, #0
 800df06:	f000 80d2 	beq.w	800e0ae <_printf_i+0x1c6>
 800df0a:	2f58      	cmp	r7, #88	@ 0x58
 800df0c:	f000 80b9 	beq.w	800e082 <_printf_i+0x19a>
 800df10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800df14:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800df18:	e03a      	b.n	800df90 <_printf_i+0xa8>
 800df1a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800df1e:	2b15      	cmp	r3, #21
 800df20:	d8f6      	bhi.n	800df10 <_printf_i+0x28>
 800df22:	a101      	add	r1, pc, #4	@ (adr r1, 800df28 <_printf_i+0x40>)
 800df24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800df28:	0800df81 	.word	0x0800df81
 800df2c:	0800df95 	.word	0x0800df95
 800df30:	0800df11 	.word	0x0800df11
 800df34:	0800df11 	.word	0x0800df11
 800df38:	0800df11 	.word	0x0800df11
 800df3c:	0800df11 	.word	0x0800df11
 800df40:	0800df95 	.word	0x0800df95
 800df44:	0800df11 	.word	0x0800df11
 800df48:	0800df11 	.word	0x0800df11
 800df4c:	0800df11 	.word	0x0800df11
 800df50:	0800df11 	.word	0x0800df11
 800df54:	0800e095 	.word	0x0800e095
 800df58:	0800dfbf 	.word	0x0800dfbf
 800df5c:	0800e04f 	.word	0x0800e04f
 800df60:	0800df11 	.word	0x0800df11
 800df64:	0800df11 	.word	0x0800df11
 800df68:	0800e0b7 	.word	0x0800e0b7
 800df6c:	0800df11 	.word	0x0800df11
 800df70:	0800dfbf 	.word	0x0800dfbf
 800df74:	0800df11 	.word	0x0800df11
 800df78:	0800df11 	.word	0x0800df11
 800df7c:	0800e057 	.word	0x0800e057
 800df80:	6833      	ldr	r3, [r6, #0]
 800df82:	1d1a      	adds	r2, r3, #4
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	6032      	str	r2, [r6, #0]
 800df88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800df8c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800df90:	2301      	movs	r3, #1
 800df92:	e09d      	b.n	800e0d0 <_printf_i+0x1e8>
 800df94:	6833      	ldr	r3, [r6, #0]
 800df96:	6820      	ldr	r0, [r4, #0]
 800df98:	1d19      	adds	r1, r3, #4
 800df9a:	6031      	str	r1, [r6, #0]
 800df9c:	0606      	lsls	r6, r0, #24
 800df9e:	d501      	bpl.n	800dfa4 <_printf_i+0xbc>
 800dfa0:	681d      	ldr	r5, [r3, #0]
 800dfa2:	e003      	b.n	800dfac <_printf_i+0xc4>
 800dfa4:	0645      	lsls	r5, r0, #25
 800dfa6:	d5fb      	bpl.n	800dfa0 <_printf_i+0xb8>
 800dfa8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800dfac:	2d00      	cmp	r5, #0
 800dfae:	da03      	bge.n	800dfb8 <_printf_i+0xd0>
 800dfb0:	232d      	movs	r3, #45	@ 0x2d
 800dfb2:	426d      	negs	r5, r5
 800dfb4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dfb8:	4859      	ldr	r0, [pc, #356]	@ (800e120 <_printf_i+0x238>)
 800dfba:	230a      	movs	r3, #10
 800dfbc:	e011      	b.n	800dfe2 <_printf_i+0xfa>
 800dfbe:	6821      	ldr	r1, [r4, #0]
 800dfc0:	6833      	ldr	r3, [r6, #0]
 800dfc2:	0608      	lsls	r0, r1, #24
 800dfc4:	f853 5b04 	ldr.w	r5, [r3], #4
 800dfc8:	d402      	bmi.n	800dfd0 <_printf_i+0xe8>
 800dfca:	0649      	lsls	r1, r1, #25
 800dfcc:	bf48      	it	mi
 800dfce:	b2ad      	uxthmi	r5, r5
 800dfd0:	2f6f      	cmp	r7, #111	@ 0x6f
 800dfd2:	4853      	ldr	r0, [pc, #332]	@ (800e120 <_printf_i+0x238>)
 800dfd4:	6033      	str	r3, [r6, #0]
 800dfd6:	bf14      	ite	ne
 800dfd8:	230a      	movne	r3, #10
 800dfda:	2308      	moveq	r3, #8
 800dfdc:	2100      	movs	r1, #0
 800dfde:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800dfe2:	6866      	ldr	r6, [r4, #4]
 800dfe4:	60a6      	str	r6, [r4, #8]
 800dfe6:	2e00      	cmp	r6, #0
 800dfe8:	bfa2      	ittt	ge
 800dfea:	6821      	ldrge	r1, [r4, #0]
 800dfec:	f021 0104 	bicge.w	r1, r1, #4
 800dff0:	6021      	strge	r1, [r4, #0]
 800dff2:	b90d      	cbnz	r5, 800dff8 <_printf_i+0x110>
 800dff4:	2e00      	cmp	r6, #0
 800dff6:	d04b      	beq.n	800e090 <_printf_i+0x1a8>
 800dff8:	4616      	mov	r6, r2
 800dffa:	fbb5 f1f3 	udiv	r1, r5, r3
 800dffe:	fb03 5711 	mls	r7, r3, r1, r5
 800e002:	5dc7      	ldrb	r7, [r0, r7]
 800e004:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e008:	462f      	mov	r7, r5
 800e00a:	42bb      	cmp	r3, r7
 800e00c:	460d      	mov	r5, r1
 800e00e:	d9f4      	bls.n	800dffa <_printf_i+0x112>
 800e010:	2b08      	cmp	r3, #8
 800e012:	d10b      	bne.n	800e02c <_printf_i+0x144>
 800e014:	6823      	ldr	r3, [r4, #0]
 800e016:	07df      	lsls	r7, r3, #31
 800e018:	d508      	bpl.n	800e02c <_printf_i+0x144>
 800e01a:	6923      	ldr	r3, [r4, #16]
 800e01c:	6861      	ldr	r1, [r4, #4]
 800e01e:	4299      	cmp	r1, r3
 800e020:	bfde      	ittt	le
 800e022:	2330      	movle	r3, #48	@ 0x30
 800e024:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e028:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e02c:	1b92      	subs	r2, r2, r6
 800e02e:	6122      	str	r2, [r4, #16]
 800e030:	f8cd a000 	str.w	sl, [sp]
 800e034:	464b      	mov	r3, r9
 800e036:	aa03      	add	r2, sp, #12
 800e038:	4621      	mov	r1, r4
 800e03a:	4640      	mov	r0, r8
 800e03c:	f7ff fee6 	bl	800de0c <_printf_common>
 800e040:	3001      	adds	r0, #1
 800e042:	d14a      	bne.n	800e0da <_printf_i+0x1f2>
 800e044:	f04f 30ff 	mov.w	r0, #4294967295
 800e048:	b004      	add	sp, #16
 800e04a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e04e:	6823      	ldr	r3, [r4, #0]
 800e050:	f043 0320 	orr.w	r3, r3, #32
 800e054:	6023      	str	r3, [r4, #0]
 800e056:	4833      	ldr	r0, [pc, #204]	@ (800e124 <_printf_i+0x23c>)
 800e058:	2778      	movs	r7, #120	@ 0x78
 800e05a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e05e:	6823      	ldr	r3, [r4, #0]
 800e060:	6831      	ldr	r1, [r6, #0]
 800e062:	061f      	lsls	r7, r3, #24
 800e064:	f851 5b04 	ldr.w	r5, [r1], #4
 800e068:	d402      	bmi.n	800e070 <_printf_i+0x188>
 800e06a:	065f      	lsls	r7, r3, #25
 800e06c:	bf48      	it	mi
 800e06e:	b2ad      	uxthmi	r5, r5
 800e070:	6031      	str	r1, [r6, #0]
 800e072:	07d9      	lsls	r1, r3, #31
 800e074:	bf44      	itt	mi
 800e076:	f043 0320 	orrmi.w	r3, r3, #32
 800e07a:	6023      	strmi	r3, [r4, #0]
 800e07c:	b11d      	cbz	r5, 800e086 <_printf_i+0x19e>
 800e07e:	2310      	movs	r3, #16
 800e080:	e7ac      	b.n	800dfdc <_printf_i+0xf4>
 800e082:	4827      	ldr	r0, [pc, #156]	@ (800e120 <_printf_i+0x238>)
 800e084:	e7e9      	b.n	800e05a <_printf_i+0x172>
 800e086:	6823      	ldr	r3, [r4, #0]
 800e088:	f023 0320 	bic.w	r3, r3, #32
 800e08c:	6023      	str	r3, [r4, #0]
 800e08e:	e7f6      	b.n	800e07e <_printf_i+0x196>
 800e090:	4616      	mov	r6, r2
 800e092:	e7bd      	b.n	800e010 <_printf_i+0x128>
 800e094:	6833      	ldr	r3, [r6, #0]
 800e096:	6825      	ldr	r5, [r4, #0]
 800e098:	6961      	ldr	r1, [r4, #20]
 800e09a:	1d18      	adds	r0, r3, #4
 800e09c:	6030      	str	r0, [r6, #0]
 800e09e:	062e      	lsls	r6, r5, #24
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	d501      	bpl.n	800e0a8 <_printf_i+0x1c0>
 800e0a4:	6019      	str	r1, [r3, #0]
 800e0a6:	e002      	b.n	800e0ae <_printf_i+0x1c6>
 800e0a8:	0668      	lsls	r0, r5, #25
 800e0aa:	d5fb      	bpl.n	800e0a4 <_printf_i+0x1bc>
 800e0ac:	8019      	strh	r1, [r3, #0]
 800e0ae:	2300      	movs	r3, #0
 800e0b0:	6123      	str	r3, [r4, #16]
 800e0b2:	4616      	mov	r6, r2
 800e0b4:	e7bc      	b.n	800e030 <_printf_i+0x148>
 800e0b6:	6833      	ldr	r3, [r6, #0]
 800e0b8:	1d1a      	adds	r2, r3, #4
 800e0ba:	6032      	str	r2, [r6, #0]
 800e0bc:	681e      	ldr	r6, [r3, #0]
 800e0be:	6862      	ldr	r2, [r4, #4]
 800e0c0:	2100      	movs	r1, #0
 800e0c2:	4630      	mov	r0, r6
 800e0c4:	f7f2 f85c 	bl	8000180 <memchr>
 800e0c8:	b108      	cbz	r0, 800e0ce <_printf_i+0x1e6>
 800e0ca:	1b80      	subs	r0, r0, r6
 800e0cc:	6060      	str	r0, [r4, #4]
 800e0ce:	6863      	ldr	r3, [r4, #4]
 800e0d0:	6123      	str	r3, [r4, #16]
 800e0d2:	2300      	movs	r3, #0
 800e0d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e0d8:	e7aa      	b.n	800e030 <_printf_i+0x148>
 800e0da:	6923      	ldr	r3, [r4, #16]
 800e0dc:	4632      	mov	r2, r6
 800e0de:	4649      	mov	r1, r9
 800e0e0:	4640      	mov	r0, r8
 800e0e2:	47d0      	blx	sl
 800e0e4:	3001      	adds	r0, #1
 800e0e6:	d0ad      	beq.n	800e044 <_printf_i+0x15c>
 800e0e8:	6823      	ldr	r3, [r4, #0]
 800e0ea:	079b      	lsls	r3, r3, #30
 800e0ec:	d413      	bmi.n	800e116 <_printf_i+0x22e>
 800e0ee:	68e0      	ldr	r0, [r4, #12]
 800e0f0:	9b03      	ldr	r3, [sp, #12]
 800e0f2:	4298      	cmp	r0, r3
 800e0f4:	bfb8      	it	lt
 800e0f6:	4618      	movlt	r0, r3
 800e0f8:	e7a6      	b.n	800e048 <_printf_i+0x160>
 800e0fa:	2301      	movs	r3, #1
 800e0fc:	4632      	mov	r2, r6
 800e0fe:	4649      	mov	r1, r9
 800e100:	4640      	mov	r0, r8
 800e102:	47d0      	blx	sl
 800e104:	3001      	adds	r0, #1
 800e106:	d09d      	beq.n	800e044 <_printf_i+0x15c>
 800e108:	3501      	adds	r5, #1
 800e10a:	68e3      	ldr	r3, [r4, #12]
 800e10c:	9903      	ldr	r1, [sp, #12]
 800e10e:	1a5b      	subs	r3, r3, r1
 800e110:	42ab      	cmp	r3, r5
 800e112:	dcf2      	bgt.n	800e0fa <_printf_i+0x212>
 800e114:	e7eb      	b.n	800e0ee <_printf_i+0x206>
 800e116:	2500      	movs	r5, #0
 800e118:	f104 0619 	add.w	r6, r4, #25
 800e11c:	e7f5      	b.n	800e10a <_printf_i+0x222>
 800e11e:	bf00      	nop
 800e120:	08013873 	.word	0x08013873
 800e124:	08013884 	.word	0x08013884

0800e128 <_scanf_float>:
 800e128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e12c:	b087      	sub	sp, #28
 800e12e:	4617      	mov	r7, r2
 800e130:	9303      	str	r3, [sp, #12]
 800e132:	688b      	ldr	r3, [r1, #8]
 800e134:	1e5a      	subs	r2, r3, #1
 800e136:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800e13a:	bf81      	itttt	hi
 800e13c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800e140:	eb03 0b05 	addhi.w	fp, r3, r5
 800e144:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800e148:	608b      	strhi	r3, [r1, #8]
 800e14a:	680b      	ldr	r3, [r1, #0]
 800e14c:	460a      	mov	r2, r1
 800e14e:	f04f 0500 	mov.w	r5, #0
 800e152:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800e156:	f842 3b1c 	str.w	r3, [r2], #28
 800e15a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800e15e:	4680      	mov	r8, r0
 800e160:	460c      	mov	r4, r1
 800e162:	bf98      	it	ls
 800e164:	f04f 0b00 	movls.w	fp, #0
 800e168:	9201      	str	r2, [sp, #4]
 800e16a:	4616      	mov	r6, r2
 800e16c:	46aa      	mov	sl, r5
 800e16e:	46a9      	mov	r9, r5
 800e170:	9502      	str	r5, [sp, #8]
 800e172:	68a2      	ldr	r2, [r4, #8]
 800e174:	b152      	cbz	r2, 800e18c <_scanf_float+0x64>
 800e176:	683b      	ldr	r3, [r7, #0]
 800e178:	781b      	ldrb	r3, [r3, #0]
 800e17a:	2b4e      	cmp	r3, #78	@ 0x4e
 800e17c:	d864      	bhi.n	800e248 <_scanf_float+0x120>
 800e17e:	2b40      	cmp	r3, #64	@ 0x40
 800e180:	d83c      	bhi.n	800e1fc <_scanf_float+0xd4>
 800e182:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800e186:	b2c8      	uxtb	r0, r1
 800e188:	280e      	cmp	r0, #14
 800e18a:	d93a      	bls.n	800e202 <_scanf_float+0xda>
 800e18c:	f1b9 0f00 	cmp.w	r9, #0
 800e190:	d003      	beq.n	800e19a <_scanf_float+0x72>
 800e192:	6823      	ldr	r3, [r4, #0]
 800e194:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e198:	6023      	str	r3, [r4, #0]
 800e19a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e19e:	f1ba 0f01 	cmp.w	sl, #1
 800e1a2:	f200 8117 	bhi.w	800e3d4 <_scanf_float+0x2ac>
 800e1a6:	9b01      	ldr	r3, [sp, #4]
 800e1a8:	429e      	cmp	r6, r3
 800e1aa:	f200 8108 	bhi.w	800e3be <_scanf_float+0x296>
 800e1ae:	2001      	movs	r0, #1
 800e1b0:	b007      	add	sp, #28
 800e1b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1b6:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800e1ba:	2a0d      	cmp	r2, #13
 800e1bc:	d8e6      	bhi.n	800e18c <_scanf_float+0x64>
 800e1be:	a101      	add	r1, pc, #4	@ (adr r1, 800e1c4 <_scanf_float+0x9c>)
 800e1c0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e1c4:	0800e30b 	.word	0x0800e30b
 800e1c8:	0800e18d 	.word	0x0800e18d
 800e1cc:	0800e18d 	.word	0x0800e18d
 800e1d0:	0800e18d 	.word	0x0800e18d
 800e1d4:	0800e36b 	.word	0x0800e36b
 800e1d8:	0800e343 	.word	0x0800e343
 800e1dc:	0800e18d 	.word	0x0800e18d
 800e1e0:	0800e18d 	.word	0x0800e18d
 800e1e4:	0800e319 	.word	0x0800e319
 800e1e8:	0800e18d 	.word	0x0800e18d
 800e1ec:	0800e18d 	.word	0x0800e18d
 800e1f0:	0800e18d 	.word	0x0800e18d
 800e1f4:	0800e18d 	.word	0x0800e18d
 800e1f8:	0800e2d1 	.word	0x0800e2d1
 800e1fc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800e200:	e7db      	b.n	800e1ba <_scanf_float+0x92>
 800e202:	290e      	cmp	r1, #14
 800e204:	d8c2      	bhi.n	800e18c <_scanf_float+0x64>
 800e206:	a001      	add	r0, pc, #4	@ (adr r0, 800e20c <_scanf_float+0xe4>)
 800e208:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800e20c:	0800e2c1 	.word	0x0800e2c1
 800e210:	0800e18d 	.word	0x0800e18d
 800e214:	0800e2c1 	.word	0x0800e2c1
 800e218:	0800e357 	.word	0x0800e357
 800e21c:	0800e18d 	.word	0x0800e18d
 800e220:	0800e269 	.word	0x0800e269
 800e224:	0800e2a7 	.word	0x0800e2a7
 800e228:	0800e2a7 	.word	0x0800e2a7
 800e22c:	0800e2a7 	.word	0x0800e2a7
 800e230:	0800e2a7 	.word	0x0800e2a7
 800e234:	0800e2a7 	.word	0x0800e2a7
 800e238:	0800e2a7 	.word	0x0800e2a7
 800e23c:	0800e2a7 	.word	0x0800e2a7
 800e240:	0800e2a7 	.word	0x0800e2a7
 800e244:	0800e2a7 	.word	0x0800e2a7
 800e248:	2b6e      	cmp	r3, #110	@ 0x6e
 800e24a:	d809      	bhi.n	800e260 <_scanf_float+0x138>
 800e24c:	2b60      	cmp	r3, #96	@ 0x60
 800e24e:	d8b2      	bhi.n	800e1b6 <_scanf_float+0x8e>
 800e250:	2b54      	cmp	r3, #84	@ 0x54
 800e252:	d07b      	beq.n	800e34c <_scanf_float+0x224>
 800e254:	2b59      	cmp	r3, #89	@ 0x59
 800e256:	d199      	bne.n	800e18c <_scanf_float+0x64>
 800e258:	2d07      	cmp	r5, #7
 800e25a:	d197      	bne.n	800e18c <_scanf_float+0x64>
 800e25c:	2508      	movs	r5, #8
 800e25e:	e02c      	b.n	800e2ba <_scanf_float+0x192>
 800e260:	2b74      	cmp	r3, #116	@ 0x74
 800e262:	d073      	beq.n	800e34c <_scanf_float+0x224>
 800e264:	2b79      	cmp	r3, #121	@ 0x79
 800e266:	e7f6      	b.n	800e256 <_scanf_float+0x12e>
 800e268:	6821      	ldr	r1, [r4, #0]
 800e26a:	05c8      	lsls	r0, r1, #23
 800e26c:	d51b      	bpl.n	800e2a6 <_scanf_float+0x17e>
 800e26e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800e272:	6021      	str	r1, [r4, #0]
 800e274:	f109 0901 	add.w	r9, r9, #1
 800e278:	f1bb 0f00 	cmp.w	fp, #0
 800e27c:	d003      	beq.n	800e286 <_scanf_float+0x15e>
 800e27e:	3201      	adds	r2, #1
 800e280:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e284:	60a2      	str	r2, [r4, #8]
 800e286:	68a3      	ldr	r3, [r4, #8]
 800e288:	3b01      	subs	r3, #1
 800e28a:	60a3      	str	r3, [r4, #8]
 800e28c:	6923      	ldr	r3, [r4, #16]
 800e28e:	3301      	adds	r3, #1
 800e290:	6123      	str	r3, [r4, #16]
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	3b01      	subs	r3, #1
 800e296:	2b00      	cmp	r3, #0
 800e298:	607b      	str	r3, [r7, #4]
 800e29a:	f340 8087 	ble.w	800e3ac <_scanf_float+0x284>
 800e29e:	683b      	ldr	r3, [r7, #0]
 800e2a0:	3301      	adds	r3, #1
 800e2a2:	603b      	str	r3, [r7, #0]
 800e2a4:	e765      	b.n	800e172 <_scanf_float+0x4a>
 800e2a6:	eb1a 0105 	adds.w	r1, sl, r5
 800e2aa:	f47f af6f 	bne.w	800e18c <_scanf_float+0x64>
 800e2ae:	6822      	ldr	r2, [r4, #0]
 800e2b0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800e2b4:	6022      	str	r2, [r4, #0]
 800e2b6:	460d      	mov	r5, r1
 800e2b8:	468a      	mov	sl, r1
 800e2ba:	f806 3b01 	strb.w	r3, [r6], #1
 800e2be:	e7e2      	b.n	800e286 <_scanf_float+0x15e>
 800e2c0:	6822      	ldr	r2, [r4, #0]
 800e2c2:	0610      	lsls	r0, r2, #24
 800e2c4:	f57f af62 	bpl.w	800e18c <_scanf_float+0x64>
 800e2c8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800e2cc:	6022      	str	r2, [r4, #0]
 800e2ce:	e7f4      	b.n	800e2ba <_scanf_float+0x192>
 800e2d0:	f1ba 0f00 	cmp.w	sl, #0
 800e2d4:	d10e      	bne.n	800e2f4 <_scanf_float+0x1cc>
 800e2d6:	f1b9 0f00 	cmp.w	r9, #0
 800e2da:	d10e      	bne.n	800e2fa <_scanf_float+0x1d2>
 800e2dc:	6822      	ldr	r2, [r4, #0]
 800e2de:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800e2e2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800e2e6:	d108      	bne.n	800e2fa <_scanf_float+0x1d2>
 800e2e8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e2ec:	6022      	str	r2, [r4, #0]
 800e2ee:	f04f 0a01 	mov.w	sl, #1
 800e2f2:	e7e2      	b.n	800e2ba <_scanf_float+0x192>
 800e2f4:	f1ba 0f02 	cmp.w	sl, #2
 800e2f8:	d055      	beq.n	800e3a6 <_scanf_float+0x27e>
 800e2fa:	2d01      	cmp	r5, #1
 800e2fc:	d002      	beq.n	800e304 <_scanf_float+0x1dc>
 800e2fe:	2d04      	cmp	r5, #4
 800e300:	f47f af44 	bne.w	800e18c <_scanf_float+0x64>
 800e304:	3501      	adds	r5, #1
 800e306:	b2ed      	uxtb	r5, r5
 800e308:	e7d7      	b.n	800e2ba <_scanf_float+0x192>
 800e30a:	f1ba 0f01 	cmp.w	sl, #1
 800e30e:	f47f af3d 	bne.w	800e18c <_scanf_float+0x64>
 800e312:	f04f 0a02 	mov.w	sl, #2
 800e316:	e7d0      	b.n	800e2ba <_scanf_float+0x192>
 800e318:	b97d      	cbnz	r5, 800e33a <_scanf_float+0x212>
 800e31a:	f1b9 0f00 	cmp.w	r9, #0
 800e31e:	f47f af38 	bne.w	800e192 <_scanf_float+0x6a>
 800e322:	6822      	ldr	r2, [r4, #0]
 800e324:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800e328:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800e32c:	f040 8108 	bne.w	800e540 <_scanf_float+0x418>
 800e330:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e334:	6022      	str	r2, [r4, #0]
 800e336:	2501      	movs	r5, #1
 800e338:	e7bf      	b.n	800e2ba <_scanf_float+0x192>
 800e33a:	2d03      	cmp	r5, #3
 800e33c:	d0e2      	beq.n	800e304 <_scanf_float+0x1dc>
 800e33e:	2d05      	cmp	r5, #5
 800e340:	e7de      	b.n	800e300 <_scanf_float+0x1d8>
 800e342:	2d02      	cmp	r5, #2
 800e344:	f47f af22 	bne.w	800e18c <_scanf_float+0x64>
 800e348:	2503      	movs	r5, #3
 800e34a:	e7b6      	b.n	800e2ba <_scanf_float+0x192>
 800e34c:	2d06      	cmp	r5, #6
 800e34e:	f47f af1d 	bne.w	800e18c <_scanf_float+0x64>
 800e352:	2507      	movs	r5, #7
 800e354:	e7b1      	b.n	800e2ba <_scanf_float+0x192>
 800e356:	6822      	ldr	r2, [r4, #0]
 800e358:	0591      	lsls	r1, r2, #22
 800e35a:	f57f af17 	bpl.w	800e18c <_scanf_float+0x64>
 800e35e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800e362:	6022      	str	r2, [r4, #0]
 800e364:	f8cd 9008 	str.w	r9, [sp, #8]
 800e368:	e7a7      	b.n	800e2ba <_scanf_float+0x192>
 800e36a:	6822      	ldr	r2, [r4, #0]
 800e36c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800e370:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800e374:	d006      	beq.n	800e384 <_scanf_float+0x25c>
 800e376:	0550      	lsls	r0, r2, #21
 800e378:	f57f af08 	bpl.w	800e18c <_scanf_float+0x64>
 800e37c:	f1b9 0f00 	cmp.w	r9, #0
 800e380:	f000 80de 	beq.w	800e540 <_scanf_float+0x418>
 800e384:	0591      	lsls	r1, r2, #22
 800e386:	bf58      	it	pl
 800e388:	9902      	ldrpl	r1, [sp, #8]
 800e38a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e38e:	bf58      	it	pl
 800e390:	eba9 0101 	subpl.w	r1, r9, r1
 800e394:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800e398:	bf58      	it	pl
 800e39a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800e39e:	6022      	str	r2, [r4, #0]
 800e3a0:	f04f 0900 	mov.w	r9, #0
 800e3a4:	e789      	b.n	800e2ba <_scanf_float+0x192>
 800e3a6:	f04f 0a03 	mov.w	sl, #3
 800e3aa:	e786      	b.n	800e2ba <_scanf_float+0x192>
 800e3ac:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800e3b0:	4639      	mov	r1, r7
 800e3b2:	4640      	mov	r0, r8
 800e3b4:	4798      	blx	r3
 800e3b6:	2800      	cmp	r0, #0
 800e3b8:	f43f aedb 	beq.w	800e172 <_scanf_float+0x4a>
 800e3bc:	e6e6      	b.n	800e18c <_scanf_float+0x64>
 800e3be:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e3c2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e3c6:	463a      	mov	r2, r7
 800e3c8:	4640      	mov	r0, r8
 800e3ca:	4798      	blx	r3
 800e3cc:	6923      	ldr	r3, [r4, #16]
 800e3ce:	3b01      	subs	r3, #1
 800e3d0:	6123      	str	r3, [r4, #16]
 800e3d2:	e6e8      	b.n	800e1a6 <_scanf_float+0x7e>
 800e3d4:	1e6b      	subs	r3, r5, #1
 800e3d6:	2b06      	cmp	r3, #6
 800e3d8:	d824      	bhi.n	800e424 <_scanf_float+0x2fc>
 800e3da:	2d02      	cmp	r5, #2
 800e3dc:	d836      	bhi.n	800e44c <_scanf_float+0x324>
 800e3de:	9b01      	ldr	r3, [sp, #4]
 800e3e0:	429e      	cmp	r6, r3
 800e3e2:	f67f aee4 	bls.w	800e1ae <_scanf_float+0x86>
 800e3e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e3ea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e3ee:	463a      	mov	r2, r7
 800e3f0:	4640      	mov	r0, r8
 800e3f2:	4798      	blx	r3
 800e3f4:	6923      	ldr	r3, [r4, #16]
 800e3f6:	3b01      	subs	r3, #1
 800e3f8:	6123      	str	r3, [r4, #16]
 800e3fa:	e7f0      	b.n	800e3de <_scanf_float+0x2b6>
 800e3fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e400:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800e404:	463a      	mov	r2, r7
 800e406:	4640      	mov	r0, r8
 800e408:	4798      	blx	r3
 800e40a:	6923      	ldr	r3, [r4, #16]
 800e40c:	3b01      	subs	r3, #1
 800e40e:	6123      	str	r3, [r4, #16]
 800e410:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e414:	fa5f fa8a 	uxtb.w	sl, sl
 800e418:	f1ba 0f02 	cmp.w	sl, #2
 800e41c:	d1ee      	bne.n	800e3fc <_scanf_float+0x2d4>
 800e41e:	3d03      	subs	r5, #3
 800e420:	b2ed      	uxtb	r5, r5
 800e422:	1b76      	subs	r6, r6, r5
 800e424:	6823      	ldr	r3, [r4, #0]
 800e426:	05da      	lsls	r2, r3, #23
 800e428:	d530      	bpl.n	800e48c <_scanf_float+0x364>
 800e42a:	055b      	lsls	r3, r3, #21
 800e42c:	d511      	bpl.n	800e452 <_scanf_float+0x32a>
 800e42e:	9b01      	ldr	r3, [sp, #4]
 800e430:	429e      	cmp	r6, r3
 800e432:	f67f aebc 	bls.w	800e1ae <_scanf_float+0x86>
 800e436:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e43a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e43e:	463a      	mov	r2, r7
 800e440:	4640      	mov	r0, r8
 800e442:	4798      	blx	r3
 800e444:	6923      	ldr	r3, [r4, #16]
 800e446:	3b01      	subs	r3, #1
 800e448:	6123      	str	r3, [r4, #16]
 800e44a:	e7f0      	b.n	800e42e <_scanf_float+0x306>
 800e44c:	46aa      	mov	sl, r5
 800e44e:	46b3      	mov	fp, r6
 800e450:	e7de      	b.n	800e410 <_scanf_float+0x2e8>
 800e452:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800e456:	6923      	ldr	r3, [r4, #16]
 800e458:	2965      	cmp	r1, #101	@ 0x65
 800e45a:	f103 33ff 	add.w	r3, r3, #4294967295
 800e45e:	f106 35ff 	add.w	r5, r6, #4294967295
 800e462:	6123      	str	r3, [r4, #16]
 800e464:	d00c      	beq.n	800e480 <_scanf_float+0x358>
 800e466:	2945      	cmp	r1, #69	@ 0x45
 800e468:	d00a      	beq.n	800e480 <_scanf_float+0x358>
 800e46a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e46e:	463a      	mov	r2, r7
 800e470:	4640      	mov	r0, r8
 800e472:	4798      	blx	r3
 800e474:	6923      	ldr	r3, [r4, #16]
 800e476:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800e47a:	3b01      	subs	r3, #1
 800e47c:	1eb5      	subs	r5, r6, #2
 800e47e:	6123      	str	r3, [r4, #16]
 800e480:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e484:	463a      	mov	r2, r7
 800e486:	4640      	mov	r0, r8
 800e488:	4798      	blx	r3
 800e48a:	462e      	mov	r6, r5
 800e48c:	6822      	ldr	r2, [r4, #0]
 800e48e:	f012 0210 	ands.w	r2, r2, #16
 800e492:	d001      	beq.n	800e498 <_scanf_float+0x370>
 800e494:	2000      	movs	r0, #0
 800e496:	e68b      	b.n	800e1b0 <_scanf_float+0x88>
 800e498:	7032      	strb	r2, [r6, #0]
 800e49a:	6823      	ldr	r3, [r4, #0]
 800e49c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800e4a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e4a4:	d11c      	bne.n	800e4e0 <_scanf_float+0x3b8>
 800e4a6:	9b02      	ldr	r3, [sp, #8]
 800e4a8:	454b      	cmp	r3, r9
 800e4aa:	eba3 0209 	sub.w	r2, r3, r9
 800e4ae:	d123      	bne.n	800e4f8 <_scanf_float+0x3d0>
 800e4b0:	9901      	ldr	r1, [sp, #4]
 800e4b2:	2200      	movs	r2, #0
 800e4b4:	4640      	mov	r0, r8
 800e4b6:	f002 fd27 	bl	8010f08 <_strtod_r>
 800e4ba:	9b03      	ldr	r3, [sp, #12]
 800e4bc:	6821      	ldr	r1, [r4, #0]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	f011 0f02 	tst.w	r1, #2
 800e4c4:	ec57 6b10 	vmov	r6, r7, d0
 800e4c8:	f103 0204 	add.w	r2, r3, #4
 800e4cc:	d01f      	beq.n	800e50e <_scanf_float+0x3e6>
 800e4ce:	9903      	ldr	r1, [sp, #12]
 800e4d0:	600a      	str	r2, [r1, #0]
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	e9c3 6700 	strd	r6, r7, [r3]
 800e4d8:	68e3      	ldr	r3, [r4, #12]
 800e4da:	3301      	adds	r3, #1
 800e4dc:	60e3      	str	r3, [r4, #12]
 800e4de:	e7d9      	b.n	800e494 <_scanf_float+0x36c>
 800e4e0:	9b04      	ldr	r3, [sp, #16]
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d0e4      	beq.n	800e4b0 <_scanf_float+0x388>
 800e4e6:	9905      	ldr	r1, [sp, #20]
 800e4e8:	230a      	movs	r3, #10
 800e4ea:	3101      	adds	r1, #1
 800e4ec:	4640      	mov	r0, r8
 800e4ee:	f002 fd8b 	bl	8011008 <_strtol_r>
 800e4f2:	9b04      	ldr	r3, [sp, #16]
 800e4f4:	9e05      	ldr	r6, [sp, #20]
 800e4f6:	1ac2      	subs	r2, r0, r3
 800e4f8:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800e4fc:	429e      	cmp	r6, r3
 800e4fe:	bf28      	it	cs
 800e500:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800e504:	4910      	ldr	r1, [pc, #64]	@ (800e548 <_scanf_float+0x420>)
 800e506:	4630      	mov	r0, r6
 800e508:	f000 f95c 	bl	800e7c4 <siprintf>
 800e50c:	e7d0      	b.n	800e4b0 <_scanf_float+0x388>
 800e50e:	f011 0f04 	tst.w	r1, #4
 800e512:	9903      	ldr	r1, [sp, #12]
 800e514:	600a      	str	r2, [r1, #0]
 800e516:	d1dc      	bne.n	800e4d2 <_scanf_float+0x3aa>
 800e518:	681d      	ldr	r5, [r3, #0]
 800e51a:	4632      	mov	r2, r6
 800e51c:	463b      	mov	r3, r7
 800e51e:	4630      	mov	r0, r6
 800e520:	4639      	mov	r1, r7
 800e522:	f7f2 fadb 	bl	8000adc <__aeabi_dcmpun>
 800e526:	b128      	cbz	r0, 800e534 <_scanf_float+0x40c>
 800e528:	4808      	ldr	r0, [pc, #32]	@ (800e54c <_scanf_float+0x424>)
 800e52a:	f000 fae7 	bl	800eafc <nanf>
 800e52e:	ed85 0a00 	vstr	s0, [r5]
 800e532:	e7d1      	b.n	800e4d8 <_scanf_float+0x3b0>
 800e534:	4630      	mov	r0, r6
 800e536:	4639      	mov	r1, r7
 800e538:	f7f2 fb2e 	bl	8000b98 <__aeabi_d2f>
 800e53c:	6028      	str	r0, [r5, #0]
 800e53e:	e7cb      	b.n	800e4d8 <_scanf_float+0x3b0>
 800e540:	f04f 0900 	mov.w	r9, #0
 800e544:	e629      	b.n	800e19a <_scanf_float+0x72>
 800e546:	bf00      	nop
 800e548:	08013895 	.word	0x08013895
 800e54c:	08013c2d 	.word	0x08013c2d

0800e550 <std>:
 800e550:	2300      	movs	r3, #0
 800e552:	b510      	push	{r4, lr}
 800e554:	4604      	mov	r4, r0
 800e556:	e9c0 3300 	strd	r3, r3, [r0]
 800e55a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e55e:	6083      	str	r3, [r0, #8]
 800e560:	8181      	strh	r1, [r0, #12]
 800e562:	6643      	str	r3, [r0, #100]	@ 0x64
 800e564:	81c2      	strh	r2, [r0, #14]
 800e566:	6183      	str	r3, [r0, #24]
 800e568:	4619      	mov	r1, r3
 800e56a:	2208      	movs	r2, #8
 800e56c:	305c      	adds	r0, #92	@ 0x5c
 800e56e:	f000 fa21 	bl	800e9b4 <memset>
 800e572:	4b0d      	ldr	r3, [pc, #52]	@ (800e5a8 <std+0x58>)
 800e574:	6263      	str	r3, [r4, #36]	@ 0x24
 800e576:	4b0d      	ldr	r3, [pc, #52]	@ (800e5ac <std+0x5c>)
 800e578:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e57a:	4b0d      	ldr	r3, [pc, #52]	@ (800e5b0 <std+0x60>)
 800e57c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e57e:	4b0d      	ldr	r3, [pc, #52]	@ (800e5b4 <std+0x64>)
 800e580:	6323      	str	r3, [r4, #48]	@ 0x30
 800e582:	4b0d      	ldr	r3, [pc, #52]	@ (800e5b8 <std+0x68>)
 800e584:	6224      	str	r4, [r4, #32]
 800e586:	429c      	cmp	r4, r3
 800e588:	d006      	beq.n	800e598 <std+0x48>
 800e58a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e58e:	4294      	cmp	r4, r2
 800e590:	d002      	beq.n	800e598 <std+0x48>
 800e592:	33d0      	adds	r3, #208	@ 0xd0
 800e594:	429c      	cmp	r4, r3
 800e596:	d105      	bne.n	800e5a4 <std+0x54>
 800e598:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e59c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e5a0:	f000 ba9a 	b.w	800ead8 <__retarget_lock_init_recursive>
 800e5a4:	bd10      	pop	{r4, pc}
 800e5a6:	bf00      	nop
 800e5a8:	0800e805 	.word	0x0800e805
 800e5ac:	0800e827 	.word	0x0800e827
 800e5b0:	0800e85f 	.word	0x0800e85f
 800e5b4:	0800e883 	.word	0x0800e883
 800e5b8:	20003634 	.word	0x20003634

0800e5bc <stdio_exit_handler>:
 800e5bc:	4a02      	ldr	r2, [pc, #8]	@ (800e5c8 <stdio_exit_handler+0xc>)
 800e5be:	4903      	ldr	r1, [pc, #12]	@ (800e5cc <stdio_exit_handler+0x10>)
 800e5c0:	4803      	ldr	r0, [pc, #12]	@ (800e5d0 <stdio_exit_handler+0x14>)
 800e5c2:	f000 b869 	b.w	800e698 <_fwalk_sglue>
 800e5c6:	bf00      	nop
 800e5c8:	20000030 	.word	0x20000030
 800e5cc:	08011649 	.word	0x08011649
 800e5d0:	20000040 	.word	0x20000040

0800e5d4 <cleanup_stdio>:
 800e5d4:	6841      	ldr	r1, [r0, #4]
 800e5d6:	4b0c      	ldr	r3, [pc, #48]	@ (800e608 <cleanup_stdio+0x34>)
 800e5d8:	4299      	cmp	r1, r3
 800e5da:	b510      	push	{r4, lr}
 800e5dc:	4604      	mov	r4, r0
 800e5de:	d001      	beq.n	800e5e4 <cleanup_stdio+0x10>
 800e5e0:	f003 f832 	bl	8011648 <_fflush_r>
 800e5e4:	68a1      	ldr	r1, [r4, #8]
 800e5e6:	4b09      	ldr	r3, [pc, #36]	@ (800e60c <cleanup_stdio+0x38>)
 800e5e8:	4299      	cmp	r1, r3
 800e5ea:	d002      	beq.n	800e5f2 <cleanup_stdio+0x1e>
 800e5ec:	4620      	mov	r0, r4
 800e5ee:	f003 f82b 	bl	8011648 <_fflush_r>
 800e5f2:	68e1      	ldr	r1, [r4, #12]
 800e5f4:	4b06      	ldr	r3, [pc, #24]	@ (800e610 <cleanup_stdio+0x3c>)
 800e5f6:	4299      	cmp	r1, r3
 800e5f8:	d004      	beq.n	800e604 <cleanup_stdio+0x30>
 800e5fa:	4620      	mov	r0, r4
 800e5fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e600:	f003 b822 	b.w	8011648 <_fflush_r>
 800e604:	bd10      	pop	{r4, pc}
 800e606:	bf00      	nop
 800e608:	20003634 	.word	0x20003634
 800e60c:	2000369c 	.word	0x2000369c
 800e610:	20003704 	.word	0x20003704

0800e614 <global_stdio_init.part.0>:
 800e614:	b510      	push	{r4, lr}
 800e616:	4b0b      	ldr	r3, [pc, #44]	@ (800e644 <global_stdio_init.part.0+0x30>)
 800e618:	4c0b      	ldr	r4, [pc, #44]	@ (800e648 <global_stdio_init.part.0+0x34>)
 800e61a:	4a0c      	ldr	r2, [pc, #48]	@ (800e64c <global_stdio_init.part.0+0x38>)
 800e61c:	601a      	str	r2, [r3, #0]
 800e61e:	4620      	mov	r0, r4
 800e620:	2200      	movs	r2, #0
 800e622:	2104      	movs	r1, #4
 800e624:	f7ff ff94 	bl	800e550 <std>
 800e628:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e62c:	2201      	movs	r2, #1
 800e62e:	2109      	movs	r1, #9
 800e630:	f7ff ff8e 	bl	800e550 <std>
 800e634:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e638:	2202      	movs	r2, #2
 800e63a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e63e:	2112      	movs	r1, #18
 800e640:	f7ff bf86 	b.w	800e550 <std>
 800e644:	2000376c 	.word	0x2000376c
 800e648:	20003634 	.word	0x20003634
 800e64c:	0800e5bd 	.word	0x0800e5bd

0800e650 <__sfp_lock_acquire>:
 800e650:	4801      	ldr	r0, [pc, #4]	@ (800e658 <__sfp_lock_acquire+0x8>)
 800e652:	f000 ba42 	b.w	800eada <__retarget_lock_acquire_recursive>
 800e656:	bf00      	nop
 800e658:	20003775 	.word	0x20003775

0800e65c <__sfp_lock_release>:
 800e65c:	4801      	ldr	r0, [pc, #4]	@ (800e664 <__sfp_lock_release+0x8>)
 800e65e:	f000 ba3d 	b.w	800eadc <__retarget_lock_release_recursive>
 800e662:	bf00      	nop
 800e664:	20003775 	.word	0x20003775

0800e668 <__sinit>:
 800e668:	b510      	push	{r4, lr}
 800e66a:	4604      	mov	r4, r0
 800e66c:	f7ff fff0 	bl	800e650 <__sfp_lock_acquire>
 800e670:	6a23      	ldr	r3, [r4, #32]
 800e672:	b11b      	cbz	r3, 800e67c <__sinit+0x14>
 800e674:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e678:	f7ff bff0 	b.w	800e65c <__sfp_lock_release>
 800e67c:	4b04      	ldr	r3, [pc, #16]	@ (800e690 <__sinit+0x28>)
 800e67e:	6223      	str	r3, [r4, #32]
 800e680:	4b04      	ldr	r3, [pc, #16]	@ (800e694 <__sinit+0x2c>)
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	2b00      	cmp	r3, #0
 800e686:	d1f5      	bne.n	800e674 <__sinit+0xc>
 800e688:	f7ff ffc4 	bl	800e614 <global_stdio_init.part.0>
 800e68c:	e7f2      	b.n	800e674 <__sinit+0xc>
 800e68e:	bf00      	nop
 800e690:	0800e5d5 	.word	0x0800e5d5
 800e694:	2000376c 	.word	0x2000376c

0800e698 <_fwalk_sglue>:
 800e698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e69c:	4607      	mov	r7, r0
 800e69e:	4688      	mov	r8, r1
 800e6a0:	4614      	mov	r4, r2
 800e6a2:	2600      	movs	r6, #0
 800e6a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e6a8:	f1b9 0901 	subs.w	r9, r9, #1
 800e6ac:	d505      	bpl.n	800e6ba <_fwalk_sglue+0x22>
 800e6ae:	6824      	ldr	r4, [r4, #0]
 800e6b0:	2c00      	cmp	r4, #0
 800e6b2:	d1f7      	bne.n	800e6a4 <_fwalk_sglue+0xc>
 800e6b4:	4630      	mov	r0, r6
 800e6b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e6ba:	89ab      	ldrh	r3, [r5, #12]
 800e6bc:	2b01      	cmp	r3, #1
 800e6be:	d907      	bls.n	800e6d0 <_fwalk_sglue+0x38>
 800e6c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e6c4:	3301      	adds	r3, #1
 800e6c6:	d003      	beq.n	800e6d0 <_fwalk_sglue+0x38>
 800e6c8:	4629      	mov	r1, r5
 800e6ca:	4638      	mov	r0, r7
 800e6cc:	47c0      	blx	r8
 800e6ce:	4306      	orrs	r6, r0
 800e6d0:	3568      	adds	r5, #104	@ 0x68
 800e6d2:	e7e9      	b.n	800e6a8 <_fwalk_sglue+0x10>

0800e6d4 <iprintf>:
 800e6d4:	b40f      	push	{r0, r1, r2, r3}
 800e6d6:	b507      	push	{r0, r1, r2, lr}
 800e6d8:	4906      	ldr	r1, [pc, #24]	@ (800e6f4 <iprintf+0x20>)
 800e6da:	ab04      	add	r3, sp, #16
 800e6dc:	6808      	ldr	r0, [r1, #0]
 800e6de:	f853 2b04 	ldr.w	r2, [r3], #4
 800e6e2:	6881      	ldr	r1, [r0, #8]
 800e6e4:	9301      	str	r3, [sp, #4]
 800e6e6:	f002 fe13 	bl	8011310 <_vfiprintf_r>
 800e6ea:	b003      	add	sp, #12
 800e6ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800e6f0:	b004      	add	sp, #16
 800e6f2:	4770      	bx	lr
 800e6f4:	2000003c 	.word	0x2000003c

0800e6f8 <putchar>:
 800e6f8:	4b02      	ldr	r3, [pc, #8]	@ (800e704 <putchar+0xc>)
 800e6fa:	4601      	mov	r1, r0
 800e6fc:	6818      	ldr	r0, [r3, #0]
 800e6fe:	6882      	ldr	r2, [r0, #8]
 800e700:	f003 b82c 	b.w	801175c <_putc_r>
 800e704:	2000003c 	.word	0x2000003c

0800e708 <_puts_r>:
 800e708:	6a03      	ldr	r3, [r0, #32]
 800e70a:	b570      	push	{r4, r5, r6, lr}
 800e70c:	6884      	ldr	r4, [r0, #8]
 800e70e:	4605      	mov	r5, r0
 800e710:	460e      	mov	r6, r1
 800e712:	b90b      	cbnz	r3, 800e718 <_puts_r+0x10>
 800e714:	f7ff ffa8 	bl	800e668 <__sinit>
 800e718:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e71a:	07db      	lsls	r3, r3, #31
 800e71c:	d405      	bmi.n	800e72a <_puts_r+0x22>
 800e71e:	89a3      	ldrh	r3, [r4, #12]
 800e720:	0598      	lsls	r0, r3, #22
 800e722:	d402      	bmi.n	800e72a <_puts_r+0x22>
 800e724:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e726:	f000 f9d8 	bl	800eada <__retarget_lock_acquire_recursive>
 800e72a:	89a3      	ldrh	r3, [r4, #12]
 800e72c:	0719      	lsls	r1, r3, #28
 800e72e:	d502      	bpl.n	800e736 <_puts_r+0x2e>
 800e730:	6923      	ldr	r3, [r4, #16]
 800e732:	2b00      	cmp	r3, #0
 800e734:	d135      	bne.n	800e7a2 <_puts_r+0x9a>
 800e736:	4621      	mov	r1, r4
 800e738:	4628      	mov	r0, r5
 800e73a:	f000 f8e5 	bl	800e908 <__swsetup_r>
 800e73e:	b380      	cbz	r0, 800e7a2 <_puts_r+0x9a>
 800e740:	f04f 35ff 	mov.w	r5, #4294967295
 800e744:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e746:	07da      	lsls	r2, r3, #31
 800e748:	d405      	bmi.n	800e756 <_puts_r+0x4e>
 800e74a:	89a3      	ldrh	r3, [r4, #12]
 800e74c:	059b      	lsls	r3, r3, #22
 800e74e:	d402      	bmi.n	800e756 <_puts_r+0x4e>
 800e750:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e752:	f000 f9c3 	bl	800eadc <__retarget_lock_release_recursive>
 800e756:	4628      	mov	r0, r5
 800e758:	bd70      	pop	{r4, r5, r6, pc}
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	da04      	bge.n	800e768 <_puts_r+0x60>
 800e75e:	69a2      	ldr	r2, [r4, #24]
 800e760:	429a      	cmp	r2, r3
 800e762:	dc17      	bgt.n	800e794 <_puts_r+0x8c>
 800e764:	290a      	cmp	r1, #10
 800e766:	d015      	beq.n	800e794 <_puts_r+0x8c>
 800e768:	6823      	ldr	r3, [r4, #0]
 800e76a:	1c5a      	adds	r2, r3, #1
 800e76c:	6022      	str	r2, [r4, #0]
 800e76e:	7019      	strb	r1, [r3, #0]
 800e770:	68a3      	ldr	r3, [r4, #8]
 800e772:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e776:	3b01      	subs	r3, #1
 800e778:	60a3      	str	r3, [r4, #8]
 800e77a:	2900      	cmp	r1, #0
 800e77c:	d1ed      	bne.n	800e75a <_puts_r+0x52>
 800e77e:	2b00      	cmp	r3, #0
 800e780:	da11      	bge.n	800e7a6 <_puts_r+0x9e>
 800e782:	4622      	mov	r2, r4
 800e784:	210a      	movs	r1, #10
 800e786:	4628      	mov	r0, r5
 800e788:	f000 f87f 	bl	800e88a <__swbuf_r>
 800e78c:	3001      	adds	r0, #1
 800e78e:	d0d7      	beq.n	800e740 <_puts_r+0x38>
 800e790:	250a      	movs	r5, #10
 800e792:	e7d7      	b.n	800e744 <_puts_r+0x3c>
 800e794:	4622      	mov	r2, r4
 800e796:	4628      	mov	r0, r5
 800e798:	f000 f877 	bl	800e88a <__swbuf_r>
 800e79c:	3001      	adds	r0, #1
 800e79e:	d1e7      	bne.n	800e770 <_puts_r+0x68>
 800e7a0:	e7ce      	b.n	800e740 <_puts_r+0x38>
 800e7a2:	3e01      	subs	r6, #1
 800e7a4:	e7e4      	b.n	800e770 <_puts_r+0x68>
 800e7a6:	6823      	ldr	r3, [r4, #0]
 800e7a8:	1c5a      	adds	r2, r3, #1
 800e7aa:	6022      	str	r2, [r4, #0]
 800e7ac:	220a      	movs	r2, #10
 800e7ae:	701a      	strb	r2, [r3, #0]
 800e7b0:	e7ee      	b.n	800e790 <_puts_r+0x88>
	...

0800e7b4 <puts>:
 800e7b4:	4b02      	ldr	r3, [pc, #8]	@ (800e7c0 <puts+0xc>)
 800e7b6:	4601      	mov	r1, r0
 800e7b8:	6818      	ldr	r0, [r3, #0]
 800e7ba:	f7ff bfa5 	b.w	800e708 <_puts_r>
 800e7be:	bf00      	nop
 800e7c0:	2000003c 	.word	0x2000003c

0800e7c4 <siprintf>:
 800e7c4:	b40e      	push	{r1, r2, r3}
 800e7c6:	b500      	push	{lr}
 800e7c8:	b09c      	sub	sp, #112	@ 0x70
 800e7ca:	ab1d      	add	r3, sp, #116	@ 0x74
 800e7cc:	9002      	str	r0, [sp, #8]
 800e7ce:	9006      	str	r0, [sp, #24]
 800e7d0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e7d4:	4809      	ldr	r0, [pc, #36]	@ (800e7fc <siprintf+0x38>)
 800e7d6:	9107      	str	r1, [sp, #28]
 800e7d8:	9104      	str	r1, [sp, #16]
 800e7da:	4909      	ldr	r1, [pc, #36]	@ (800e800 <siprintf+0x3c>)
 800e7dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800e7e0:	9105      	str	r1, [sp, #20]
 800e7e2:	6800      	ldr	r0, [r0, #0]
 800e7e4:	9301      	str	r3, [sp, #4]
 800e7e6:	a902      	add	r1, sp, #8
 800e7e8:	f002 fc6c 	bl	80110c4 <_svfiprintf_r>
 800e7ec:	9b02      	ldr	r3, [sp, #8]
 800e7ee:	2200      	movs	r2, #0
 800e7f0:	701a      	strb	r2, [r3, #0]
 800e7f2:	b01c      	add	sp, #112	@ 0x70
 800e7f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800e7f8:	b003      	add	sp, #12
 800e7fa:	4770      	bx	lr
 800e7fc:	2000003c 	.word	0x2000003c
 800e800:	ffff0208 	.word	0xffff0208

0800e804 <__sread>:
 800e804:	b510      	push	{r4, lr}
 800e806:	460c      	mov	r4, r1
 800e808:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e80c:	f000 f916 	bl	800ea3c <_read_r>
 800e810:	2800      	cmp	r0, #0
 800e812:	bfab      	itete	ge
 800e814:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e816:	89a3      	ldrhlt	r3, [r4, #12]
 800e818:	181b      	addge	r3, r3, r0
 800e81a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e81e:	bfac      	ite	ge
 800e820:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e822:	81a3      	strhlt	r3, [r4, #12]
 800e824:	bd10      	pop	{r4, pc}

0800e826 <__swrite>:
 800e826:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e82a:	461f      	mov	r7, r3
 800e82c:	898b      	ldrh	r3, [r1, #12]
 800e82e:	05db      	lsls	r3, r3, #23
 800e830:	4605      	mov	r5, r0
 800e832:	460c      	mov	r4, r1
 800e834:	4616      	mov	r6, r2
 800e836:	d505      	bpl.n	800e844 <__swrite+0x1e>
 800e838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e83c:	2302      	movs	r3, #2
 800e83e:	2200      	movs	r2, #0
 800e840:	f000 f8ea 	bl	800ea18 <_lseek_r>
 800e844:	89a3      	ldrh	r3, [r4, #12]
 800e846:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e84a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e84e:	81a3      	strh	r3, [r4, #12]
 800e850:	4632      	mov	r2, r6
 800e852:	463b      	mov	r3, r7
 800e854:	4628      	mov	r0, r5
 800e856:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e85a:	f000 b901 	b.w	800ea60 <_write_r>

0800e85e <__sseek>:
 800e85e:	b510      	push	{r4, lr}
 800e860:	460c      	mov	r4, r1
 800e862:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e866:	f000 f8d7 	bl	800ea18 <_lseek_r>
 800e86a:	1c43      	adds	r3, r0, #1
 800e86c:	89a3      	ldrh	r3, [r4, #12]
 800e86e:	bf15      	itete	ne
 800e870:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e872:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e876:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e87a:	81a3      	strheq	r3, [r4, #12]
 800e87c:	bf18      	it	ne
 800e87e:	81a3      	strhne	r3, [r4, #12]
 800e880:	bd10      	pop	{r4, pc}

0800e882 <__sclose>:
 800e882:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e886:	f000 b8b7 	b.w	800e9f8 <_close_r>

0800e88a <__swbuf_r>:
 800e88a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e88c:	460e      	mov	r6, r1
 800e88e:	4614      	mov	r4, r2
 800e890:	4605      	mov	r5, r0
 800e892:	b118      	cbz	r0, 800e89c <__swbuf_r+0x12>
 800e894:	6a03      	ldr	r3, [r0, #32]
 800e896:	b90b      	cbnz	r3, 800e89c <__swbuf_r+0x12>
 800e898:	f7ff fee6 	bl	800e668 <__sinit>
 800e89c:	69a3      	ldr	r3, [r4, #24]
 800e89e:	60a3      	str	r3, [r4, #8]
 800e8a0:	89a3      	ldrh	r3, [r4, #12]
 800e8a2:	071a      	lsls	r2, r3, #28
 800e8a4:	d501      	bpl.n	800e8aa <__swbuf_r+0x20>
 800e8a6:	6923      	ldr	r3, [r4, #16]
 800e8a8:	b943      	cbnz	r3, 800e8bc <__swbuf_r+0x32>
 800e8aa:	4621      	mov	r1, r4
 800e8ac:	4628      	mov	r0, r5
 800e8ae:	f000 f82b 	bl	800e908 <__swsetup_r>
 800e8b2:	b118      	cbz	r0, 800e8bc <__swbuf_r+0x32>
 800e8b4:	f04f 37ff 	mov.w	r7, #4294967295
 800e8b8:	4638      	mov	r0, r7
 800e8ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e8bc:	6823      	ldr	r3, [r4, #0]
 800e8be:	6922      	ldr	r2, [r4, #16]
 800e8c0:	1a98      	subs	r0, r3, r2
 800e8c2:	6963      	ldr	r3, [r4, #20]
 800e8c4:	b2f6      	uxtb	r6, r6
 800e8c6:	4283      	cmp	r3, r0
 800e8c8:	4637      	mov	r7, r6
 800e8ca:	dc05      	bgt.n	800e8d8 <__swbuf_r+0x4e>
 800e8cc:	4621      	mov	r1, r4
 800e8ce:	4628      	mov	r0, r5
 800e8d0:	f002 feba 	bl	8011648 <_fflush_r>
 800e8d4:	2800      	cmp	r0, #0
 800e8d6:	d1ed      	bne.n	800e8b4 <__swbuf_r+0x2a>
 800e8d8:	68a3      	ldr	r3, [r4, #8]
 800e8da:	3b01      	subs	r3, #1
 800e8dc:	60a3      	str	r3, [r4, #8]
 800e8de:	6823      	ldr	r3, [r4, #0]
 800e8e0:	1c5a      	adds	r2, r3, #1
 800e8e2:	6022      	str	r2, [r4, #0]
 800e8e4:	701e      	strb	r6, [r3, #0]
 800e8e6:	6962      	ldr	r2, [r4, #20]
 800e8e8:	1c43      	adds	r3, r0, #1
 800e8ea:	429a      	cmp	r2, r3
 800e8ec:	d004      	beq.n	800e8f8 <__swbuf_r+0x6e>
 800e8ee:	89a3      	ldrh	r3, [r4, #12]
 800e8f0:	07db      	lsls	r3, r3, #31
 800e8f2:	d5e1      	bpl.n	800e8b8 <__swbuf_r+0x2e>
 800e8f4:	2e0a      	cmp	r6, #10
 800e8f6:	d1df      	bne.n	800e8b8 <__swbuf_r+0x2e>
 800e8f8:	4621      	mov	r1, r4
 800e8fa:	4628      	mov	r0, r5
 800e8fc:	f002 fea4 	bl	8011648 <_fflush_r>
 800e900:	2800      	cmp	r0, #0
 800e902:	d0d9      	beq.n	800e8b8 <__swbuf_r+0x2e>
 800e904:	e7d6      	b.n	800e8b4 <__swbuf_r+0x2a>
	...

0800e908 <__swsetup_r>:
 800e908:	b538      	push	{r3, r4, r5, lr}
 800e90a:	4b29      	ldr	r3, [pc, #164]	@ (800e9b0 <__swsetup_r+0xa8>)
 800e90c:	4605      	mov	r5, r0
 800e90e:	6818      	ldr	r0, [r3, #0]
 800e910:	460c      	mov	r4, r1
 800e912:	b118      	cbz	r0, 800e91c <__swsetup_r+0x14>
 800e914:	6a03      	ldr	r3, [r0, #32]
 800e916:	b90b      	cbnz	r3, 800e91c <__swsetup_r+0x14>
 800e918:	f7ff fea6 	bl	800e668 <__sinit>
 800e91c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e920:	0719      	lsls	r1, r3, #28
 800e922:	d422      	bmi.n	800e96a <__swsetup_r+0x62>
 800e924:	06da      	lsls	r2, r3, #27
 800e926:	d407      	bmi.n	800e938 <__swsetup_r+0x30>
 800e928:	2209      	movs	r2, #9
 800e92a:	602a      	str	r2, [r5, #0]
 800e92c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e930:	81a3      	strh	r3, [r4, #12]
 800e932:	f04f 30ff 	mov.w	r0, #4294967295
 800e936:	e033      	b.n	800e9a0 <__swsetup_r+0x98>
 800e938:	0758      	lsls	r0, r3, #29
 800e93a:	d512      	bpl.n	800e962 <__swsetup_r+0x5a>
 800e93c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e93e:	b141      	cbz	r1, 800e952 <__swsetup_r+0x4a>
 800e940:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e944:	4299      	cmp	r1, r3
 800e946:	d002      	beq.n	800e94e <__swsetup_r+0x46>
 800e948:	4628      	mov	r0, r5
 800e94a:	f000 ff29 	bl	800f7a0 <_free_r>
 800e94e:	2300      	movs	r3, #0
 800e950:	6363      	str	r3, [r4, #52]	@ 0x34
 800e952:	89a3      	ldrh	r3, [r4, #12]
 800e954:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e958:	81a3      	strh	r3, [r4, #12]
 800e95a:	2300      	movs	r3, #0
 800e95c:	6063      	str	r3, [r4, #4]
 800e95e:	6923      	ldr	r3, [r4, #16]
 800e960:	6023      	str	r3, [r4, #0]
 800e962:	89a3      	ldrh	r3, [r4, #12]
 800e964:	f043 0308 	orr.w	r3, r3, #8
 800e968:	81a3      	strh	r3, [r4, #12]
 800e96a:	6923      	ldr	r3, [r4, #16]
 800e96c:	b94b      	cbnz	r3, 800e982 <__swsetup_r+0x7a>
 800e96e:	89a3      	ldrh	r3, [r4, #12]
 800e970:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e974:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e978:	d003      	beq.n	800e982 <__swsetup_r+0x7a>
 800e97a:	4621      	mov	r1, r4
 800e97c:	4628      	mov	r0, r5
 800e97e:	f002 feb1 	bl	80116e4 <__smakebuf_r>
 800e982:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e986:	f013 0201 	ands.w	r2, r3, #1
 800e98a:	d00a      	beq.n	800e9a2 <__swsetup_r+0x9a>
 800e98c:	2200      	movs	r2, #0
 800e98e:	60a2      	str	r2, [r4, #8]
 800e990:	6962      	ldr	r2, [r4, #20]
 800e992:	4252      	negs	r2, r2
 800e994:	61a2      	str	r2, [r4, #24]
 800e996:	6922      	ldr	r2, [r4, #16]
 800e998:	b942      	cbnz	r2, 800e9ac <__swsetup_r+0xa4>
 800e99a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e99e:	d1c5      	bne.n	800e92c <__swsetup_r+0x24>
 800e9a0:	bd38      	pop	{r3, r4, r5, pc}
 800e9a2:	0799      	lsls	r1, r3, #30
 800e9a4:	bf58      	it	pl
 800e9a6:	6962      	ldrpl	r2, [r4, #20]
 800e9a8:	60a2      	str	r2, [r4, #8]
 800e9aa:	e7f4      	b.n	800e996 <__swsetup_r+0x8e>
 800e9ac:	2000      	movs	r0, #0
 800e9ae:	e7f7      	b.n	800e9a0 <__swsetup_r+0x98>
 800e9b0:	2000003c 	.word	0x2000003c

0800e9b4 <memset>:
 800e9b4:	4402      	add	r2, r0
 800e9b6:	4603      	mov	r3, r0
 800e9b8:	4293      	cmp	r3, r2
 800e9ba:	d100      	bne.n	800e9be <memset+0xa>
 800e9bc:	4770      	bx	lr
 800e9be:	f803 1b01 	strb.w	r1, [r3], #1
 800e9c2:	e7f9      	b.n	800e9b8 <memset+0x4>

0800e9c4 <strrchr>:
 800e9c4:	b538      	push	{r3, r4, r5, lr}
 800e9c6:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 800e9ca:	4603      	mov	r3, r0
 800e9cc:	d10e      	bne.n	800e9ec <strrchr+0x28>
 800e9ce:	4621      	mov	r1, r4
 800e9d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e9d4:	f002 bf10 	b.w	80117f8 <strchr>
 800e9d8:	1c43      	adds	r3, r0, #1
 800e9da:	4605      	mov	r5, r0
 800e9dc:	4621      	mov	r1, r4
 800e9de:	4618      	mov	r0, r3
 800e9e0:	f002 ff0a 	bl	80117f8 <strchr>
 800e9e4:	2800      	cmp	r0, #0
 800e9e6:	d1f7      	bne.n	800e9d8 <strrchr+0x14>
 800e9e8:	4628      	mov	r0, r5
 800e9ea:	bd38      	pop	{r3, r4, r5, pc}
 800e9ec:	2500      	movs	r5, #0
 800e9ee:	e7f5      	b.n	800e9dc <strrchr+0x18>

0800e9f0 <_localeconv_r>:
 800e9f0:	4800      	ldr	r0, [pc, #0]	@ (800e9f4 <_localeconv_r+0x4>)
 800e9f2:	4770      	bx	lr
 800e9f4:	2000017c 	.word	0x2000017c

0800e9f8 <_close_r>:
 800e9f8:	b538      	push	{r3, r4, r5, lr}
 800e9fa:	4d06      	ldr	r5, [pc, #24]	@ (800ea14 <_close_r+0x1c>)
 800e9fc:	2300      	movs	r3, #0
 800e9fe:	4604      	mov	r4, r0
 800ea00:	4608      	mov	r0, r1
 800ea02:	602b      	str	r3, [r5, #0]
 800ea04:	f7f4 feac 	bl	8003760 <_close>
 800ea08:	1c43      	adds	r3, r0, #1
 800ea0a:	d102      	bne.n	800ea12 <_close_r+0x1a>
 800ea0c:	682b      	ldr	r3, [r5, #0]
 800ea0e:	b103      	cbz	r3, 800ea12 <_close_r+0x1a>
 800ea10:	6023      	str	r3, [r4, #0]
 800ea12:	bd38      	pop	{r3, r4, r5, pc}
 800ea14:	20003770 	.word	0x20003770

0800ea18 <_lseek_r>:
 800ea18:	b538      	push	{r3, r4, r5, lr}
 800ea1a:	4d07      	ldr	r5, [pc, #28]	@ (800ea38 <_lseek_r+0x20>)
 800ea1c:	4604      	mov	r4, r0
 800ea1e:	4608      	mov	r0, r1
 800ea20:	4611      	mov	r1, r2
 800ea22:	2200      	movs	r2, #0
 800ea24:	602a      	str	r2, [r5, #0]
 800ea26:	461a      	mov	r2, r3
 800ea28:	f7f4 fec1 	bl	80037ae <_lseek>
 800ea2c:	1c43      	adds	r3, r0, #1
 800ea2e:	d102      	bne.n	800ea36 <_lseek_r+0x1e>
 800ea30:	682b      	ldr	r3, [r5, #0]
 800ea32:	b103      	cbz	r3, 800ea36 <_lseek_r+0x1e>
 800ea34:	6023      	str	r3, [r4, #0]
 800ea36:	bd38      	pop	{r3, r4, r5, pc}
 800ea38:	20003770 	.word	0x20003770

0800ea3c <_read_r>:
 800ea3c:	b538      	push	{r3, r4, r5, lr}
 800ea3e:	4d07      	ldr	r5, [pc, #28]	@ (800ea5c <_read_r+0x20>)
 800ea40:	4604      	mov	r4, r0
 800ea42:	4608      	mov	r0, r1
 800ea44:	4611      	mov	r1, r2
 800ea46:	2200      	movs	r2, #0
 800ea48:	602a      	str	r2, [r5, #0]
 800ea4a:	461a      	mov	r2, r3
 800ea4c:	f7f4 fe6b 	bl	8003726 <_read>
 800ea50:	1c43      	adds	r3, r0, #1
 800ea52:	d102      	bne.n	800ea5a <_read_r+0x1e>
 800ea54:	682b      	ldr	r3, [r5, #0]
 800ea56:	b103      	cbz	r3, 800ea5a <_read_r+0x1e>
 800ea58:	6023      	str	r3, [r4, #0]
 800ea5a:	bd38      	pop	{r3, r4, r5, pc}
 800ea5c:	20003770 	.word	0x20003770

0800ea60 <_write_r>:
 800ea60:	b538      	push	{r3, r4, r5, lr}
 800ea62:	4d07      	ldr	r5, [pc, #28]	@ (800ea80 <_write_r+0x20>)
 800ea64:	4604      	mov	r4, r0
 800ea66:	4608      	mov	r0, r1
 800ea68:	4611      	mov	r1, r2
 800ea6a:	2200      	movs	r2, #0
 800ea6c:	602a      	str	r2, [r5, #0]
 800ea6e:	461a      	mov	r2, r3
 800ea70:	f7fc fb66 	bl	800b140 <_write>
 800ea74:	1c43      	adds	r3, r0, #1
 800ea76:	d102      	bne.n	800ea7e <_write_r+0x1e>
 800ea78:	682b      	ldr	r3, [r5, #0]
 800ea7a:	b103      	cbz	r3, 800ea7e <_write_r+0x1e>
 800ea7c:	6023      	str	r3, [r4, #0]
 800ea7e:	bd38      	pop	{r3, r4, r5, pc}
 800ea80:	20003770 	.word	0x20003770

0800ea84 <__errno>:
 800ea84:	4b01      	ldr	r3, [pc, #4]	@ (800ea8c <__errno+0x8>)
 800ea86:	6818      	ldr	r0, [r3, #0]
 800ea88:	4770      	bx	lr
 800ea8a:	bf00      	nop
 800ea8c:	2000003c 	.word	0x2000003c

0800ea90 <__libc_init_array>:
 800ea90:	b570      	push	{r4, r5, r6, lr}
 800ea92:	4d0d      	ldr	r5, [pc, #52]	@ (800eac8 <__libc_init_array+0x38>)
 800ea94:	4c0d      	ldr	r4, [pc, #52]	@ (800eacc <__libc_init_array+0x3c>)
 800ea96:	1b64      	subs	r4, r4, r5
 800ea98:	10a4      	asrs	r4, r4, #2
 800ea9a:	2600      	movs	r6, #0
 800ea9c:	42a6      	cmp	r6, r4
 800ea9e:	d109      	bne.n	800eab4 <__libc_init_array+0x24>
 800eaa0:	4d0b      	ldr	r5, [pc, #44]	@ (800ead0 <__libc_init_array+0x40>)
 800eaa2:	4c0c      	ldr	r4, [pc, #48]	@ (800ead4 <__libc_init_array+0x44>)
 800eaa4:	f003 fb22 	bl	80120ec <_init>
 800eaa8:	1b64      	subs	r4, r4, r5
 800eaaa:	10a4      	asrs	r4, r4, #2
 800eaac:	2600      	movs	r6, #0
 800eaae:	42a6      	cmp	r6, r4
 800eab0:	d105      	bne.n	800eabe <__libc_init_array+0x2e>
 800eab2:	bd70      	pop	{r4, r5, r6, pc}
 800eab4:	f855 3b04 	ldr.w	r3, [r5], #4
 800eab8:	4798      	blx	r3
 800eaba:	3601      	adds	r6, #1
 800eabc:	e7ee      	b.n	800ea9c <__libc_init_array+0xc>
 800eabe:	f855 3b04 	ldr.w	r3, [r5], #4
 800eac2:	4798      	blx	r3
 800eac4:	3601      	adds	r6, #1
 800eac6:	e7f2      	b.n	800eaae <__libc_init_array+0x1e>
 800eac8:	08013c98 	.word	0x08013c98
 800eacc:	08013c98 	.word	0x08013c98
 800ead0:	08013c98 	.word	0x08013c98
 800ead4:	08013c9c 	.word	0x08013c9c

0800ead8 <__retarget_lock_init_recursive>:
 800ead8:	4770      	bx	lr

0800eada <__retarget_lock_acquire_recursive>:
 800eada:	4770      	bx	lr

0800eadc <__retarget_lock_release_recursive>:
 800eadc:	4770      	bx	lr

0800eade <memcpy>:
 800eade:	440a      	add	r2, r1
 800eae0:	4291      	cmp	r1, r2
 800eae2:	f100 33ff 	add.w	r3, r0, #4294967295
 800eae6:	d100      	bne.n	800eaea <memcpy+0xc>
 800eae8:	4770      	bx	lr
 800eaea:	b510      	push	{r4, lr}
 800eaec:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eaf0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eaf4:	4291      	cmp	r1, r2
 800eaf6:	d1f9      	bne.n	800eaec <memcpy+0xe>
 800eaf8:	bd10      	pop	{r4, pc}
	...

0800eafc <nanf>:
 800eafc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800eb04 <nanf+0x8>
 800eb00:	4770      	bx	lr
 800eb02:	bf00      	nop
 800eb04:	7fc00000 	.word	0x7fc00000

0800eb08 <quorem>:
 800eb08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb0c:	6903      	ldr	r3, [r0, #16]
 800eb0e:	690c      	ldr	r4, [r1, #16]
 800eb10:	42a3      	cmp	r3, r4
 800eb12:	4607      	mov	r7, r0
 800eb14:	db7e      	blt.n	800ec14 <quorem+0x10c>
 800eb16:	3c01      	subs	r4, #1
 800eb18:	f101 0814 	add.w	r8, r1, #20
 800eb1c:	00a3      	lsls	r3, r4, #2
 800eb1e:	f100 0514 	add.w	r5, r0, #20
 800eb22:	9300      	str	r3, [sp, #0]
 800eb24:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800eb28:	9301      	str	r3, [sp, #4]
 800eb2a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800eb2e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800eb32:	3301      	adds	r3, #1
 800eb34:	429a      	cmp	r2, r3
 800eb36:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800eb3a:	fbb2 f6f3 	udiv	r6, r2, r3
 800eb3e:	d32e      	bcc.n	800eb9e <quorem+0x96>
 800eb40:	f04f 0a00 	mov.w	sl, #0
 800eb44:	46c4      	mov	ip, r8
 800eb46:	46ae      	mov	lr, r5
 800eb48:	46d3      	mov	fp, sl
 800eb4a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800eb4e:	b298      	uxth	r0, r3
 800eb50:	fb06 a000 	mla	r0, r6, r0, sl
 800eb54:	0c02      	lsrs	r2, r0, #16
 800eb56:	0c1b      	lsrs	r3, r3, #16
 800eb58:	fb06 2303 	mla	r3, r6, r3, r2
 800eb5c:	f8de 2000 	ldr.w	r2, [lr]
 800eb60:	b280      	uxth	r0, r0
 800eb62:	b292      	uxth	r2, r2
 800eb64:	1a12      	subs	r2, r2, r0
 800eb66:	445a      	add	r2, fp
 800eb68:	f8de 0000 	ldr.w	r0, [lr]
 800eb6c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800eb70:	b29b      	uxth	r3, r3
 800eb72:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800eb76:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800eb7a:	b292      	uxth	r2, r2
 800eb7c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800eb80:	45e1      	cmp	r9, ip
 800eb82:	f84e 2b04 	str.w	r2, [lr], #4
 800eb86:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800eb8a:	d2de      	bcs.n	800eb4a <quorem+0x42>
 800eb8c:	9b00      	ldr	r3, [sp, #0]
 800eb8e:	58eb      	ldr	r3, [r5, r3]
 800eb90:	b92b      	cbnz	r3, 800eb9e <quorem+0x96>
 800eb92:	9b01      	ldr	r3, [sp, #4]
 800eb94:	3b04      	subs	r3, #4
 800eb96:	429d      	cmp	r5, r3
 800eb98:	461a      	mov	r2, r3
 800eb9a:	d32f      	bcc.n	800ebfc <quorem+0xf4>
 800eb9c:	613c      	str	r4, [r7, #16]
 800eb9e:	4638      	mov	r0, r7
 800eba0:	f001 f9c2 	bl	800ff28 <__mcmp>
 800eba4:	2800      	cmp	r0, #0
 800eba6:	db25      	blt.n	800ebf4 <quorem+0xec>
 800eba8:	4629      	mov	r1, r5
 800ebaa:	2000      	movs	r0, #0
 800ebac:	f858 2b04 	ldr.w	r2, [r8], #4
 800ebb0:	f8d1 c000 	ldr.w	ip, [r1]
 800ebb4:	fa1f fe82 	uxth.w	lr, r2
 800ebb8:	fa1f f38c 	uxth.w	r3, ip
 800ebbc:	eba3 030e 	sub.w	r3, r3, lr
 800ebc0:	4403      	add	r3, r0
 800ebc2:	0c12      	lsrs	r2, r2, #16
 800ebc4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ebc8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ebcc:	b29b      	uxth	r3, r3
 800ebce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ebd2:	45c1      	cmp	r9, r8
 800ebd4:	f841 3b04 	str.w	r3, [r1], #4
 800ebd8:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ebdc:	d2e6      	bcs.n	800ebac <quorem+0xa4>
 800ebde:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ebe2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ebe6:	b922      	cbnz	r2, 800ebf2 <quorem+0xea>
 800ebe8:	3b04      	subs	r3, #4
 800ebea:	429d      	cmp	r5, r3
 800ebec:	461a      	mov	r2, r3
 800ebee:	d30b      	bcc.n	800ec08 <quorem+0x100>
 800ebf0:	613c      	str	r4, [r7, #16]
 800ebf2:	3601      	adds	r6, #1
 800ebf4:	4630      	mov	r0, r6
 800ebf6:	b003      	add	sp, #12
 800ebf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebfc:	6812      	ldr	r2, [r2, #0]
 800ebfe:	3b04      	subs	r3, #4
 800ec00:	2a00      	cmp	r2, #0
 800ec02:	d1cb      	bne.n	800eb9c <quorem+0x94>
 800ec04:	3c01      	subs	r4, #1
 800ec06:	e7c6      	b.n	800eb96 <quorem+0x8e>
 800ec08:	6812      	ldr	r2, [r2, #0]
 800ec0a:	3b04      	subs	r3, #4
 800ec0c:	2a00      	cmp	r2, #0
 800ec0e:	d1ef      	bne.n	800ebf0 <quorem+0xe8>
 800ec10:	3c01      	subs	r4, #1
 800ec12:	e7ea      	b.n	800ebea <quorem+0xe2>
 800ec14:	2000      	movs	r0, #0
 800ec16:	e7ee      	b.n	800ebf6 <quorem+0xee>

0800ec18 <_dtoa_r>:
 800ec18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec1c:	69c7      	ldr	r7, [r0, #28]
 800ec1e:	b099      	sub	sp, #100	@ 0x64
 800ec20:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ec24:	ec55 4b10 	vmov	r4, r5, d0
 800ec28:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800ec2a:	9109      	str	r1, [sp, #36]	@ 0x24
 800ec2c:	4683      	mov	fp, r0
 800ec2e:	920e      	str	r2, [sp, #56]	@ 0x38
 800ec30:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ec32:	b97f      	cbnz	r7, 800ec54 <_dtoa_r+0x3c>
 800ec34:	2010      	movs	r0, #16
 800ec36:	f000 fdfd 	bl	800f834 <malloc>
 800ec3a:	4602      	mov	r2, r0
 800ec3c:	f8cb 001c 	str.w	r0, [fp, #28]
 800ec40:	b920      	cbnz	r0, 800ec4c <_dtoa_r+0x34>
 800ec42:	4ba7      	ldr	r3, [pc, #668]	@ (800eee0 <_dtoa_r+0x2c8>)
 800ec44:	21ef      	movs	r1, #239	@ 0xef
 800ec46:	48a7      	ldr	r0, [pc, #668]	@ (800eee4 <_dtoa_r+0x2cc>)
 800ec48:	f002 fe32 	bl	80118b0 <__assert_func>
 800ec4c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ec50:	6007      	str	r7, [r0, #0]
 800ec52:	60c7      	str	r7, [r0, #12]
 800ec54:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ec58:	6819      	ldr	r1, [r3, #0]
 800ec5a:	b159      	cbz	r1, 800ec74 <_dtoa_r+0x5c>
 800ec5c:	685a      	ldr	r2, [r3, #4]
 800ec5e:	604a      	str	r2, [r1, #4]
 800ec60:	2301      	movs	r3, #1
 800ec62:	4093      	lsls	r3, r2
 800ec64:	608b      	str	r3, [r1, #8]
 800ec66:	4658      	mov	r0, fp
 800ec68:	f000 feda 	bl	800fa20 <_Bfree>
 800ec6c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ec70:	2200      	movs	r2, #0
 800ec72:	601a      	str	r2, [r3, #0]
 800ec74:	1e2b      	subs	r3, r5, #0
 800ec76:	bfb9      	ittee	lt
 800ec78:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ec7c:	9303      	strlt	r3, [sp, #12]
 800ec7e:	2300      	movge	r3, #0
 800ec80:	6033      	strge	r3, [r6, #0]
 800ec82:	9f03      	ldr	r7, [sp, #12]
 800ec84:	4b98      	ldr	r3, [pc, #608]	@ (800eee8 <_dtoa_r+0x2d0>)
 800ec86:	bfbc      	itt	lt
 800ec88:	2201      	movlt	r2, #1
 800ec8a:	6032      	strlt	r2, [r6, #0]
 800ec8c:	43bb      	bics	r3, r7
 800ec8e:	d112      	bne.n	800ecb6 <_dtoa_r+0x9e>
 800ec90:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ec92:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ec96:	6013      	str	r3, [r2, #0]
 800ec98:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ec9c:	4323      	orrs	r3, r4
 800ec9e:	f000 854d 	beq.w	800f73c <_dtoa_r+0xb24>
 800eca2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800eca4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800eefc <_dtoa_r+0x2e4>
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	f000 854f 	beq.w	800f74c <_dtoa_r+0xb34>
 800ecae:	f10a 0303 	add.w	r3, sl, #3
 800ecb2:	f000 bd49 	b.w	800f748 <_dtoa_r+0xb30>
 800ecb6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ecba:	2200      	movs	r2, #0
 800ecbc:	ec51 0b17 	vmov	r0, r1, d7
 800ecc0:	2300      	movs	r3, #0
 800ecc2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800ecc6:	f7f1 fed7 	bl	8000a78 <__aeabi_dcmpeq>
 800ecca:	4680      	mov	r8, r0
 800eccc:	b158      	cbz	r0, 800ece6 <_dtoa_r+0xce>
 800ecce:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ecd0:	2301      	movs	r3, #1
 800ecd2:	6013      	str	r3, [r2, #0]
 800ecd4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ecd6:	b113      	cbz	r3, 800ecde <_dtoa_r+0xc6>
 800ecd8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ecda:	4b84      	ldr	r3, [pc, #528]	@ (800eeec <_dtoa_r+0x2d4>)
 800ecdc:	6013      	str	r3, [r2, #0]
 800ecde:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800ef00 <_dtoa_r+0x2e8>
 800ece2:	f000 bd33 	b.w	800f74c <_dtoa_r+0xb34>
 800ece6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ecea:	aa16      	add	r2, sp, #88	@ 0x58
 800ecec:	a917      	add	r1, sp, #92	@ 0x5c
 800ecee:	4658      	mov	r0, fp
 800ecf0:	f001 fa3a 	bl	8010168 <__d2b>
 800ecf4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800ecf8:	4681      	mov	r9, r0
 800ecfa:	2e00      	cmp	r6, #0
 800ecfc:	d077      	beq.n	800edee <_dtoa_r+0x1d6>
 800ecfe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ed00:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800ed04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ed08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ed0c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ed10:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ed14:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ed18:	4619      	mov	r1, r3
 800ed1a:	2200      	movs	r2, #0
 800ed1c:	4b74      	ldr	r3, [pc, #464]	@ (800eef0 <_dtoa_r+0x2d8>)
 800ed1e:	f7f1 fa8b 	bl	8000238 <__aeabi_dsub>
 800ed22:	a369      	add	r3, pc, #420	@ (adr r3, 800eec8 <_dtoa_r+0x2b0>)
 800ed24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed28:	f7f1 fc3e 	bl	80005a8 <__aeabi_dmul>
 800ed2c:	a368      	add	r3, pc, #416	@ (adr r3, 800eed0 <_dtoa_r+0x2b8>)
 800ed2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed32:	f7f1 fa83 	bl	800023c <__adddf3>
 800ed36:	4604      	mov	r4, r0
 800ed38:	4630      	mov	r0, r6
 800ed3a:	460d      	mov	r5, r1
 800ed3c:	f7f1 fbca 	bl	80004d4 <__aeabi_i2d>
 800ed40:	a365      	add	r3, pc, #404	@ (adr r3, 800eed8 <_dtoa_r+0x2c0>)
 800ed42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed46:	f7f1 fc2f 	bl	80005a8 <__aeabi_dmul>
 800ed4a:	4602      	mov	r2, r0
 800ed4c:	460b      	mov	r3, r1
 800ed4e:	4620      	mov	r0, r4
 800ed50:	4629      	mov	r1, r5
 800ed52:	f7f1 fa73 	bl	800023c <__adddf3>
 800ed56:	4604      	mov	r4, r0
 800ed58:	460d      	mov	r5, r1
 800ed5a:	f7f1 fed5 	bl	8000b08 <__aeabi_d2iz>
 800ed5e:	2200      	movs	r2, #0
 800ed60:	4607      	mov	r7, r0
 800ed62:	2300      	movs	r3, #0
 800ed64:	4620      	mov	r0, r4
 800ed66:	4629      	mov	r1, r5
 800ed68:	f7f1 fe90 	bl	8000a8c <__aeabi_dcmplt>
 800ed6c:	b140      	cbz	r0, 800ed80 <_dtoa_r+0x168>
 800ed6e:	4638      	mov	r0, r7
 800ed70:	f7f1 fbb0 	bl	80004d4 <__aeabi_i2d>
 800ed74:	4622      	mov	r2, r4
 800ed76:	462b      	mov	r3, r5
 800ed78:	f7f1 fe7e 	bl	8000a78 <__aeabi_dcmpeq>
 800ed7c:	b900      	cbnz	r0, 800ed80 <_dtoa_r+0x168>
 800ed7e:	3f01      	subs	r7, #1
 800ed80:	2f16      	cmp	r7, #22
 800ed82:	d851      	bhi.n	800ee28 <_dtoa_r+0x210>
 800ed84:	4b5b      	ldr	r3, [pc, #364]	@ (800eef4 <_dtoa_r+0x2dc>)
 800ed86:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ed8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ed92:	f7f1 fe7b 	bl	8000a8c <__aeabi_dcmplt>
 800ed96:	2800      	cmp	r0, #0
 800ed98:	d048      	beq.n	800ee2c <_dtoa_r+0x214>
 800ed9a:	3f01      	subs	r7, #1
 800ed9c:	2300      	movs	r3, #0
 800ed9e:	9312      	str	r3, [sp, #72]	@ 0x48
 800eda0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800eda2:	1b9b      	subs	r3, r3, r6
 800eda4:	1e5a      	subs	r2, r3, #1
 800eda6:	bf44      	itt	mi
 800eda8:	f1c3 0801 	rsbmi	r8, r3, #1
 800edac:	2300      	movmi	r3, #0
 800edae:	9208      	str	r2, [sp, #32]
 800edb0:	bf54      	ite	pl
 800edb2:	f04f 0800 	movpl.w	r8, #0
 800edb6:	9308      	strmi	r3, [sp, #32]
 800edb8:	2f00      	cmp	r7, #0
 800edba:	db39      	blt.n	800ee30 <_dtoa_r+0x218>
 800edbc:	9b08      	ldr	r3, [sp, #32]
 800edbe:	970f      	str	r7, [sp, #60]	@ 0x3c
 800edc0:	443b      	add	r3, r7
 800edc2:	9308      	str	r3, [sp, #32]
 800edc4:	2300      	movs	r3, #0
 800edc6:	930a      	str	r3, [sp, #40]	@ 0x28
 800edc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800edca:	2b09      	cmp	r3, #9
 800edcc:	d864      	bhi.n	800ee98 <_dtoa_r+0x280>
 800edce:	2b05      	cmp	r3, #5
 800edd0:	bfc4      	itt	gt
 800edd2:	3b04      	subgt	r3, #4
 800edd4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800edd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800edd8:	f1a3 0302 	sub.w	r3, r3, #2
 800eddc:	bfcc      	ite	gt
 800edde:	2400      	movgt	r4, #0
 800ede0:	2401      	movle	r4, #1
 800ede2:	2b03      	cmp	r3, #3
 800ede4:	d863      	bhi.n	800eeae <_dtoa_r+0x296>
 800ede6:	e8df f003 	tbb	[pc, r3]
 800edea:	372a      	.short	0x372a
 800edec:	5535      	.short	0x5535
 800edee:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800edf2:	441e      	add	r6, r3
 800edf4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800edf8:	2b20      	cmp	r3, #32
 800edfa:	bfc1      	itttt	gt
 800edfc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ee00:	409f      	lslgt	r7, r3
 800ee02:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ee06:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ee0a:	bfd6      	itet	le
 800ee0c:	f1c3 0320 	rsble	r3, r3, #32
 800ee10:	ea47 0003 	orrgt.w	r0, r7, r3
 800ee14:	fa04 f003 	lslle.w	r0, r4, r3
 800ee18:	f7f1 fb4c 	bl	80004b4 <__aeabi_ui2d>
 800ee1c:	2201      	movs	r2, #1
 800ee1e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ee22:	3e01      	subs	r6, #1
 800ee24:	9214      	str	r2, [sp, #80]	@ 0x50
 800ee26:	e777      	b.n	800ed18 <_dtoa_r+0x100>
 800ee28:	2301      	movs	r3, #1
 800ee2a:	e7b8      	b.n	800ed9e <_dtoa_r+0x186>
 800ee2c:	9012      	str	r0, [sp, #72]	@ 0x48
 800ee2e:	e7b7      	b.n	800eda0 <_dtoa_r+0x188>
 800ee30:	427b      	negs	r3, r7
 800ee32:	930a      	str	r3, [sp, #40]	@ 0x28
 800ee34:	2300      	movs	r3, #0
 800ee36:	eba8 0807 	sub.w	r8, r8, r7
 800ee3a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ee3c:	e7c4      	b.n	800edc8 <_dtoa_r+0x1b0>
 800ee3e:	2300      	movs	r3, #0
 800ee40:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ee42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	dc35      	bgt.n	800eeb4 <_dtoa_r+0x29c>
 800ee48:	2301      	movs	r3, #1
 800ee4a:	9300      	str	r3, [sp, #0]
 800ee4c:	9307      	str	r3, [sp, #28]
 800ee4e:	461a      	mov	r2, r3
 800ee50:	920e      	str	r2, [sp, #56]	@ 0x38
 800ee52:	e00b      	b.n	800ee6c <_dtoa_r+0x254>
 800ee54:	2301      	movs	r3, #1
 800ee56:	e7f3      	b.n	800ee40 <_dtoa_r+0x228>
 800ee58:	2300      	movs	r3, #0
 800ee5a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ee5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ee5e:	18fb      	adds	r3, r7, r3
 800ee60:	9300      	str	r3, [sp, #0]
 800ee62:	3301      	adds	r3, #1
 800ee64:	2b01      	cmp	r3, #1
 800ee66:	9307      	str	r3, [sp, #28]
 800ee68:	bfb8      	it	lt
 800ee6a:	2301      	movlt	r3, #1
 800ee6c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800ee70:	2100      	movs	r1, #0
 800ee72:	2204      	movs	r2, #4
 800ee74:	f102 0514 	add.w	r5, r2, #20
 800ee78:	429d      	cmp	r5, r3
 800ee7a:	d91f      	bls.n	800eebc <_dtoa_r+0x2a4>
 800ee7c:	6041      	str	r1, [r0, #4]
 800ee7e:	4658      	mov	r0, fp
 800ee80:	f000 fd8e 	bl	800f9a0 <_Balloc>
 800ee84:	4682      	mov	sl, r0
 800ee86:	2800      	cmp	r0, #0
 800ee88:	d13c      	bne.n	800ef04 <_dtoa_r+0x2ec>
 800ee8a:	4b1b      	ldr	r3, [pc, #108]	@ (800eef8 <_dtoa_r+0x2e0>)
 800ee8c:	4602      	mov	r2, r0
 800ee8e:	f240 11af 	movw	r1, #431	@ 0x1af
 800ee92:	e6d8      	b.n	800ec46 <_dtoa_r+0x2e>
 800ee94:	2301      	movs	r3, #1
 800ee96:	e7e0      	b.n	800ee5a <_dtoa_r+0x242>
 800ee98:	2401      	movs	r4, #1
 800ee9a:	2300      	movs	r3, #0
 800ee9c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ee9e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800eea0:	f04f 33ff 	mov.w	r3, #4294967295
 800eea4:	9300      	str	r3, [sp, #0]
 800eea6:	9307      	str	r3, [sp, #28]
 800eea8:	2200      	movs	r2, #0
 800eeaa:	2312      	movs	r3, #18
 800eeac:	e7d0      	b.n	800ee50 <_dtoa_r+0x238>
 800eeae:	2301      	movs	r3, #1
 800eeb0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800eeb2:	e7f5      	b.n	800eea0 <_dtoa_r+0x288>
 800eeb4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eeb6:	9300      	str	r3, [sp, #0]
 800eeb8:	9307      	str	r3, [sp, #28]
 800eeba:	e7d7      	b.n	800ee6c <_dtoa_r+0x254>
 800eebc:	3101      	adds	r1, #1
 800eebe:	0052      	lsls	r2, r2, #1
 800eec0:	e7d8      	b.n	800ee74 <_dtoa_r+0x25c>
 800eec2:	bf00      	nop
 800eec4:	f3af 8000 	nop.w
 800eec8:	636f4361 	.word	0x636f4361
 800eecc:	3fd287a7 	.word	0x3fd287a7
 800eed0:	8b60c8b3 	.word	0x8b60c8b3
 800eed4:	3fc68a28 	.word	0x3fc68a28
 800eed8:	509f79fb 	.word	0x509f79fb
 800eedc:	3fd34413 	.word	0x3fd34413
 800eee0:	080138a7 	.word	0x080138a7
 800eee4:	080138be 	.word	0x080138be
 800eee8:	7ff00000 	.word	0x7ff00000
 800eeec:	08013872 	.word	0x08013872
 800eef0:	3ff80000 	.word	0x3ff80000
 800eef4:	080139b8 	.word	0x080139b8
 800eef8:	08013916 	.word	0x08013916
 800eefc:	080138a3 	.word	0x080138a3
 800ef00:	08013871 	.word	0x08013871
 800ef04:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ef08:	6018      	str	r0, [r3, #0]
 800ef0a:	9b07      	ldr	r3, [sp, #28]
 800ef0c:	2b0e      	cmp	r3, #14
 800ef0e:	f200 80a4 	bhi.w	800f05a <_dtoa_r+0x442>
 800ef12:	2c00      	cmp	r4, #0
 800ef14:	f000 80a1 	beq.w	800f05a <_dtoa_r+0x442>
 800ef18:	2f00      	cmp	r7, #0
 800ef1a:	dd33      	ble.n	800ef84 <_dtoa_r+0x36c>
 800ef1c:	4bad      	ldr	r3, [pc, #692]	@ (800f1d4 <_dtoa_r+0x5bc>)
 800ef1e:	f007 020f 	and.w	r2, r7, #15
 800ef22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ef26:	ed93 7b00 	vldr	d7, [r3]
 800ef2a:	05f8      	lsls	r0, r7, #23
 800ef2c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ef30:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ef34:	d516      	bpl.n	800ef64 <_dtoa_r+0x34c>
 800ef36:	4ba8      	ldr	r3, [pc, #672]	@ (800f1d8 <_dtoa_r+0x5c0>)
 800ef38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ef3c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ef40:	f7f1 fc5c 	bl	80007fc <__aeabi_ddiv>
 800ef44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ef48:	f004 040f 	and.w	r4, r4, #15
 800ef4c:	2603      	movs	r6, #3
 800ef4e:	4da2      	ldr	r5, [pc, #648]	@ (800f1d8 <_dtoa_r+0x5c0>)
 800ef50:	b954      	cbnz	r4, 800ef68 <_dtoa_r+0x350>
 800ef52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ef56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ef5a:	f7f1 fc4f 	bl	80007fc <__aeabi_ddiv>
 800ef5e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ef62:	e028      	b.n	800efb6 <_dtoa_r+0x39e>
 800ef64:	2602      	movs	r6, #2
 800ef66:	e7f2      	b.n	800ef4e <_dtoa_r+0x336>
 800ef68:	07e1      	lsls	r1, r4, #31
 800ef6a:	d508      	bpl.n	800ef7e <_dtoa_r+0x366>
 800ef6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ef70:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ef74:	f7f1 fb18 	bl	80005a8 <__aeabi_dmul>
 800ef78:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ef7c:	3601      	adds	r6, #1
 800ef7e:	1064      	asrs	r4, r4, #1
 800ef80:	3508      	adds	r5, #8
 800ef82:	e7e5      	b.n	800ef50 <_dtoa_r+0x338>
 800ef84:	f000 80d2 	beq.w	800f12c <_dtoa_r+0x514>
 800ef88:	427c      	negs	r4, r7
 800ef8a:	4b92      	ldr	r3, [pc, #584]	@ (800f1d4 <_dtoa_r+0x5bc>)
 800ef8c:	4d92      	ldr	r5, [pc, #584]	@ (800f1d8 <_dtoa_r+0x5c0>)
 800ef8e:	f004 020f 	and.w	r2, r4, #15
 800ef92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ef96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef9a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ef9e:	f7f1 fb03 	bl	80005a8 <__aeabi_dmul>
 800efa2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800efa6:	1124      	asrs	r4, r4, #4
 800efa8:	2300      	movs	r3, #0
 800efaa:	2602      	movs	r6, #2
 800efac:	2c00      	cmp	r4, #0
 800efae:	f040 80b2 	bne.w	800f116 <_dtoa_r+0x4fe>
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d1d3      	bne.n	800ef5e <_dtoa_r+0x346>
 800efb6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800efb8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	f000 80b7 	beq.w	800f130 <_dtoa_r+0x518>
 800efc2:	4b86      	ldr	r3, [pc, #536]	@ (800f1dc <_dtoa_r+0x5c4>)
 800efc4:	2200      	movs	r2, #0
 800efc6:	4620      	mov	r0, r4
 800efc8:	4629      	mov	r1, r5
 800efca:	f7f1 fd5f 	bl	8000a8c <__aeabi_dcmplt>
 800efce:	2800      	cmp	r0, #0
 800efd0:	f000 80ae 	beq.w	800f130 <_dtoa_r+0x518>
 800efd4:	9b07      	ldr	r3, [sp, #28]
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	f000 80aa 	beq.w	800f130 <_dtoa_r+0x518>
 800efdc:	9b00      	ldr	r3, [sp, #0]
 800efde:	2b00      	cmp	r3, #0
 800efe0:	dd37      	ble.n	800f052 <_dtoa_r+0x43a>
 800efe2:	1e7b      	subs	r3, r7, #1
 800efe4:	9304      	str	r3, [sp, #16]
 800efe6:	4620      	mov	r0, r4
 800efe8:	4b7d      	ldr	r3, [pc, #500]	@ (800f1e0 <_dtoa_r+0x5c8>)
 800efea:	2200      	movs	r2, #0
 800efec:	4629      	mov	r1, r5
 800efee:	f7f1 fadb 	bl	80005a8 <__aeabi_dmul>
 800eff2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eff6:	9c00      	ldr	r4, [sp, #0]
 800eff8:	3601      	adds	r6, #1
 800effa:	4630      	mov	r0, r6
 800effc:	f7f1 fa6a 	bl	80004d4 <__aeabi_i2d>
 800f000:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f004:	f7f1 fad0 	bl	80005a8 <__aeabi_dmul>
 800f008:	4b76      	ldr	r3, [pc, #472]	@ (800f1e4 <_dtoa_r+0x5cc>)
 800f00a:	2200      	movs	r2, #0
 800f00c:	f7f1 f916 	bl	800023c <__adddf3>
 800f010:	4605      	mov	r5, r0
 800f012:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800f016:	2c00      	cmp	r4, #0
 800f018:	f040 808d 	bne.w	800f136 <_dtoa_r+0x51e>
 800f01c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f020:	4b71      	ldr	r3, [pc, #452]	@ (800f1e8 <_dtoa_r+0x5d0>)
 800f022:	2200      	movs	r2, #0
 800f024:	f7f1 f908 	bl	8000238 <__aeabi_dsub>
 800f028:	4602      	mov	r2, r0
 800f02a:	460b      	mov	r3, r1
 800f02c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f030:	462a      	mov	r2, r5
 800f032:	4633      	mov	r3, r6
 800f034:	f7f1 fd48 	bl	8000ac8 <__aeabi_dcmpgt>
 800f038:	2800      	cmp	r0, #0
 800f03a:	f040 828b 	bne.w	800f554 <_dtoa_r+0x93c>
 800f03e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f042:	462a      	mov	r2, r5
 800f044:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800f048:	f7f1 fd20 	bl	8000a8c <__aeabi_dcmplt>
 800f04c:	2800      	cmp	r0, #0
 800f04e:	f040 8128 	bne.w	800f2a2 <_dtoa_r+0x68a>
 800f052:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800f056:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800f05a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	f2c0 815a 	blt.w	800f316 <_dtoa_r+0x6fe>
 800f062:	2f0e      	cmp	r7, #14
 800f064:	f300 8157 	bgt.w	800f316 <_dtoa_r+0x6fe>
 800f068:	4b5a      	ldr	r3, [pc, #360]	@ (800f1d4 <_dtoa_r+0x5bc>)
 800f06a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f06e:	ed93 7b00 	vldr	d7, [r3]
 800f072:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f074:	2b00      	cmp	r3, #0
 800f076:	ed8d 7b00 	vstr	d7, [sp]
 800f07a:	da03      	bge.n	800f084 <_dtoa_r+0x46c>
 800f07c:	9b07      	ldr	r3, [sp, #28]
 800f07e:	2b00      	cmp	r3, #0
 800f080:	f340 8101 	ble.w	800f286 <_dtoa_r+0x66e>
 800f084:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f088:	4656      	mov	r6, sl
 800f08a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f08e:	4620      	mov	r0, r4
 800f090:	4629      	mov	r1, r5
 800f092:	f7f1 fbb3 	bl	80007fc <__aeabi_ddiv>
 800f096:	f7f1 fd37 	bl	8000b08 <__aeabi_d2iz>
 800f09a:	4680      	mov	r8, r0
 800f09c:	f7f1 fa1a 	bl	80004d4 <__aeabi_i2d>
 800f0a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f0a4:	f7f1 fa80 	bl	80005a8 <__aeabi_dmul>
 800f0a8:	4602      	mov	r2, r0
 800f0aa:	460b      	mov	r3, r1
 800f0ac:	4620      	mov	r0, r4
 800f0ae:	4629      	mov	r1, r5
 800f0b0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800f0b4:	f7f1 f8c0 	bl	8000238 <__aeabi_dsub>
 800f0b8:	f806 4b01 	strb.w	r4, [r6], #1
 800f0bc:	9d07      	ldr	r5, [sp, #28]
 800f0be:	eba6 040a 	sub.w	r4, r6, sl
 800f0c2:	42a5      	cmp	r5, r4
 800f0c4:	4602      	mov	r2, r0
 800f0c6:	460b      	mov	r3, r1
 800f0c8:	f040 8117 	bne.w	800f2fa <_dtoa_r+0x6e2>
 800f0cc:	f7f1 f8b6 	bl	800023c <__adddf3>
 800f0d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f0d4:	4604      	mov	r4, r0
 800f0d6:	460d      	mov	r5, r1
 800f0d8:	f7f1 fcf6 	bl	8000ac8 <__aeabi_dcmpgt>
 800f0dc:	2800      	cmp	r0, #0
 800f0de:	f040 80f9 	bne.w	800f2d4 <_dtoa_r+0x6bc>
 800f0e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f0e6:	4620      	mov	r0, r4
 800f0e8:	4629      	mov	r1, r5
 800f0ea:	f7f1 fcc5 	bl	8000a78 <__aeabi_dcmpeq>
 800f0ee:	b118      	cbz	r0, 800f0f8 <_dtoa_r+0x4e0>
 800f0f0:	f018 0f01 	tst.w	r8, #1
 800f0f4:	f040 80ee 	bne.w	800f2d4 <_dtoa_r+0x6bc>
 800f0f8:	4649      	mov	r1, r9
 800f0fa:	4658      	mov	r0, fp
 800f0fc:	f000 fc90 	bl	800fa20 <_Bfree>
 800f100:	2300      	movs	r3, #0
 800f102:	7033      	strb	r3, [r6, #0]
 800f104:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f106:	3701      	adds	r7, #1
 800f108:	601f      	str	r7, [r3, #0]
 800f10a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	f000 831d 	beq.w	800f74c <_dtoa_r+0xb34>
 800f112:	601e      	str	r6, [r3, #0]
 800f114:	e31a      	b.n	800f74c <_dtoa_r+0xb34>
 800f116:	07e2      	lsls	r2, r4, #31
 800f118:	d505      	bpl.n	800f126 <_dtoa_r+0x50e>
 800f11a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f11e:	f7f1 fa43 	bl	80005a8 <__aeabi_dmul>
 800f122:	3601      	adds	r6, #1
 800f124:	2301      	movs	r3, #1
 800f126:	1064      	asrs	r4, r4, #1
 800f128:	3508      	adds	r5, #8
 800f12a:	e73f      	b.n	800efac <_dtoa_r+0x394>
 800f12c:	2602      	movs	r6, #2
 800f12e:	e742      	b.n	800efb6 <_dtoa_r+0x39e>
 800f130:	9c07      	ldr	r4, [sp, #28]
 800f132:	9704      	str	r7, [sp, #16]
 800f134:	e761      	b.n	800effa <_dtoa_r+0x3e2>
 800f136:	4b27      	ldr	r3, [pc, #156]	@ (800f1d4 <_dtoa_r+0x5bc>)
 800f138:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f13a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f13e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f142:	4454      	add	r4, sl
 800f144:	2900      	cmp	r1, #0
 800f146:	d053      	beq.n	800f1f0 <_dtoa_r+0x5d8>
 800f148:	4928      	ldr	r1, [pc, #160]	@ (800f1ec <_dtoa_r+0x5d4>)
 800f14a:	2000      	movs	r0, #0
 800f14c:	f7f1 fb56 	bl	80007fc <__aeabi_ddiv>
 800f150:	4633      	mov	r3, r6
 800f152:	462a      	mov	r2, r5
 800f154:	f7f1 f870 	bl	8000238 <__aeabi_dsub>
 800f158:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f15c:	4656      	mov	r6, sl
 800f15e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f162:	f7f1 fcd1 	bl	8000b08 <__aeabi_d2iz>
 800f166:	4605      	mov	r5, r0
 800f168:	f7f1 f9b4 	bl	80004d4 <__aeabi_i2d>
 800f16c:	4602      	mov	r2, r0
 800f16e:	460b      	mov	r3, r1
 800f170:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f174:	f7f1 f860 	bl	8000238 <__aeabi_dsub>
 800f178:	3530      	adds	r5, #48	@ 0x30
 800f17a:	4602      	mov	r2, r0
 800f17c:	460b      	mov	r3, r1
 800f17e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f182:	f806 5b01 	strb.w	r5, [r6], #1
 800f186:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f18a:	f7f1 fc7f 	bl	8000a8c <__aeabi_dcmplt>
 800f18e:	2800      	cmp	r0, #0
 800f190:	d171      	bne.n	800f276 <_dtoa_r+0x65e>
 800f192:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f196:	4911      	ldr	r1, [pc, #68]	@ (800f1dc <_dtoa_r+0x5c4>)
 800f198:	2000      	movs	r0, #0
 800f19a:	f7f1 f84d 	bl	8000238 <__aeabi_dsub>
 800f19e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f1a2:	f7f1 fc73 	bl	8000a8c <__aeabi_dcmplt>
 800f1a6:	2800      	cmp	r0, #0
 800f1a8:	f040 8095 	bne.w	800f2d6 <_dtoa_r+0x6be>
 800f1ac:	42a6      	cmp	r6, r4
 800f1ae:	f43f af50 	beq.w	800f052 <_dtoa_r+0x43a>
 800f1b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f1b6:	4b0a      	ldr	r3, [pc, #40]	@ (800f1e0 <_dtoa_r+0x5c8>)
 800f1b8:	2200      	movs	r2, #0
 800f1ba:	f7f1 f9f5 	bl	80005a8 <__aeabi_dmul>
 800f1be:	4b08      	ldr	r3, [pc, #32]	@ (800f1e0 <_dtoa_r+0x5c8>)
 800f1c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f1c4:	2200      	movs	r2, #0
 800f1c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f1ca:	f7f1 f9ed 	bl	80005a8 <__aeabi_dmul>
 800f1ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f1d2:	e7c4      	b.n	800f15e <_dtoa_r+0x546>
 800f1d4:	080139b8 	.word	0x080139b8
 800f1d8:	08013990 	.word	0x08013990
 800f1dc:	3ff00000 	.word	0x3ff00000
 800f1e0:	40240000 	.word	0x40240000
 800f1e4:	401c0000 	.word	0x401c0000
 800f1e8:	40140000 	.word	0x40140000
 800f1ec:	3fe00000 	.word	0x3fe00000
 800f1f0:	4631      	mov	r1, r6
 800f1f2:	4628      	mov	r0, r5
 800f1f4:	f7f1 f9d8 	bl	80005a8 <__aeabi_dmul>
 800f1f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f1fc:	9415      	str	r4, [sp, #84]	@ 0x54
 800f1fe:	4656      	mov	r6, sl
 800f200:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f204:	f7f1 fc80 	bl	8000b08 <__aeabi_d2iz>
 800f208:	4605      	mov	r5, r0
 800f20a:	f7f1 f963 	bl	80004d4 <__aeabi_i2d>
 800f20e:	4602      	mov	r2, r0
 800f210:	460b      	mov	r3, r1
 800f212:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f216:	f7f1 f80f 	bl	8000238 <__aeabi_dsub>
 800f21a:	3530      	adds	r5, #48	@ 0x30
 800f21c:	f806 5b01 	strb.w	r5, [r6], #1
 800f220:	4602      	mov	r2, r0
 800f222:	460b      	mov	r3, r1
 800f224:	42a6      	cmp	r6, r4
 800f226:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f22a:	f04f 0200 	mov.w	r2, #0
 800f22e:	d124      	bne.n	800f27a <_dtoa_r+0x662>
 800f230:	4bac      	ldr	r3, [pc, #688]	@ (800f4e4 <_dtoa_r+0x8cc>)
 800f232:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f236:	f7f1 f801 	bl	800023c <__adddf3>
 800f23a:	4602      	mov	r2, r0
 800f23c:	460b      	mov	r3, r1
 800f23e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f242:	f7f1 fc41 	bl	8000ac8 <__aeabi_dcmpgt>
 800f246:	2800      	cmp	r0, #0
 800f248:	d145      	bne.n	800f2d6 <_dtoa_r+0x6be>
 800f24a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f24e:	49a5      	ldr	r1, [pc, #660]	@ (800f4e4 <_dtoa_r+0x8cc>)
 800f250:	2000      	movs	r0, #0
 800f252:	f7f0 fff1 	bl	8000238 <__aeabi_dsub>
 800f256:	4602      	mov	r2, r0
 800f258:	460b      	mov	r3, r1
 800f25a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f25e:	f7f1 fc15 	bl	8000a8c <__aeabi_dcmplt>
 800f262:	2800      	cmp	r0, #0
 800f264:	f43f aef5 	beq.w	800f052 <_dtoa_r+0x43a>
 800f268:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800f26a:	1e73      	subs	r3, r6, #1
 800f26c:	9315      	str	r3, [sp, #84]	@ 0x54
 800f26e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f272:	2b30      	cmp	r3, #48	@ 0x30
 800f274:	d0f8      	beq.n	800f268 <_dtoa_r+0x650>
 800f276:	9f04      	ldr	r7, [sp, #16]
 800f278:	e73e      	b.n	800f0f8 <_dtoa_r+0x4e0>
 800f27a:	4b9b      	ldr	r3, [pc, #620]	@ (800f4e8 <_dtoa_r+0x8d0>)
 800f27c:	f7f1 f994 	bl	80005a8 <__aeabi_dmul>
 800f280:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f284:	e7bc      	b.n	800f200 <_dtoa_r+0x5e8>
 800f286:	d10c      	bne.n	800f2a2 <_dtoa_r+0x68a>
 800f288:	4b98      	ldr	r3, [pc, #608]	@ (800f4ec <_dtoa_r+0x8d4>)
 800f28a:	2200      	movs	r2, #0
 800f28c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f290:	f7f1 f98a 	bl	80005a8 <__aeabi_dmul>
 800f294:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f298:	f7f1 fc0c 	bl	8000ab4 <__aeabi_dcmpge>
 800f29c:	2800      	cmp	r0, #0
 800f29e:	f000 8157 	beq.w	800f550 <_dtoa_r+0x938>
 800f2a2:	2400      	movs	r4, #0
 800f2a4:	4625      	mov	r5, r4
 800f2a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f2a8:	43db      	mvns	r3, r3
 800f2aa:	9304      	str	r3, [sp, #16]
 800f2ac:	4656      	mov	r6, sl
 800f2ae:	2700      	movs	r7, #0
 800f2b0:	4621      	mov	r1, r4
 800f2b2:	4658      	mov	r0, fp
 800f2b4:	f000 fbb4 	bl	800fa20 <_Bfree>
 800f2b8:	2d00      	cmp	r5, #0
 800f2ba:	d0dc      	beq.n	800f276 <_dtoa_r+0x65e>
 800f2bc:	b12f      	cbz	r7, 800f2ca <_dtoa_r+0x6b2>
 800f2be:	42af      	cmp	r7, r5
 800f2c0:	d003      	beq.n	800f2ca <_dtoa_r+0x6b2>
 800f2c2:	4639      	mov	r1, r7
 800f2c4:	4658      	mov	r0, fp
 800f2c6:	f000 fbab 	bl	800fa20 <_Bfree>
 800f2ca:	4629      	mov	r1, r5
 800f2cc:	4658      	mov	r0, fp
 800f2ce:	f000 fba7 	bl	800fa20 <_Bfree>
 800f2d2:	e7d0      	b.n	800f276 <_dtoa_r+0x65e>
 800f2d4:	9704      	str	r7, [sp, #16]
 800f2d6:	4633      	mov	r3, r6
 800f2d8:	461e      	mov	r6, r3
 800f2da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f2de:	2a39      	cmp	r2, #57	@ 0x39
 800f2e0:	d107      	bne.n	800f2f2 <_dtoa_r+0x6da>
 800f2e2:	459a      	cmp	sl, r3
 800f2e4:	d1f8      	bne.n	800f2d8 <_dtoa_r+0x6c0>
 800f2e6:	9a04      	ldr	r2, [sp, #16]
 800f2e8:	3201      	adds	r2, #1
 800f2ea:	9204      	str	r2, [sp, #16]
 800f2ec:	2230      	movs	r2, #48	@ 0x30
 800f2ee:	f88a 2000 	strb.w	r2, [sl]
 800f2f2:	781a      	ldrb	r2, [r3, #0]
 800f2f4:	3201      	adds	r2, #1
 800f2f6:	701a      	strb	r2, [r3, #0]
 800f2f8:	e7bd      	b.n	800f276 <_dtoa_r+0x65e>
 800f2fa:	4b7b      	ldr	r3, [pc, #492]	@ (800f4e8 <_dtoa_r+0x8d0>)
 800f2fc:	2200      	movs	r2, #0
 800f2fe:	f7f1 f953 	bl	80005a8 <__aeabi_dmul>
 800f302:	2200      	movs	r2, #0
 800f304:	2300      	movs	r3, #0
 800f306:	4604      	mov	r4, r0
 800f308:	460d      	mov	r5, r1
 800f30a:	f7f1 fbb5 	bl	8000a78 <__aeabi_dcmpeq>
 800f30e:	2800      	cmp	r0, #0
 800f310:	f43f aebb 	beq.w	800f08a <_dtoa_r+0x472>
 800f314:	e6f0      	b.n	800f0f8 <_dtoa_r+0x4e0>
 800f316:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f318:	2a00      	cmp	r2, #0
 800f31a:	f000 80db 	beq.w	800f4d4 <_dtoa_r+0x8bc>
 800f31e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f320:	2a01      	cmp	r2, #1
 800f322:	f300 80bf 	bgt.w	800f4a4 <_dtoa_r+0x88c>
 800f326:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800f328:	2a00      	cmp	r2, #0
 800f32a:	f000 80b7 	beq.w	800f49c <_dtoa_r+0x884>
 800f32e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800f332:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f334:	4646      	mov	r6, r8
 800f336:	9a08      	ldr	r2, [sp, #32]
 800f338:	2101      	movs	r1, #1
 800f33a:	441a      	add	r2, r3
 800f33c:	4658      	mov	r0, fp
 800f33e:	4498      	add	r8, r3
 800f340:	9208      	str	r2, [sp, #32]
 800f342:	f000 fc6b 	bl	800fc1c <__i2b>
 800f346:	4605      	mov	r5, r0
 800f348:	b15e      	cbz	r6, 800f362 <_dtoa_r+0x74a>
 800f34a:	9b08      	ldr	r3, [sp, #32]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	dd08      	ble.n	800f362 <_dtoa_r+0x74a>
 800f350:	42b3      	cmp	r3, r6
 800f352:	9a08      	ldr	r2, [sp, #32]
 800f354:	bfa8      	it	ge
 800f356:	4633      	movge	r3, r6
 800f358:	eba8 0803 	sub.w	r8, r8, r3
 800f35c:	1af6      	subs	r6, r6, r3
 800f35e:	1ad3      	subs	r3, r2, r3
 800f360:	9308      	str	r3, [sp, #32]
 800f362:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f364:	b1f3      	cbz	r3, 800f3a4 <_dtoa_r+0x78c>
 800f366:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f368:	2b00      	cmp	r3, #0
 800f36a:	f000 80b7 	beq.w	800f4dc <_dtoa_r+0x8c4>
 800f36e:	b18c      	cbz	r4, 800f394 <_dtoa_r+0x77c>
 800f370:	4629      	mov	r1, r5
 800f372:	4622      	mov	r2, r4
 800f374:	4658      	mov	r0, fp
 800f376:	f000 fd11 	bl	800fd9c <__pow5mult>
 800f37a:	464a      	mov	r2, r9
 800f37c:	4601      	mov	r1, r0
 800f37e:	4605      	mov	r5, r0
 800f380:	4658      	mov	r0, fp
 800f382:	f000 fc61 	bl	800fc48 <__multiply>
 800f386:	4649      	mov	r1, r9
 800f388:	9004      	str	r0, [sp, #16]
 800f38a:	4658      	mov	r0, fp
 800f38c:	f000 fb48 	bl	800fa20 <_Bfree>
 800f390:	9b04      	ldr	r3, [sp, #16]
 800f392:	4699      	mov	r9, r3
 800f394:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f396:	1b1a      	subs	r2, r3, r4
 800f398:	d004      	beq.n	800f3a4 <_dtoa_r+0x78c>
 800f39a:	4649      	mov	r1, r9
 800f39c:	4658      	mov	r0, fp
 800f39e:	f000 fcfd 	bl	800fd9c <__pow5mult>
 800f3a2:	4681      	mov	r9, r0
 800f3a4:	2101      	movs	r1, #1
 800f3a6:	4658      	mov	r0, fp
 800f3a8:	f000 fc38 	bl	800fc1c <__i2b>
 800f3ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f3ae:	4604      	mov	r4, r0
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	f000 81cf 	beq.w	800f754 <_dtoa_r+0xb3c>
 800f3b6:	461a      	mov	r2, r3
 800f3b8:	4601      	mov	r1, r0
 800f3ba:	4658      	mov	r0, fp
 800f3bc:	f000 fcee 	bl	800fd9c <__pow5mult>
 800f3c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f3c2:	2b01      	cmp	r3, #1
 800f3c4:	4604      	mov	r4, r0
 800f3c6:	f300 8095 	bgt.w	800f4f4 <_dtoa_r+0x8dc>
 800f3ca:	9b02      	ldr	r3, [sp, #8]
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	f040 8087 	bne.w	800f4e0 <_dtoa_r+0x8c8>
 800f3d2:	9b03      	ldr	r3, [sp, #12]
 800f3d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	f040 8089 	bne.w	800f4f0 <_dtoa_r+0x8d8>
 800f3de:	9b03      	ldr	r3, [sp, #12]
 800f3e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f3e4:	0d1b      	lsrs	r3, r3, #20
 800f3e6:	051b      	lsls	r3, r3, #20
 800f3e8:	b12b      	cbz	r3, 800f3f6 <_dtoa_r+0x7de>
 800f3ea:	9b08      	ldr	r3, [sp, #32]
 800f3ec:	3301      	adds	r3, #1
 800f3ee:	9308      	str	r3, [sp, #32]
 800f3f0:	f108 0801 	add.w	r8, r8, #1
 800f3f4:	2301      	movs	r3, #1
 800f3f6:	930a      	str	r3, [sp, #40]	@ 0x28
 800f3f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	f000 81b0 	beq.w	800f760 <_dtoa_r+0xb48>
 800f400:	6923      	ldr	r3, [r4, #16]
 800f402:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f406:	6918      	ldr	r0, [r3, #16]
 800f408:	f000 fbbc 	bl	800fb84 <__hi0bits>
 800f40c:	f1c0 0020 	rsb	r0, r0, #32
 800f410:	9b08      	ldr	r3, [sp, #32]
 800f412:	4418      	add	r0, r3
 800f414:	f010 001f 	ands.w	r0, r0, #31
 800f418:	d077      	beq.n	800f50a <_dtoa_r+0x8f2>
 800f41a:	f1c0 0320 	rsb	r3, r0, #32
 800f41e:	2b04      	cmp	r3, #4
 800f420:	dd6b      	ble.n	800f4fa <_dtoa_r+0x8e2>
 800f422:	9b08      	ldr	r3, [sp, #32]
 800f424:	f1c0 001c 	rsb	r0, r0, #28
 800f428:	4403      	add	r3, r0
 800f42a:	4480      	add	r8, r0
 800f42c:	4406      	add	r6, r0
 800f42e:	9308      	str	r3, [sp, #32]
 800f430:	f1b8 0f00 	cmp.w	r8, #0
 800f434:	dd05      	ble.n	800f442 <_dtoa_r+0x82a>
 800f436:	4649      	mov	r1, r9
 800f438:	4642      	mov	r2, r8
 800f43a:	4658      	mov	r0, fp
 800f43c:	f000 fd08 	bl	800fe50 <__lshift>
 800f440:	4681      	mov	r9, r0
 800f442:	9b08      	ldr	r3, [sp, #32]
 800f444:	2b00      	cmp	r3, #0
 800f446:	dd05      	ble.n	800f454 <_dtoa_r+0x83c>
 800f448:	4621      	mov	r1, r4
 800f44a:	461a      	mov	r2, r3
 800f44c:	4658      	mov	r0, fp
 800f44e:	f000 fcff 	bl	800fe50 <__lshift>
 800f452:	4604      	mov	r4, r0
 800f454:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f456:	2b00      	cmp	r3, #0
 800f458:	d059      	beq.n	800f50e <_dtoa_r+0x8f6>
 800f45a:	4621      	mov	r1, r4
 800f45c:	4648      	mov	r0, r9
 800f45e:	f000 fd63 	bl	800ff28 <__mcmp>
 800f462:	2800      	cmp	r0, #0
 800f464:	da53      	bge.n	800f50e <_dtoa_r+0x8f6>
 800f466:	1e7b      	subs	r3, r7, #1
 800f468:	9304      	str	r3, [sp, #16]
 800f46a:	4649      	mov	r1, r9
 800f46c:	2300      	movs	r3, #0
 800f46e:	220a      	movs	r2, #10
 800f470:	4658      	mov	r0, fp
 800f472:	f000 faf7 	bl	800fa64 <__multadd>
 800f476:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f478:	4681      	mov	r9, r0
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	f000 8172 	beq.w	800f764 <_dtoa_r+0xb4c>
 800f480:	2300      	movs	r3, #0
 800f482:	4629      	mov	r1, r5
 800f484:	220a      	movs	r2, #10
 800f486:	4658      	mov	r0, fp
 800f488:	f000 faec 	bl	800fa64 <__multadd>
 800f48c:	9b00      	ldr	r3, [sp, #0]
 800f48e:	2b00      	cmp	r3, #0
 800f490:	4605      	mov	r5, r0
 800f492:	dc67      	bgt.n	800f564 <_dtoa_r+0x94c>
 800f494:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f496:	2b02      	cmp	r3, #2
 800f498:	dc41      	bgt.n	800f51e <_dtoa_r+0x906>
 800f49a:	e063      	b.n	800f564 <_dtoa_r+0x94c>
 800f49c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f49e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800f4a2:	e746      	b.n	800f332 <_dtoa_r+0x71a>
 800f4a4:	9b07      	ldr	r3, [sp, #28]
 800f4a6:	1e5c      	subs	r4, r3, #1
 800f4a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f4aa:	42a3      	cmp	r3, r4
 800f4ac:	bfbf      	itttt	lt
 800f4ae:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800f4b0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800f4b2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800f4b4:	1ae3      	sublt	r3, r4, r3
 800f4b6:	bfb4      	ite	lt
 800f4b8:	18d2      	addlt	r2, r2, r3
 800f4ba:	1b1c      	subge	r4, r3, r4
 800f4bc:	9b07      	ldr	r3, [sp, #28]
 800f4be:	bfbc      	itt	lt
 800f4c0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800f4c2:	2400      	movlt	r4, #0
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	bfb5      	itete	lt
 800f4c8:	eba8 0603 	sublt.w	r6, r8, r3
 800f4cc:	9b07      	ldrge	r3, [sp, #28]
 800f4ce:	2300      	movlt	r3, #0
 800f4d0:	4646      	movge	r6, r8
 800f4d2:	e730      	b.n	800f336 <_dtoa_r+0x71e>
 800f4d4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f4d6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800f4d8:	4646      	mov	r6, r8
 800f4da:	e735      	b.n	800f348 <_dtoa_r+0x730>
 800f4dc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f4de:	e75c      	b.n	800f39a <_dtoa_r+0x782>
 800f4e0:	2300      	movs	r3, #0
 800f4e2:	e788      	b.n	800f3f6 <_dtoa_r+0x7de>
 800f4e4:	3fe00000 	.word	0x3fe00000
 800f4e8:	40240000 	.word	0x40240000
 800f4ec:	40140000 	.word	0x40140000
 800f4f0:	9b02      	ldr	r3, [sp, #8]
 800f4f2:	e780      	b.n	800f3f6 <_dtoa_r+0x7de>
 800f4f4:	2300      	movs	r3, #0
 800f4f6:	930a      	str	r3, [sp, #40]	@ 0x28
 800f4f8:	e782      	b.n	800f400 <_dtoa_r+0x7e8>
 800f4fa:	d099      	beq.n	800f430 <_dtoa_r+0x818>
 800f4fc:	9a08      	ldr	r2, [sp, #32]
 800f4fe:	331c      	adds	r3, #28
 800f500:	441a      	add	r2, r3
 800f502:	4498      	add	r8, r3
 800f504:	441e      	add	r6, r3
 800f506:	9208      	str	r2, [sp, #32]
 800f508:	e792      	b.n	800f430 <_dtoa_r+0x818>
 800f50a:	4603      	mov	r3, r0
 800f50c:	e7f6      	b.n	800f4fc <_dtoa_r+0x8e4>
 800f50e:	9b07      	ldr	r3, [sp, #28]
 800f510:	9704      	str	r7, [sp, #16]
 800f512:	2b00      	cmp	r3, #0
 800f514:	dc20      	bgt.n	800f558 <_dtoa_r+0x940>
 800f516:	9300      	str	r3, [sp, #0]
 800f518:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f51a:	2b02      	cmp	r3, #2
 800f51c:	dd1e      	ble.n	800f55c <_dtoa_r+0x944>
 800f51e:	9b00      	ldr	r3, [sp, #0]
 800f520:	2b00      	cmp	r3, #0
 800f522:	f47f aec0 	bne.w	800f2a6 <_dtoa_r+0x68e>
 800f526:	4621      	mov	r1, r4
 800f528:	2205      	movs	r2, #5
 800f52a:	4658      	mov	r0, fp
 800f52c:	f000 fa9a 	bl	800fa64 <__multadd>
 800f530:	4601      	mov	r1, r0
 800f532:	4604      	mov	r4, r0
 800f534:	4648      	mov	r0, r9
 800f536:	f000 fcf7 	bl	800ff28 <__mcmp>
 800f53a:	2800      	cmp	r0, #0
 800f53c:	f77f aeb3 	ble.w	800f2a6 <_dtoa_r+0x68e>
 800f540:	4656      	mov	r6, sl
 800f542:	2331      	movs	r3, #49	@ 0x31
 800f544:	f806 3b01 	strb.w	r3, [r6], #1
 800f548:	9b04      	ldr	r3, [sp, #16]
 800f54a:	3301      	adds	r3, #1
 800f54c:	9304      	str	r3, [sp, #16]
 800f54e:	e6ae      	b.n	800f2ae <_dtoa_r+0x696>
 800f550:	9c07      	ldr	r4, [sp, #28]
 800f552:	9704      	str	r7, [sp, #16]
 800f554:	4625      	mov	r5, r4
 800f556:	e7f3      	b.n	800f540 <_dtoa_r+0x928>
 800f558:	9b07      	ldr	r3, [sp, #28]
 800f55a:	9300      	str	r3, [sp, #0]
 800f55c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f55e:	2b00      	cmp	r3, #0
 800f560:	f000 8104 	beq.w	800f76c <_dtoa_r+0xb54>
 800f564:	2e00      	cmp	r6, #0
 800f566:	dd05      	ble.n	800f574 <_dtoa_r+0x95c>
 800f568:	4629      	mov	r1, r5
 800f56a:	4632      	mov	r2, r6
 800f56c:	4658      	mov	r0, fp
 800f56e:	f000 fc6f 	bl	800fe50 <__lshift>
 800f572:	4605      	mov	r5, r0
 800f574:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f576:	2b00      	cmp	r3, #0
 800f578:	d05a      	beq.n	800f630 <_dtoa_r+0xa18>
 800f57a:	6869      	ldr	r1, [r5, #4]
 800f57c:	4658      	mov	r0, fp
 800f57e:	f000 fa0f 	bl	800f9a0 <_Balloc>
 800f582:	4606      	mov	r6, r0
 800f584:	b928      	cbnz	r0, 800f592 <_dtoa_r+0x97a>
 800f586:	4b84      	ldr	r3, [pc, #528]	@ (800f798 <_dtoa_r+0xb80>)
 800f588:	4602      	mov	r2, r0
 800f58a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800f58e:	f7ff bb5a 	b.w	800ec46 <_dtoa_r+0x2e>
 800f592:	692a      	ldr	r2, [r5, #16]
 800f594:	3202      	adds	r2, #2
 800f596:	0092      	lsls	r2, r2, #2
 800f598:	f105 010c 	add.w	r1, r5, #12
 800f59c:	300c      	adds	r0, #12
 800f59e:	f7ff fa9e 	bl	800eade <memcpy>
 800f5a2:	2201      	movs	r2, #1
 800f5a4:	4631      	mov	r1, r6
 800f5a6:	4658      	mov	r0, fp
 800f5a8:	f000 fc52 	bl	800fe50 <__lshift>
 800f5ac:	f10a 0301 	add.w	r3, sl, #1
 800f5b0:	9307      	str	r3, [sp, #28]
 800f5b2:	9b00      	ldr	r3, [sp, #0]
 800f5b4:	4453      	add	r3, sl
 800f5b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f5b8:	9b02      	ldr	r3, [sp, #8]
 800f5ba:	f003 0301 	and.w	r3, r3, #1
 800f5be:	462f      	mov	r7, r5
 800f5c0:	930a      	str	r3, [sp, #40]	@ 0x28
 800f5c2:	4605      	mov	r5, r0
 800f5c4:	9b07      	ldr	r3, [sp, #28]
 800f5c6:	4621      	mov	r1, r4
 800f5c8:	3b01      	subs	r3, #1
 800f5ca:	4648      	mov	r0, r9
 800f5cc:	9300      	str	r3, [sp, #0]
 800f5ce:	f7ff fa9b 	bl	800eb08 <quorem>
 800f5d2:	4639      	mov	r1, r7
 800f5d4:	9002      	str	r0, [sp, #8]
 800f5d6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800f5da:	4648      	mov	r0, r9
 800f5dc:	f000 fca4 	bl	800ff28 <__mcmp>
 800f5e0:	462a      	mov	r2, r5
 800f5e2:	9008      	str	r0, [sp, #32]
 800f5e4:	4621      	mov	r1, r4
 800f5e6:	4658      	mov	r0, fp
 800f5e8:	f000 fcba 	bl	800ff60 <__mdiff>
 800f5ec:	68c2      	ldr	r2, [r0, #12]
 800f5ee:	4606      	mov	r6, r0
 800f5f0:	bb02      	cbnz	r2, 800f634 <_dtoa_r+0xa1c>
 800f5f2:	4601      	mov	r1, r0
 800f5f4:	4648      	mov	r0, r9
 800f5f6:	f000 fc97 	bl	800ff28 <__mcmp>
 800f5fa:	4602      	mov	r2, r0
 800f5fc:	4631      	mov	r1, r6
 800f5fe:	4658      	mov	r0, fp
 800f600:	920e      	str	r2, [sp, #56]	@ 0x38
 800f602:	f000 fa0d 	bl	800fa20 <_Bfree>
 800f606:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f608:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f60a:	9e07      	ldr	r6, [sp, #28]
 800f60c:	ea43 0102 	orr.w	r1, r3, r2
 800f610:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f612:	4319      	orrs	r1, r3
 800f614:	d110      	bne.n	800f638 <_dtoa_r+0xa20>
 800f616:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f61a:	d029      	beq.n	800f670 <_dtoa_r+0xa58>
 800f61c:	9b08      	ldr	r3, [sp, #32]
 800f61e:	2b00      	cmp	r3, #0
 800f620:	dd02      	ble.n	800f628 <_dtoa_r+0xa10>
 800f622:	9b02      	ldr	r3, [sp, #8]
 800f624:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800f628:	9b00      	ldr	r3, [sp, #0]
 800f62a:	f883 8000 	strb.w	r8, [r3]
 800f62e:	e63f      	b.n	800f2b0 <_dtoa_r+0x698>
 800f630:	4628      	mov	r0, r5
 800f632:	e7bb      	b.n	800f5ac <_dtoa_r+0x994>
 800f634:	2201      	movs	r2, #1
 800f636:	e7e1      	b.n	800f5fc <_dtoa_r+0x9e4>
 800f638:	9b08      	ldr	r3, [sp, #32]
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	db04      	blt.n	800f648 <_dtoa_r+0xa30>
 800f63e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f640:	430b      	orrs	r3, r1
 800f642:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f644:	430b      	orrs	r3, r1
 800f646:	d120      	bne.n	800f68a <_dtoa_r+0xa72>
 800f648:	2a00      	cmp	r2, #0
 800f64a:	dded      	ble.n	800f628 <_dtoa_r+0xa10>
 800f64c:	4649      	mov	r1, r9
 800f64e:	2201      	movs	r2, #1
 800f650:	4658      	mov	r0, fp
 800f652:	f000 fbfd 	bl	800fe50 <__lshift>
 800f656:	4621      	mov	r1, r4
 800f658:	4681      	mov	r9, r0
 800f65a:	f000 fc65 	bl	800ff28 <__mcmp>
 800f65e:	2800      	cmp	r0, #0
 800f660:	dc03      	bgt.n	800f66a <_dtoa_r+0xa52>
 800f662:	d1e1      	bne.n	800f628 <_dtoa_r+0xa10>
 800f664:	f018 0f01 	tst.w	r8, #1
 800f668:	d0de      	beq.n	800f628 <_dtoa_r+0xa10>
 800f66a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f66e:	d1d8      	bne.n	800f622 <_dtoa_r+0xa0a>
 800f670:	9a00      	ldr	r2, [sp, #0]
 800f672:	2339      	movs	r3, #57	@ 0x39
 800f674:	7013      	strb	r3, [r2, #0]
 800f676:	4633      	mov	r3, r6
 800f678:	461e      	mov	r6, r3
 800f67a:	3b01      	subs	r3, #1
 800f67c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800f680:	2a39      	cmp	r2, #57	@ 0x39
 800f682:	d052      	beq.n	800f72a <_dtoa_r+0xb12>
 800f684:	3201      	adds	r2, #1
 800f686:	701a      	strb	r2, [r3, #0]
 800f688:	e612      	b.n	800f2b0 <_dtoa_r+0x698>
 800f68a:	2a00      	cmp	r2, #0
 800f68c:	dd07      	ble.n	800f69e <_dtoa_r+0xa86>
 800f68e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f692:	d0ed      	beq.n	800f670 <_dtoa_r+0xa58>
 800f694:	9a00      	ldr	r2, [sp, #0]
 800f696:	f108 0301 	add.w	r3, r8, #1
 800f69a:	7013      	strb	r3, [r2, #0]
 800f69c:	e608      	b.n	800f2b0 <_dtoa_r+0x698>
 800f69e:	9b07      	ldr	r3, [sp, #28]
 800f6a0:	9a07      	ldr	r2, [sp, #28]
 800f6a2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800f6a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f6a8:	4293      	cmp	r3, r2
 800f6aa:	d028      	beq.n	800f6fe <_dtoa_r+0xae6>
 800f6ac:	4649      	mov	r1, r9
 800f6ae:	2300      	movs	r3, #0
 800f6b0:	220a      	movs	r2, #10
 800f6b2:	4658      	mov	r0, fp
 800f6b4:	f000 f9d6 	bl	800fa64 <__multadd>
 800f6b8:	42af      	cmp	r7, r5
 800f6ba:	4681      	mov	r9, r0
 800f6bc:	f04f 0300 	mov.w	r3, #0
 800f6c0:	f04f 020a 	mov.w	r2, #10
 800f6c4:	4639      	mov	r1, r7
 800f6c6:	4658      	mov	r0, fp
 800f6c8:	d107      	bne.n	800f6da <_dtoa_r+0xac2>
 800f6ca:	f000 f9cb 	bl	800fa64 <__multadd>
 800f6ce:	4607      	mov	r7, r0
 800f6d0:	4605      	mov	r5, r0
 800f6d2:	9b07      	ldr	r3, [sp, #28]
 800f6d4:	3301      	adds	r3, #1
 800f6d6:	9307      	str	r3, [sp, #28]
 800f6d8:	e774      	b.n	800f5c4 <_dtoa_r+0x9ac>
 800f6da:	f000 f9c3 	bl	800fa64 <__multadd>
 800f6de:	4629      	mov	r1, r5
 800f6e0:	4607      	mov	r7, r0
 800f6e2:	2300      	movs	r3, #0
 800f6e4:	220a      	movs	r2, #10
 800f6e6:	4658      	mov	r0, fp
 800f6e8:	f000 f9bc 	bl	800fa64 <__multadd>
 800f6ec:	4605      	mov	r5, r0
 800f6ee:	e7f0      	b.n	800f6d2 <_dtoa_r+0xaba>
 800f6f0:	9b00      	ldr	r3, [sp, #0]
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	bfcc      	ite	gt
 800f6f6:	461e      	movgt	r6, r3
 800f6f8:	2601      	movle	r6, #1
 800f6fa:	4456      	add	r6, sl
 800f6fc:	2700      	movs	r7, #0
 800f6fe:	4649      	mov	r1, r9
 800f700:	2201      	movs	r2, #1
 800f702:	4658      	mov	r0, fp
 800f704:	f000 fba4 	bl	800fe50 <__lshift>
 800f708:	4621      	mov	r1, r4
 800f70a:	4681      	mov	r9, r0
 800f70c:	f000 fc0c 	bl	800ff28 <__mcmp>
 800f710:	2800      	cmp	r0, #0
 800f712:	dcb0      	bgt.n	800f676 <_dtoa_r+0xa5e>
 800f714:	d102      	bne.n	800f71c <_dtoa_r+0xb04>
 800f716:	f018 0f01 	tst.w	r8, #1
 800f71a:	d1ac      	bne.n	800f676 <_dtoa_r+0xa5e>
 800f71c:	4633      	mov	r3, r6
 800f71e:	461e      	mov	r6, r3
 800f720:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f724:	2a30      	cmp	r2, #48	@ 0x30
 800f726:	d0fa      	beq.n	800f71e <_dtoa_r+0xb06>
 800f728:	e5c2      	b.n	800f2b0 <_dtoa_r+0x698>
 800f72a:	459a      	cmp	sl, r3
 800f72c:	d1a4      	bne.n	800f678 <_dtoa_r+0xa60>
 800f72e:	9b04      	ldr	r3, [sp, #16]
 800f730:	3301      	adds	r3, #1
 800f732:	9304      	str	r3, [sp, #16]
 800f734:	2331      	movs	r3, #49	@ 0x31
 800f736:	f88a 3000 	strb.w	r3, [sl]
 800f73a:	e5b9      	b.n	800f2b0 <_dtoa_r+0x698>
 800f73c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f73e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800f79c <_dtoa_r+0xb84>
 800f742:	b11b      	cbz	r3, 800f74c <_dtoa_r+0xb34>
 800f744:	f10a 0308 	add.w	r3, sl, #8
 800f748:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800f74a:	6013      	str	r3, [r2, #0]
 800f74c:	4650      	mov	r0, sl
 800f74e:	b019      	add	sp, #100	@ 0x64
 800f750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f754:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f756:	2b01      	cmp	r3, #1
 800f758:	f77f ae37 	ble.w	800f3ca <_dtoa_r+0x7b2>
 800f75c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f75e:	930a      	str	r3, [sp, #40]	@ 0x28
 800f760:	2001      	movs	r0, #1
 800f762:	e655      	b.n	800f410 <_dtoa_r+0x7f8>
 800f764:	9b00      	ldr	r3, [sp, #0]
 800f766:	2b00      	cmp	r3, #0
 800f768:	f77f aed6 	ble.w	800f518 <_dtoa_r+0x900>
 800f76c:	4656      	mov	r6, sl
 800f76e:	4621      	mov	r1, r4
 800f770:	4648      	mov	r0, r9
 800f772:	f7ff f9c9 	bl	800eb08 <quorem>
 800f776:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800f77a:	f806 8b01 	strb.w	r8, [r6], #1
 800f77e:	9b00      	ldr	r3, [sp, #0]
 800f780:	eba6 020a 	sub.w	r2, r6, sl
 800f784:	4293      	cmp	r3, r2
 800f786:	ddb3      	ble.n	800f6f0 <_dtoa_r+0xad8>
 800f788:	4649      	mov	r1, r9
 800f78a:	2300      	movs	r3, #0
 800f78c:	220a      	movs	r2, #10
 800f78e:	4658      	mov	r0, fp
 800f790:	f000 f968 	bl	800fa64 <__multadd>
 800f794:	4681      	mov	r9, r0
 800f796:	e7ea      	b.n	800f76e <_dtoa_r+0xb56>
 800f798:	08013916 	.word	0x08013916
 800f79c:	0801389a 	.word	0x0801389a

0800f7a0 <_free_r>:
 800f7a0:	b538      	push	{r3, r4, r5, lr}
 800f7a2:	4605      	mov	r5, r0
 800f7a4:	2900      	cmp	r1, #0
 800f7a6:	d041      	beq.n	800f82c <_free_r+0x8c>
 800f7a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f7ac:	1f0c      	subs	r4, r1, #4
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	bfb8      	it	lt
 800f7b2:	18e4      	addlt	r4, r4, r3
 800f7b4:	f000 f8e8 	bl	800f988 <__malloc_lock>
 800f7b8:	4a1d      	ldr	r2, [pc, #116]	@ (800f830 <_free_r+0x90>)
 800f7ba:	6813      	ldr	r3, [r2, #0]
 800f7bc:	b933      	cbnz	r3, 800f7cc <_free_r+0x2c>
 800f7be:	6063      	str	r3, [r4, #4]
 800f7c0:	6014      	str	r4, [r2, #0]
 800f7c2:	4628      	mov	r0, r5
 800f7c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f7c8:	f000 b8e4 	b.w	800f994 <__malloc_unlock>
 800f7cc:	42a3      	cmp	r3, r4
 800f7ce:	d908      	bls.n	800f7e2 <_free_r+0x42>
 800f7d0:	6820      	ldr	r0, [r4, #0]
 800f7d2:	1821      	adds	r1, r4, r0
 800f7d4:	428b      	cmp	r3, r1
 800f7d6:	bf01      	itttt	eq
 800f7d8:	6819      	ldreq	r1, [r3, #0]
 800f7da:	685b      	ldreq	r3, [r3, #4]
 800f7dc:	1809      	addeq	r1, r1, r0
 800f7de:	6021      	streq	r1, [r4, #0]
 800f7e0:	e7ed      	b.n	800f7be <_free_r+0x1e>
 800f7e2:	461a      	mov	r2, r3
 800f7e4:	685b      	ldr	r3, [r3, #4]
 800f7e6:	b10b      	cbz	r3, 800f7ec <_free_r+0x4c>
 800f7e8:	42a3      	cmp	r3, r4
 800f7ea:	d9fa      	bls.n	800f7e2 <_free_r+0x42>
 800f7ec:	6811      	ldr	r1, [r2, #0]
 800f7ee:	1850      	adds	r0, r2, r1
 800f7f0:	42a0      	cmp	r0, r4
 800f7f2:	d10b      	bne.n	800f80c <_free_r+0x6c>
 800f7f4:	6820      	ldr	r0, [r4, #0]
 800f7f6:	4401      	add	r1, r0
 800f7f8:	1850      	adds	r0, r2, r1
 800f7fa:	4283      	cmp	r3, r0
 800f7fc:	6011      	str	r1, [r2, #0]
 800f7fe:	d1e0      	bne.n	800f7c2 <_free_r+0x22>
 800f800:	6818      	ldr	r0, [r3, #0]
 800f802:	685b      	ldr	r3, [r3, #4]
 800f804:	6053      	str	r3, [r2, #4]
 800f806:	4408      	add	r0, r1
 800f808:	6010      	str	r0, [r2, #0]
 800f80a:	e7da      	b.n	800f7c2 <_free_r+0x22>
 800f80c:	d902      	bls.n	800f814 <_free_r+0x74>
 800f80e:	230c      	movs	r3, #12
 800f810:	602b      	str	r3, [r5, #0]
 800f812:	e7d6      	b.n	800f7c2 <_free_r+0x22>
 800f814:	6820      	ldr	r0, [r4, #0]
 800f816:	1821      	adds	r1, r4, r0
 800f818:	428b      	cmp	r3, r1
 800f81a:	bf04      	itt	eq
 800f81c:	6819      	ldreq	r1, [r3, #0]
 800f81e:	685b      	ldreq	r3, [r3, #4]
 800f820:	6063      	str	r3, [r4, #4]
 800f822:	bf04      	itt	eq
 800f824:	1809      	addeq	r1, r1, r0
 800f826:	6021      	streq	r1, [r4, #0]
 800f828:	6054      	str	r4, [r2, #4]
 800f82a:	e7ca      	b.n	800f7c2 <_free_r+0x22>
 800f82c:	bd38      	pop	{r3, r4, r5, pc}
 800f82e:	bf00      	nop
 800f830:	2000377c 	.word	0x2000377c

0800f834 <malloc>:
 800f834:	4b02      	ldr	r3, [pc, #8]	@ (800f840 <malloc+0xc>)
 800f836:	4601      	mov	r1, r0
 800f838:	6818      	ldr	r0, [r3, #0]
 800f83a:	f000 b825 	b.w	800f888 <_malloc_r>
 800f83e:	bf00      	nop
 800f840:	2000003c 	.word	0x2000003c

0800f844 <sbrk_aligned>:
 800f844:	b570      	push	{r4, r5, r6, lr}
 800f846:	4e0f      	ldr	r6, [pc, #60]	@ (800f884 <sbrk_aligned+0x40>)
 800f848:	460c      	mov	r4, r1
 800f84a:	6831      	ldr	r1, [r6, #0]
 800f84c:	4605      	mov	r5, r0
 800f84e:	b911      	cbnz	r1, 800f856 <sbrk_aligned+0x12>
 800f850:	f002 f814 	bl	801187c <_sbrk_r>
 800f854:	6030      	str	r0, [r6, #0]
 800f856:	4621      	mov	r1, r4
 800f858:	4628      	mov	r0, r5
 800f85a:	f002 f80f 	bl	801187c <_sbrk_r>
 800f85e:	1c43      	adds	r3, r0, #1
 800f860:	d103      	bne.n	800f86a <sbrk_aligned+0x26>
 800f862:	f04f 34ff 	mov.w	r4, #4294967295
 800f866:	4620      	mov	r0, r4
 800f868:	bd70      	pop	{r4, r5, r6, pc}
 800f86a:	1cc4      	adds	r4, r0, #3
 800f86c:	f024 0403 	bic.w	r4, r4, #3
 800f870:	42a0      	cmp	r0, r4
 800f872:	d0f8      	beq.n	800f866 <sbrk_aligned+0x22>
 800f874:	1a21      	subs	r1, r4, r0
 800f876:	4628      	mov	r0, r5
 800f878:	f002 f800 	bl	801187c <_sbrk_r>
 800f87c:	3001      	adds	r0, #1
 800f87e:	d1f2      	bne.n	800f866 <sbrk_aligned+0x22>
 800f880:	e7ef      	b.n	800f862 <sbrk_aligned+0x1e>
 800f882:	bf00      	nop
 800f884:	20003778 	.word	0x20003778

0800f888 <_malloc_r>:
 800f888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f88c:	1ccd      	adds	r5, r1, #3
 800f88e:	f025 0503 	bic.w	r5, r5, #3
 800f892:	3508      	adds	r5, #8
 800f894:	2d0c      	cmp	r5, #12
 800f896:	bf38      	it	cc
 800f898:	250c      	movcc	r5, #12
 800f89a:	2d00      	cmp	r5, #0
 800f89c:	4606      	mov	r6, r0
 800f89e:	db01      	blt.n	800f8a4 <_malloc_r+0x1c>
 800f8a0:	42a9      	cmp	r1, r5
 800f8a2:	d904      	bls.n	800f8ae <_malloc_r+0x26>
 800f8a4:	230c      	movs	r3, #12
 800f8a6:	6033      	str	r3, [r6, #0]
 800f8a8:	2000      	movs	r0, #0
 800f8aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f8ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f984 <_malloc_r+0xfc>
 800f8b2:	f000 f869 	bl	800f988 <__malloc_lock>
 800f8b6:	f8d8 3000 	ldr.w	r3, [r8]
 800f8ba:	461c      	mov	r4, r3
 800f8bc:	bb44      	cbnz	r4, 800f910 <_malloc_r+0x88>
 800f8be:	4629      	mov	r1, r5
 800f8c0:	4630      	mov	r0, r6
 800f8c2:	f7ff ffbf 	bl	800f844 <sbrk_aligned>
 800f8c6:	1c43      	adds	r3, r0, #1
 800f8c8:	4604      	mov	r4, r0
 800f8ca:	d158      	bne.n	800f97e <_malloc_r+0xf6>
 800f8cc:	f8d8 4000 	ldr.w	r4, [r8]
 800f8d0:	4627      	mov	r7, r4
 800f8d2:	2f00      	cmp	r7, #0
 800f8d4:	d143      	bne.n	800f95e <_malloc_r+0xd6>
 800f8d6:	2c00      	cmp	r4, #0
 800f8d8:	d04b      	beq.n	800f972 <_malloc_r+0xea>
 800f8da:	6823      	ldr	r3, [r4, #0]
 800f8dc:	4639      	mov	r1, r7
 800f8de:	4630      	mov	r0, r6
 800f8e0:	eb04 0903 	add.w	r9, r4, r3
 800f8e4:	f001 ffca 	bl	801187c <_sbrk_r>
 800f8e8:	4581      	cmp	r9, r0
 800f8ea:	d142      	bne.n	800f972 <_malloc_r+0xea>
 800f8ec:	6821      	ldr	r1, [r4, #0]
 800f8ee:	1a6d      	subs	r5, r5, r1
 800f8f0:	4629      	mov	r1, r5
 800f8f2:	4630      	mov	r0, r6
 800f8f4:	f7ff ffa6 	bl	800f844 <sbrk_aligned>
 800f8f8:	3001      	adds	r0, #1
 800f8fa:	d03a      	beq.n	800f972 <_malloc_r+0xea>
 800f8fc:	6823      	ldr	r3, [r4, #0]
 800f8fe:	442b      	add	r3, r5
 800f900:	6023      	str	r3, [r4, #0]
 800f902:	f8d8 3000 	ldr.w	r3, [r8]
 800f906:	685a      	ldr	r2, [r3, #4]
 800f908:	bb62      	cbnz	r2, 800f964 <_malloc_r+0xdc>
 800f90a:	f8c8 7000 	str.w	r7, [r8]
 800f90e:	e00f      	b.n	800f930 <_malloc_r+0xa8>
 800f910:	6822      	ldr	r2, [r4, #0]
 800f912:	1b52      	subs	r2, r2, r5
 800f914:	d420      	bmi.n	800f958 <_malloc_r+0xd0>
 800f916:	2a0b      	cmp	r2, #11
 800f918:	d917      	bls.n	800f94a <_malloc_r+0xc2>
 800f91a:	1961      	adds	r1, r4, r5
 800f91c:	42a3      	cmp	r3, r4
 800f91e:	6025      	str	r5, [r4, #0]
 800f920:	bf18      	it	ne
 800f922:	6059      	strne	r1, [r3, #4]
 800f924:	6863      	ldr	r3, [r4, #4]
 800f926:	bf08      	it	eq
 800f928:	f8c8 1000 	streq.w	r1, [r8]
 800f92c:	5162      	str	r2, [r4, r5]
 800f92e:	604b      	str	r3, [r1, #4]
 800f930:	4630      	mov	r0, r6
 800f932:	f000 f82f 	bl	800f994 <__malloc_unlock>
 800f936:	f104 000b 	add.w	r0, r4, #11
 800f93a:	1d23      	adds	r3, r4, #4
 800f93c:	f020 0007 	bic.w	r0, r0, #7
 800f940:	1ac2      	subs	r2, r0, r3
 800f942:	bf1c      	itt	ne
 800f944:	1a1b      	subne	r3, r3, r0
 800f946:	50a3      	strne	r3, [r4, r2]
 800f948:	e7af      	b.n	800f8aa <_malloc_r+0x22>
 800f94a:	6862      	ldr	r2, [r4, #4]
 800f94c:	42a3      	cmp	r3, r4
 800f94e:	bf0c      	ite	eq
 800f950:	f8c8 2000 	streq.w	r2, [r8]
 800f954:	605a      	strne	r2, [r3, #4]
 800f956:	e7eb      	b.n	800f930 <_malloc_r+0xa8>
 800f958:	4623      	mov	r3, r4
 800f95a:	6864      	ldr	r4, [r4, #4]
 800f95c:	e7ae      	b.n	800f8bc <_malloc_r+0x34>
 800f95e:	463c      	mov	r4, r7
 800f960:	687f      	ldr	r7, [r7, #4]
 800f962:	e7b6      	b.n	800f8d2 <_malloc_r+0x4a>
 800f964:	461a      	mov	r2, r3
 800f966:	685b      	ldr	r3, [r3, #4]
 800f968:	42a3      	cmp	r3, r4
 800f96a:	d1fb      	bne.n	800f964 <_malloc_r+0xdc>
 800f96c:	2300      	movs	r3, #0
 800f96e:	6053      	str	r3, [r2, #4]
 800f970:	e7de      	b.n	800f930 <_malloc_r+0xa8>
 800f972:	230c      	movs	r3, #12
 800f974:	6033      	str	r3, [r6, #0]
 800f976:	4630      	mov	r0, r6
 800f978:	f000 f80c 	bl	800f994 <__malloc_unlock>
 800f97c:	e794      	b.n	800f8a8 <_malloc_r+0x20>
 800f97e:	6005      	str	r5, [r0, #0]
 800f980:	e7d6      	b.n	800f930 <_malloc_r+0xa8>
 800f982:	bf00      	nop
 800f984:	2000377c 	.word	0x2000377c

0800f988 <__malloc_lock>:
 800f988:	4801      	ldr	r0, [pc, #4]	@ (800f990 <__malloc_lock+0x8>)
 800f98a:	f7ff b8a6 	b.w	800eada <__retarget_lock_acquire_recursive>
 800f98e:	bf00      	nop
 800f990:	20003774 	.word	0x20003774

0800f994 <__malloc_unlock>:
 800f994:	4801      	ldr	r0, [pc, #4]	@ (800f99c <__malloc_unlock+0x8>)
 800f996:	f7ff b8a1 	b.w	800eadc <__retarget_lock_release_recursive>
 800f99a:	bf00      	nop
 800f99c:	20003774 	.word	0x20003774

0800f9a0 <_Balloc>:
 800f9a0:	b570      	push	{r4, r5, r6, lr}
 800f9a2:	69c6      	ldr	r6, [r0, #28]
 800f9a4:	4604      	mov	r4, r0
 800f9a6:	460d      	mov	r5, r1
 800f9a8:	b976      	cbnz	r6, 800f9c8 <_Balloc+0x28>
 800f9aa:	2010      	movs	r0, #16
 800f9ac:	f7ff ff42 	bl	800f834 <malloc>
 800f9b0:	4602      	mov	r2, r0
 800f9b2:	61e0      	str	r0, [r4, #28]
 800f9b4:	b920      	cbnz	r0, 800f9c0 <_Balloc+0x20>
 800f9b6:	4b18      	ldr	r3, [pc, #96]	@ (800fa18 <_Balloc+0x78>)
 800f9b8:	4818      	ldr	r0, [pc, #96]	@ (800fa1c <_Balloc+0x7c>)
 800f9ba:	216b      	movs	r1, #107	@ 0x6b
 800f9bc:	f001 ff78 	bl	80118b0 <__assert_func>
 800f9c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f9c4:	6006      	str	r6, [r0, #0]
 800f9c6:	60c6      	str	r6, [r0, #12]
 800f9c8:	69e6      	ldr	r6, [r4, #28]
 800f9ca:	68f3      	ldr	r3, [r6, #12]
 800f9cc:	b183      	cbz	r3, 800f9f0 <_Balloc+0x50>
 800f9ce:	69e3      	ldr	r3, [r4, #28]
 800f9d0:	68db      	ldr	r3, [r3, #12]
 800f9d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f9d6:	b9b8      	cbnz	r0, 800fa08 <_Balloc+0x68>
 800f9d8:	2101      	movs	r1, #1
 800f9da:	fa01 f605 	lsl.w	r6, r1, r5
 800f9de:	1d72      	adds	r2, r6, #5
 800f9e0:	0092      	lsls	r2, r2, #2
 800f9e2:	4620      	mov	r0, r4
 800f9e4:	f001 ff82 	bl	80118ec <_calloc_r>
 800f9e8:	b160      	cbz	r0, 800fa04 <_Balloc+0x64>
 800f9ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f9ee:	e00e      	b.n	800fa0e <_Balloc+0x6e>
 800f9f0:	2221      	movs	r2, #33	@ 0x21
 800f9f2:	2104      	movs	r1, #4
 800f9f4:	4620      	mov	r0, r4
 800f9f6:	f001 ff79 	bl	80118ec <_calloc_r>
 800f9fa:	69e3      	ldr	r3, [r4, #28]
 800f9fc:	60f0      	str	r0, [r6, #12]
 800f9fe:	68db      	ldr	r3, [r3, #12]
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d1e4      	bne.n	800f9ce <_Balloc+0x2e>
 800fa04:	2000      	movs	r0, #0
 800fa06:	bd70      	pop	{r4, r5, r6, pc}
 800fa08:	6802      	ldr	r2, [r0, #0]
 800fa0a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fa0e:	2300      	movs	r3, #0
 800fa10:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fa14:	e7f7      	b.n	800fa06 <_Balloc+0x66>
 800fa16:	bf00      	nop
 800fa18:	080138a7 	.word	0x080138a7
 800fa1c:	08013927 	.word	0x08013927

0800fa20 <_Bfree>:
 800fa20:	b570      	push	{r4, r5, r6, lr}
 800fa22:	69c6      	ldr	r6, [r0, #28]
 800fa24:	4605      	mov	r5, r0
 800fa26:	460c      	mov	r4, r1
 800fa28:	b976      	cbnz	r6, 800fa48 <_Bfree+0x28>
 800fa2a:	2010      	movs	r0, #16
 800fa2c:	f7ff ff02 	bl	800f834 <malloc>
 800fa30:	4602      	mov	r2, r0
 800fa32:	61e8      	str	r0, [r5, #28]
 800fa34:	b920      	cbnz	r0, 800fa40 <_Bfree+0x20>
 800fa36:	4b09      	ldr	r3, [pc, #36]	@ (800fa5c <_Bfree+0x3c>)
 800fa38:	4809      	ldr	r0, [pc, #36]	@ (800fa60 <_Bfree+0x40>)
 800fa3a:	218f      	movs	r1, #143	@ 0x8f
 800fa3c:	f001 ff38 	bl	80118b0 <__assert_func>
 800fa40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fa44:	6006      	str	r6, [r0, #0]
 800fa46:	60c6      	str	r6, [r0, #12]
 800fa48:	b13c      	cbz	r4, 800fa5a <_Bfree+0x3a>
 800fa4a:	69eb      	ldr	r3, [r5, #28]
 800fa4c:	6862      	ldr	r2, [r4, #4]
 800fa4e:	68db      	ldr	r3, [r3, #12]
 800fa50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fa54:	6021      	str	r1, [r4, #0]
 800fa56:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fa5a:	bd70      	pop	{r4, r5, r6, pc}
 800fa5c:	080138a7 	.word	0x080138a7
 800fa60:	08013927 	.word	0x08013927

0800fa64 <__multadd>:
 800fa64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa68:	690d      	ldr	r5, [r1, #16]
 800fa6a:	4607      	mov	r7, r0
 800fa6c:	460c      	mov	r4, r1
 800fa6e:	461e      	mov	r6, r3
 800fa70:	f101 0c14 	add.w	ip, r1, #20
 800fa74:	2000      	movs	r0, #0
 800fa76:	f8dc 3000 	ldr.w	r3, [ip]
 800fa7a:	b299      	uxth	r1, r3
 800fa7c:	fb02 6101 	mla	r1, r2, r1, r6
 800fa80:	0c1e      	lsrs	r6, r3, #16
 800fa82:	0c0b      	lsrs	r3, r1, #16
 800fa84:	fb02 3306 	mla	r3, r2, r6, r3
 800fa88:	b289      	uxth	r1, r1
 800fa8a:	3001      	adds	r0, #1
 800fa8c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fa90:	4285      	cmp	r5, r0
 800fa92:	f84c 1b04 	str.w	r1, [ip], #4
 800fa96:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fa9a:	dcec      	bgt.n	800fa76 <__multadd+0x12>
 800fa9c:	b30e      	cbz	r6, 800fae2 <__multadd+0x7e>
 800fa9e:	68a3      	ldr	r3, [r4, #8]
 800faa0:	42ab      	cmp	r3, r5
 800faa2:	dc19      	bgt.n	800fad8 <__multadd+0x74>
 800faa4:	6861      	ldr	r1, [r4, #4]
 800faa6:	4638      	mov	r0, r7
 800faa8:	3101      	adds	r1, #1
 800faaa:	f7ff ff79 	bl	800f9a0 <_Balloc>
 800faae:	4680      	mov	r8, r0
 800fab0:	b928      	cbnz	r0, 800fabe <__multadd+0x5a>
 800fab2:	4602      	mov	r2, r0
 800fab4:	4b0c      	ldr	r3, [pc, #48]	@ (800fae8 <__multadd+0x84>)
 800fab6:	480d      	ldr	r0, [pc, #52]	@ (800faec <__multadd+0x88>)
 800fab8:	21ba      	movs	r1, #186	@ 0xba
 800faba:	f001 fef9 	bl	80118b0 <__assert_func>
 800fabe:	6922      	ldr	r2, [r4, #16]
 800fac0:	3202      	adds	r2, #2
 800fac2:	f104 010c 	add.w	r1, r4, #12
 800fac6:	0092      	lsls	r2, r2, #2
 800fac8:	300c      	adds	r0, #12
 800faca:	f7ff f808 	bl	800eade <memcpy>
 800face:	4621      	mov	r1, r4
 800fad0:	4638      	mov	r0, r7
 800fad2:	f7ff ffa5 	bl	800fa20 <_Bfree>
 800fad6:	4644      	mov	r4, r8
 800fad8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fadc:	3501      	adds	r5, #1
 800fade:	615e      	str	r6, [r3, #20]
 800fae0:	6125      	str	r5, [r4, #16]
 800fae2:	4620      	mov	r0, r4
 800fae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fae8:	08013916 	.word	0x08013916
 800faec:	08013927 	.word	0x08013927

0800faf0 <__s2b>:
 800faf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800faf4:	460c      	mov	r4, r1
 800faf6:	4615      	mov	r5, r2
 800faf8:	461f      	mov	r7, r3
 800fafa:	2209      	movs	r2, #9
 800fafc:	3308      	adds	r3, #8
 800fafe:	4606      	mov	r6, r0
 800fb00:	fb93 f3f2 	sdiv	r3, r3, r2
 800fb04:	2100      	movs	r1, #0
 800fb06:	2201      	movs	r2, #1
 800fb08:	429a      	cmp	r2, r3
 800fb0a:	db09      	blt.n	800fb20 <__s2b+0x30>
 800fb0c:	4630      	mov	r0, r6
 800fb0e:	f7ff ff47 	bl	800f9a0 <_Balloc>
 800fb12:	b940      	cbnz	r0, 800fb26 <__s2b+0x36>
 800fb14:	4602      	mov	r2, r0
 800fb16:	4b19      	ldr	r3, [pc, #100]	@ (800fb7c <__s2b+0x8c>)
 800fb18:	4819      	ldr	r0, [pc, #100]	@ (800fb80 <__s2b+0x90>)
 800fb1a:	21d3      	movs	r1, #211	@ 0xd3
 800fb1c:	f001 fec8 	bl	80118b0 <__assert_func>
 800fb20:	0052      	lsls	r2, r2, #1
 800fb22:	3101      	adds	r1, #1
 800fb24:	e7f0      	b.n	800fb08 <__s2b+0x18>
 800fb26:	9b08      	ldr	r3, [sp, #32]
 800fb28:	6143      	str	r3, [r0, #20]
 800fb2a:	2d09      	cmp	r5, #9
 800fb2c:	f04f 0301 	mov.w	r3, #1
 800fb30:	6103      	str	r3, [r0, #16]
 800fb32:	dd16      	ble.n	800fb62 <__s2b+0x72>
 800fb34:	f104 0909 	add.w	r9, r4, #9
 800fb38:	46c8      	mov	r8, r9
 800fb3a:	442c      	add	r4, r5
 800fb3c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800fb40:	4601      	mov	r1, r0
 800fb42:	3b30      	subs	r3, #48	@ 0x30
 800fb44:	220a      	movs	r2, #10
 800fb46:	4630      	mov	r0, r6
 800fb48:	f7ff ff8c 	bl	800fa64 <__multadd>
 800fb4c:	45a0      	cmp	r8, r4
 800fb4e:	d1f5      	bne.n	800fb3c <__s2b+0x4c>
 800fb50:	f1a5 0408 	sub.w	r4, r5, #8
 800fb54:	444c      	add	r4, r9
 800fb56:	1b2d      	subs	r5, r5, r4
 800fb58:	1963      	adds	r3, r4, r5
 800fb5a:	42bb      	cmp	r3, r7
 800fb5c:	db04      	blt.n	800fb68 <__s2b+0x78>
 800fb5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb62:	340a      	adds	r4, #10
 800fb64:	2509      	movs	r5, #9
 800fb66:	e7f6      	b.n	800fb56 <__s2b+0x66>
 800fb68:	f814 3b01 	ldrb.w	r3, [r4], #1
 800fb6c:	4601      	mov	r1, r0
 800fb6e:	3b30      	subs	r3, #48	@ 0x30
 800fb70:	220a      	movs	r2, #10
 800fb72:	4630      	mov	r0, r6
 800fb74:	f7ff ff76 	bl	800fa64 <__multadd>
 800fb78:	e7ee      	b.n	800fb58 <__s2b+0x68>
 800fb7a:	bf00      	nop
 800fb7c:	08013916 	.word	0x08013916
 800fb80:	08013927 	.word	0x08013927

0800fb84 <__hi0bits>:
 800fb84:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800fb88:	4603      	mov	r3, r0
 800fb8a:	bf36      	itet	cc
 800fb8c:	0403      	lslcc	r3, r0, #16
 800fb8e:	2000      	movcs	r0, #0
 800fb90:	2010      	movcc	r0, #16
 800fb92:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800fb96:	bf3c      	itt	cc
 800fb98:	021b      	lslcc	r3, r3, #8
 800fb9a:	3008      	addcc	r0, #8
 800fb9c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fba0:	bf3c      	itt	cc
 800fba2:	011b      	lslcc	r3, r3, #4
 800fba4:	3004      	addcc	r0, #4
 800fba6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fbaa:	bf3c      	itt	cc
 800fbac:	009b      	lslcc	r3, r3, #2
 800fbae:	3002      	addcc	r0, #2
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	db05      	blt.n	800fbc0 <__hi0bits+0x3c>
 800fbb4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800fbb8:	f100 0001 	add.w	r0, r0, #1
 800fbbc:	bf08      	it	eq
 800fbbe:	2020      	moveq	r0, #32
 800fbc0:	4770      	bx	lr

0800fbc2 <__lo0bits>:
 800fbc2:	6803      	ldr	r3, [r0, #0]
 800fbc4:	4602      	mov	r2, r0
 800fbc6:	f013 0007 	ands.w	r0, r3, #7
 800fbca:	d00b      	beq.n	800fbe4 <__lo0bits+0x22>
 800fbcc:	07d9      	lsls	r1, r3, #31
 800fbce:	d421      	bmi.n	800fc14 <__lo0bits+0x52>
 800fbd0:	0798      	lsls	r0, r3, #30
 800fbd2:	bf49      	itett	mi
 800fbd4:	085b      	lsrmi	r3, r3, #1
 800fbd6:	089b      	lsrpl	r3, r3, #2
 800fbd8:	2001      	movmi	r0, #1
 800fbda:	6013      	strmi	r3, [r2, #0]
 800fbdc:	bf5c      	itt	pl
 800fbde:	6013      	strpl	r3, [r2, #0]
 800fbe0:	2002      	movpl	r0, #2
 800fbe2:	4770      	bx	lr
 800fbe4:	b299      	uxth	r1, r3
 800fbe6:	b909      	cbnz	r1, 800fbec <__lo0bits+0x2a>
 800fbe8:	0c1b      	lsrs	r3, r3, #16
 800fbea:	2010      	movs	r0, #16
 800fbec:	b2d9      	uxtb	r1, r3
 800fbee:	b909      	cbnz	r1, 800fbf4 <__lo0bits+0x32>
 800fbf0:	3008      	adds	r0, #8
 800fbf2:	0a1b      	lsrs	r3, r3, #8
 800fbf4:	0719      	lsls	r1, r3, #28
 800fbf6:	bf04      	itt	eq
 800fbf8:	091b      	lsreq	r3, r3, #4
 800fbfa:	3004      	addeq	r0, #4
 800fbfc:	0799      	lsls	r1, r3, #30
 800fbfe:	bf04      	itt	eq
 800fc00:	089b      	lsreq	r3, r3, #2
 800fc02:	3002      	addeq	r0, #2
 800fc04:	07d9      	lsls	r1, r3, #31
 800fc06:	d403      	bmi.n	800fc10 <__lo0bits+0x4e>
 800fc08:	085b      	lsrs	r3, r3, #1
 800fc0a:	f100 0001 	add.w	r0, r0, #1
 800fc0e:	d003      	beq.n	800fc18 <__lo0bits+0x56>
 800fc10:	6013      	str	r3, [r2, #0]
 800fc12:	4770      	bx	lr
 800fc14:	2000      	movs	r0, #0
 800fc16:	4770      	bx	lr
 800fc18:	2020      	movs	r0, #32
 800fc1a:	4770      	bx	lr

0800fc1c <__i2b>:
 800fc1c:	b510      	push	{r4, lr}
 800fc1e:	460c      	mov	r4, r1
 800fc20:	2101      	movs	r1, #1
 800fc22:	f7ff febd 	bl	800f9a0 <_Balloc>
 800fc26:	4602      	mov	r2, r0
 800fc28:	b928      	cbnz	r0, 800fc36 <__i2b+0x1a>
 800fc2a:	4b05      	ldr	r3, [pc, #20]	@ (800fc40 <__i2b+0x24>)
 800fc2c:	4805      	ldr	r0, [pc, #20]	@ (800fc44 <__i2b+0x28>)
 800fc2e:	f240 1145 	movw	r1, #325	@ 0x145
 800fc32:	f001 fe3d 	bl	80118b0 <__assert_func>
 800fc36:	2301      	movs	r3, #1
 800fc38:	6144      	str	r4, [r0, #20]
 800fc3a:	6103      	str	r3, [r0, #16]
 800fc3c:	bd10      	pop	{r4, pc}
 800fc3e:	bf00      	nop
 800fc40:	08013916 	.word	0x08013916
 800fc44:	08013927 	.word	0x08013927

0800fc48 <__multiply>:
 800fc48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc4c:	4614      	mov	r4, r2
 800fc4e:	690a      	ldr	r2, [r1, #16]
 800fc50:	6923      	ldr	r3, [r4, #16]
 800fc52:	429a      	cmp	r2, r3
 800fc54:	bfa8      	it	ge
 800fc56:	4623      	movge	r3, r4
 800fc58:	460f      	mov	r7, r1
 800fc5a:	bfa4      	itt	ge
 800fc5c:	460c      	movge	r4, r1
 800fc5e:	461f      	movge	r7, r3
 800fc60:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800fc64:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800fc68:	68a3      	ldr	r3, [r4, #8]
 800fc6a:	6861      	ldr	r1, [r4, #4]
 800fc6c:	eb0a 0609 	add.w	r6, sl, r9
 800fc70:	42b3      	cmp	r3, r6
 800fc72:	b085      	sub	sp, #20
 800fc74:	bfb8      	it	lt
 800fc76:	3101      	addlt	r1, #1
 800fc78:	f7ff fe92 	bl	800f9a0 <_Balloc>
 800fc7c:	b930      	cbnz	r0, 800fc8c <__multiply+0x44>
 800fc7e:	4602      	mov	r2, r0
 800fc80:	4b44      	ldr	r3, [pc, #272]	@ (800fd94 <__multiply+0x14c>)
 800fc82:	4845      	ldr	r0, [pc, #276]	@ (800fd98 <__multiply+0x150>)
 800fc84:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800fc88:	f001 fe12 	bl	80118b0 <__assert_func>
 800fc8c:	f100 0514 	add.w	r5, r0, #20
 800fc90:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800fc94:	462b      	mov	r3, r5
 800fc96:	2200      	movs	r2, #0
 800fc98:	4543      	cmp	r3, r8
 800fc9a:	d321      	bcc.n	800fce0 <__multiply+0x98>
 800fc9c:	f107 0114 	add.w	r1, r7, #20
 800fca0:	f104 0214 	add.w	r2, r4, #20
 800fca4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800fca8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800fcac:	9302      	str	r3, [sp, #8]
 800fcae:	1b13      	subs	r3, r2, r4
 800fcb0:	3b15      	subs	r3, #21
 800fcb2:	f023 0303 	bic.w	r3, r3, #3
 800fcb6:	3304      	adds	r3, #4
 800fcb8:	f104 0715 	add.w	r7, r4, #21
 800fcbc:	42ba      	cmp	r2, r7
 800fcbe:	bf38      	it	cc
 800fcc0:	2304      	movcc	r3, #4
 800fcc2:	9301      	str	r3, [sp, #4]
 800fcc4:	9b02      	ldr	r3, [sp, #8]
 800fcc6:	9103      	str	r1, [sp, #12]
 800fcc8:	428b      	cmp	r3, r1
 800fcca:	d80c      	bhi.n	800fce6 <__multiply+0x9e>
 800fccc:	2e00      	cmp	r6, #0
 800fcce:	dd03      	ble.n	800fcd8 <__multiply+0x90>
 800fcd0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d05b      	beq.n	800fd90 <__multiply+0x148>
 800fcd8:	6106      	str	r6, [r0, #16]
 800fcda:	b005      	add	sp, #20
 800fcdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fce0:	f843 2b04 	str.w	r2, [r3], #4
 800fce4:	e7d8      	b.n	800fc98 <__multiply+0x50>
 800fce6:	f8b1 a000 	ldrh.w	sl, [r1]
 800fcea:	f1ba 0f00 	cmp.w	sl, #0
 800fcee:	d024      	beq.n	800fd3a <__multiply+0xf2>
 800fcf0:	f104 0e14 	add.w	lr, r4, #20
 800fcf4:	46a9      	mov	r9, r5
 800fcf6:	f04f 0c00 	mov.w	ip, #0
 800fcfa:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fcfe:	f8d9 3000 	ldr.w	r3, [r9]
 800fd02:	fa1f fb87 	uxth.w	fp, r7
 800fd06:	b29b      	uxth	r3, r3
 800fd08:	fb0a 330b 	mla	r3, sl, fp, r3
 800fd0c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800fd10:	f8d9 7000 	ldr.w	r7, [r9]
 800fd14:	4463      	add	r3, ip
 800fd16:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800fd1a:	fb0a c70b 	mla	r7, sl, fp, ip
 800fd1e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800fd22:	b29b      	uxth	r3, r3
 800fd24:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800fd28:	4572      	cmp	r2, lr
 800fd2a:	f849 3b04 	str.w	r3, [r9], #4
 800fd2e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800fd32:	d8e2      	bhi.n	800fcfa <__multiply+0xb2>
 800fd34:	9b01      	ldr	r3, [sp, #4]
 800fd36:	f845 c003 	str.w	ip, [r5, r3]
 800fd3a:	9b03      	ldr	r3, [sp, #12]
 800fd3c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800fd40:	3104      	adds	r1, #4
 800fd42:	f1b9 0f00 	cmp.w	r9, #0
 800fd46:	d021      	beq.n	800fd8c <__multiply+0x144>
 800fd48:	682b      	ldr	r3, [r5, #0]
 800fd4a:	f104 0c14 	add.w	ip, r4, #20
 800fd4e:	46ae      	mov	lr, r5
 800fd50:	f04f 0a00 	mov.w	sl, #0
 800fd54:	f8bc b000 	ldrh.w	fp, [ip]
 800fd58:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800fd5c:	fb09 770b 	mla	r7, r9, fp, r7
 800fd60:	4457      	add	r7, sl
 800fd62:	b29b      	uxth	r3, r3
 800fd64:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800fd68:	f84e 3b04 	str.w	r3, [lr], #4
 800fd6c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fd70:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fd74:	f8be 3000 	ldrh.w	r3, [lr]
 800fd78:	fb09 330a 	mla	r3, r9, sl, r3
 800fd7c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800fd80:	4562      	cmp	r2, ip
 800fd82:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fd86:	d8e5      	bhi.n	800fd54 <__multiply+0x10c>
 800fd88:	9f01      	ldr	r7, [sp, #4]
 800fd8a:	51eb      	str	r3, [r5, r7]
 800fd8c:	3504      	adds	r5, #4
 800fd8e:	e799      	b.n	800fcc4 <__multiply+0x7c>
 800fd90:	3e01      	subs	r6, #1
 800fd92:	e79b      	b.n	800fccc <__multiply+0x84>
 800fd94:	08013916 	.word	0x08013916
 800fd98:	08013927 	.word	0x08013927

0800fd9c <__pow5mult>:
 800fd9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fda0:	4615      	mov	r5, r2
 800fda2:	f012 0203 	ands.w	r2, r2, #3
 800fda6:	4607      	mov	r7, r0
 800fda8:	460e      	mov	r6, r1
 800fdaa:	d007      	beq.n	800fdbc <__pow5mult+0x20>
 800fdac:	4c25      	ldr	r4, [pc, #148]	@ (800fe44 <__pow5mult+0xa8>)
 800fdae:	3a01      	subs	r2, #1
 800fdb0:	2300      	movs	r3, #0
 800fdb2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fdb6:	f7ff fe55 	bl	800fa64 <__multadd>
 800fdba:	4606      	mov	r6, r0
 800fdbc:	10ad      	asrs	r5, r5, #2
 800fdbe:	d03d      	beq.n	800fe3c <__pow5mult+0xa0>
 800fdc0:	69fc      	ldr	r4, [r7, #28]
 800fdc2:	b97c      	cbnz	r4, 800fde4 <__pow5mult+0x48>
 800fdc4:	2010      	movs	r0, #16
 800fdc6:	f7ff fd35 	bl	800f834 <malloc>
 800fdca:	4602      	mov	r2, r0
 800fdcc:	61f8      	str	r0, [r7, #28]
 800fdce:	b928      	cbnz	r0, 800fddc <__pow5mult+0x40>
 800fdd0:	4b1d      	ldr	r3, [pc, #116]	@ (800fe48 <__pow5mult+0xac>)
 800fdd2:	481e      	ldr	r0, [pc, #120]	@ (800fe4c <__pow5mult+0xb0>)
 800fdd4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800fdd8:	f001 fd6a 	bl	80118b0 <__assert_func>
 800fddc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fde0:	6004      	str	r4, [r0, #0]
 800fde2:	60c4      	str	r4, [r0, #12]
 800fde4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800fde8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fdec:	b94c      	cbnz	r4, 800fe02 <__pow5mult+0x66>
 800fdee:	f240 2171 	movw	r1, #625	@ 0x271
 800fdf2:	4638      	mov	r0, r7
 800fdf4:	f7ff ff12 	bl	800fc1c <__i2b>
 800fdf8:	2300      	movs	r3, #0
 800fdfa:	f8c8 0008 	str.w	r0, [r8, #8]
 800fdfe:	4604      	mov	r4, r0
 800fe00:	6003      	str	r3, [r0, #0]
 800fe02:	f04f 0900 	mov.w	r9, #0
 800fe06:	07eb      	lsls	r3, r5, #31
 800fe08:	d50a      	bpl.n	800fe20 <__pow5mult+0x84>
 800fe0a:	4631      	mov	r1, r6
 800fe0c:	4622      	mov	r2, r4
 800fe0e:	4638      	mov	r0, r7
 800fe10:	f7ff ff1a 	bl	800fc48 <__multiply>
 800fe14:	4631      	mov	r1, r6
 800fe16:	4680      	mov	r8, r0
 800fe18:	4638      	mov	r0, r7
 800fe1a:	f7ff fe01 	bl	800fa20 <_Bfree>
 800fe1e:	4646      	mov	r6, r8
 800fe20:	106d      	asrs	r5, r5, #1
 800fe22:	d00b      	beq.n	800fe3c <__pow5mult+0xa0>
 800fe24:	6820      	ldr	r0, [r4, #0]
 800fe26:	b938      	cbnz	r0, 800fe38 <__pow5mult+0x9c>
 800fe28:	4622      	mov	r2, r4
 800fe2a:	4621      	mov	r1, r4
 800fe2c:	4638      	mov	r0, r7
 800fe2e:	f7ff ff0b 	bl	800fc48 <__multiply>
 800fe32:	6020      	str	r0, [r4, #0]
 800fe34:	f8c0 9000 	str.w	r9, [r0]
 800fe38:	4604      	mov	r4, r0
 800fe3a:	e7e4      	b.n	800fe06 <__pow5mult+0x6a>
 800fe3c:	4630      	mov	r0, r6
 800fe3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe42:	bf00      	nop
 800fe44:	08013980 	.word	0x08013980
 800fe48:	080138a7 	.word	0x080138a7
 800fe4c:	08013927 	.word	0x08013927

0800fe50 <__lshift>:
 800fe50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe54:	460c      	mov	r4, r1
 800fe56:	6849      	ldr	r1, [r1, #4]
 800fe58:	6923      	ldr	r3, [r4, #16]
 800fe5a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fe5e:	68a3      	ldr	r3, [r4, #8]
 800fe60:	4607      	mov	r7, r0
 800fe62:	4691      	mov	r9, r2
 800fe64:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fe68:	f108 0601 	add.w	r6, r8, #1
 800fe6c:	42b3      	cmp	r3, r6
 800fe6e:	db0b      	blt.n	800fe88 <__lshift+0x38>
 800fe70:	4638      	mov	r0, r7
 800fe72:	f7ff fd95 	bl	800f9a0 <_Balloc>
 800fe76:	4605      	mov	r5, r0
 800fe78:	b948      	cbnz	r0, 800fe8e <__lshift+0x3e>
 800fe7a:	4602      	mov	r2, r0
 800fe7c:	4b28      	ldr	r3, [pc, #160]	@ (800ff20 <__lshift+0xd0>)
 800fe7e:	4829      	ldr	r0, [pc, #164]	@ (800ff24 <__lshift+0xd4>)
 800fe80:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800fe84:	f001 fd14 	bl	80118b0 <__assert_func>
 800fe88:	3101      	adds	r1, #1
 800fe8a:	005b      	lsls	r3, r3, #1
 800fe8c:	e7ee      	b.n	800fe6c <__lshift+0x1c>
 800fe8e:	2300      	movs	r3, #0
 800fe90:	f100 0114 	add.w	r1, r0, #20
 800fe94:	f100 0210 	add.w	r2, r0, #16
 800fe98:	4618      	mov	r0, r3
 800fe9a:	4553      	cmp	r3, sl
 800fe9c:	db33      	blt.n	800ff06 <__lshift+0xb6>
 800fe9e:	6920      	ldr	r0, [r4, #16]
 800fea0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fea4:	f104 0314 	add.w	r3, r4, #20
 800fea8:	f019 091f 	ands.w	r9, r9, #31
 800feac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800feb0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800feb4:	d02b      	beq.n	800ff0e <__lshift+0xbe>
 800feb6:	f1c9 0e20 	rsb	lr, r9, #32
 800feba:	468a      	mov	sl, r1
 800febc:	2200      	movs	r2, #0
 800febe:	6818      	ldr	r0, [r3, #0]
 800fec0:	fa00 f009 	lsl.w	r0, r0, r9
 800fec4:	4310      	orrs	r0, r2
 800fec6:	f84a 0b04 	str.w	r0, [sl], #4
 800feca:	f853 2b04 	ldr.w	r2, [r3], #4
 800fece:	459c      	cmp	ip, r3
 800fed0:	fa22 f20e 	lsr.w	r2, r2, lr
 800fed4:	d8f3      	bhi.n	800febe <__lshift+0x6e>
 800fed6:	ebac 0304 	sub.w	r3, ip, r4
 800feda:	3b15      	subs	r3, #21
 800fedc:	f023 0303 	bic.w	r3, r3, #3
 800fee0:	3304      	adds	r3, #4
 800fee2:	f104 0015 	add.w	r0, r4, #21
 800fee6:	4584      	cmp	ip, r0
 800fee8:	bf38      	it	cc
 800feea:	2304      	movcc	r3, #4
 800feec:	50ca      	str	r2, [r1, r3]
 800feee:	b10a      	cbz	r2, 800fef4 <__lshift+0xa4>
 800fef0:	f108 0602 	add.w	r6, r8, #2
 800fef4:	3e01      	subs	r6, #1
 800fef6:	4638      	mov	r0, r7
 800fef8:	612e      	str	r6, [r5, #16]
 800fefa:	4621      	mov	r1, r4
 800fefc:	f7ff fd90 	bl	800fa20 <_Bfree>
 800ff00:	4628      	mov	r0, r5
 800ff02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff06:	f842 0f04 	str.w	r0, [r2, #4]!
 800ff0a:	3301      	adds	r3, #1
 800ff0c:	e7c5      	b.n	800fe9a <__lshift+0x4a>
 800ff0e:	3904      	subs	r1, #4
 800ff10:	f853 2b04 	ldr.w	r2, [r3], #4
 800ff14:	f841 2f04 	str.w	r2, [r1, #4]!
 800ff18:	459c      	cmp	ip, r3
 800ff1a:	d8f9      	bhi.n	800ff10 <__lshift+0xc0>
 800ff1c:	e7ea      	b.n	800fef4 <__lshift+0xa4>
 800ff1e:	bf00      	nop
 800ff20:	08013916 	.word	0x08013916
 800ff24:	08013927 	.word	0x08013927

0800ff28 <__mcmp>:
 800ff28:	690a      	ldr	r2, [r1, #16]
 800ff2a:	4603      	mov	r3, r0
 800ff2c:	6900      	ldr	r0, [r0, #16]
 800ff2e:	1a80      	subs	r0, r0, r2
 800ff30:	b530      	push	{r4, r5, lr}
 800ff32:	d10e      	bne.n	800ff52 <__mcmp+0x2a>
 800ff34:	3314      	adds	r3, #20
 800ff36:	3114      	adds	r1, #20
 800ff38:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ff3c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ff40:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ff44:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ff48:	4295      	cmp	r5, r2
 800ff4a:	d003      	beq.n	800ff54 <__mcmp+0x2c>
 800ff4c:	d205      	bcs.n	800ff5a <__mcmp+0x32>
 800ff4e:	f04f 30ff 	mov.w	r0, #4294967295
 800ff52:	bd30      	pop	{r4, r5, pc}
 800ff54:	42a3      	cmp	r3, r4
 800ff56:	d3f3      	bcc.n	800ff40 <__mcmp+0x18>
 800ff58:	e7fb      	b.n	800ff52 <__mcmp+0x2a>
 800ff5a:	2001      	movs	r0, #1
 800ff5c:	e7f9      	b.n	800ff52 <__mcmp+0x2a>
	...

0800ff60 <__mdiff>:
 800ff60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff64:	4689      	mov	r9, r1
 800ff66:	4606      	mov	r6, r0
 800ff68:	4611      	mov	r1, r2
 800ff6a:	4648      	mov	r0, r9
 800ff6c:	4614      	mov	r4, r2
 800ff6e:	f7ff ffdb 	bl	800ff28 <__mcmp>
 800ff72:	1e05      	subs	r5, r0, #0
 800ff74:	d112      	bne.n	800ff9c <__mdiff+0x3c>
 800ff76:	4629      	mov	r1, r5
 800ff78:	4630      	mov	r0, r6
 800ff7a:	f7ff fd11 	bl	800f9a0 <_Balloc>
 800ff7e:	4602      	mov	r2, r0
 800ff80:	b928      	cbnz	r0, 800ff8e <__mdiff+0x2e>
 800ff82:	4b3f      	ldr	r3, [pc, #252]	@ (8010080 <__mdiff+0x120>)
 800ff84:	f240 2137 	movw	r1, #567	@ 0x237
 800ff88:	483e      	ldr	r0, [pc, #248]	@ (8010084 <__mdiff+0x124>)
 800ff8a:	f001 fc91 	bl	80118b0 <__assert_func>
 800ff8e:	2301      	movs	r3, #1
 800ff90:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ff94:	4610      	mov	r0, r2
 800ff96:	b003      	add	sp, #12
 800ff98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff9c:	bfbc      	itt	lt
 800ff9e:	464b      	movlt	r3, r9
 800ffa0:	46a1      	movlt	r9, r4
 800ffa2:	4630      	mov	r0, r6
 800ffa4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ffa8:	bfba      	itte	lt
 800ffaa:	461c      	movlt	r4, r3
 800ffac:	2501      	movlt	r5, #1
 800ffae:	2500      	movge	r5, #0
 800ffb0:	f7ff fcf6 	bl	800f9a0 <_Balloc>
 800ffb4:	4602      	mov	r2, r0
 800ffb6:	b918      	cbnz	r0, 800ffc0 <__mdiff+0x60>
 800ffb8:	4b31      	ldr	r3, [pc, #196]	@ (8010080 <__mdiff+0x120>)
 800ffba:	f240 2145 	movw	r1, #581	@ 0x245
 800ffbe:	e7e3      	b.n	800ff88 <__mdiff+0x28>
 800ffc0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ffc4:	6926      	ldr	r6, [r4, #16]
 800ffc6:	60c5      	str	r5, [r0, #12]
 800ffc8:	f109 0310 	add.w	r3, r9, #16
 800ffcc:	f109 0514 	add.w	r5, r9, #20
 800ffd0:	f104 0e14 	add.w	lr, r4, #20
 800ffd4:	f100 0b14 	add.w	fp, r0, #20
 800ffd8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ffdc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ffe0:	9301      	str	r3, [sp, #4]
 800ffe2:	46d9      	mov	r9, fp
 800ffe4:	f04f 0c00 	mov.w	ip, #0
 800ffe8:	9b01      	ldr	r3, [sp, #4]
 800ffea:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ffee:	f853 af04 	ldr.w	sl, [r3, #4]!
 800fff2:	9301      	str	r3, [sp, #4]
 800fff4:	fa1f f38a 	uxth.w	r3, sl
 800fff8:	4619      	mov	r1, r3
 800fffa:	b283      	uxth	r3, r0
 800fffc:	1acb      	subs	r3, r1, r3
 800fffe:	0c00      	lsrs	r0, r0, #16
 8010000:	4463      	add	r3, ip
 8010002:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8010006:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801000a:	b29b      	uxth	r3, r3
 801000c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8010010:	4576      	cmp	r6, lr
 8010012:	f849 3b04 	str.w	r3, [r9], #4
 8010016:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801001a:	d8e5      	bhi.n	800ffe8 <__mdiff+0x88>
 801001c:	1b33      	subs	r3, r6, r4
 801001e:	3b15      	subs	r3, #21
 8010020:	f023 0303 	bic.w	r3, r3, #3
 8010024:	3415      	adds	r4, #21
 8010026:	3304      	adds	r3, #4
 8010028:	42a6      	cmp	r6, r4
 801002a:	bf38      	it	cc
 801002c:	2304      	movcc	r3, #4
 801002e:	441d      	add	r5, r3
 8010030:	445b      	add	r3, fp
 8010032:	461e      	mov	r6, r3
 8010034:	462c      	mov	r4, r5
 8010036:	4544      	cmp	r4, r8
 8010038:	d30e      	bcc.n	8010058 <__mdiff+0xf8>
 801003a:	f108 0103 	add.w	r1, r8, #3
 801003e:	1b49      	subs	r1, r1, r5
 8010040:	f021 0103 	bic.w	r1, r1, #3
 8010044:	3d03      	subs	r5, #3
 8010046:	45a8      	cmp	r8, r5
 8010048:	bf38      	it	cc
 801004a:	2100      	movcc	r1, #0
 801004c:	440b      	add	r3, r1
 801004e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010052:	b191      	cbz	r1, 801007a <__mdiff+0x11a>
 8010054:	6117      	str	r7, [r2, #16]
 8010056:	e79d      	b.n	800ff94 <__mdiff+0x34>
 8010058:	f854 1b04 	ldr.w	r1, [r4], #4
 801005c:	46e6      	mov	lr, ip
 801005e:	0c08      	lsrs	r0, r1, #16
 8010060:	fa1c fc81 	uxtah	ip, ip, r1
 8010064:	4471      	add	r1, lr
 8010066:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801006a:	b289      	uxth	r1, r1
 801006c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010070:	f846 1b04 	str.w	r1, [r6], #4
 8010074:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010078:	e7dd      	b.n	8010036 <__mdiff+0xd6>
 801007a:	3f01      	subs	r7, #1
 801007c:	e7e7      	b.n	801004e <__mdiff+0xee>
 801007e:	bf00      	nop
 8010080:	08013916 	.word	0x08013916
 8010084:	08013927 	.word	0x08013927

08010088 <__ulp>:
 8010088:	b082      	sub	sp, #8
 801008a:	ed8d 0b00 	vstr	d0, [sp]
 801008e:	9a01      	ldr	r2, [sp, #4]
 8010090:	4b0f      	ldr	r3, [pc, #60]	@ (80100d0 <__ulp+0x48>)
 8010092:	4013      	ands	r3, r2
 8010094:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8010098:	2b00      	cmp	r3, #0
 801009a:	dc08      	bgt.n	80100ae <__ulp+0x26>
 801009c:	425b      	negs	r3, r3
 801009e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80100a2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80100a6:	da04      	bge.n	80100b2 <__ulp+0x2a>
 80100a8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80100ac:	4113      	asrs	r3, r2
 80100ae:	2200      	movs	r2, #0
 80100b0:	e008      	b.n	80100c4 <__ulp+0x3c>
 80100b2:	f1a2 0314 	sub.w	r3, r2, #20
 80100b6:	2b1e      	cmp	r3, #30
 80100b8:	bfda      	itte	le
 80100ba:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80100be:	40da      	lsrle	r2, r3
 80100c0:	2201      	movgt	r2, #1
 80100c2:	2300      	movs	r3, #0
 80100c4:	4619      	mov	r1, r3
 80100c6:	4610      	mov	r0, r2
 80100c8:	ec41 0b10 	vmov	d0, r0, r1
 80100cc:	b002      	add	sp, #8
 80100ce:	4770      	bx	lr
 80100d0:	7ff00000 	.word	0x7ff00000

080100d4 <__b2d>:
 80100d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100d8:	6906      	ldr	r6, [r0, #16]
 80100da:	f100 0814 	add.w	r8, r0, #20
 80100de:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80100e2:	1f37      	subs	r7, r6, #4
 80100e4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80100e8:	4610      	mov	r0, r2
 80100ea:	f7ff fd4b 	bl	800fb84 <__hi0bits>
 80100ee:	f1c0 0320 	rsb	r3, r0, #32
 80100f2:	280a      	cmp	r0, #10
 80100f4:	600b      	str	r3, [r1, #0]
 80100f6:	491b      	ldr	r1, [pc, #108]	@ (8010164 <__b2d+0x90>)
 80100f8:	dc15      	bgt.n	8010126 <__b2d+0x52>
 80100fa:	f1c0 0c0b 	rsb	ip, r0, #11
 80100fe:	fa22 f30c 	lsr.w	r3, r2, ip
 8010102:	45b8      	cmp	r8, r7
 8010104:	ea43 0501 	orr.w	r5, r3, r1
 8010108:	bf34      	ite	cc
 801010a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801010e:	2300      	movcs	r3, #0
 8010110:	3015      	adds	r0, #21
 8010112:	fa02 f000 	lsl.w	r0, r2, r0
 8010116:	fa23 f30c 	lsr.w	r3, r3, ip
 801011a:	4303      	orrs	r3, r0
 801011c:	461c      	mov	r4, r3
 801011e:	ec45 4b10 	vmov	d0, r4, r5
 8010122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010126:	45b8      	cmp	r8, r7
 8010128:	bf3a      	itte	cc
 801012a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801012e:	f1a6 0708 	subcc.w	r7, r6, #8
 8010132:	2300      	movcs	r3, #0
 8010134:	380b      	subs	r0, #11
 8010136:	d012      	beq.n	801015e <__b2d+0x8a>
 8010138:	f1c0 0120 	rsb	r1, r0, #32
 801013c:	fa23 f401 	lsr.w	r4, r3, r1
 8010140:	4082      	lsls	r2, r0
 8010142:	4322      	orrs	r2, r4
 8010144:	4547      	cmp	r7, r8
 8010146:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801014a:	bf8c      	ite	hi
 801014c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8010150:	2200      	movls	r2, #0
 8010152:	4083      	lsls	r3, r0
 8010154:	40ca      	lsrs	r2, r1
 8010156:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801015a:	4313      	orrs	r3, r2
 801015c:	e7de      	b.n	801011c <__b2d+0x48>
 801015e:	ea42 0501 	orr.w	r5, r2, r1
 8010162:	e7db      	b.n	801011c <__b2d+0x48>
 8010164:	3ff00000 	.word	0x3ff00000

08010168 <__d2b>:
 8010168:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801016c:	460f      	mov	r7, r1
 801016e:	2101      	movs	r1, #1
 8010170:	ec59 8b10 	vmov	r8, r9, d0
 8010174:	4616      	mov	r6, r2
 8010176:	f7ff fc13 	bl	800f9a0 <_Balloc>
 801017a:	4604      	mov	r4, r0
 801017c:	b930      	cbnz	r0, 801018c <__d2b+0x24>
 801017e:	4602      	mov	r2, r0
 8010180:	4b23      	ldr	r3, [pc, #140]	@ (8010210 <__d2b+0xa8>)
 8010182:	4824      	ldr	r0, [pc, #144]	@ (8010214 <__d2b+0xac>)
 8010184:	f240 310f 	movw	r1, #783	@ 0x30f
 8010188:	f001 fb92 	bl	80118b0 <__assert_func>
 801018c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010190:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010194:	b10d      	cbz	r5, 801019a <__d2b+0x32>
 8010196:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801019a:	9301      	str	r3, [sp, #4]
 801019c:	f1b8 0300 	subs.w	r3, r8, #0
 80101a0:	d023      	beq.n	80101ea <__d2b+0x82>
 80101a2:	4668      	mov	r0, sp
 80101a4:	9300      	str	r3, [sp, #0]
 80101a6:	f7ff fd0c 	bl	800fbc2 <__lo0bits>
 80101aa:	e9dd 1200 	ldrd	r1, r2, [sp]
 80101ae:	b1d0      	cbz	r0, 80101e6 <__d2b+0x7e>
 80101b0:	f1c0 0320 	rsb	r3, r0, #32
 80101b4:	fa02 f303 	lsl.w	r3, r2, r3
 80101b8:	430b      	orrs	r3, r1
 80101ba:	40c2      	lsrs	r2, r0
 80101bc:	6163      	str	r3, [r4, #20]
 80101be:	9201      	str	r2, [sp, #4]
 80101c0:	9b01      	ldr	r3, [sp, #4]
 80101c2:	61a3      	str	r3, [r4, #24]
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	bf0c      	ite	eq
 80101c8:	2201      	moveq	r2, #1
 80101ca:	2202      	movne	r2, #2
 80101cc:	6122      	str	r2, [r4, #16]
 80101ce:	b1a5      	cbz	r5, 80101fa <__d2b+0x92>
 80101d0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80101d4:	4405      	add	r5, r0
 80101d6:	603d      	str	r5, [r7, #0]
 80101d8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80101dc:	6030      	str	r0, [r6, #0]
 80101de:	4620      	mov	r0, r4
 80101e0:	b003      	add	sp, #12
 80101e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80101e6:	6161      	str	r1, [r4, #20]
 80101e8:	e7ea      	b.n	80101c0 <__d2b+0x58>
 80101ea:	a801      	add	r0, sp, #4
 80101ec:	f7ff fce9 	bl	800fbc2 <__lo0bits>
 80101f0:	9b01      	ldr	r3, [sp, #4]
 80101f2:	6163      	str	r3, [r4, #20]
 80101f4:	3020      	adds	r0, #32
 80101f6:	2201      	movs	r2, #1
 80101f8:	e7e8      	b.n	80101cc <__d2b+0x64>
 80101fa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80101fe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8010202:	6038      	str	r0, [r7, #0]
 8010204:	6918      	ldr	r0, [r3, #16]
 8010206:	f7ff fcbd 	bl	800fb84 <__hi0bits>
 801020a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801020e:	e7e5      	b.n	80101dc <__d2b+0x74>
 8010210:	08013916 	.word	0x08013916
 8010214:	08013927 	.word	0x08013927

08010218 <__ratio>:
 8010218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801021c:	b085      	sub	sp, #20
 801021e:	e9cd 1000 	strd	r1, r0, [sp]
 8010222:	a902      	add	r1, sp, #8
 8010224:	f7ff ff56 	bl	80100d4 <__b2d>
 8010228:	9800      	ldr	r0, [sp, #0]
 801022a:	a903      	add	r1, sp, #12
 801022c:	ec55 4b10 	vmov	r4, r5, d0
 8010230:	f7ff ff50 	bl	80100d4 <__b2d>
 8010234:	9b01      	ldr	r3, [sp, #4]
 8010236:	6919      	ldr	r1, [r3, #16]
 8010238:	9b00      	ldr	r3, [sp, #0]
 801023a:	691b      	ldr	r3, [r3, #16]
 801023c:	1ac9      	subs	r1, r1, r3
 801023e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8010242:	1a9b      	subs	r3, r3, r2
 8010244:	ec5b ab10 	vmov	sl, fp, d0
 8010248:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801024c:	2b00      	cmp	r3, #0
 801024e:	bfce      	itee	gt
 8010250:	462a      	movgt	r2, r5
 8010252:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010256:	465a      	movle	r2, fp
 8010258:	462f      	mov	r7, r5
 801025a:	46d9      	mov	r9, fp
 801025c:	bfcc      	ite	gt
 801025e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8010262:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8010266:	464b      	mov	r3, r9
 8010268:	4652      	mov	r2, sl
 801026a:	4620      	mov	r0, r4
 801026c:	4639      	mov	r1, r7
 801026e:	f7f0 fac5 	bl	80007fc <__aeabi_ddiv>
 8010272:	ec41 0b10 	vmov	d0, r0, r1
 8010276:	b005      	add	sp, #20
 8010278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801027c <__copybits>:
 801027c:	3901      	subs	r1, #1
 801027e:	b570      	push	{r4, r5, r6, lr}
 8010280:	1149      	asrs	r1, r1, #5
 8010282:	6914      	ldr	r4, [r2, #16]
 8010284:	3101      	adds	r1, #1
 8010286:	f102 0314 	add.w	r3, r2, #20
 801028a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801028e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010292:	1f05      	subs	r5, r0, #4
 8010294:	42a3      	cmp	r3, r4
 8010296:	d30c      	bcc.n	80102b2 <__copybits+0x36>
 8010298:	1aa3      	subs	r3, r4, r2
 801029a:	3b11      	subs	r3, #17
 801029c:	f023 0303 	bic.w	r3, r3, #3
 80102a0:	3211      	adds	r2, #17
 80102a2:	42a2      	cmp	r2, r4
 80102a4:	bf88      	it	hi
 80102a6:	2300      	movhi	r3, #0
 80102a8:	4418      	add	r0, r3
 80102aa:	2300      	movs	r3, #0
 80102ac:	4288      	cmp	r0, r1
 80102ae:	d305      	bcc.n	80102bc <__copybits+0x40>
 80102b0:	bd70      	pop	{r4, r5, r6, pc}
 80102b2:	f853 6b04 	ldr.w	r6, [r3], #4
 80102b6:	f845 6f04 	str.w	r6, [r5, #4]!
 80102ba:	e7eb      	b.n	8010294 <__copybits+0x18>
 80102bc:	f840 3b04 	str.w	r3, [r0], #4
 80102c0:	e7f4      	b.n	80102ac <__copybits+0x30>

080102c2 <__any_on>:
 80102c2:	f100 0214 	add.w	r2, r0, #20
 80102c6:	6900      	ldr	r0, [r0, #16]
 80102c8:	114b      	asrs	r3, r1, #5
 80102ca:	4298      	cmp	r0, r3
 80102cc:	b510      	push	{r4, lr}
 80102ce:	db11      	blt.n	80102f4 <__any_on+0x32>
 80102d0:	dd0a      	ble.n	80102e8 <__any_on+0x26>
 80102d2:	f011 011f 	ands.w	r1, r1, #31
 80102d6:	d007      	beq.n	80102e8 <__any_on+0x26>
 80102d8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80102dc:	fa24 f001 	lsr.w	r0, r4, r1
 80102e0:	fa00 f101 	lsl.w	r1, r0, r1
 80102e4:	428c      	cmp	r4, r1
 80102e6:	d10b      	bne.n	8010300 <__any_on+0x3e>
 80102e8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80102ec:	4293      	cmp	r3, r2
 80102ee:	d803      	bhi.n	80102f8 <__any_on+0x36>
 80102f0:	2000      	movs	r0, #0
 80102f2:	bd10      	pop	{r4, pc}
 80102f4:	4603      	mov	r3, r0
 80102f6:	e7f7      	b.n	80102e8 <__any_on+0x26>
 80102f8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80102fc:	2900      	cmp	r1, #0
 80102fe:	d0f5      	beq.n	80102ec <__any_on+0x2a>
 8010300:	2001      	movs	r0, #1
 8010302:	e7f6      	b.n	80102f2 <__any_on+0x30>

08010304 <sulp>:
 8010304:	b570      	push	{r4, r5, r6, lr}
 8010306:	4604      	mov	r4, r0
 8010308:	460d      	mov	r5, r1
 801030a:	ec45 4b10 	vmov	d0, r4, r5
 801030e:	4616      	mov	r6, r2
 8010310:	f7ff feba 	bl	8010088 <__ulp>
 8010314:	ec51 0b10 	vmov	r0, r1, d0
 8010318:	b17e      	cbz	r6, 801033a <sulp+0x36>
 801031a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801031e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8010322:	2b00      	cmp	r3, #0
 8010324:	dd09      	ble.n	801033a <sulp+0x36>
 8010326:	051b      	lsls	r3, r3, #20
 8010328:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 801032c:	2400      	movs	r4, #0
 801032e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8010332:	4622      	mov	r2, r4
 8010334:	462b      	mov	r3, r5
 8010336:	f7f0 f937 	bl	80005a8 <__aeabi_dmul>
 801033a:	ec41 0b10 	vmov	d0, r0, r1
 801033e:	bd70      	pop	{r4, r5, r6, pc}

08010340 <_strtod_l>:
 8010340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010344:	b09f      	sub	sp, #124	@ 0x7c
 8010346:	460c      	mov	r4, r1
 8010348:	9217      	str	r2, [sp, #92]	@ 0x5c
 801034a:	2200      	movs	r2, #0
 801034c:	921a      	str	r2, [sp, #104]	@ 0x68
 801034e:	9005      	str	r0, [sp, #20]
 8010350:	f04f 0a00 	mov.w	sl, #0
 8010354:	f04f 0b00 	mov.w	fp, #0
 8010358:	460a      	mov	r2, r1
 801035a:	9219      	str	r2, [sp, #100]	@ 0x64
 801035c:	7811      	ldrb	r1, [r2, #0]
 801035e:	292b      	cmp	r1, #43	@ 0x2b
 8010360:	d04a      	beq.n	80103f8 <_strtod_l+0xb8>
 8010362:	d838      	bhi.n	80103d6 <_strtod_l+0x96>
 8010364:	290d      	cmp	r1, #13
 8010366:	d832      	bhi.n	80103ce <_strtod_l+0x8e>
 8010368:	2908      	cmp	r1, #8
 801036a:	d832      	bhi.n	80103d2 <_strtod_l+0x92>
 801036c:	2900      	cmp	r1, #0
 801036e:	d03b      	beq.n	80103e8 <_strtod_l+0xa8>
 8010370:	2200      	movs	r2, #0
 8010372:	920b      	str	r2, [sp, #44]	@ 0x2c
 8010374:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8010376:	782a      	ldrb	r2, [r5, #0]
 8010378:	2a30      	cmp	r2, #48	@ 0x30
 801037a:	f040 80b3 	bne.w	80104e4 <_strtod_l+0x1a4>
 801037e:	786a      	ldrb	r2, [r5, #1]
 8010380:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8010384:	2a58      	cmp	r2, #88	@ 0x58
 8010386:	d16e      	bne.n	8010466 <_strtod_l+0x126>
 8010388:	9302      	str	r3, [sp, #8]
 801038a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801038c:	9301      	str	r3, [sp, #4]
 801038e:	ab1a      	add	r3, sp, #104	@ 0x68
 8010390:	9300      	str	r3, [sp, #0]
 8010392:	4a8e      	ldr	r2, [pc, #568]	@ (80105cc <_strtod_l+0x28c>)
 8010394:	9805      	ldr	r0, [sp, #20]
 8010396:	ab1b      	add	r3, sp, #108	@ 0x6c
 8010398:	a919      	add	r1, sp, #100	@ 0x64
 801039a:	f001 fb23 	bl	80119e4 <__gethex>
 801039e:	f010 060f 	ands.w	r6, r0, #15
 80103a2:	4604      	mov	r4, r0
 80103a4:	d005      	beq.n	80103b2 <_strtod_l+0x72>
 80103a6:	2e06      	cmp	r6, #6
 80103a8:	d128      	bne.n	80103fc <_strtod_l+0xbc>
 80103aa:	3501      	adds	r5, #1
 80103ac:	2300      	movs	r3, #0
 80103ae:	9519      	str	r5, [sp, #100]	@ 0x64
 80103b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80103b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	f040 858e 	bne.w	8010ed6 <_strtod_l+0xb96>
 80103ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80103bc:	b1cb      	cbz	r3, 80103f2 <_strtod_l+0xb2>
 80103be:	4652      	mov	r2, sl
 80103c0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80103c4:	ec43 2b10 	vmov	d0, r2, r3
 80103c8:	b01f      	add	sp, #124	@ 0x7c
 80103ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103ce:	2920      	cmp	r1, #32
 80103d0:	d1ce      	bne.n	8010370 <_strtod_l+0x30>
 80103d2:	3201      	adds	r2, #1
 80103d4:	e7c1      	b.n	801035a <_strtod_l+0x1a>
 80103d6:	292d      	cmp	r1, #45	@ 0x2d
 80103d8:	d1ca      	bne.n	8010370 <_strtod_l+0x30>
 80103da:	2101      	movs	r1, #1
 80103dc:	910b      	str	r1, [sp, #44]	@ 0x2c
 80103de:	1c51      	adds	r1, r2, #1
 80103e0:	9119      	str	r1, [sp, #100]	@ 0x64
 80103e2:	7852      	ldrb	r2, [r2, #1]
 80103e4:	2a00      	cmp	r2, #0
 80103e6:	d1c5      	bne.n	8010374 <_strtod_l+0x34>
 80103e8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80103ea:	9419      	str	r4, [sp, #100]	@ 0x64
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	f040 8570 	bne.w	8010ed2 <_strtod_l+0xb92>
 80103f2:	4652      	mov	r2, sl
 80103f4:	465b      	mov	r3, fp
 80103f6:	e7e5      	b.n	80103c4 <_strtod_l+0x84>
 80103f8:	2100      	movs	r1, #0
 80103fa:	e7ef      	b.n	80103dc <_strtod_l+0x9c>
 80103fc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80103fe:	b13a      	cbz	r2, 8010410 <_strtod_l+0xd0>
 8010400:	2135      	movs	r1, #53	@ 0x35
 8010402:	a81c      	add	r0, sp, #112	@ 0x70
 8010404:	f7ff ff3a 	bl	801027c <__copybits>
 8010408:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801040a:	9805      	ldr	r0, [sp, #20]
 801040c:	f7ff fb08 	bl	800fa20 <_Bfree>
 8010410:	3e01      	subs	r6, #1
 8010412:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8010414:	2e04      	cmp	r6, #4
 8010416:	d806      	bhi.n	8010426 <_strtod_l+0xe6>
 8010418:	e8df f006 	tbb	[pc, r6]
 801041c:	201d0314 	.word	0x201d0314
 8010420:	14          	.byte	0x14
 8010421:	00          	.byte	0x00
 8010422:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8010426:	05e1      	lsls	r1, r4, #23
 8010428:	bf48      	it	mi
 801042a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 801042e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010432:	0d1b      	lsrs	r3, r3, #20
 8010434:	051b      	lsls	r3, r3, #20
 8010436:	2b00      	cmp	r3, #0
 8010438:	d1bb      	bne.n	80103b2 <_strtod_l+0x72>
 801043a:	f7fe fb23 	bl	800ea84 <__errno>
 801043e:	2322      	movs	r3, #34	@ 0x22
 8010440:	6003      	str	r3, [r0, #0]
 8010442:	e7b6      	b.n	80103b2 <_strtod_l+0x72>
 8010444:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8010448:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801044c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8010450:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8010454:	e7e7      	b.n	8010426 <_strtod_l+0xe6>
 8010456:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80105d4 <_strtod_l+0x294>
 801045a:	e7e4      	b.n	8010426 <_strtod_l+0xe6>
 801045c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8010460:	f04f 3aff 	mov.w	sl, #4294967295
 8010464:	e7df      	b.n	8010426 <_strtod_l+0xe6>
 8010466:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010468:	1c5a      	adds	r2, r3, #1
 801046a:	9219      	str	r2, [sp, #100]	@ 0x64
 801046c:	785b      	ldrb	r3, [r3, #1]
 801046e:	2b30      	cmp	r3, #48	@ 0x30
 8010470:	d0f9      	beq.n	8010466 <_strtod_l+0x126>
 8010472:	2b00      	cmp	r3, #0
 8010474:	d09d      	beq.n	80103b2 <_strtod_l+0x72>
 8010476:	2301      	movs	r3, #1
 8010478:	9309      	str	r3, [sp, #36]	@ 0x24
 801047a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801047c:	930c      	str	r3, [sp, #48]	@ 0x30
 801047e:	2300      	movs	r3, #0
 8010480:	9308      	str	r3, [sp, #32]
 8010482:	930a      	str	r3, [sp, #40]	@ 0x28
 8010484:	461f      	mov	r7, r3
 8010486:	220a      	movs	r2, #10
 8010488:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801048a:	7805      	ldrb	r5, [r0, #0]
 801048c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8010490:	b2d9      	uxtb	r1, r3
 8010492:	2909      	cmp	r1, #9
 8010494:	d928      	bls.n	80104e8 <_strtod_l+0x1a8>
 8010496:	494e      	ldr	r1, [pc, #312]	@ (80105d0 <_strtod_l+0x290>)
 8010498:	2201      	movs	r2, #1
 801049a:	f001 f9ba 	bl	8011812 <strncmp>
 801049e:	2800      	cmp	r0, #0
 80104a0:	d032      	beq.n	8010508 <_strtod_l+0x1c8>
 80104a2:	2000      	movs	r0, #0
 80104a4:	462a      	mov	r2, r5
 80104a6:	4681      	mov	r9, r0
 80104a8:	463d      	mov	r5, r7
 80104aa:	4603      	mov	r3, r0
 80104ac:	2a65      	cmp	r2, #101	@ 0x65
 80104ae:	d001      	beq.n	80104b4 <_strtod_l+0x174>
 80104b0:	2a45      	cmp	r2, #69	@ 0x45
 80104b2:	d114      	bne.n	80104de <_strtod_l+0x19e>
 80104b4:	b91d      	cbnz	r5, 80104be <_strtod_l+0x17e>
 80104b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80104b8:	4302      	orrs	r2, r0
 80104ba:	d095      	beq.n	80103e8 <_strtod_l+0xa8>
 80104bc:	2500      	movs	r5, #0
 80104be:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80104c0:	1c62      	adds	r2, r4, #1
 80104c2:	9219      	str	r2, [sp, #100]	@ 0x64
 80104c4:	7862      	ldrb	r2, [r4, #1]
 80104c6:	2a2b      	cmp	r2, #43	@ 0x2b
 80104c8:	d077      	beq.n	80105ba <_strtod_l+0x27a>
 80104ca:	2a2d      	cmp	r2, #45	@ 0x2d
 80104cc:	d07b      	beq.n	80105c6 <_strtod_l+0x286>
 80104ce:	f04f 0c00 	mov.w	ip, #0
 80104d2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80104d6:	2909      	cmp	r1, #9
 80104d8:	f240 8082 	bls.w	80105e0 <_strtod_l+0x2a0>
 80104dc:	9419      	str	r4, [sp, #100]	@ 0x64
 80104de:	f04f 0800 	mov.w	r8, #0
 80104e2:	e0a2      	b.n	801062a <_strtod_l+0x2ea>
 80104e4:	2300      	movs	r3, #0
 80104e6:	e7c7      	b.n	8010478 <_strtod_l+0x138>
 80104e8:	2f08      	cmp	r7, #8
 80104ea:	bfd5      	itete	le
 80104ec:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80104ee:	9908      	ldrgt	r1, [sp, #32]
 80104f0:	fb02 3301 	mlale	r3, r2, r1, r3
 80104f4:	fb02 3301 	mlagt	r3, r2, r1, r3
 80104f8:	f100 0001 	add.w	r0, r0, #1
 80104fc:	bfd4      	ite	le
 80104fe:	930a      	strle	r3, [sp, #40]	@ 0x28
 8010500:	9308      	strgt	r3, [sp, #32]
 8010502:	3701      	adds	r7, #1
 8010504:	9019      	str	r0, [sp, #100]	@ 0x64
 8010506:	e7bf      	b.n	8010488 <_strtod_l+0x148>
 8010508:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801050a:	1c5a      	adds	r2, r3, #1
 801050c:	9219      	str	r2, [sp, #100]	@ 0x64
 801050e:	785a      	ldrb	r2, [r3, #1]
 8010510:	b37f      	cbz	r7, 8010572 <_strtod_l+0x232>
 8010512:	4681      	mov	r9, r0
 8010514:	463d      	mov	r5, r7
 8010516:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 801051a:	2b09      	cmp	r3, #9
 801051c:	d912      	bls.n	8010544 <_strtod_l+0x204>
 801051e:	2301      	movs	r3, #1
 8010520:	e7c4      	b.n	80104ac <_strtod_l+0x16c>
 8010522:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010524:	1c5a      	adds	r2, r3, #1
 8010526:	9219      	str	r2, [sp, #100]	@ 0x64
 8010528:	785a      	ldrb	r2, [r3, #1]
 801052a:	3001      	adds	r0, #1
 801052c:	2a30      	cmp	r2, #48	@ 0x30
 801052e:	d0f8      	beq.n	8010522 <_strtod_l+0x1e2>
 8010530:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8010534:	2b08      	cmp	r3, #8
 8010536:	f200 84d3 	bhi.w	8010ee0 <_strtod_l+0xba0>
 801053a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801053c:	930c      	str	r3, [sp, #48]	@ 0x30
 801053e:	4681      	mov	r9, r0
 8010540:	2000      	movs	r0, #0
 8010542:	4605      	mov	r5, r0
 8010544:	3a30      	subs	r2, #48	@ 0x30
 8010546:	f100 0301 	add.w	r3, r0, #1
 801054a:	d02a      	beq.n	80105a2 <_strtod_l+0x262>
 801054c:	4499      	add	r9, r3
 801054e:	eb00 0c05 	add.w	ip, r0, r5
 8010552:	462b      	mov	r3, r5
 8010554:	210a      	movs	r1, #10
 8010556:	4563      	cmp	r3, ip
 8010558:	d10d      	bne.n	8010576 <_strtod_l+0x236>
 801055a:	1c69      	adds	r1, r5, #1
 801055c:	4401      	add	r1, r0
 801055e:	4428      	add	r0, r5
 8010560:	2808      	cmp	r0, #8
 8010562:	dc16      	bgt.n	8010592 <_strtod_l+0x252>
 8010564:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010566:	230a      	movs	r3, #10
 8010568:	fb03 2300 	mla	r3, r3, r0, r2
 801056c:	930a      	str	r3, [sp, #40]	@ 0x28
 801056e:	2300      	movs	r3, #0
 8010570:	e018      	b.n	80105a4 <_strtod_l+0x264>
 8010572:	4638      	mov	r0, r7
 8010574:	e7da      	b.n	801052c <_strtod_l+0x1ec>
 8010576:	2b08      	cmp	r3, #8
 8010578:	f103 0301 	add.w	r3, r3, #1
 801057c:	dc03      	bgt.n	8010586 <_strtod_l+0x246>
 801057e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8010580:	434e      	muls	r6, r1
 8010582:	960a      	str	r6, [sp, #40]	@ 0x28
 8010584:	e7e7      	b.n	8010556 <_strtod_l+0x216>
 8010586:	2b10      	cmp	r3, #16
 8010588:	bfde      	ittt	le
 801058a:	9e08      	ldrle	r6, [sp, #32]
 801058c:	434e      	mulle	r6, r1
 801058e:	9608      	strle	r6, [sp, #32]
 8010590:	e7e1      	b.n	8010556 <_strtod_l+0x216>
 8010592:	280f      	cmp	r0, #15
 8010594:	dceb      	bgt.n	801056e <_strtod_l+0x22e>
 8010596:	9808      	ldr	r0, [sp, #32]
 8010598:	230a      	movs	r3, #10
 801059a:	fb03 2300 	mla	r3, r3, r0, r2
 801059e:	9308      	str	r3, [sp, #32]
 80105a0:	e7e5      	b.n	801056e <_strtod_l+0x22e>
 80105a2:	4629      	mov	r1, r5
 80105a4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80105a6:	1c50      	adds	r0, r2, #1
 80105a8:	9019      	str	r0, [sp, #100]	@ 0x64
 80105aa:	7852      	ldrb	r2, [r2, #1]
 80105ac:	4618      	mov	r0, r3
 80105ae:	460d      	mov	r5, r1
 80105b0:	e7b1      	b.n	8010516 <_strtod_l+0x1d6>
 80105b2:	f04f 0900 	mov.w	r9, #0
 80105b6:	2301      	movs	r3, #1
 80105b8:	e77d      	b.n	80104b6 <_strtod_l+0x176>
 80105ba:	f04f 0c00 	mov.w	ip, #0
 80105be:	1ca2      	adds	r2, r4, #2
 80105c0:	9219      	str	r2, [sp, #100]	@ 0x64
 80105c2:	78a2      	ldrb	r2, [r4, #2]
 80105c4:	e785      	b.n	80104d2 <_strtod_l+0x192>
 80105c6:	f04f 0c01 	mov.w	ip, #1
 80105ca:	e7f8      	b.n	80105be <_strtod_l+0x27e>
 80105cc:	08013a98 	.word	0x08013a98
 80105d0:	08013a80 	.word	0x08013a80
 80105d4:	7ff00000 	.word	0x7ff00000
 80105d8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80105da:	1c51      	adds	r1, r2, #1
 80105dc:	9119      	str	r1, [sp, #100]	@ 0x64
 80105de:	7852      	ldrb	r2, [r2, #1]
 80105e0:	2a30      	cmp	r2, #48	@ 0x30
 80105e2:	d0f9      	beq.n	80105d8 <_strtod_l+0x298>
 80105e4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80105e8:	2908      	cmp	r1, #8
 80105ea:	f63f af78 	bhi.w	80104de <_strtod_l+0x19e>
 80105ee:	3a30      	subs	r2, #48	@ 0x30
 80105f0:	920e      	str	r2, [sp, #56]	@ 0x38
 80105f2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80105f4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80105f6:	f04f 080a 	mov.w	r8, #10
 80105fa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80105fc:	1c56      	adds	r6, r2, #1
 80105fe:	9619      	str	r6, [sp, #100]	@ 0x64
 8010600:	7852      	ldrb	r2, [r2, #1]
 8010602:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8010606:	f1be 0f09 	cmp.w	lr, #9
 801060a:	d939      	bls.n	8010680 <_strtod_l+0x340>
 801060c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801060e:	1a76      	subs	r6, r6, r1
 8010610:	2e08      	cmp	r6, #8
 8010612:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8010616:	dc03      	bgt.n	8010620 <_strtod_l+0x2e0>
 8010618:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801061a:	4588      	cmp	r8, r1
 801061c:	bfa8      	it	ge
 801061e:	4688      	movge	r8, r1
 8010620:	f1bc 0f00 	cmp.w	ip, #0
 8010624:	d001      	beq.n	801062a <_strtod_l+0x2ea>
 8010626:	f1c8 0800 	rsb	r8, r8, #0
 801062a:	2d00      	cmp	r5, #0
 801062c:	d14e      	bne.n	80106cc <_strtod_l+0x38c>
 801062e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010630:	4308      	orrs	r0, r1
 8010632:	f47f aebe 	bne.w	80103b2 <_strtod_l+0x72>
 8010636:	2b00      	cmp	r3, #0
 8010638:	f47f aed6 	bne.w	80103e8 <_strtod_l+0xa8>
 801063c:	2a69      	cmp	r2, #105	@ 0x69
 801063e:	d028      	beq.n	8010692 <_strtod_l+0x352>
 8010640:	dc25      	bgt.n	801068e <_strtod_l+0x34e>
 8010642:	2a49      	cmp	r2, #73	@ 0x49
 8010644:	d025      	beq.n	8010692 <_strtod_l+0x352>
 8010646:	2a4e      	cmp	r2, #78	@ 0x4e
 8010648:	f47f aece 	bne.w	80103e8 <_strtod_l+0xa8>
 801064c:	499b      	ldr	r1, [pc, #620]	@ (80108bc <_strtod_l+0x57c>)
 801064e:	a819      	add	r0, sp, #100	@ 0x64
 8010650:	f001 fbea 	bl	8011e28 <__match>
 8010654:	2800      	cmp	r0, #0
 8010656:	f43f aec7 	beq.w	80103e8 <_strtod_l+0xa8>
 801065a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801065c:	781b      	ldrb	r3, [r3, #0]
 801065e:	2b28      	cmp	r3, #40	@ 0x28
 8010660:	d12e      	bne.n	80106c0 <_strtod_l+0x380>
 8010662:	4997      	ldr	r1, [pc, #604]	@ (80108c0 <_strtod_l+0x580>)
 8010664:	aa1c      	add	r2, sp, #112	@ 0x70
 8010666:	a819      	add	r0, sp, #100	@ 0x64
 8010668:	f001 fbf2 	bl	8011e50 <__hexnan>
 801066c:	2805      	cmp	r0, #5
 801066e:	d127      	bne.n	80106c0 <_strtod_l+0x380>
 8010670:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010672:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8010676:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 801067a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 801067e:	e698      	b.n	80103b2 <_strtod_l+0x72>
 8010680:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8010682:	fb08 2101 	mla	r1, r8, r1, r2
 8010686:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 801068a:	920e      	str	r2, [sp, #56]	@ 0x38
 801068c:	e7b5      	b.n	80105fa <_strtod_l+0x2ba>
 801068e:	2a6e      	cmp	r2, #110	@ 0x6e
 8010690:	e7da      	b.n	8010648 <_strtod_l+0x308>
 8010692:	498c      	ldr	r1, [pc, #560]	@ (80108c4 <_strtod_l+0x584>)
 8010694:	a819      	add	r0, sp, #100	@ 0x64
 8010696:	f001 fbc7 	bl	8011e28 <__match>
 801069a:	2800      	cmp	r0, #0
 801069c:	f43f aea4 	beq.w	80103e8 <_strtod_l+0xa8>
 80106a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80106a2:	4989      	ldr	r1, [pc, #548]	@ (80108c8 <_strtod_l+0x588>)
 80106a4:	3b01      	subs	r3, #1
 80106a6:	a819      	add	r0, sp, #100	@ 0x64
 80106a8:	9319      	str	r3, [sp, #100]	@ 0x64
 80106aa:	f001 fbbd 	bl	8011e28 <__match>
 80106ae:	b910      	cbnz	r0, 80106b6 <_strtod_l+0x376>
 80106b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80106b2:	3301      	adds	r3, #1
 80106b4:	9319      	str	r3, [sp, #100]	@ 0x64
 80106b6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80108d8 <_strtod_l+0x598>
 80106ba:	f04f 0a00 	mov.w	sl, #0
 80106be:	e678      	b.n	80103b2 <_strtod_l+0x72>
 80106c0:	4882      	ldr	r0, [pc, #520]	@ (80108cc <_strtod_l+0x58c>)
 80106c2:	f001 f8ed 	bl	80118a0 <nan>
 80106c6:	ec5b ab10 	vmov	sl, fp, d0
 80106ca:	e672      	b.n	80103b2 <_strtod_l+0x72>
 80106cc:	eba8 0309 	sub.w	r3, r8, r9
 80106d0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80106d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80106d4:	2f00      	cmp	r7, #0
 80106d6:	bf08      	it	eq
 80106d8:	462f      	moveq	r7, r5
 80106da:	2d10      	cmp	r5, #16
 80106dc:	462c      	mov	r4, r5
 80106de:	bfa8      	it	ge
 80106e0:	2410      	movge	r4, #16
 80106e2:	f7ef fee7 	bl	80004b4 <__aeabi_ui2d>
 80106e6:	2d09      	cmp	r5, #9
 80106e8:	4682      	mov	sl, r0
 80106ea:	468b      	mov	fp, r1
 80106ec:	dc13      	bgt.n	8010716 <_strtod_l+0x3d6>
 80106ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	f43f ae5e 	beq.w	80103b2 <_strtod_l+0x72>
 80106f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80106f8:	dd78      	ble.n	80107ec <_strtod_l+0x4ac>
 80106fa:	2b16      	cmp	r3, #22
 80106fc:	dc5f      	bgt.n	80107be <_strtod_l+0x47e>
 80106fe:	4974      	ldr	r1, [pc, #464]	@ (80108d0 <_strtod_l+0x590>)
 8010700:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010704:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010708:	4652      	mov	r2, sl
 801070a:	465b      	mov	r3, fp
 801070c:	f7ef ff4c 	bl	80005a8 <__aeabi_dmul>
 8010710:	4682      	mov	sl, r0
 8010712:	468b      	mov	fp, r1
 8010714:	e64d      	b.n	80103b2 <_strtod_l+0x72>
 8010716:	4b6e      	ldr	r3, [pc, #440]	@ (80108d0 <_strtod_l+0x590>)
 8010718:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801071c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8010720:	f7ef ff42 	bl	80005a8 <__aeabi_dmul>
 8010724:	4682      	mov	sl, r0
 8010726:	9808      	ldr	r0, [sp, #32]
 8010728:	468b      	mov	fp, r1
 801072a:	f7ef fec3 	bl	80004b4 <__aeabi_ui2d>
 801072e:	4602      	mov	r2, r0
 8010730:	460b      	mov	r3, r1
 8010732:	4650      	mov	r0, sl
 8010734:	4659      	mov	r1, fp
 8010736:	f7ef fd81 	bl	800023c <__adddf3>
 801073a:	2d0f      	cmp	r5, #15
 801073c:	4682      	mov	sl, r0
 801073e:	468b      	mov	fp, r1
 8010740:	ddd5      	ble.n	80106ee <_strtod_l+0x3ae>
 8010742:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010744:	1b2c      	subs	r4, r5, r4
 8010746:	441c      	add	r4, r3
 8010748:	2c00      	cmp	r4, #0
 801074a:	f340 8096 	ble.w	801087a <_strtod_l+0x53a>
 801074e:	f014 030f 	ands.w	r3, r4, #15
 8010752:	d00a      	beq.n	801076a <_strtod_l+0x42a>
 8010754:	495e      	ldr	r1, [pc, #376]	@ (80108d0 <_strtod_l+0x590>)
 8010756:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801075a:	4652      	mov	r2, sl
 801075c:	465b      	mov	r3, fp
 801075e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010762:	f7ef ff21 	bl	80005a8 <__aeabi_dmul>
 8010766:	4682      	mov	sl, r0
 8010768:	468b      	mov	fp, r1
 801076a:	f034 040f 	bics.w	r4, r4, #15
 801076e:	d073      	beq.n	8010858 <_strtod_l+0x518>
 8010770:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8010774:	dd48      	ble.n	8010808 <_strtod_l+0x4c8>
 8010776:	2400      	movs	r4, #0
 8010778:	46a0      	mov	r8, r4
 801077a:	940a      	str	r4, [sp, #40]	@ 0x28
 801077c:	46a1      	mov	r9, r4
 801077e:	9a05      	ldr	r2, [sp, #20]
 8010780:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80108d8 <_strtod_l+0x598>
 8010784:	2322      	movs	r3, #34	@ 0x22
 8010786:	6013      	str	r3, [r2, #0]
 8010788:	f04f 0a00 	mov.w	sl, #0
 801078c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801078e:	2b00      	cmp	r3, #0
 8010790:	f43f ae0f 	beq.w	80103b2 <_strtod_l+0x72>
 8010794:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010796:	9805      	ldr	r0, [sp, #20]
 8010798:	f7ff f942 	bl	800fa20 <_Bfree>
 801079c:	9805      	ldr	r0, [sp, #20]
 801079e:	4649      	mov	r1, r9
 80107a0:	f7ff f93e 	bl	800fa20 <_Bfree>
 80107a4:	9805      	ldr	r0, [sp, #20]
 80107a6:	4641      	mov	r1, r8
 80107a8:	f7ff f93a 	bl	800fa20 <_Bfree>
 80107ac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80107ae:	9805      	ldr	r0, [sp, #20]
 80107b0:	f7ff f936 	bl	800fa20 <_Bfree>
 80107b4:	9805      	ldr	r0, [sp, #20]
 80107b6:	4621      	mov	r1, r4
 80107b8:	f7ff f932 	bl	800fa20 <_Bfree>
 80107bc:	e5f9      	b.n	80103b2 <_strtod_l+0x72>
 80107be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80107c0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80107c4:	4293      	cmp	r3, r2
 80107c6:	dbbc      	blt.n	8010742 <_strtod_l+0x402>
 80107c8:	4c41      	ldr	r4, [pc, #260]	@ (80108d0 <_strtod_l+0x590>)
 80107ca:	f1c5 050f 	rsb	r5, r5, #15
 80107ce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80107d2:	4652      	mov	r2, sl
 80107d4:	465b      	mov	r3, fp
 80107d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80107da:	f7ef fee5 	bl	80005a8 <__aeabi_dmul>
 80107de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80107e0:	1b5d      	subs	r5, r3, r5
 80107e2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80107e6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80107ea:	e78f      	b.n	801070c <_strtod_l+0x3cc>
 80107ec:	3316      	adds	r3, #22
 80107ee:	dba8      	blt.n	8010742 <_strtod_l+0x402>
 80107f0:	4b37      	ldr	r3, [pc, #220]	@ (80108d0 <_strtod_l+0x590>)
 80107f2:	eba9 0808 	sub.w	r8, r9, r8
 80107f6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80107fa:	e9d8 2300 	ldrd	r2, r3, [r8]
 80107fe:	4650      	mov	r0, sl
 8010800:	4659      	mov	r1, fp
 8010802:	f7ef fffb 	bl	80007fc <__aeabi_ddiv>
 8010806:	e783      	b.n	8010710 <_strtod_l+0x3d0>
 8010808:	4b32      	ldr	r3, [pc, #200]	@ (80108d4 <_strtod_l+0x594>)
 801080a:	9308      	str	r3, [sp, #32]
 801080c:	2300      	movs	r3, #0
 801080e:	1124      	asrs	r4, r4, #4
 8010810:	4650      	mov	r0, sl
 8010812:	4659      	mov	r1, fp
 8010814:	461e      	mov	r6, r3
 8010816:	2c01      	cmp	r4, #1
 8010818:	dc21      	bgt.n	801085e <_strtod_l+0x51e>
 801081a:	b10b      	cbz	r3, 8010820 <_strtod_l+0x4e0>
 801081c:	4682      	mov	sl, r0
 801081e:	468b      	mov	fp, r1
 8010820:	492c      	ldr	r1, [pc, #176]	@ (80108d4 <_strtod_l+0x594>)
 8010822:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8010826:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 801082a:	4652      	mov	r2, sl
 801082c:	465b      	mov	r3, fp
 801082e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010832:	f7ef feb9 	bl	80005a8 <__aeabi_dmul>
 8010836:	4b28      	ldr	r3, [pc, #160]	@ (80108d8 <_strtod_l+0x598>)
 8010838:	460a      	mov	r2, r1
 801083a:	400b      	ands	r3, r1
 801083c:	4927      	ldr	r1, [pc, #156]	@ (80108dc <_strtod_l+0x59c>)
 801083e:	428b      	cmp	r3, r1
 8010840:	4682      	mov	sl, r0
 8010842:	d898      	bhi.n	8010776 <_strtod_l+0x436>
 8010844:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8010848:	428b      	cmp	r3, r1
 801084a:	bf86      	itte	hi
 801084c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80108e0 <_strtod_l+0x5a0>
 8010850:	f04f 3aff 	movhi.w	sl, #4294967295
 8010854:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8010858:	2300      	movs	r3, #0
 801085a:	9308      	str	r3, [sp, #32]
 801085c:	e07a      	b.n	8010954 <_strtod_l+0x614>
 801085e:	07e2      	lsls	r2, r4, #31
 8010860:	d505      	bpl.n	801086e <_strtod_l+0x52e>
 8010862:	9b08      	ldr	r3, [sp, #32]
 8010864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010868:	f7ef fe9e 	bl	80005a8 <__aeabi_dmul>
 801086c:	2301      	movs	r3, #1
 801086e:	9a08      	ldr	r2, [sp, #32]
 8010870:	3208      	adds	r2, #8
 8010872:	3601      	adds	r6, #1
 8010874:	1064      	asrs	r4, r4, #1
 8010876:	9208      	str	r2, [sp, #32]
 8010878:	e7cd      	b.n	8010816 <_strtod_l+0x4d6>
 801087a:	d0ed      	beq.n	8010858 <_strtod_l+0x518>
 801087c:	4264      	negs	r4, r4
 801087e:	f014 020f 	ands.w	r2, r4, #15
 8010882:	d00a      	beq.n	801089a <_strtod_l+0x55a>
 8010884:	4b12      	ldr	r3, [pc, #72]	@ (80108d0 <_strtod_l+0x590>)
 8010886:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801088a:	4650      	mov	r0, sl
 801088c:	4659      	mov	r1, fp
 801088e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010892:	f7ef ffb3 	bl	80007fc <__aeabi_ddiv>
 8010896:	4682      	mov	sl, r0
 8010898:	468b      	mov	fp, r1
 801089a:	1124      	asrs	r4, r4, #4
 801089c:	d0dc      	beq.n	8010858 <_strtod_l+0x518>
 801089e:	2c1f      	cmp	r4, #31
 80108a0:	dd20      	ble.n	80108e4 <_strtod_l+0x5a4>
 80108a2:	2400      	movs	r4, #0
 80108a4:	46a0      	mov	r8, r4
 80108a6:	940a      	str	r4, [sp, #40]	@ 0x28
 80108a8:	46a1      	mov	r9, r4
 80108aa:	9a05      	ldr	r2, [sp, #20]
 80108ac:	2322      	movs	r3, #34	@ 0x22
 80108ae:	f04f 0a00 	mov.w	sl, #0
 80108b2:	f04f 0b00 	mov.w	fp, #0
 80108b6:	6013      	str	r3, [r2, #0]
 80108b8:	e768      	b.n	801078c <_strtod_l+0x44c>
 80108ba:	bf00      	nop
 80108bc:	0801386e 	.word	0x0801386e
 80108c0:	08013a84 	.word	0x08013a84
 80108c4:	08013866 	.word	0x08013866
 80108c8:	0801389d 	.word	0x0801389d
 80108cc:	08013c2d 	.word	0x08013c2d
 80108d0:	080139b8 	.word	0x080139b8
 80108d4:	08013990 	.word	0x08013990
 80108d8:	7ff00000 	.word	0x7ff00000
 80108dc:	7ca00000 	.word	0x7ca00000
 80108e0:	7fefffff 	.word	0x7fefffff
 80108e4:	f014 0310 	ands.w	r3, r4, #16
 80108e8:	bf18      	it	ne
 80108ea:	236a      	movne	r3, #106	@ 0x6a
 80108ec:	4ea9      	ldr	r6, [pc, #676]	@ (8010b94 <_strtod_l+0x854>)
 80108ee:	9308      	str	r3, [sp, #32]
 80108f0:	4650      	mov	r0, sl
 80108f2:	4659      	mov	r1, fp
 80108f4:	2300      	movs	r3, #0
 80108f6:	07e2      	lsls	r2, r4, #31
 80108f8:	d504      	bpl.n	8010904 <_strtod_l+0x5c4>
 80108fa:	e9d6 2300 	ldrd	r2, r3, [r6]
 80108fe:	f7ef fe53 	bl	80005a8 <__aeabi_dmul>
 8010902:	2301      	movs	r3, #1
 8010904:	1064      	asrs	r4, r4, #1
 8010906:	f106 0608 	add.w	r6, r6, #8
 801090a:	d1f4      	bne.n	80108f6 <_strtod_l+0x5b6>
 801090c:	b10b      	cbz	r3, 8010912 <_strtod_l+0x5d2>
 801090e:	4682      	mov	sl, r0
 8010910:	468b      	mov	fp, r1
 8010912:	9b08      	ldr	r3, [sp, #32]
 8010914:	b1b3      	cbz	r3, 8010944 <_strtod_l+0x604>
 8010916:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801091a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 801091e:	2b00      	cmp	r3, #0
 8010920:	4659      	mov	r1, fp
 8010922:	dd0f      	ble.n	8010944 <_strtod_l+0x604>
 8010924:	2b1f      	cmp	r3, #31
 8010926:	dd55      	ble.n	80109d4 <_strtod_l+0x694>
 8010928:	2b34      	cmp	r3, #52	@ 0x34
 801092a:	bfde      	ittt	le
 801092c:	f04f 33ff 	movle.w	r3, #4294967295
 8010930:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8010934:	4093      	lslle	r3, r2
 8010936:	f04f 0a00 	mov.w	sl, #0
 801093a:	bfcc      	ite	gt
 801093c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8010940:	ea03 0b01 	andle.w	fp, r3, r1
 8010944:	2200      	movs	r2, #0
 8010946:	2300      	movs	r3, #0
 8010948:	4650      	mov	r0, sl
 801094a:	4659      	mov	r1, fp
 801094c:	f7f0 f894 	bl	8000a78 <__aeabi_dcmpeq>
 8010950:	2800      	cmp	r0, #0
 8010952:	d1a6      	bne.n	80108a2 <_strtod_l+0x562>
 8010954:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010956:	9300      	str	r3, [sp, #0]
 8010958:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801095a:	9805      	ldr	r0, [sp, #20]
 801095c:	462b      	mov	r3, r5
 801095e:	463a      	mov	r2, r7
 8010960:	f7ff f8c6 	bl	800faf0 <__s2b>
 8010964:	900a      	str	r0, [sp, #40]	@ 0x28
 8010966:	2800      	cmp	r0, #0
 8010968:	f43f af05 	beq.w	8010776 <_strtod_l+0x436>
 801096c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801096e:	2a00      	cmp	r2, #0
 8010970:	eba9 0308 	sub.w	r3, r9, r8
 8010974:	bfa8      	it	ge
 8010976:	2300      	movge	r3, #0
 8010978:	9312      	str	r3, [sp, #72]	@ 0x48
 801097a:	2400      	movs	r4, #0
 801097c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8010980:	9316      	str	r3, [sp, #88]	@ 0x58
 8010982:	46a0      	mov	r8, r4
 8010984:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010986:	9805      	ldr	r0, [sp, #20]
 8010988:	6859      	ldr	r1, [r3, #4]
 801098a:	f7ff f809 	bl	800f9a0 <_Balloc>
 801098e:	4681      	mov	r9, r0
 8010990:	2800      	cmp	r0, #0
 8010992:	f43f aef4 	beq.w	801077e <_strtod_l+0x43e>
 8010996:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010998:	691a      	ldr	r2, [r3, #16]
 801099a:	3202      	adds	r2, #2
 801099c:	f103 010c 	add.w	r1, r3, #12
 80109a0:	0092      	lsls	r2, r2, #2
 80109a2:	300c      	adds	r0, #12
 80109a4:	f7fe f89b 	bl	800eade <memcpy>
 80109a8:	ec4b ab10 	vmov	d0, sl, fp
 80109ac:	9805      	ldr	r0, [sp, #20]
 80109ae:	aa1c      	add	r2, sp, #112	@ 0x70
 80109b0:	a91b      	add	r1, sp, #108	@ 0x6c
 80109b2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80109b6:	f7ff fbd7 	bl	8010168 <__d2b>
 80109ba:	901a      	str	r0, [sp, #104]	@ 0x68
 80109bc:	2800      	cmp	r0, #0
 80109be:	f43f aede 	beq.w	801077e <_strtod_l+0x43e>
 80109c2:	9805      	ldr	r0, [sp, #20]
 80109c4:	2101      	movs	r1, #1
 80109c6:	f7ff f929 	bl	800fc1c <__i2b>
 80109ca:	4680      	mov	r8, r0
 80109cc:	b948      	cbnz	r0, 80109e2 <_strtod_l+0x6a2>
 80109ce:	f04f 0800 	mov.w	r8, #0
 80109d2:	e6d4      	b.n	801077e <_strtod_l+0x43e>
 80109d4:	f04f 32ff 	mov.w	r2, #4294967295
 80109d8:	fa02 f303 	lsl.w	r3, r2, r3
 80109dc:	ea03 0a0a 	and.w	sl, r3, sl
 80109e0:	e7b0      	b.n	8010944 <_strtod_l+0x604>
 80109e2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80109e4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80109e6:	2d00      	cmp	r5, #0
 80109e8:	bfab      	itete	ge
 80109ea:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80109ec:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80109ee:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80109f0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80109f2:	bfac      	ite	ge
 80109f4:	18ef      	addge	r7, r5, r3
 80109f6:	1b5e      	sublt	r6, r3, r5
 80109f8:	9b08      	ldr	r3, [sp, #32]
 80109fa:	1aed      	subs	r5, r5, r3
 80109fc:	4415      	add	r5, r2
 80109fe:	4b66      	ldr	r3, [pc, #408]	@ (8010b98 <_strtod_l+0x858>)
 8010a00:	3d01      	subs	r5, #1
 8010a02:	429d      	cmp	r5, r3
 8010a04:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8010a08:	da50      	bge.n	8010aac <_strtod_l+0x76c>
 8010a0a:	1b5b      	subs	r3, r3, r5
 8010a0c:	2b1f      	cmp	r3, #31
 8010a0e:	eba2 0203 	sub.w	r2, r2, r3
 8010a12:	f04f 0101 	mov.w	r1, #1
 8010a16:	dc3d      	bgt.n	8010a94 <_strtod_l+0x754>
 8010a18:	fa01 f303 	lsl.w	r3, r1, r3
 8010a1c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010a1e:	2300      	movs	r3, #0
 8010a20:	9310      	str	r3, [sp, #64]	@ 0x40
 8010a22:	18bd      	adds	r5, r7, r2
 8010a24:	9b08      	ldr	r3, [sp, #32]
 8010a26:	42af      	cmp	r7, r5
 8010a28:	4416      	add	r6, r2
 8010a2a:	441e      	add	r6, r3
 8010a2c:	463b      	mov	r3, r7
 8010a2e:	bfa8      	it	ge
 8010a30:	462b      	movge	r3, r5
 8010a32:	42b3      	cmp	r3, r6
 8010a34:	bfa8      	it	ge
 8010a36:	4633      	movge	r3, r6
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	bfc2      	ittt	gt
 8010a3c:	1aed      	subgt	r5, r5, r3
 8010a3e:	1af6      	subgt	r6, r6, r3
 8010a40:	1aff      	subgt	r7, r7, r3
 8010a42:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	dd16      	ble.n	8010a76 <_strtod_l+0x736>
 8010a48:	4641      	mov	r1, r8
 8010a4a:	9805      	ldr	r0, [sp, #20]
 8010a4c:	461a      	mov	r2, r3
 8010a4e:	f7ff f9a5 	bl	800fd9c <__pow5mult>
 8010a52:	4680      	mov	r8, r0
 8010a54:	2800      	cmp	r0, #0
 8010a56:	d0ba      	beq.n	80109ce <_strtod_l+0x68e>
 8010a58:	4601      	mov	r1, r0
 8010a5a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8010a5c:	9805      	ldr	r0, [sp, #20]
 8010a5e:	f7ff f8f3 	bl	800fc48 <__multiply>
 8010a62:	900e      	str	r0, [sp, #56]	@ 0x38
 8010a64:	2800      	cmp	r0, #0
 8010a66:	f43f ae8a 	beq.w	801077e <_strtod_l+0x43e>
 8010a6a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010a6c:	9805      	ldr	r0, [sp, #20]
 8010a6e:	f7fe ffd7 	bl	800fa20 <_Bfree>
 8010a72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010a74:	931a      	str	r3, [sp, #104]	@ 0x68
 8010a76:	2d00      	cmp	r5, #0
 8010a78:	dc1d      	bgt.n	8010ab6 <_strtod_l+0x776>
 8010a7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	dd23      	ble.n	8010ac8 <_strtod_l+0x788>
 8010a80:	4649      	mov	r1, r9
 8010a82:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8010a84:	9805      	ldr	r0, [sp, #20]
 8010a86:	f7ff f989 	bl	800fd9c <__pow5mult>
 8010a8a:	4681      	mov	r9, r0
 8010a8c:	b9e0      	cbnz	r0, 8010ac8 <_strtod_l+0x788>
 8010a8e:	f04f 0900 	mov.w	r9, #0
 8010a92:	e674      	b.n	801077e <_strtod_l+0x43e>
 8010a94:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8010a98:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8010a9c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8010aa0:	35e2      	adds	r5, #226	@ 0xe2
 8010aa2:	fa01 f305 	lsl.w	r3, r1, r5
 8010aa6:	9310      	str	r3, [sp, #64]	@ 0x40
 8010aa8:	9113      	str	r1, [sp, #76]	@ 0x4c
 8010aaa:	e7ba      	b.n	8010a22 <_strtod_l+0x6e2>
 8010aac:	2300      	movs	r3, #0
 8010aae:	9310      	str	r3, [sp, #64]	@ 0x40
 8010ab0:	2301      	movs	r3, #1
 8010ab2:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010ab4:	e7b5      	b.n	8010a22 <_strtod_l+0x6e2>
 8010ab6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010ab8:	9805      	ldr	r0, [sp, #20]
 8010aba:	462a      	mov	r2, r5
 8010abc:	f7ff f9c8 	bl	800fe50 <__lshift>
 8010ac0:	901a      	str	r0, [sp, #104]	@ 0x68
 8010ac2:	2800      	cmp	r0, #0
 8010ac4:	d1d9      	bne.n	8010a7a <_strtod_l+0x73a>
 8010ac6:	e65a      	b.n	801077e <_strtod_l+0x43e>
 8010ac8:	2e00      	cmp	r6, #0
 8010aca:	dd07      	ble.n	8010adc <_strtod_l+0x79c>
 8010acc:	4649      	mov	r1, r9
 8010ace:	9805      	ldr	r0, [sp, #20]
 8010ad0:	4632      	mov	r2, r6
 8010ad2:	f7ff f9bd 	bl	800fe50 <__lshift>
 8010ad6:	4681      	mov	r9, r0
 8010ad8:	2800      	cmp	r0, #0
 8010ada:	d0d8      	beq.n	8010a8e <_strtod_l+0x74e>
 8010adc:	2f00      	cmp	r7, #0
 8010ade:	dd08      	ble.n	8010af2 <_strtod_l+0x7b2>
 8010ae0:	4641      	mov	r1, r8
 8010ae2:	9805      	ldr	r0, [sp, #20]
 8010ae4:	463a      	mov	r2, r7
 8010ae6:	f7ff f9b3 	bl	800fe50 <__lshift>
 8010aea:	4680      	mov	r8, r0
 8010aec:	2800      	cmp	r0, #0
 8010aee:	f43f ae46 	beq.w	801077e <_strtod_l+0x43e>
 8010af2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010af4:	9805      	ldr	r0, [sp, #20]
 8010af6:	464a      	mov	r2, r9
 8010af8:	f7ff fa32 	bl	800ff60 <__mdiff>
 8010afc:	4604      	mov	r4, r0
 8010afe:	2800      	cmp	r0, #0
 8010b00:	f43f ae3d 	beq.w	801077e <_strtod_l+0x43e>
 8010b04:	68c3      	ldr	r3, [r0, #12]
 8010b06:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010b08:	2300      	movs	r3, #0
 8010b0a:	60c3      	str	r3, [r0, #12]
 8010b0c:	4641      	mov	r1, r8
 8010b0e:	f7ff fa0b 	bl	800ff28 <__mcmp>
 8010b12:	2800      	cmp	r0, #0
 8010b14:	da46      	bge.n	8010ba4 <_strtod_l+0x864>
 8010b16:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010b18:	ea53 030a 	orrs.w	r3, r3, sl
 8010b1c:	d16c      	bne.n	8010bf8 <_strtod_l+0x8b8>
 8010b1e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d168      	bne.n	8010bf8 <_strtod_l+0x8b8>
 8010b26:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010b2a:	0d1b      	lsrs	r3, r3, #20
 8010b2c:	051b      	lsls	r3, r3, #20
 8010b2e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8010b32:	d961      	bls.n	8010bf8 <_strtod_l+0x8b8>
 8010b34:	6963      	ldr	r3, [r4, #20]
 8010b36:	b913      	cbnz	r3, 8010b3e <_strtod_l+0x7fe>
 8010b38:	6923      	ldr	r3, [r4, #16]
 8010b3a:	2b01      	cmp	r3, #1
 8010b3c:	dd5c      	ble.n	8010bf8 <_strtod_l+0x8b8>
 8010b3e:	4621      	mov	r1, r4
 8010b40:	2201      	movs	r2, #1
 8010b42:	9805      	ldr	r0, [sp, #20]
 8010b44:	f7ff f984 	bl	800fe50 <__lshift>
 8010b48:	4641      	mov	r1, r8
 8010b4a:	4604      	mov	r4, r0
 8010b4c:	f7ff f9ec 	bl	800ff28 <__mcmp>
 8010b50:	2800      	cmp	r0, #0
 8010b52:	dd51      	ble.n	8010bf8 <_strtod_l+0x8b8>
 8010b54:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010b58:	9a08      	ldr	r2, [sp, #32]
 8010b5a:	0d1b      	lsrs	r3, r3, #20
 8010b5c:	051b      	lsls	r3, r3, #20
 8010b5e:	2a00      	cmp	r2, #0
 8010b60:	d06b      	beq.n	8010c3a <_strtod_l+0x8fa>
 8010b62:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8010b66:	d868      	bhi.n	8010c3a <_strtod_l+0x8fa>
 8010b68:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8010b6c:	f67f ae9d 	bls.w	80108aa <_strtod_l+0x56a>
 8010b70:	4b0a      	ldr	r3, [pc, #40]	@ (8010b9c <_strtod_l+0x85c>)
 8010b72:	4650      	mov	r0, sl
 8010b74:	4659      	mov	r1, fp
 8010b76:	2200      	movs	r2, #0
 8010b78:	f7ef fd16 	bl	80005a8 <__aeabi_dmul>
 8010b7c:	4b08      	ldr	r3, [pc, #32]	@ (8010ba0 <_strtod_l+0x860>)
 8010b7e:	400b      	ands	r3, r1
 8010b80:	4682      	mov	sl, r0
 8010b82:	468b      	mov	fp, r1
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	f47f ae05 	bne.w	8010794 <_strtod_l+0x454>
 8010b8a:	9a05      	ldr	r2, [sp, #20]
 8010b8c:	2322      	movs	r3, #34	@ 0x22
 8010b8e:	6013      	str	r3, [r2, #0]
 8010b90:	e600      	b.n	8010794 <_strtod_l+0x454>
 8010b92:	bf00      	nop
 8010b94:	08013ab0 	.word	0x08013ab0
 8010b98:	fffffc02 	.word	0xfffffc02
 8010b9c:	39500000 	.word	0x39500000
 8010ba0:	7ff00000 	.word	0x7ff00000
 8010ba4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8010ba8:	d165      	bne.n	8010c76 <_strtod_l+0x936>
 8010baa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010bac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010bb0:	b35a      	cbz	r2, 8010c0a <_strtod_l+0x8ca>
 8010bb2:	4a9f      	ldr	r2, [pc, #636]	@ (8010e30 <_strtod_l+0xaf0>)
 8010bb4:	4293      	cmp	r3, r2
 8010bb6:	d12b      	bne.n	8010c10 <_strtod_l+0x8d0>
 8010bb8:	9b08      	ldr	r3, [sp, #32]
 8010bba:	4651      	mov	r1, sl
 8010bbc:	b303      	cbz	r3, 8010c00 <_strtod_l+0x8c0>
 8010bbe:	4b9d      	ldr	r3, [pc, #628]	@ (8010e34 <_strtod_l+0xaf4>)
 8010bc0:	465a      	mov	r2, fp
 8010bc2:	4013      	ands	r3, r2
 8010bc4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8010bc8:	f04f 32ff 	mov.w	r2, #4294967295
 8010bcc:	d81b      	bhi.n	8010c06 <_strtod_l+0x8c6>
 8010bce:	0d1b      	lsrs	r3, r3, #20
 8010bd0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8010bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8010bd8:	4299      	cmp	r1, r3
 8010bda:	d119      	bne.n	8010c10 <_strtod_l+0x8d0>
 8010bdc:	4b96      	ldr	r3, [pc, #600]	@ (8010e38 <_strtod_l+0xaf8>)
 8010bde:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010be0:	429a      	cmp	r2, r3
 8010be2:	d102      	bne.n	8010bea <_strtod_l+0x8aa>
 8010be4:	3101      	adds	r1, #1
 8010be6:	f43f adca 	beq.w	801077e <_strtod_l+0x43e>
 8010bea:	4b92      	ldr	r3, [pc, #584]	@ (8010e34 <_strtod_l+0xaf4>)
 8010bec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010bee:	401a      	ands	r2, r3
 8010bf0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8010bf4:	f04f 0a00 	mov.w	sl, #0
 8010bf8:	9b08      	ldr	r3, [sp, #32]
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	d1b8      	bne.n	8010b70 <_strtod_l+0x830>
 8010bfe:	e5c9      	b.n	8010794 <_strtod_l+0x454>
 8010c00:	f04f 33ff 	mov.w	r3, #4294967295
 8010c04:	e7e8      	b.n	8010bd8 <_strtod_l+0x898>
 8010c06:	4613      	mov	r3, r2
 8010c08:	e7e6      	b.n	8010bd8 <_strtod_l+0x898>
 8010c0a:	ea53 030a 	orrs.w	r3, r3, sl
 8010c0e:	d0a1      	beq.n	8010b54 <_strtod_l+0x814>
 8010c10:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010c12:	b1db      	cbz	r3, 8010c4c <_strtod_l+0x90c>
 8010c14:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010c16:	4213      	tst	r3, r2
 8010c18:	d0ee      	beq.n	8010bf8 <_strtod_l+0x8b8>
 8010c1a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010c1c:	9a08      	ldr	r2, [sp, #32]
 8010c1e:	4650      	mov	r0, sl
 8010c20:	4659      	mov	r1, fp
 8010c22:	b1bb      	cbz	r3, 8010c54 <_strtod_l+0x914>
 8010c24:	f7ff fb6e 	bl	8010304 <sulp>
 8010c28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010c2c:	ec53 2b10 	vmov	r2, r3, d0
 8010c30:	f7ef fb04 	bl	800023c <__adddf3>
 8010c34:	4682      	mov	sl, r0
 8010c36:	468b      	mov	fp, r1
 8010c38:	e7de      	b.n	8010bf8 <_strtod_l+0x8b8>
 8010c3a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8010c3e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8010c42:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8010c46:	f04f 3aff 	mov.w	sl, #4294967295
 8010c4a:	e7d5      	b.n	8010bf8 <_strtod_l+0x8b8>
 8010c4c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010c4e:	ea13 0f0a 	tst.w	r3, sl
 8010c52:	e7e1      	b.n	8010c18 <_strtod_l+0x8d8>
 8010c54:	f7ff fb56 	bl	8010304 <sulp>
 8010c58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010c5c:	ec53 2b10 	vmov	r2, r3, d0
 8010c60:	f7ef faea 	bl	8000238 <__aeabi_dsub>
 8010c64:	2200      	movs	r2, #0
 8010c66:	2300      	movs	r3, #0
 8010c68:	4682      	mov	sl, r0
 8010c6a:	468b      	mov	fp, r1
 8010c6c:	f7ef ff04 	bl	8000a78 <__aeabi_dcmpeq>
 8010c70:	2800      	cmp	r0, #0
 8010c72:	d0c1      	beq.n	8010bf8 <_strtod_l+0x8b8>
 8010c74:	e619      	b.n	80108aa <_strtod_l+0x56a>
 8010c76:	4641      	mov	r1, r8
 8010c78:	4620      	mov	r0, r4
 8010c7a:	f7ff facd 	bl	8010218 <__ratio>
 8010c7e:	ec57 6b10 	vmov	r6, r7, d0
 8010c82:	2200      	movs	r2, #0
 8010c84:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8010c88:	4630      	mov	r0, r6
 8010c8a:	4639      	mov	r1, r7
 8010c8c:	f7ef ff08 	bl	8000aa0 <__aeabi_dcmple>
 8010c90:	2800      	cmp	r0, #0
 8010c92:	d06f      	beq.n	8010d74 <_strtod_l+0xa34>
 8010c94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d17a      	bne.n	8010d90 <_strtod_l+0xa50>
 8010c9a:	f1ba 0f00 	cmp.w	sl, #0
 8010c9e:	d158      	bne.n	8010d52 <_strtod_l+0xa12>
 8010ca0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010ca2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d15a      	bne.n	8010d60 <_strtod_l+0xa20>
 8010caa:	4b64      	ldr	r3, [pc, #400]	@ (8010e3c <_strtod_l+0xafc>)
 8010cac:	2200      	movs	r2, #0
 8010cae:	4630      	mov	r0, r6
 8010cb0:	4639      	mov	r1, r7
 8010cb2:	f7ef feeb 	bl	8000a8c <__aeabi_dcmplt>
 8010cb6:	2800      	cmp	r0, #0
 8010cb8:	d159      	bne.n	8010d6e <_strtod_l+0xa2e>
 8010cba:	4630      	mov	r0, r6
 8010cbc:	4639      	mov	r1, r7
 8010cbe:	4b60      	ldr	r3, [pc, #384]	@ (8010e40 <_strtod_l+0xb00>)
 8010cc0:	2200      	movs	r2, #0
 8010cc2:	f7ef fc71 	bl	80005a8 <__aeabi_dmul>
 8010cc6:	4606      	mov	r6, r0
 8010cc8:	460f      	mov	r7, r1
 8010cca:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8010cce:	9606      	str	r6, [sp, #24]
 8010cd0:	9307      	str	r3, [sp, #28]
 8010cd2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010cd6:	4d57      	ldr	r5, [pc, #348]	@ (8010e34 <_strtod_l+0xaf4>)
 8010cd8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8010cdc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010cde:	401d      	ands	r5, r3
 8010ce0:	4b58      	ldr	r3, [pc, #352]	@ (8010e44 <_strtod_l+0xb04>)
 8010ce2:	429d      	cmp	r5, r3
 8010ce4:	f040 80b2 	bne.w	8010e4c <_strtod_l+0xb0c>
 8010ce8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010cea:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8010cee:	ec4b ab10 	vmov	d0, sl, fp
 8010cf2:	f7ff f9c9 	bl	8010088 <__ulp>
 8010cf6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010cfa:	ec51 0b10 	vmov	r0, r1, d0
 8010cfe:	f7ef fc53 	bl	80005a8 <__aeabi_dmul>
 8010d02:	4652      	mov	r2, sl
 8010d04:	465b      	mov	r3, fp
 8010d06:	f7ef fa99 	bl	800023c <__adddf3>
 8010d0a:	460b      	mov	r3, r1
 8010d0c:	4949      	ldr	r1, [pc, #292]	@ (8010e34 <_strtod_l+0xaf4>)
 8010d0e:	4a4e      	ldr	r2, [pc, #312]	@ (8010e48 <_strtod_l+0xb08>)
 8010d10:	4019      	ands	r1, r3
 8010d12:	4291      	cmp	r1, r2
 8010d14:	4682      	mov	sl, r0
 8010d16:	d942      	bls.n	8010d9e <_strtod_l+0xa5e>
 8010d18:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010d1a:	4b47      	ldr	r3, [pc, #284]	@ (8010e38 <_strtod_l+0xaf8>)
 8010d1c:	429a      	cmp	r2, r3
 8010d1e:	d103      	bne.n	8010d28 <_strtod_l+0x9e8>
 8010d20:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010d22:	3301      	adds	r3, #1
 8010d24:	f43f ad2b 	beq.w	801077e <_strtod_l+0x43e>
 8010d28:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8010e38 <_strtod_l+0xaf8>
 8010d2c:	f04f 3aff 	mov.w	sl, #4294967295
 8010d30:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010d32:	9805      	ldr	r0, [sp, #20]
 8010d34:	f7fe fe74 	bl	800fa20 <_Bfree>
 8010d38:	9805      	ldr	r0, [sp, #20]
 8010d3a:	4649      	mov	r1, r9
 8010d3c:	f7fe fe70 	bl	800fa20 <_Bfree>
 8010d40:	9805      	ldr	r0, [sp, #20]
 8010d42:	4641      	mov	r1, r8
 8010d44:	f7fe fe6c 	bl	800fa20 <_Bfree>
 8010d48:	9805      	ldr	r0, [sp, #20]
 8010d4a:	4621      	mov	r1, r4
 8010d4c:	f7fe fe68 	bl	800fa20 <_Bfree>
 8010d50:	e618      	b.n	8010984 <_strtod_l+0x644>
 8010d52:	f1ba 0f01 	cmp.w	sl, #1
 8010d56:	d103      	bne.n	8010d60 <_strtod_l+0xa20>
 8010d58:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	f43f ada5 	beq.w	80108aa <_strtod_l+0x56a>
 8010d60:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8010e10 <_strtod_l+0xad0>
 8010d64:	4f35      	ldr	r7, [pc, #212]	@ (8010e3c <_strtod_l+0xafc>)
 8010d66:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010d6a:	2600      	movs	r6, #0
 8010d6c:	e7b1      	b.n	8010cd2 <_strtod_l+0x992>
 8010d6e:	4f34      	ldr	r7, [pc, #208]	@ (8010e40 <_strtod_l+0xb00>)
 8010d70:	2600      	movs	r6, #0
 8010d72:	e7aa      	b.n	8010cca <_strtod_l+0x98a>
 8010d74:	4b32      	ldr	r3, [pc, #200]	@ (8010e40 <_strtod_l+0xb00>)
 8010d76:	4630      	mov	r0, r6
 8010d78:	4639      	mov	r1, r7
 8010d7a:	2200      	movs	r2, #0
 8010d7c:	f7ef fc14 	bl	80005a8 <__aeabi_dmul>
 8010d80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010d82:	4606      	mov	r6, r0
 8010d84:	460f      	mov	r7, r1
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d09f      	beq.n	8010cca <_strtod_l+0x98a>
 8010d8a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8010d8e:	e7a0      	b.n	8010cd2 <_strtod_l+0x992>
 8010d90:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8010e18 <_strtod_l+0xad8>
 8010d94:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010d98:	ec57 6b17 	vmov	r6, r7, d7
 8010d9c:	e799      	b.n	8010cd2 <_strtod_l+0x992>
 8010d9e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8010da2:	9b08      	ldr	r3, [sp, #32]
 8010da4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	d1c1      	bne.n	8010d30 <_strtod_l+0x9f0>
 8010dac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010db0:	0d1b      	lsrs	r3, r3, #20
 8010db2:	051b      	lsls	r3, r3, #20
 8010db4:	429d      	cmp	r5, r3
 8010db6:	d1bb      	bne.n	8010d30 <_strtod_l+0x9f0>
 8010db8:	4630      	mov	r0, r6
 8010dba:	4639      	mov	r1, r7
 8010dbc:	f7ef ff54 	bl	8000c68 <__aeabi_d2lz>
 8010dc0:	f7ef fbc4 	bl	800054c <__aeabi_l2d>
 8010dc4:	4602      	mov	r2, r0
 8010dc6:	460b      	mov	r3, r1
 8010dc8:	4630      	mov	r0, r6
 8010dca:	4639      	mov	r1, r7
 8010dcc:	f7ef fa34 	bl	8000238 <__aeabi_dsub>
 8010dd0:	460b      	mov	r3, r1
 8010dd2:	4602      	mov	r2, r0
 8010dd4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8010dd8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8010ddc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010dde:	ea46 060a 	orr.w	r6, r6, sl
 8010de2:	431e      	orrs	r6, r3
 8010de4:	d06f      	beq.n	8010ec6 <_strtod_l+0xb86>
 8010de6:	a30e      	add	r3, pc, #56	@ (adr r3, 8010e20 <_strtod_l+0xae0>)
 8010de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dec:	f7ef fe4e 	bl	8000a8c <__aeabi_dcmplt>
 8010df0:	2800      	cmp	r0, #0
 8010df2:	f47f accf 	bne.w	8010794 <_strtod_l+0x454>
 8010df6:	a30c      	add	r3, pc, #48	@ (adr r3, 8010e28 <_strtod_l+0xae8>)
 8010df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dfc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010e00:	f7ef fe62 	bl	8000ac8 <__aeabi_dcmpgt>
 8010e04:	2800      	cmp	r0, #0
 8010e06:	d093      	beq.n	8010d30 <_strtod_l+0x9f0>
 8010e08:	e4c4      	b.n	8010794 <_strtod_l+0x454>
 8010e0a:	bf00      	nop
 8010e0c:	f3af 8000 	nop.w
 8010e10:	00000000 	.word	0x00000000
 8010e14:	bff00000 	.word	0xbff00000
 8010e18:	00000000 	.word	0x00000000
 8010e1c:	3ff00000 	.word	0x3ff00000
 8010e20:	94a03595 	.word	0x94a03595
 8010e24:	3fdfffff 	.word	0x3fdfffff
 8010e28:	35afe535 	.word	0x35afe535
 8010e2c:	3fe00000 	.word	0x3fe00000
 8010e30:	000fffff 	.word	0x000fffff
 8010e34:	7ff00000 	.word	0x7ff00000
 8010e38:	7fefffff 	.word	0x7fefffff
 8010e3c:	3ff00000 	.word	0x3ff00000
 8010e40:	3fe00000 	.word	0x3fe00000
 8010e44:	7fe00000 	.word	0x7fe00000
 8010e48:	7c9fffff 	.word	0x7c9fffff
 8010e4c:	9b08      	ldr	r3, [sp, #32]
 8010e4e:	b323      	cbz	r3, 8010e9a <_strtod_l+0xb5a>
 8010e50:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8010e54:	d821      	bhi.n	8010e9a <_strtod_l+0xb5a>
 8010e56:	a328      	add	r3, pc, #160	@ (adr r3, 8010ef8 <_strtod_l+0xbb8>)
 8010e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e5c:	4630      	mov	r0, r6
 8010e5e:	4639      	mov	r1, r7
 8010e60:	f7ef fe1e 	bl	8000aa0 <__aeabi_dcmple>
 8010e64:	b1a0      	cbz	r0, 8010e90 <_strtod_l+0xb50>
 8010e66:	4639      	mov	r1, r7
 8010e68:	4630      	mov	r0, r6
 8010e6a:	f7ef fe75 	bl	8000b58 <__aeabi_d2uiz>
 8010e6e:	2801      	cmp	r0, #1
 8010e70:	bf38      	it	cc
 8010e72:	2001      	movcc	r0, #1
 8010e74:	f7ef fb1e 	bl	80004b4 <__aeabi_ui2d>
 8010e78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010e7a:	4606      	mov	r6, r0
 8010e7c:	460f      	mov	r7, r1
 8010e7e:	b9fb      	cbnz	r3, 8010ec0 <_strtod_l+0xb80>
 8010e80:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010e84:	9014      	str	r0, [sp, #80]	@ 0x50
 8010e86:	9315      	str	r3, [sp, #84]	@ 0x54
 8010e88:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8010e8c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8010e90:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010e92:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8010e96:	1b5b      	subs	r3, r3, r5
 8010e98:	9311      	str	r3, [sp, #68]	@ 0x44
 8010e9a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8010e9e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8010ea2:	f7ff f8f1 	bl	8010088 <__ulp>
 8010ea6:	4650      	mov	r0, sl
 8010ea8:	ec53 2b10 	vmov	r2, r3, d0
 8010eac:	4659      	mov	r1, fp
 8010eae:	f7ef fb7b 	bl	80005a8 <__aeabi_dmul>
 8010eb2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8010eb6:	f7ef f9c1 	bl	800023c <__adddf3>
 8010eba:	4682      	mov	sl, r0
 8010ebc:	468b      	mov	fp, r1
 8010ebe:	e770      	b.n	8010da2 <_strtod_l+0xa62>
 8010ec0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8010ec4:	e7e0      	b.n	8010e88 <_strtod_l+0xb48>
 8010ec6:	a30e      	add	r3, pc, #56	@ (adr r3, 8010f00 <_strtod_l+0xbc0>)
 8010ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ecc:	f7ef fdde 	bl	8000a8c <__aeabi_dcmplt>
 8010ed0:	e798      	b.n	8010e04 <_strtod_l+0xac4>
 8010ed2:	2300      	movs	r3, #0
 8010ed4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010ed6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8010ed8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010eda:	6013      	str	r3, [r2, #0]
 8010edc:	f7ff ba6d 	b.w	80103ba <_strtod_l+0x7a>
 8010ee0:	2a65      	cmp	r2, #101	@ 0x65
 8010ee2:	f43f ab66 	beq.w	80105b2 <_strtod_l+0x272>
 8010ee6:	2a45      	cmp	r2, #69	@ 0x45
 8010ee8:	f43f ab63 	beq.w	80105b2 <_strtod_l+0x272>
 8010eec:	2301      	movs	r3, #1
 8010eee:	f7ff bb9e 	b.w	801062e <_strtod_l+0x2ee>
 8010ef2:	bf00      	nop
 8010ef4:	f3af 8000 	nop.w
 8010ef8:	ffc00000 	.word	0xffc00000
 8010efc:	41dfffff 	.word	0x41dfffff
 8010f00:	94a03595 	.word	0x94a03595
 8010f04:	3fcfffff 	.word	0x3fcfffff

08010f08 <_strtod_r>:
 8010f08:	4b01      	ldr	r3, [pc, #4]	@ (8010f10 <_strtod_r+0x8>)
 8010f0a:	f7ff ba19 	b.w	8010340 <_strtod_l>
 8010f0e:	bf00      	nop
 8010f10:	2000008c 	.word	0x2000008c

08010f14 <_strtol_l.constprop.0>:
 8010f14:	2b24      	cmp	r3, #36	@ 0x24
 8010f16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f1a:	4686      	mov	lr, r0
 8010f1c:	4690      	mov	r8, r2
 8010f1e:	d801      	bhi.n	8010f24 <_strtol_l.constprop.0+0x10>
 8010f20:	2b01      	cmp	r3, #1
 8010f22:	d106      	bne.n	8010f32 <_strtol_l.constprop.0+0x1e>
 8010f24:	f7fd fdae 	bl	800ea84 <__errno>
 8010f28:	2316      	movs	r3, #22
 8010f2a:	6003      	str	r3, [r0, #0]
 8010f2c:	2000      	movs	r0, #0
 8010f2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f32:	4834      	ldr	r0, [pc, #208]	@ (8011004 <_strtol_l.constprop.0+0xf0>)
 8010f34:	460d      	mov	r5, r1
 8010f36:	462a      	mov	r2, r5
 8010f38:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010f3c:	5d06      	ldrb	r6, [r0, r4]
 8010f3e:	f016 0608 	ands.w	r6, r6, #8
 8010f42:	d1f8      	bne.n	8010f36 <_strtol_l.constprop.0+0x22>
 8010f44:	2c2d      	cmp	r4, #45	@ 0x2d
 8010f46:	d12d      	bne.n	8010fa4 <_strtol_l.constprop.0+0x90>
 8010f48:	782c      	ldrb	r4, [r5, #0]
 8010f4a:	2601      	movs	r6, #1
 8010f4c:	1c95      	adds	r5, r2, #2
 8010f4e:	f033 0210 	bics.w	r2, r3, #16
 8010f52:	d109      	bne.n	8010f68 <_strtol_l.constprop.0+0x54>
 8010f54:	2c30      	cmp	r4, #48	@ 0x30
 8010f56:	d12a      	bne.n	8010fae <_strtol_l.constprop.0+0x9a>
 8010f58:	782a      	ldrb	r2, [r5, #0]
 8010f5a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8010f5e:	2a58      	cmp	r2, #88	@ 0x58
 8010f60:	d125      	bne.n	8010fae <_strtol_l.constprop.0+0x9a>
 8010f62:	786c      	ldrb	r4, [r5, #1]
 8010f64:	2310      	movs	r3, #16
 8010f66:	3502      	adds	r5, #2
 8010f68:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8010f6c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8010f70:	2200      	movs	r2, #0
 8010f72:	fbbc f9f3 	udiv	r9, ip, r3
 8010f76:	4610      	mov	r0, r2
 8010f78:	fb03 ca19 	mls	sl, r3, r9, ip
 8010f7c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8010f80:	2f09      	cmp	r7, #9
 8010f82:	d81b      	bhi.n	8010fbc <_strtol_l.constprop.0+0xa8>
 8010f84:	463c      	mov	r4, r7
 8010f86:	42a3      	cmp	r3, r4
 8010f88:	dd27      	ble.n	8010fda <_strtol_l.constprop.0+0xc6>
 8010f8a:	1c57      	adds	r7, r2, #1
 8010f8c:	d007      	beq.n	8010f9e <_strtol_l.constprop.0+0x8a>
 8010f8e:	4581      	cmp	r9, r0
 8010f90:	d320      	bcc.n	8010fd4 <_strtol_l.constprop.0+0xc0>
 8010f92:	d101      	bne.n	8010f98 <_strtol_l.constprop.0+0x84>
 8010f94:	45a2      	cmp	sl, r4
 8010f96:	db1d      	blt.n	8010fd4 <_strtol_l.constprop.0+0xc0>
 8010f98:	fb00 4003 	mla	r0, r0, r3, r4
 8010f9c:	2201      	movs	r2, #1
 8010f9e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010fa2:	e7eb      	b.n	8010f7c <_strtol_l.constprop.0+0x68>
 8010fa4:	2c2b      	cmp	r4, #43	@ 0x2b
 8010fa6:	bf04      	itt	eq
 8010fa8:	782c      	ldrbeq	r4, [r5, #0]
 8010faa:	1c95      	addeq	r5, r2, #2
 8010fac:	e7cf      	b.n	8010f4e <_strtol_l.constprop.0+0x3a>
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d1da      	bne.n	8010f68 <_strtol_l.constprop.0+0x54>
 8010fb2:	2c30      	cmp	r4, #48	@ 0x30
 8010fb4:	bf0c      	ite	eq
 8010fb6:	2308      	moveq	r3, #8
 8010fb8:	230a      	movne	r3, #10
 8010fba:	e7d5      	b.n	8010f68 <_strtol_l.constprop.0+0x54>
 8010fbc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8010fc0:	2f19      	cmp	r7, #25
 8010fc2:	d801      	bhi.n	8010fc8 <_strtol_l.constprop.0+0xb4>
 8010fc4:	3c37      	subs	r4, #55	@ 0x37
 8010fc6:	e7de      	b.n	8010f86 <_strtol_l.constprop.0+0x72>
 8010fc8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8010fcc:	2f19      	cmp	r7, #25
 8010fce:	d804      	bhi.n	8010fda <_strtol_l.constprop.0+0xc6>
 8010fd0:	3c57      	subs	r4, #87	@ 0x57
 8010fd2:	e7d8      	b.n	8010f86 <_strtol_l.constprop.0+0x72>
 8010fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8010fd8:	e7e1      	b.n	8010f9e <_strtol_l.constprop.0+0x8a>
 8010fda:	1c53      	adds	r3, r2, #1
 8010fdc:	d108      	bne.n	8010ff0 <_strtol_l.constprop.0+0xdc>
 8010fde:	2322      	movs	r3, #34	@ 0x22
 8010fe0:	f8ce 3000 	str.w	r3, [lr]
 8010fe4:	4660      	mov	r0, ip
 8010fe6:	f1b8 0f00 	cmp.w	r8, #0
 8010fea:	d0a0      	beq.n	8010f2e <_strtol_l.constprop.0+0x1a>
 8010fec:	1e69      	subs	r1, r5, #1
 8010fee:	e006      	b.n	8010ffe <_strtol_l.constprop.0+0xea>
 8010ff0:	b106      	cbz	r6, 8010ff4 <_strtol_l.constprop.0+0xe0>
 8010ff2:	4240      	negs	r0, r0
 8010ff4:	f1b8 0f00 	cmp.w	r8, #0
 8010ff8:	d099      	beq.n	8010f2e <_strtol_l.constprop.0+0x1a>
 8010ffa:	2a00      	cmp	r2, #0
 8010ffc:	d1f6      	bne.n	8010fec <_strtol_l.constprop.0+0xd8>
 8010ffe:	f8c8 1000 	str.w	r1, [r8]
 8011002:	e794      	b.n	8010f2e <_strtol_l.constprop.0+0x1a>
 8011004:	08013ad9 	.word	0x08013ad9

08011008 <_strtol_r>:
 8011008:	f7ff bf84 	b.w	8010f14 <_strtol_l.constprop.0>

0801100c <__ssputs_r>:
 801100c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011010:	688e      	ldr	r6, [r1, #8]
 8011012:	461f      	mov	r7, r3
 8011014:	42be      	cmp	r6, r7
 8011016:	680b      	ldr	r3, [r1, #0]
 8011018:	4682      	mov	sl, r0
 801101a:	460c      	mov	r4, r1
 801101c:	4690      	mov	r8, r2
 801101e:	d82d      	bhi.n	801107c <__ssputs_r+0x70>
 8011020:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011024:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011028:	d026      	beq.n	8011078 <__ssputs_r+0x6c>
 801102a:	6965      	ldr	r5, [r4, #20]
 801102c:	6909      	ldr	r1, [r1, #16]
 801102e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011032:	eba3 0901 	sub.w	r9, r3, r1
 8011036:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801103a:	1c7b      	adds	r3, r7, #1
 801103c:	444b      	add	r3, r9
 801103e:	106d      	asrs	r5, r5, #1
 8011040:	429d      	cmp	r5, r3
 8011042:	bf38      	it	cc
 8011044:	461d      	movcc	r5, r3
 8011046:	0553      	lsls	r3, r2, #21
 8011048:	d527      	bpl.n	801109a <__ssputs_r+0x8e>
 801104a:	4629      	mov	r1, r5
 801104c:	f7fe fc1c 	bl	800f888 <_malloc_r>
 8011050:	4606      	mov	r6, r0
 8011052:	b360      	cbz	r0, 80110ae <__ssputs_r+0xa2>
 8011054:	6921      	ldr	r1, [r4, #16]
 8011056:	464a      	mov	r2, r9
 8011058:	f7fd fd41 	bl	800eade <memcpy>
 801105c:	89a3      	ldrh	r3, [r4, #12]
 801105e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011062:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011066:	81a3      	strh	r3, [r4, #12]
 8011068:	6126      	str	r6, [r4, #16]
 801106a:	6165      	str	r5, [r4, #20]
 801106c:	444e      	add	r6, r9
 801106e:	eba5 0509 	sub.w	r5, r5, r9
 8011072:	6026      	str	r6, [r4, #0]
 8011074:	60a5      	str	r5, [r4, #8]
 8011076:	463e      	mov	r6, r7
 8011078:	42be      	cmp	r6, r7
 801107a:	d900      	bls.n	801107e <__ssputs_r+0x72>
 801107c:	463e      	mov	r6, r7
 801107e:	6820      	ldr	r0, [r4, #0]
 8011080:	4632      	mov	r2, r6
 8011082:	4641      	mov	r1, r8
 8011084:	f000 fb9e 	bl	80117c4 <memmove>
 8011088:	68a3      	ldr	r3, [r4, #8]
 801108a:	1b9b      	subs	r3, r3, r6
 801108c:	60a3      	str	r3, [r4, #8]
 801108e:	6823      	ldr	r3, [r4, #0]
 8011090:	4433      	add	r3, r6
 8011092:	6023      	str	r3, [r4, #0]
 8011094:	2000      	movs	r0, #0
 8011096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801109a:	462a      	mov	r2, r5
 801109c:	f000 ff85 	bl	8011faa <_realloc_r>
 80110a0:	4606      	mov	r6, r0
 80110a2:	2800      	cmp	r0, #0
 80110a4:	d1e0      	bne.n	8011068 <__ssputs_r+0x5c>
 80110a6:	6921      	ldr	r1, [r4, #16]
 80110a8:	4650      	mov	r0, sl
 80110aa:	f7fe fb79 	bl	800f7a0 <_free_r>
 80110ae:	230c      	movs	r3, #12
 80110b0:	f8ca 3000 	str.w	r3, [sl]
 80110b4:	89a3      	ldrh	r3, [r4, #12]
 80110b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80110ba:	81a3      	strh	r3, [r4, #12]
 80110bc:	f04f 30ff 	mov.w	r0, #4294967295
 80110c0:	e7e9      	b.n	8011096 <__ssputs_r+0x8a>
	...

080110c4 <_svfiprintf_r>:
 80110c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110c8:	4698      	mov	r8, r3
 80110ca:	898b      	ldrh	r3, [r1, #12]
 80110cc:	061b      	lsls	r3, r3, #24
 80110ce:	b09d      	sub	sp, #116	@ 0x74
 80110d0:	4607      	mov	r7, r0
 80110d2:	460d      	mov	r5, r1
 80110d4:	4614      	mov	r4, r2
 80110d6:	d510      	bpl.n	80110fa <_svfiprintf_r+0x36>
 80110d8:	690b      	ldr	r3, [r1, #16]
 80110da:	b973      	cbnz	r3, 80110fa <_svfiprintf_r+0x36>
 80110dc:	2140      	movs	r1, #64	@ 0x40
 80110de:	f7fe fbd3 	bl	800f888 <_malloc_r>
 80110e2:	6028      	str	r0, [r5, #0]
 80110e4:	6128      	str	r0, [r5, #16]
 80110e6:	b930      	cbnz	r0, 80110f6 <_svfiprintf_r+0x32>
 80110e8:	230c      	movs	r3, #12
 80110ea:	603b      	str	r3, [r7, #0]
 80110ec:	f04f 30ff 	mov.w	r0, #4294967295
 80110f0:	b01d      	add	sp, #116	@ 0x74
 80110f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110f6:	2340      	movs	r3, #64	@ 0x40
 80110f8:	616b      	str	r3, [r5, #20]
 80110fa:	2300      	movs	r3, #0
 80110fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80110fe:	2320      	movs	r3, #32
 8011100:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011104:	f8cd 800c 	str.w	r8, [sp, #12]
 8011108:	2330      	movs	r3, #48	@ 0x30
 801110a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80112a8 <_svfiprintf_r+0x1e4>
 801110e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011112:	f04f 0901 	mov.w	r9, #1
 8011116:	4623      	mov	r3, r4
 8011118:	469a      	mov	sl, r3
 801111a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801111e:	b10a      	cbz	r2, 8011124 <_svfiprintf_r+0x60>
 8011120:	2a25      	cmp	r2, #37	@ 0x25
 8011122:	d1f9      	bne.n	8011118 <_svfiprintf_r+0x54>
 8011124:	ebba 0b04 	subs.w	fp, sl, r4
 8011128:	d00b      	beq.n	8011142 <_svfiprintf_r+0x7e>
 801112a:	465b      	mov	r3, fp
 801112c:	4622      	mov	r2, r4
 801112e:	4629      	mov	r1, r5
 8011130:	4638      	mov	r0, r7
 8011132:	f7ff ff6b 	bl	801100c <__ssputs_r>
 8011136:	3001      	adds	r0, #1
 8011138:	f000 80a7 	beq.w	801128a <_svfiprintf_r+0x1c6>
 801113c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801113e:	445a      	add	r2, fp
 8011140:	9209      	str	r2, [sp, #36]	@ 0x24
 8011142:	f89a 3000 	ldrb.w	r3, [sl]
 8011146:	2b00      	cmp	r3, #0
 8011148:	f000 809f 	beq.w	801128a <_svfiprintf_r+0x1c6>
 801114c:	2300      	movs	r3, #0
 801114e:	f04f 32ff 	mov.w	r2, #4294967295
 8011152:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011156:	f10a 0a01 	add.w	sl, sl, #1
 801115a:	9304      	str	r3, [sp, #16]
 801115c:	9307      	str	r3, [sp, #28]
 801115e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011162:	931a      	str	r3, [sp, #104]	@ 0x68
 8011164:	4654      	mov	r4, sl
 8011166:	2205      	movs	r2, #5
 8011168:	f814 1b01 	ldrb.w	r1, [r4], #1
 801116c:	484e      	ldr	r0, [pc, #312]	@ (80112a8 <_svfiprintf_r+0x1e4>)
 801116e:	f7ef f807 	bl	8000180 <memchr>
 8011172:	9a04      	ldr	r2, [sp, #16]
 8011174:	b9d8      	cbnz	r0, 80111ae <_svfiprintf_r+0xea>
 8011176:	06d0      	lsls	r0, r2, #27
 8011178:	bf44      	itt	mi
 801117a:	2320      	movmi	r3, #32
 801117c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011180:	0711      	lsls	r1, r2, #28
 8011182:	bf44      	itt	mi
 8011184:	232b      	movmi	r3, #43	@ 0x2b
 8011186:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801118a:	f89a 3000 	ldrb.w	r3, [sl]
 801118e:	2b2a      	cmp	r3, #42	@ 0x2a
 8011190:	d015      	beq.n	80111be <_svfiprintf_r+0xfa>
 8011192:	9a07      	ldr	r2, [sp, #28]
 8011194:	4654      	mov	r4, sl
 8011196:	2000      	movs	r0, #0
 8011198:	f04f 0c0a 	mov.w	ip, #10
 801119c:	4621      	mov	r1, r4
 801119e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80111a2:	3b30      	subs	r3, #48	@ 0x30
 80111a4:	2b09      	cmp	r3, #9
 80111a6:	d94b      	bls.n	8011240 <_svfiprintf_r+0x17c>
 80111a8:	b1b0      	cbz	r0, 80111d8 <_svfiprintf_r+0x114>
 80111aa:	9207      	str	r2, [sp, #28]
 80111ac:	e014      	b.n	80111d8 <_svfiprintf_r+0x114>
 80111ae:	eba0 0308 	sub.w	r3, r0, r8
 80111b2:	fa09 f303 	lsl.w	r3, r9, r3
 80111b6:	4313      	orrs	r3, r2
 80111b8:	9304      	str	r3, [sp, #16]
 80111ba:	46a2      	mov	sl, r4
 80111bc:	e7d2      	b.n	8011164 <_svfiprintf_r+0xa0>
 80111be:	9b03      	ldr	r3, [sp, #12]
 80111c0:	1d19      	adds	r1, r3, #4
 80111c2:	681b      	ldr	r3, [r3, #0]
 80111c4:	9103      	str	r1, [sp, #12]
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	bfbb      	ittet	lt
 80111ca:	425b      	neglt	r3, r3
 80111cc:	f042 0202 	orrlt.w	r2, r2, #2
 80111d0:	9307      	strge	r3, [sp, #28]
 80111d2:	9307      	strlt	r3, [sp, #28]
 80111d4:	bfb8      	it	lt
 80111d6:	9204      	strlt	r2, [sp, #16]
 80111d8:	7823      	ldrb	r3, [r4, #0]
 80111da:	2b2e      	cmp	r3, #46	@ 0x2e
 80111dc:	d10a      	bne.n	80111f4 <_svfiprintf_r+0x130>
 80111de:	7863      	ldrb	r3, [r4, #1]
 80111e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80111e2:	d132      	bne.n	801124a <_svfiprintf_r+0x186>
 80111e4:	9b03      	ldr	r3, [sp, #12]
 80111e6:	1d1a      	adds	r2, r3, #4
 80111e8:	681b      	ldr	r3, [r3, #0]
 80111ea:	9203      	str	r2, [sp, #12]
 80111ec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80111f0:	3402      	adds	r4, #2
 80111f2:	9305      	str	r3, [sp, #20]
 80111f4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80112b8 <_svfiprintf_r+0x1f4>
 80111f8:	7821      	ldrb	r1, [r4, #0]
 80111fa:	2203      	movs	r2, #3
 80111fc:	4650      	mov	r0, sl
 80111fe:	f7ee ffbf 	bl	8000180 <memchr>
 8011202:	b138      	cbz	r0, 8011214 <_svfiprintf_r+0x150>
 8011204:	9b04      	ldr	r3, [sp, #16]
 8011206:	eba0 000a 	sub.w	r0, r0, sl
 801120a:	2240      	movs	r2, #64	@ 0x40
 801120c:	4082      	lsls	r2, r0
 801120e:	4313      	orrs	r3, r2
 8011210:	3401      	adds	r4, #1
 8011212:	9304      	str	r3, [sp, #16]
 8011214:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011218:	4824      	ldr	r0, [pc, #144]	@ (80112ac <_svfiprintf_r+0x1e8>)
 801121a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801121e:	2206      	movs	r2, #6
 8011220:	f7ee ffae 	bl	8000180 <memchr>
 8011224:	2800      	cmp	r0, #0
 8011226:	d036      	beq.n	8011296 <_svfiprintf_r+0x1d2>
 8011228:	4b21      	ldr	r3, [pc, #132]	@ (80112b0 <_svfiprintf_r+0x1ec>)
 801122a:	bb1b      	cbnz	r3, 8011274 <_svfiprintf_r+0x1b0>
 801122c:	9b03      	ldr	r3, [sp, #12]
 801122e:	3307      	adds	r3, #7
 8011230:	f023 0307 	bic.w	r3, r3, #7
 8011234:	3308      	adds	r3, #8
 8011236:	9303      	str	r3, [sp, #12]
 8011238:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801123a:	4433      	add	r3, r6
 801123c:	9309      	str	r3, [sp, #36]	@ 0x24
 801123e:	e76a      	b.n	8011116 <_svfiprintf_r+0x52>
 8011240:	fb0c 3202 	mla	r2, ip, r2, r3
 8011244:	460c      	mov	r4, r1
 8011246:	2001      	movs	r0, #1
 8011248:	e7a8      	b.n	801119c <_svfiprintf_r+0xd8>
 801124a:	2300      	movs	r3, #0
 801124c:	3401      	adds	r4, #1
 801124e:	9305      	str	r3, [sp, #20]
 8011250:	4619      	mov	r1, r3
 8011252:	f04f 0c0a 	mov.w	ip, #10
 8011256:	4620      	mov	r0, r4
 8011258:	f810 2b01 	ldrb.w	r2, [r0], #1
 801125c:	3a30      	subs	r2, #48	@ 0x30
 801125e:	2a09      	cmp	r2, #9
 8011260:	d903      	bls.n	801126a <_svfiprintf_r+0x1a6>
 8011262:	2b00      	cmp	r3, #0
 8011264:	d0c6      	beq.n	80111f4 <_svfiprintf_r+0x130>
 8011266:	9105      	str	r1, [sp, #20]
 8011268:	e7c4      	b.n	80111f4 <_svfiprintf_r+0x130>
 801126a:	fb0c 2101 	mla	r1, ip, r1, r2
 801126e:	4604      	mov	r4, r0
 8011270:	2301      	movs	r3, #1
 8011272:	e7f0      	b.n	8011256 <_svfiprintf_r+0x192>
 8011274:	ab03      	add	r3, sp, #12
 8011276:	9300      	str	r3, [sp, #0]
 8011278:	462a      	mov	r2, r5
 801127a:	4b0e      	ldr	r3, [pc, #56]	@ (80112b4 <_svfiprintf_r+0x1f0>)
 801127c:	a904      	add	r1, sp, #16
 801127e:	4638      	mov	r0, r7
 8011280:	f7fc fb9a 	bl	800d9b8 <_printf_float>
 8011284:	1c42      	adds	r2, r0, #1
 8011286:	4606      	mov	r6, r0
 8011288:	d1d6      	bne.n	8011238 <_svfiprintf_r+0x174>
 801128a:	89ab      	ldrh	r3, [r5, #12]
 801128c:	065b      	lsls	r3, r3, #25
 801128e:	f53f af2d 	bmi.w	80110ec <_svfiprintf_r+0x28>
 8011292:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011294:	e72c      	b.n	80110f0 <_svfiprintf_r+0x2c>
 8011296:	ab03      	add	r3, sp, #12
 8011298:	9300      	str	r3, [sp, #0]
 801129a:	462a      	mov	r2, r5
 801129c:	4b05      	ldr	r3, [pc, #20]	@ (80112b4 <_svfiprintf_r+0x1f0>)
 801129e:	a904      	add	r1, sp, #16
 80112a0:	4638      	mov	r0, r7
 80112a2:	f7fc fe21 	bl	800dee8 <_printf_i>
 80112a6:	e7ed      	b.n	8011284 <_svfiprintf_r+0x1c0>
 80112a8:	08013bd9 	.word	0x08013bd9
 80112ac:	08013be3 	.word	0x08013be3
 80112b0:	0800d9b9 	.word	0x0800d9b9
 80112b4:	0801100d 	.word	0x0801100d
 80112b8:	08013bdf 	.word	0x08013bdf

080112bc <__sfputc_r>:
 80112bc:	6893      	ldr	r3, [r2, #8]
 80112be:	3b01      	subs	r3, #1
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	b410      	push	{r4}
 80112c4:	6093      	str	r3, [r2, #8]
 80112c6:	da08      	bge.n	80112da <__sfputc_r+0x1e>
 80112c8:	6994      	ldr	r4, [r2, #24]
 80112ca:	42a3      	cmp	r3, r4
 80112cc:	db01      	blt.n	80112d2 <__sfputc_r+0x16>
 80112ce:	290a      	cmp	r1, #10
 80112d0:	d103      	bne.n	80112da <__sfputc_r+0x1e>
 80112d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80112d6:	f7fd bad8 	b.w	800e88a <__swbuf_r>
 80112da:	6813      	ldr	r3, [r2, #0]
 80112dc:	1c58      	adds	r0, r3, #1
 80112de:	6010      	str	r0, [r2, #0]
 80112e0:	7019      	strb	r1, [r3, #0]
 80112e2:	4608      	mov	r0, r1
 80112e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80112e8:	4770      	bx	lr

080112ea <__sfputs_r>:
 80112ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112ec:	4606      	mov	r6, r0
 80112ee:	460f      	mov	r7, r1
 80112f0:	4614      	mov	r4, r2
 80112f2:	18d5      	adds	r5, r2, r3
 80112f4:	42ac      	cmp	r4, r5
 80112f6:	d101      	bne.n	80112fc <__sfputs_r+0x12>
 80112f8:	2000      	movs	r0, #0
 80112fa:	e007      	b.n	801130c <__sfputs_r+0x22>
 80112fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011300:	463a      	mov	r2, r7
 8011302:	4630      	mov	r0, r6
 8011304:	f7ff ffda 	bl	80112bc <__sfputc_r>
 8011308:	1c43      	adds	r3, r0, #1
 801130a:	d1f3      	bne.n	80112f4 <__sfputs_r+0xa>
 801130c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011310 <_vfiprintf_r>:
 8011310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011314:	460d      	mov	r5, r1
 8011316:	b09d      	sub	sp, #116	@ 0x74
 8011318:	4614      	mov	r4, r2
 801131a:	4698      	mov	r8, r3
 801131c:	4606      	mov	r6, r0
 801131e:	b118      	cbz	r0, 8011328 <_vfiprintf_r+0x18>
 8011320:	6a03      	ldr	r3, [r0, #32]
 8011322:	b90b      	cbnz	r3, 8011328 <_vfiprintf_r+0x18>
 8011324:	f7fd f9a0 	bl	800e668 <__sinit>
 8011328:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801132a:	07d9      	lsls	r1, r3, #31
 801132c:	d405      	bmi.n	801133a <_vfiprintf_r+0x2a>
 801132e:	89ab      	ldrh	r3, [r5, #12]
 8011330:	059a      	lsls	r2, r3, #22
 8011332:	d402      	bmi.n	801133a <_vfiprintf_r+0x2a>
 8011334:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011336:	f7fd fbd0 	bl	800eada <__retarget_lock_acquire_recursive>
 801133a:	89ab      	ldrh	r3, [r5, #12]
 801133c:	071b      	lsls	r3, r3, #28
 801133e:	d501      	bpl.n	8011344 <_vfiprintf_r+0x34>
 8011340:	692b      	ldr	r3, [r5, #16]
 8011342:	b99b      	cbnz	r3, 801136c <_vfiprintf_r+0x5c>
 8011344:	4629      	mov	r1, r5
 8011346:	4630      	mov	r0, r6
 8011348:	f7fd fade 	bl	800e908 <__swsetup_r>
 801134c:	b170      	cbz	r0, 801136c <_vfiprintf_r+0x5c>
 801134e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011350:	07dc      	lsls	r4, r3, #31
 8011352:	d504      	bpl.n	801135e <_vfiprintf_r+0x4e>
 8011354:	f04f 30ff 	mov.w	r0, #4294967295
 8011358:	b01d      	add	sp, #116	@ 0x74
 801135a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801135e:	89ab      	ldrh	r3, [r5, #12]
 8011360:	0598      	lsls	r0, r3, #22
 8011362:	d4f7      	bmi.n	8011354 <_vfiprintf_r+0x44>
 8011364:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011366:	f7fd fbb9 	bl	800eadc <__retarget_lock_release_recursive>
 801136a:	e7f3      	b.n	8011354 <_vfiprintf_r+0x44>
 801136c:	2300      	movs	r3, #0
 801136e:	9309      	str	r3, [sp, #36]	@ 0x24
 8011370:	2320      	movs	r3, #32
 8011372:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011376:	f8cd 800c 	str.w	r8, [sp, #12]
 801137a:	2330      	movs	r3, #48	@ 0x30
 801137c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801152c <_vfiprintf_r+0x21c>
 8011380:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011384:	f04f 0901 	mov.w	r9, #1
 8011388:	4623      	mov	r3, r4
 801138a:	469a      	mov	sl, r3
 801138c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011390:	b10a      	cbz	r2, 8011396 <_vfiprintf_r+0x86>
 8011392:	2a25      	cmp	r2, #37	@ 0x25
 8011394:	d1f9      	bne.n	801138a <_vfiprintf_r+0x7a>
 8011396:	ebba 0b04 	subs.w	fp, sl, r4
 801139a:	d00b      	beq.n	80113b4 <_vfiprintf_r+0xa4>
 801139c:	465b      	mov	r3, fp
 801139e:	4622      	mov	r2, r4
 80113a0:	4629      	mov	r1, r5
 80113a2:	4630      	mov	r0, r6
 80113a4:	f7ff ffa1 	bl	80112ea <__sfputs_r>
 80113a8:	3001      	adds	r0, #1
 80113aa:	f000 80a7 	beq.w	80114fc <_vfiprintf_r+0x1ec>
 80113ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80113b0:	445a      	add	r2, fp
 80113b2:	9209      	str	r2, [sp, #36]	@ 0x24
 80113b4:	f89a 3000 	ldrb.w	r3, [sl]
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	f000 809f 	beq.w	80114fc <_vfiprintf_r+0x1ec>
 80113be:	2300      	movs	r3, #0
 80113c0:	f04f 32ff 	mov.w	r2, #4294967295
 80113c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80113c8:	f10a 0a01 	add.w	sl, sl, #1
 80113cc:	9304      	str	r3, [sp, #16]
 80113ce:	9307      	str	r3, [sp, #28]
 80113d0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80113d4:	931a      	str	r3, [sp, #104]	@ 0x68
 80113d6:	4654      	mov	r4, sl
 80113d8:	2205      	movs	r2, #5
 80113da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80113de:	4853      	ldr	r0, [pc, #332]	@ (801152c <_vfiprintf_r+0x21c>)
 80113e0:	f7ee fece 	bl	8000180 <memchr>
 80113e4:	9a04      	ldr	r2, [sp, #16]
 80113e6:	b9d8      	cbnz	r0, 8011420 <_vfiprintf_r+0x110>
 80113e8:	06d1      	lsls	r1, r2, #27
 80113ea:	bf44      	itt	mi
 80113ec:	2320      	movmi	r3, #32
 80113ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80113f2:	0713      	lsls	r3, r2, #28
 80113f4:	bf44      	itt	mi
 80113f6:	232b      	movmi	r3, #43	@ 0x2b
 80113f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80113fc:	f89a 3000 	ldrb.w	r3, [sl]
 8011400:	2b2a      	cmp	r3, #42	@ 0x2a
 8011402:	d015      	beq.n	8011430 <_vfiprintf_r+0x120>
 8011404:	9a07      	ldr	r2, [sp, #28]
 8011406:	4654      	mov	r4, sl
 8011408:	2000      	movs	r0, #0
 801140a:	f04f 0c0a 	mov.w	ip, #10
 801140e:	4621      	mov	r1, r4
 8011410:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011414:	3b30      	subs	r3, #48	@ 0x30
 8011416:	2b09      	cmp	r3, #9
 8011418:	d94b      	bls.n	80114b2 <_vfiprintf_r+0x1a2>
 801141a:	b1b0      	cbz	r0, 801144a <_vfiprintf_r+0x13a>
 801141c:	9207      	str	r2, [sp, #28]
 801141e:	e014      	b.n	801144a <_vfiprintf_r+0x13a>
 8011420:	eba0 0308 	sub.w	r3, r0, r8
 8011424:	fa09 f303 	lsl.w	r3, r9, r3
 8011428:	4313      	orrs	r3, r2
 801142a:	9304      	str	r3, [sp, #16]
 801142c:	46a2      	mov	sl, r4
 801142e:	e7d2      	b.n	80113d6 <_vfiprintf_r+0xc6>
 8011430:	9b03      	ldr	r3, [sp, #12]
 8011432:	1d19      	adds	r1, r3, #4
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	9103      	str	r1, [sp, #12]
 8011438:	2b00      	cmp	r3, #0
 801143a:	bfbb      	ittet	lt
 801143c:	425b      	neglt	r3, r3
 801143e:	f042 0202 	orrlt.w	r2, r2, #2
 8011442:	9307      	strge	r3, [sp, #28]
 8011444:	9307      	strlt	r3, [sp, #28]
 8011446:	bfb8      	it	lt
 8011448:	9204      	strlt	r2, [sp, #16]
 801144a:	7823      	ldrb	r3, [r4, #0]
 801144c:	2b2e      	cmp	r3, #46	@ 0x2e
 801144e:	d10a      	bne.n	8011466 <_vfiprintf_r+0x156>
 8011450:	7863      	ldrb	r3, [r4, #1]
 8011452:	2b2a      	cmp	r3, #42	@ 0x2a
 8011454:	d132      	bne.n	80114bc <_vfiprintf_r+0x1ac>
 8011456:	9b03      	ldr	r3, [sp, #12]
 8011458:	1d1a      	adds	r2, r3, #4
 801145a:	681b      	ldr	r3, [r3, #0]
 801145c:	9203      	str	r2, [sp, #12]
 801145e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011462:	3402      	adds	r4, #2
 8011464:	9305      	str	r3, [sp, #20]
 8011466:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801153c <_vfiprintf_r+0x22c>
 801146a:	7821      	ldrb	r1, [r4, #0]
 801146c:	2203      	movs	r2, #3
 801146e:	4650      	mov	r0, sl
 8011470:	f7ee fe86 	bl	8000180 <memchr>
 8011474:	b138      	cbz	r0, 8011486 <_vfiprintf_r+0x176>
 8011476:	9b04      	ldr	r3, [sp, #16]
 8011478:	eba0 000a 	sub.w	r0, r0, sl
 801147c:	2240      	movs	r2, #64	@ 0x40
 801147e:	4082      	lsls	r2, r0
 8011480:	4313      	orrs	r3, r2
 8011482:	3401      	adds	r4, #1
 8011484:	9304      	str	r3, [sp, #16]
 8011486:	f814 1b01 	ldrb.w	r1, [r4], #1
 801148a:	4829      	ldr	r0, [pc, #164]	@ (8011530 <_vfiprintf_r+0x220>)
 801148c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011490:	2206      	movs	r2, #6
 8011492:	f7ee fe75 	bl	8000180 <memchr>
 8011496:	2800      	cmp	r0, #0
 8011498:	d03f      	beq.n	801151a <_vfiprintf_r+0x20a>
 801149a:	4b26      	ldr	r3, [pc, #152]	@ (8011534 <_vfiprintf_r+0x224>)
 801149c:	bb1b      	cbnz	r3, 80114e6 <_vfiprintf_r+0x1d6>
 801149e:	9b03      	ldr	r3, [sp, #12]
 80114a0:	3307      	adds	r3, #7
 80114a2:	f023 0307 	bic.w	r3, r3, #7
 80114a6:	3308      	adds	r3, #8
 80114a8:	9303      	str	r3, [sp, #12]
 80114aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80114ac:	443b      	add	r3, r7
 80114ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80114b0:	e76a      	b.n	8011388 <_vfiprintf_r+0x78>
 80114b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80114b6:	460c      	mov	r4, r1
 80114b8:	2001      	movs	r0, #1
 80114ba:	e7a8      	b.n	801140e <_vfiprintf_r+0xfe>
 80114bc:	2300      	movs	r3, #0
 80114be:	3401      	adds	r4, #1
 80114c0:	9305      	str	r3, [sp, #20]
 80114c2:	4619      	mov	r1, r3
 80114c4:	f04f 0c0a 	mov.w	ip, #10
 80114c8:	4620      	mov	r0, r4
 80114ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80114ce:	3a30      	subs	r2, #48	@ 0x30
 80114d0:	2a09      	cmp	r2, #9
 80114d2:	d903      	bls.n	80114dc <_vfiprintf_r+0x1cc>
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d0c6      	beq.n	8011466 <_vfiprintf_r+0x156>
 80114d8:	9105      	str	r1, [sp, #20]
 80114da:	e7c4      	b.n	8011466 <_vfiprintf_r+0x156>
 80114dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80114e0:	4604      	mov	r4, r0
 80114e2:	2301      	movs	r3, #1
 80114e4:	e7f0      	b.n	80114c8 <_vfiprintf_r+0x1b8>
 80114e6:	ab03      	add	r3, sp, #12
 80114e8:	9300      	str	r3, [sp, #0]
 80114ea:	462a      	mov	r2, r5
 80114ec:	4b12      	ldr	r3, [pc, #72]	@ (8011538 <_vfiprintf_r+0x228>)
 80114ee:	a904      	add	r1, sp, #16
 80114f0:	4630      	mov	r0, r6
 80114f2:	f7fc fa61 	bl	800d9b8 <_printf_float>
 80114f6:	4607      	mov	r7, r0
 80114f8:	1c78      	adds	r0, r7, #1
 80114fa:	d1d6      	bne.n	80114aa <_vfiprintf_r+0x19a>
 80114fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80114fe:	07d9      	lsls	r1, r3, #31
 8011500:	d405      	bmi.n	801150e <_vfiprintf_r+0x1fe>
 8011502:	89ab      	ldrh	r3, [r5, #12]
 8011504:	059a      	lsls	r2, r3, #22
 8011506:	d402      	bmi.n	801150e <_vfiprintf_r+0x1fe>
 8011508:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801150a:	f7fd fae7 	bl	800eadc <__retarget_lock_release_recursive>
 801150e:	89ab      	ldrh	r3, [r5, #12]
 8011510:	065b      	lsls	r3, r3, #25
 8011512:	f53f af1f 	bmi.w	8011354 <_vfiprintf_r+0x44>
 8011516:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011518:	e71e      	b.n	8011358 <_vfiprintf_r+0x48>
 801151a:	ab03      	add	r3, sp, #12
 801151c:	9300      	str	r3, [sp, #0]
 801151e:	462a      	mov	r2, r5
 8011520:	4b05      	ldr	r3, [pc, #20]	@ (8011538 <_vfiprintf_r+0x228>)
 8011522:	a904      	add	r1, sp, #16
 8011524:	4630      	mov	r0, r6
 8011526:	f7fc fcdf 	bl	800dee8 <_printf_i>
 801152a:	e7e4      	b.n	80114f6 <_vfiprintf_r+0x1e6>
 801152c:	08013bd9 	.word	0x08013bd9
 8011530:	08013be3 	.word	0x08013be3
 8011534:	0800d9b9 	.word	0x0800d9b9
 8011538:	080112eb 	.word	0x080112eb
 801153c:	08013bdf 	.word	0x08013bdf

08011540 <__sflush_r>:
 8011540:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011548:	0716      	lsls	r6, r2, #28
 801154a:	4605      	mov	r5, r0
 801154c:	460c      	mov	r4, r1
 801154e:	d454      	bmi.n	80115fa <__sflush_r+0xba>
 8011550:	684b      	ldr	r3, [r1, #4]
 8011552:	2b00      	cmp	r3, #0
 8011554:	dc02      	bgt.n	801155c <__sflush_r+0x1c>
 8011556:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011558:	2b00      	cmp	r3, #0
 801155a:	dd48      	ble.n	80115ee <__sflush_r+0xae>
 801155c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801155e:	2e00      	cmp	r6, #0
 8011560:	d045      	beq.n	80115ee <__sflush_r+0xae>
 8011562:	2300      	movs	r3, #0
 8011564:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011568:	682f      	ldr	r7, [r5, #0]
 801156a:	6a21      	ldr	r1, [r4, #32]
 801156c:	602b      	str	r3, [r5, #0]
 801156e:	d030      	beq.n	80115d2 <__sflush_r+0x92>
 8011570:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011572:	89a3      	ldrh	r3, [r4, #12]
 8011574:	0759      	lsls	r1, r3, #29
 8011576:	d505      	bpl.n	8011584 <__sflush_r+0x44>
 8011578:	6863      	ldr	r3, [r4, #4]
 801157a:	1ad2      	subs	r2, r2, r3
 801157c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801157e:	b10b      	cbz	r3, 8011584 <__sflush_r+0x44>
 8011580:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011582:	1ad2      	subs	r2, r2, r3
 8011584:	2300      	movs	r3, #0
 8011586:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011588:	6a21      	ldr	r1, [r4, #32]
 801158a:	4628      	mov	r0, r5
 801158c:	47b0      	blx	r6
 801158e:	1c43      	adds	r3, r0, #1
 8011590:	89a3      	ldrh	r3, [r4, #12]
 8011592:	d106      	bne.n	80115a2 <__sflush_r+0x62>
 8011594:	6829      	ldr	r1, [r5, #0]
 8011596:	291d      	cmp	r1, #29
 8011598:	d82b      	bhi.n	80115f2 <__sflush_r+0xb2>
 801159a:	4a2a      	ldr	r2, [pc, #168]	@ (8011644 <__sflush_r+0x104>)
 801159c:	410a      	asrs	r2, r1
 801159e:	07d6      	lsls	r6, r2, #31
 80115a0:	d427      	bmi.n	80115f2 <__sflush_r+0xb2>
 80115a2:	2200      	movs	r2, #0
 80115a4:	6062      	str	r2, [r4, #4]
 80115a6:	04d9      	lsls	r1, r3, #19
 80115a8:	6922      	ldr	r2, [r4, #16]
 80115aa:	6022      	str	r2, [r4, #0]
 80115ac:	d504      	bpl.n	80115b8 <__sflush_r+0x78>
 80115ae:	1c42      	adds	r2, r0, #1
 80115b0:	d101      	bne.n	80115b6 <__sflush_r+0x76>
 80115b2:	682b      	ldr	r3, [r5, #0]
 80115b4:	b903      	cbnz	r3, 80115b8 <__sflush_r+0x78>
 80115b6:	6560      	str	r0, [r4, #84]	@ 0x54
 80115b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80115ba:	602f      	str	r7, [r5, #0]
 80115bc:	b1b9      	cbz	r1, 80115ee <__sflush_r+0xae>
 80115be:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80115c2:	4299      	cmp	r1, r3
 80115c4:	d002      	beq.n	80115cc <__sflush_r+0x8c>
 80115c6:	4628      	mov	r0, r5
 80115c8:	f7fe f8ea 	bl	800f7a0 <_free_r>
 80115cc:	2300      	movs	r3, #0
 80115ce:	6363      	str	r3, [r4, #52]	@ 0x34
 80115d0:	e00d      	b.n	80115ee <__sflush_r+0xae>
 80115d2:	2301      	movs	r3, #1
 80115d4:	4628      	mov	r0, r5
 80115d6:	47b0      	blx	r6
 80115d8:	4602      	mov	r2, r0
 80115da:	1c50      	adds	r0, r2, #1
 80115dc:	d1c9      	bne.n	8011572 <__sflush_r+0x32>
 80115de:	682b      	ldr	r3, [r5, #0]
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d0c6      	beq.n	8011572 <__sflush_r+0x32>
 80115e4:	2b1d      	cmp	r3, #29
 80115e6:	d001      	beq.n	80115ec <__sflush_r+0xac>
 80115e8:	2b16      	cmp	r3, #22
 80115ea:	d11e      	bne.n	801162a <__sflush_r+0xea>
 80115ec:	602f      	str	r7, [r5, #0]
 80115ee:	2000      	movs	r0, #0
 80115f0:	e022      	b.n	8011638 <__sflush_r+0xf8>
 80115f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80115f6:	b21b      	sxth	r3, r3
 80115f8:	e01b      	b.n	8011632 <__sflush_r+0xf2>
 80115fa:	690f      	ldr	r7, [r1, #16]
 80115fc:	2f00      	cmp	r7, #0
 80115fe:	d0f6      	beq.n	80115ee <__sflush_r+0xae>
 8011600:	0793      	lsls	r3, r2, #30
 8011602:	680e      	ldr	r6, [r1, #0]
 8011604:	bf08      	it	eq
 8011606:	694b      	ldreq	r3, [r1, #20]
 8011608:	600f      	str	r7, [r1, #0]
 801160a:	bf18      	it	ne
 801160c:	2300      	movne	r3, #0
 801160e:	eba6 0807 	sub.w	r8, r6, r7
 8011612:	608b      	str	r3, [r1, #8]
 8011614:	f1b8 0f00 	cmp.w	r8, #0
 8011618:	dde9      	ble.n	80115ee <__sflush_r+0xae>
 801161a:	6a21      	ldr	r1, [r4, #32]
 801161c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801161e:	4643      	mov	r3, r8
 8011620:	463a      	mov	r2, r7
 8011622:	4628      	mov	r0, r5
 8011624:	47b0      	blx	r6
 8011626:	2800      	cmp	r0, #0
 8011628:	dc08      	bgt.n	801163c <__sflush_r+0xfc>
 801162a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801162e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011632:	81a3      	strh	r3, [r4, #12]
 8011634:	f04f 30ff 	mov.w	r0, #4294967295
 8011638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801163c:	4407      	add	r7, r0
 801163e:	eba8 0800 	sub.w	r8, r8, r0
 8011642:	e7e7      	b.n	8011614 <__sflush_r+0xd4>
 8011644:	dfbffffe 	.word	0xdfbffffe

08011648 <_fflush_r>:
 8011648:	b538      	push	{r3, r4, r5, lr}
 801164a:	690b      	ldr	r3, [r1, #16]
 801164c:	4605      	mov	r5, r0
 801164e:	460c      	mov	r4, r1
 8011650:	b913      	cbnz	r3, 8011658 <_fflush_r+0x10>
 8011652:	2500      	movs	r5, #0
 8011654:	4628      	mov	r0, r5
 8011656:	bd38      	pop	{r3, r4, r5, pc}
 8011658:	b118      	cbz	r0, 8011662 <_fflush_r+0x1a>
 801165a:	6a03      	ldr	r3, [r0, #32]
 801165c:	b90b      	cbnz	r3, 8011662 <_fflush_r+0x1a>
 801165e:	f7fd f803 	bl	800e668 <__sinit>
 8011662:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011666:	2b00      	cmp	r3, #0
 8011668:	d0f3      	beq.n	8011652 <_fflush_r+0xa>
 801166a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801166c:	07d0      	lsls	r0, r2, #31
 801166e:	d404      	bmi.n	801167a <_fflush_r+0x32>
 8011670:	0599      	lsls	r1, r3, #22
 8011672:	d402      	bmi.n	801167a <_fflush_r+0x32>
 8011674:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011676:	f7fd fa30 	bl	800eada <__retarget_lock_acquire_recursive>
 801167a:	4628      	mov	r0, r5
 801167c:	4621      	mov	r1, r4
 801167e:	f7ff ff5f 	bl	8011540 <__sflush_r>
 8011682:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011684:	07da      	lsls	r2, r3, #31
 8011686:	4605      	mov	r5, r0
 8011688:	d4e4      	bmi.n	8011654 <_fflush_r+0xc>
 801168a:	89a3      	ldrh	r3, [r4, #12]
 801168c:	059b      	lsls	r3, r3, #22
 801168e:	d4e1      	bmi.n	8011654 <_fflush_r+0xc>
 8011690:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011692:	f7fd fa23 	bl	800eadc <__retarget_lock_release_recursive>
 8011696:	e7dd      	b.n	8011654 <_fflush_r+0xc>

08011698 <__swhatbuf_r>:
 8011698:	b570      	push	{r4, r5, r6, lr}
 801169a:	460c      	mov	r4, r1
 801169c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80116a0:	2900      	cmp	r1, #0
 80116a2:	b096      	sub	sp, #88	@ 0x58
 80116a4:	4615      	mov	r5, r2
 80116a6:	461e      	mov	r6, r3
 80116a8:	da0d      	bge.n	80116c6 <__swhatbuf_r+0x2e>
 80116aa:	89a3      	ldrh	r3, [r4, #12]
 80116ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80116b0:	f04f 0100 	mov.w	r1, #0
 80116b4:	bf14      	ite	ne
 80116b6:	2340      	movne	r3, #64	@ 0x40
 80116b8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80116bc:	2000      	movs	r0, #0
 80116be:	6031      	str	r1, [r6, #0]
 80116c0:	602b      	str	r3, [r5, #0]
 80116c2:	b016      	add	sp, #88	@ 0x58
 80116c4:	bd70      	pop	{r4, r5, r6, pc}
 80116c6:	466a      	mov	r2, sp
 80116c8:	f000 f8b6 	bl	8011838 <_fstat_r>
 80116cc:	2800      	cmp	r0, #0
 80116ce:	dbec      	blt.n	80116aa <__swhatbuf_r+0x12>
 80116d0:	9901      	ldr	r1, [sp, #4]
 80116d2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80116d6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80116da:	4259      	negs	r1, r3
 80116dc:	4159      	adcs	r1, r3
 80116de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80116e2:	e7eb      	b.n	80116bc <__swhatbuf_r+0x24>

080116e4 <__smakebuf_r>:
 80116e4:	898b      	ldrh	r3, [r1, #12]
 80116e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80116e8:	079d      	lsls	r5, r3, #30
 80116ea:	4606      	mov	r6, r0
 80116ec:	460c      	mov	r4, r1
 80116ee:	d507      	bpl.n	8011700 <__smakebuf_r+0x1c>
 80116f0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80116f4:	6023      	str	r3, [r4, #0]
 80116f6:	6123      	str	r3, [r4, #16]
 80116f8:	2301      	movs	r3, #1
 80116fa:	6163      	str	r3, [r4, #20]
 80116fc:	b003      	add	sp, #12
 80116fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011700:	ab01      	add	r3, sp, #4
 8011702:	466a      	mov	r2, sp
 8011704:	f7ff ffc8 	bl	8011698 <__swhatbuf_r>
 8011708:	9f00      	ldr	r7, [sp, #0]
 801170a:	4605      	mov	r5, r0
 801170c:	4639      	mov	r1, r7
 801170e:	4630      	mov	r0, r6
 8011710:	f7fe f8ba 	bl	800f888 <_malloc_r>
 8011714:	b948      	cbnz	r0, 801172a <__smakebuf_r+0x46>
 8011716:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801171a:	059a      	lsls	r2, r3, #22
 801171c:	d4ee      	bmi.n	80116fc <__smakebuf_r+0x18>
 801171e:	f023 0303 	bic.w	r3, r3, #3
 8011722:	f043 0302 	orr.w	r3, r3, #2
 8011726:	81a3      	strh	r3, [r4, #12]
 8011728:	e7e2      	b.n	80116f0 <__smakebuf_r+0xc>
 801172a:	89a3      	ldrh	r3, [r4, #12]
 801172c:	6020      	str	r0, [r4, #0]
 801172e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011732:	81a3      	strh	r3, [r4, #12]
 8011734:	9b01      	ldr	r3, [sp, #4]
 8011736:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801173a:	b15b      	cbz	r3, 8011754 <__smakebuf_r+0x70>
 801173c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011740:	4630      	mov	r0, r6
 8011742:	f000 f88b 	bl	801185c <_isatty_r>
 8011746:	b128      	cbz	r0, 8011754 <__smakebuf_r+0x70>
 8011748:	89a3      	ldrh	r3, [r4, #12]
 801174a:	f023 0303 	bic.w	r3, r3, #3
 801174e:	f043 0301 	orr.w	r3, r3, #1
 8011752:	81a3      	strh	r3, [r4, #12]
 8011754:	89a3      	ldrh	r3, [r4, #12]
 8011756:	431d      	orrs	r5, r3
 8011758:	81a5      	strh	r5, [r4, #12]
 801175a:	e7cf      	b.n	80116fc <__smakebuf_r+0x18>

0801175c <_putc_r>:
 801175c:	b570      	push	{r4, r5, r6, lr}
 801175e:	460d      	mov	r5, r1
 8011760:	4614      	mov	r4, r2
 8011762:	4606      	mov	r6, r0
 8011764:	b118      	cbz	r0, 801176e <_putc_r+0x12>
 8011766:	6a03      	ldr	r3, [r0, #32]
 8011768:	b90b      	cbnz	r3, 801176e <_putc_r+0x12>
 801176a:	f7fc ff7d 	bl	800e668 <__sinit>
 801176e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011770:	07d8      	lsls	r0, r3, #31
 8011772:	d405      	bmi.n	8011780 <_putc_r+0x24>
 8011774:	89a3      	ldrh	r3, [r4, #12]
 8011776:	0599      	lsls	r1, r3, #22
 8011778:	d402      	bmi.n	8011780 <_putc_r+0x24>
 801177a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801177c:	f7fd f9ad 	bl	800eada <__retarget_lock_acquire_recursive>
 8011780:	68a3      	ldr	r3, [r4, #8]
 8011782:	3b01      	subs	r3, #1
 8011784:	2b00      	cmp	r3, #0
 8011786:	60a3      	str	r3, [r4, #8]
 8011788:	da05      	bge.n	8011796 <_putc_r+0x3a>
 801178a:	69a2      	ldr	r2, [r4, #24]
 801178c:	4293      	cmp	r3, r2
 801178e:	db12      	blt.n	80117b6 <_putc_r+0x5a>
 8011790:	b2eb      	uxtb	r3, r5
 8011792:	2b0a      	cmp	r3, #10
 8011794:	d00f      	beq.n	80117b6 <_putc_r+0x5a>
 8011796:	6823      	ldr	r3, [r4, #0]
 8011798:	1c5a      	adds	r2, r3, #1
 801179a:	6022      	str	r2, [r4, #0]
 801179c:	701d      	strb	r5, [r3, #0]
 801179e:	b2ed      	uxtb	r5, r5
 80117a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80117a2:	07da      	lsls	r2, r3, #31
 80117a4:	d405      	bmi.n	80117b2 <_putc_r+0x56>
 80117a6:	89a3      	ldrh	r3, [r4, #12]
 80117a8:	059b      	lsls	r3, r3, #22
 80117aa:	d402      	bmi.n	80117b2 <_putc_r+0x56>
 80117ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80117ae:	f7fd f995 	bl	800eadc <__retarget_lock_release_recursive>
 80117b2:	4628      	mov	r0, r5
 80117b4:	bd70      	pop	{r4, r5, r6, pc}
 80117b6:	4629      	mov	r1, r5
 80117b8:	4622      	mov	r2, r4
 80117ba:	4630      	mov	r0, r6
 80117bc:	f7fd f865 	bl	800e88a <__swbuf_r>
 80117c0:	4605      	mov	r5, r0
 80117c2:	e7ed      	b.n	80117a0 <_putc_r+0x44>

080117c4 <memmove>:
 80117c4:	4288      	cmp	r0, r1
 80117c6:	b510      	push	{r4, lr}
 80117c8:	eb01 0402 	add.w	r4, r1, r2
 80117cc:	d902      	bls.n	80117d4 <memmove+0x10>
 80117ce:	4284      	cmp	r4, r0
 80117d0:	4623      	mov	r3, r4
 80117d2:	d807      	bhi.n	80117e4 <memmove+0x20>
 80117d4:	1e43      	subs	r3, r0, #1
 80117d6:	42a1      	cmp	r1, r4
 80117d8:	d008      	beq.n	80117ec <memmove+0x28>
 80117da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80117de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80117e2:	e7f8      	b.n	80117d6 <memmove+0x12>
 80117e4:	4402      	add	r2, r0
 80117e6:	4601      	mov	r1, r0
 80117e8:	428a      	cmp	r2, r1
 80117ea:	d100      	bne.n	80117ee <memmove+0x2a>
 80117ec:	bd10      	pop	{r4, pc}
 80117ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80117f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80117f6:	e7f7      	b.n	80117e8 <memmove+0x24>

080117f8 <strchr>:
 80117f8:	b2c9      	uxtb	r1, r1
 80117fa:	4603      	mov	r3, r0
 80117fc:	4618      	mov	r0, r3
 80117fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011802:	b112      	cbz	r2, 801180a <strchr+0x12>
 8011804:	428a      	cmp	r2, r1
 8011806:	d1f9      	bne.n	80117fc <strchr+0x4>
 8011808:	4770      	bx	lr
 801180a:	2900      	cmp	r1, #0
 801180c:	bf18      	it	ne
 801180e:	2000      	movne	r0, #0
 8011810:	4770      	bx	lr

08011812 <strncmp>:
 8011812:	b510      	push	{r4, lr}
 8011814:	b16a      	cbz	r2, 8011832 <strncmp+0x20>
 8011816:	3901      	subs	r1, #1
 8011818:	1884      	adds	r4, r0, r2
 801181a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801181e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011822:	429a      	cmp	r2, r3
 8011824:	d103      	bne.n	801182e <strncmp+0x1c>
 8011826:	42a0      	cmp	r0, r4
 8011828:	d001      	beq.n	801182e <strncmp+0x1c>
 801182a:	2a00      	cmp	r2, #0
 801182c:	d1f5      	bne.n	801181a <strncmp+0x8>
 801182e:	1ad0      	subs	r0, r2, r3
 8011830:	bd10      	pop	{r4, pc}
 8011832:	4610      	mov	r0, r2
 8011834:	e7fc      	b.n	8011830 <strncmp+0x1e>
	...

08011838 <_fstat_r>:
 8011838:	b538      	push	{r3, r4, r5, lr}
 801183a:	4d07      	ldr	r5, [pc, #28]	@ (8011858 <_fstat_r+0x20>)
 801183c:	2300      	movs	r3, #0
 801183e:	4604      	mov	r4, r0
 8011840:	4608      	mov	r0, r1
 8011842:	4611      	mov	r1, r2
 8011844:	602b      	str	r3, [r5, #0]
 8011846:	f7f1 ff97 	bl	8003778 <_fstat>
 801184a:	1c43      	adds	r3, r0, #1
 801184c:	d102      	bne.n	8011854 <_fstat_r+0x1c>
 801184e:	682b      	ldr	r3, [r5, #0]
 8011850:	b103      	cbz	r3, 8011854 <_fstat_r+0x1c>
 8011852:	6023      	str	r3, [r4, #0]
 8011854:	bd38      	pop	{r3, r4, r5, pc}
 8011856:	bf00      	nop
 8011858:	20003770 	.word	0x20003770

0801185c <_isatty_r>:
 801185c:	b538      	push	{r3, r4, r5, lr}
 801185e:	4d06      	ldr	r5, [pc, #24]	@ (8011878 <_isatty_r+0x1c>)
 8011860:	2300      	movs	r3, #0
 8011862:	4604      	mov	r4, r0
 8011864:	4608      	mov	r0, r1
 8011866:	602b      	str	r3, [r5, #0]
 8011868:	f7f1 ff96 	bl	8003798 <_isatty>
 801186c:	1c43      	adds	r3, r0, #1
 801186e:	d102      	bne.n	8011876 <_isatty_r+0x1a>
 8011870:	682b      	ldr	r3, [r5, #0]
 8011872:	b103      	cbz	r3, 8011876 <_isatty_r+0x1a>
 8011874:	6023      	str	r3, [r4, #0]
 8011876:	bd38      	pop	{r3, r4, r5, pc}
 8011878:	20003770 	.word	0x20003770

0801187c <_sbrk_r>:
 801187c:	b538      	push	{r3, r4, r5, lr}
 801187e:	4d06      	ldr	r5, [pc, #24]	@ (8011898 <_sbrk_r+0x1c>)
 8011880:	2300      	movs	r3, #0
 8011882:	4604      	mov	r4, r0
 8011884:	4608      	mov	r0, r1
 8011886:	602b      	str	r3, [r5, #0]
 8011888:	f7f1 ff9e 	bl	80037c8 <_sbrk>
 801188c:	1c43      	adds	r3, r0, #1
 801188e:	d102      	bne.n	8011896 <_sbrk_r+0x1a>
 8011890:	682b      	ldr	r3, [r5, #0]
 8011892:	b103      	cbz	r3, 8011896 <_sbrk_r+0x1a>
 8011894:	6023      	str	r3, [r4, #0]
 8011896:	bd38      	pop	{r3, r4, r5, pc}
 8011898:	20003770 	.word	0x20003770
 801189c:	00000000 	.word	0x00000000

080118a0 <nan>:
 80118a0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80118a8 <nan+0x8>
 80118a4:	4770      	bx	lr
 80118a6:	bf00      	nop
 80118a8:	00000000 	.word	0x00000000
 80118ac:	7ff80000 	.word	0x7ff80000

080118b0 <__assert_func>:
 80118b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80118b2:	4614      	mov	r4, r2
 80118b4:	461a      	mov	r2, r3
 80118b6:	4b09      	ldr	r3, [pc, #36]	@ (80118dc <__assert_func+0x2c>)
 80118b8:	681b      	ldr	r3, [r3, #0]
 80118ba:	4605      	mov	r5, r0
 80118bc:	68d8      	ldr	r0, [r3, #12]
 80118be:	b954      	cbnz	r4, 80118d6 <__assert_func+0x26>
 80118c0:	4b07      	ldr	r3, [pc, #28]	@ (80118e0 <__assert_func+0x30>)
 80118c2:	461c      	mov	r4, r3
 80118c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80118c8:	9100      	str	r1, [sp, #0]
 80118ca:	462b      	mov	r3, r5
 80118cc:	4905      	ldr	r1, [pc, #20]	@ (80118e4 <__assert_func+0x34>)
 80118ce:	f000 fba7 	bl	8012020 <fiprintf>
 80118d2:	f000 fbb7 	bl	8012044 <abort>
 80118d6:	4b04      	ldr	r3, [pc, #16]	@ (80118e8 <__assert_func+0x38>)
 80118d8:	e7f4      	b.n	80118c4 <__assert_func+0x14>
 80118da:	bf00      	nop
 80118dc:	2000003c 	.word	0x2000003c
 80118e0:	08013c2d 	.word	0x08013c2d
 80118e4:	08013bff 	.word	0x08013bff
 80118e8:	08013bf2 	.word	0x08013bf2

080118ec <_calloc_r>:
 80118ec:	b570      	push	{r4, r5, r6, lr}
 80118ee:	fba1 5402 	umull	r5, r4, r1, r2
 80118f2:	b93c      	cbnz	r4, 8011904 <_calloc_r+0x18>
 80118f4:	4629      	mov	r1, r5
 80118f6:	f7fd ffc7 	bl	800f888 <_malloc_r>
 80118fa:	4606      	mov	r6, r0
 80118fc:	b928      	cbnz	r0, 801190a <_calloc_r+0x1e>
 80118fe:	2600      	movs	r6, #0
 8011900:	4630      	mov	r0, r6
 8011902:	bd70      	pop	{r4, r5, r6, pc}
 8011904:	220c      	movs	r2, #12
 8011906:	6002      	str	r2, [r0, #0]
 8011908:	e7f9      	b.n	80118fe <_calloc_r+0x12>
 801190a:	462a      	mov	r2, r5
 801190c:	4621      	mov	r1, r4
 801190e:	f7fd f851 	bl	800e9b4 <memset>
 8011912:	e7f5      	b.n	8011900 <_calloc_r+0x14>

08011914 <rshift>:
 8011914:	6903      	ldr	r3, [r0, #16]
 8011916:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801191a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801191e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8011922:	f100 0414 	add.w	r4, r0, #20
 8011926:	dd45      	ble.n	80119b4 <rshift+0xa0>
 8011928:	f011 011f 	ands.w	r1, r1, #31
 801192c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8011930:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8011934:	d10c      	bne.n	8011950 <rshift+0x3c>
 8011936:	f100 0710 	add.w	r7, r0, #16
 801193a:	4629      	mov	r1, r5
 801193c:	42b1      	cmp	r1, r6
 801193e:	d334      	bcc.n	80119aa <rshift+0x96>
 8011940:	1a9b      	subs	r3, r3, r2
 8011942:	009b      	lsls	r3, r3, #2
 8011944:	1eea      	subs	r2, r5, #3
 8011946:	4296      	cmp	r6, r2
 8011948:	bf38      	it	cc
 801194a:	2300      	movcc	r3, #0
 801194c:	4423      	add	r3, r4
 801194e:	e015      	b.n	801197c <rshift+0x68>
 8011950:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8011954:	f1c1 0820 	rsb	r8, r1, #32
 8011958:	40cf      	lsrs	r7, r1
 801195a:	f105 0e04 	add.w	lr, r5, #4
 801195e:	46a1      	mov	r9, r4
 8011960:	4576      	cmp	r6, lr
 8011962:	46f4      	mov	ip, lr
 8011964:	d815      	bhi.n	8011992 <rshift+0x7e>
 8011966:	1a9a      	subs	r2, r3, r2
 8011968:	0092      	lsls	r2, r2, #2
 801196a:	3a04      	subs	r2, #4
 801196c:	3501      	adds	r5, #1
 801196e:	42ae      	cmp	r6, r5
 8011970:	bf38      	it	cc
 8011972:	2200      	movcc	r2, #0
 8011974:	18a3      	adds	r3, r4, r2
 8011976:	50a7      	str	r7, [r4, r2]
 8011978:	b107      	cbz	r7, 801197c <rshift+0x68>
 801197a:	3304      	adds	r3, #4
 801197c:	1b1a      	subs	r2, r3, r4
 801197e:	42a3      	cmp	r3, r4
 8011980:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8011984:	bf08      	it	eq
 8011986:	2300      	moveq	r3, #0
 8011988:	6102      	str	r2, [r0, #16]
 801198a:	bf08      	it	eq
 801198c:	6143      	streq	r3, [r0, #20]
 801198e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011992:	f8dc c000 	ldr.w	ip, [ip]
 8011996:	fa0c fc08 	lsl.w	ip, ip, r8
 801199a:	ea4c 0707 	orr.w	r7, ip, r7
 801199e:	f849 7b04 	str.w	r7, [r9], #4
 80119a2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80119a6:	40cf      	lsrs	r7, r1
 80119a8:	e7da      	b.n	8011960 <rshift+0x4c>
 80119aa:	f851 cb04 	ldr.w	ip, [r1], #4
 80119ae:	f847 cf04 	str.w	ip, [r7, #4]!
 80119b2:	e7c3      	b.n	801193c <rshift+0x28>
 80119b4:	4623      	mov	r3, r4
 80119b6:	e7e1      	b.n	801197c <rshift+0x68>

080119b8 <__hexdig_fun>:
 80119b8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80119bc:	2b09      	cmp	r3, #9
 80119be:	d802      	bhi.n	80119c6 <__hexdig_fun+0xe>
 80119c0:	3820      	subs	r0, #32
 80119c2:	b2c0      	uxtb	r0, r0
 80119c4:	4770      	bx	lr
 80119c6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80119ca:	2b05      	cmp	r3, #5
 80119cc:	d801      	bhi.n	80119d2 <__hexdig_fun+0x1a>
 80119ce:	3847      	subs	r0, #71	@ 0x47
 80119d0:	e7f7      	b.n	80119c2 <__hexdig_fun+0xa>
 80119d2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80119d6:	2b05      	cmp	r3, #5
 80119d8:	d801      	bhi.n	80119de <__hexdig_fun+0x26>
 80119da:	3827      	subs	r0, #39	@ 0x27
 80119dc:	e7f1      	b.n	80119c2 <__hexdig_fun+0xa>
 80119de:	2000      	movs	r0, #0
 80119e0:	4770      	bx	lr
	...

080119e4 <__gethex>:
 80119e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119e8:	b085      	sub	sp, #20
 80119ea:	468a      	mov	sl, r1
 80119ec:	9302      	str	r3, [sp, #8]
 80119ee:	680b      	ldr	r3, [r1, #0]
 80119f0:	9001      	str	r0, [sp, #4]
 80119f2:	4690      	mov	r8, r2
 80119f4:	1c9c      	adds	r4, r3, #2
 80119f6:	46a1      	mov	r9, r4
 80119f8:	f814 0b01 	ldrb.w	r0, [r4], #1
 80119fc:	2830      	cmp	r0, #48	@ 0x30
 80119fe:	d0fa      	beq.n	80119f6 <__gethex+0x12>
 8011a00:	eba9 0303 	sub.w	r3, r9, r3
 8011a04:	f1a3 0b02 	sub.w	fp, r3, #2
 8011a08:	f7ff ffd6 	bl	80119b8 <__hexdig_fun>
 8011a0c:	4605      	mov	r5, r0
 8011a0e:	2800      	cmp	r0, #0
 8011a10:	d168      	bne.n	8011ae4 <__gethex+0x100>
 8011a12:	49a0      	ldr	r1, [pc, #640]	@ (8011c94 <__gethex+0x2b0>)
 8011a14:	2201      	movs	r2, #1
 8011a16:	4648      	mov	r0, r9
 8011a18:	f7ff fefb 	bl	8011812 <strncmp>
 8011a1c:	4607      	mov	r7, r0
 8011a1e:	2800      	cmp	r0, #0
 8011a20:	d167      	bne.n	8011af2 <__gethex+0x10e>
 8011a22:	f899 0001 	ldrb.w	r0, [r9, #1]
 8011a26:	4626      	mov	r6, r4
 8011a28:	f7ff ffc6 	bl	80119b8 <__hexdig_fun>
 8011a2c:	2800      	cmp	r0, #0
 8011a2e:	d062      	beq.n	8011af6 <__gethex+0x112>
 8011a30:	4623      	mov	r3, r4
 8011a32:	7818      	ldrb	r0, [r3, #0]
 8011a34:	2830      	cmp	r0, #48	@ 0x30
 8011a36:	4699      	mov	r9, r3
 8011a38:	f103 0301 	add.w	r3, r3, #1
 8011a3c:	d0f9      	beq.n	8011a32 <__gethex+0x4e>
 8011a3e:	f7ff ffbb 	bl	80119b8 <__hexdig_fun>
 8011a42:	fab0 f580 	clz	r5, r0
 8011a46:	096d      	lsrs	r5, r5, #5
 8011a48:	f04f 0b01 	mov.w	fp, #1
 8011a4c:	464a      	mov	r2, r9
 8011a4e:	4616      	mov	r6, r2
 8011a50:	3201      	adds	r2, #1
 8011a52:	7830      	ldrb	r0, [r6, #0]
 8011a54:	f7ff ffb0 	bl	80119b8 <__hexdig_fun>
 8011a58:	2800      	cmp	r0, #0
 8011a5a:	d1f8      	bne.n	8011a4e <__gethex+0x6a>
 8011a5c:	498d      	ldr	r1, [pc, #564]	@ (8011c94 <__gethex+0x2b0>)
 8011a5e:	2201      	movs	r2, #1
 8011a60:	4630      	mov	r0, r6
 8011a62:	f7ff fed6 	bl	8011812 <strncmp>
 8011a66:	2800      	cmp	r0, #0
 8011a68:	d13f      	bne.n	8011aea <__gethex+0x106>
 8011a6a:	b944      	cbnz	r4, 8011a7e <__gethex+0x9a>
 8011a6c:	1c74      	adds	r4, r6, #1
 8011a6e:	4622      	mov	r2, r4
 8011a70:	4616      	mov	r6, r2
 8011a72:	3201      	adds	r2, #1
 8011a74:	7830      	ldrb	r0, [r6, #0]
 8011a76:	f7ff ff9f 	bl	80119b8 <__hexdig_fun>
 8011a7a:	2800      	cmp	r0, #0
 8011a7c:	d1f8      	bne.n	8011a70 <__gethex+0x8c>
 8011a7e:	1ba4      	subs	r4, r4, r6
 8011a80:	00a7      	lsls	r7, r4, #2
 8011a82:	7833      	ldrb	r3, [r6, #0]
 8011a84:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8011a88:	2b50      	cmp	r3, #80	@ 0x50
 8011a8a:	d13e      	bne.n	8011b0a <__gethex+0x126>
 8011a8c:	7873      	ldrb	r3, [r6, #1]
 8011a8e:	2b2b      	cmp	r3, #43	@ 0x2b
 8011a90:	d033      	beq.n	8011afa <__gethex+0x116>
 8011a92:	2b2d      	cmp	r3, #45	@ 0x2d
 8011a94:	d034      	beq.n	8011b00 <__gethex+0x11c>
 8011a96:	1c71      	adds	r1, r6, #1
 8011a98:	2400      	movs	r4, #0
 8011a9a:	7808      	ldrb	r0, [r1, #0]
 8011a9c:	f7ff ff8c 	bl	80119b8 <__hexdig_fun>
 8011aa0:	1e43      	subs	r3, r0, #1
 8011aa2:	b2db      	uxtb	r3, r3
 8011aa4:	2b18      	cmp	r3, #24
 8011aa6:	d830      	bhi.n	8011b0a <__gethex+0x126>
 8011aa8:	f1a0 0210 	sub.w	r2, r0, #16
 8011aac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011ab0:	f7ff ff82 	bl	80119b8 <__hexdig_fun>
 8011ab4:	f100 3cff 	add.w	ip, r0, #4294967295
 8011ab8:	fa5f fc8c 	uxtb.w	ip, ip
 8011abc:	f1bc 0f18 	cmp.w	ip, #24
 8011ac0:	f04f 030a 	mov.w	r3, #10
 8011ac4:	d91e      	bls.n	8011b04 <__gethex+0x120>
 8011ac6:	b104      	cbz	r4, 8011aca <__gethex+0xe6>
 8011ac8:	4252      	negs	r2, r2
 8011aca:	4417      	add	r7, r2
 8011acc:	f8ca 1000 	str.w	r1, [sl]
 8011ad0:	b1ed      	cbz	r5, 8011b0e <__gethex+0x12a>
 8011ad2:	f1bb 0f00 	cmp.w	fp, #0
 8011ad6:	bf0c      	ite	eq
 8011ad8:	2506      	moveq	r5, #6
 8011ada:	2500      	movne	r5, #0
 8011adc:	4628      	mov	r0, r5
 8011ade:	b005      	add	sp, #20
 8011ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ae4:	2500      	movs	r5, #0
 8011ae6:	462c      	mov	r4, r5
 8011ae8:	e7b0      	b.n	8011a4c <__gethex+0x68>
 8011aea:	2c00      	cmp	r4, #0
 8011aec:	d1c7      	bne.n	8011a7e <__gethex+0x9a>
 8011aee:	4627      	mov	r7, r4
 8011af0:	e7c7      	b.n	8011a82 <__gethex+0x9e>
 8011af2:	464e      	mov	r6, r9
 8011af4:	462f      	mov	r7, r5
 8011af6:	2501      	movs	r5, #1
 8011af8:	e7c3      	b.n	8011a82 <__gethex+0x9e>
 8011afa:	2400      	movs	r4, #0
 8011afc:	1cb1      	adds	r1, r6, #2
 8011afe:	e7cc      	b.n	8011a9a <__gethex+0xb6>
 8011b00:	2401      	movs	r4, #1
 8011b02:	e7fb      	b.n	8011afc <__gethex+0x118>
 8011b04:	fb03 0002 	mla	r0, r3, r2, r0
 8011b08:	e7ce      	b.n	8011aa8 <__gethex+0xc4>
 8011b0a:	4631      	mov	r1, r6
 8011b0c:	e7de      	b.n	8011acc <__gethex+0xe8>
 8011b0e:	eba6 0309 	sub.w	r3, r6, r9
 8011b12:	3b01      	subs	r3, #1
 8011b14:	4629      	mov	r1, r5
 8011b16:	2b07      	cmp	r3, #7
 8011b18:	dc0a      	bgt.n	8011b30 <__gethex+0x14c>
 8011b1a:	9801      	ldr	r0, [sp, #4]
 8011b1c:	f7fd ff40 	bl	800f9a0 <_Balloc>
 8011b20:	4604      	mov	r4, r0
 8011b22:	b940      	cbnz	r0, 8011b36 <__gethex+0x152>
 8011b24:	4b5c      	ldr	r3, [pc, #368]	@ (8011c98 <__gethex+0x2b4>)
 8011b26:	4602      	mov	r2, r0
 8011b28:	21e4      	movs	r1, #228	@ 0xe4
 8011b2a:	485c      	ldr	r0, [pc, #368]	@ (8011c9c <__gethex+0x2b8>)
 8011b2c:	f7ff fec0 	bl	80118b0 <__assert_func>
 8011b30:	3101      	adds	r1, #1
 8011b32:	105b      	asrs	r3, r3, #1
 8011b34:	e7ef      	b.n	8011b16 <__gethex+0x132>
 8011b36:	f100 0a14 	add.w	sl, r0, #20
 8011b3a:	2300      	movs	r3, #0
 8011b3c:	4655      	mov	r5, sl
 8011b3e:	469b      	mov	fp, r3
 8011b40:	45b1      	cmp	r9, r6
 8011b42:	d337      	bcc.n	8011bb4 <__gethex+0x1d0>
 8011b44:	f845 bb04 	str.w	fp, [r5], #4
 8011b48:	eba5 050a 	sub.w	r5, r5, sl
 8011b4c:	10ad      	asrs	r5, r5, #2
 8011b4e:	6125      	str	r5, [r4, #16]
 8011b50:	4658      	mov	r0, fp
 8011b52:	f7fe f817 	bl	800fb84 <__hi0bits>
 8011b56:	016d      	lsls	r5, r5, #5
 8011b58:	f8d8 6000 	ldr.w	r6, [r8]
 8011b5c:	1a2d      	subs	r5, r5, r0
 8011b5e:	42b5      	cmp	r5, r6
 8011b60:	dd54      	ble.n	8011c0c <__gethex+0x228>
 8011b62:	1bad      	subs	r5, r5, r6
 8011b64:	4629      	mov	r1, r5
 8011b66:	4620      	mov	r0, r4
 8011b68:	f7fe fbab 	bl	80102c2 <__any_on>
 8011b6c:	4681      	mov	r9, r0
 8011b6e:	b178      	cbz	r0, 8011b90 <__gethex+0x1ac>
 8011b70:	1e6b      	subs	r3, r5, #1
 8011b72:	1159      	asrs	r1, r3, #5
 8011b74:	f003 021f 	and.w	r2, r3, #31
 8011b78:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8011b7c:	f04f 0901 	mov.w	r9, #1
 8011b80:	fa09 f202 	lsl.w	r2, r9, r2
 8011b84:	420a      	tst	r2, r1
 8011b86:	d003      	beq.n	8011b90 <__gethex+0x1ac>
 8011b88:	454b      	cmp	r3, r9
 8011b8a:	dc36      	bgt.n	8011bfa <__gethex+0x216>
 8011b8c:	f04f 0902 	mov.w	r9, #2
 8011b90:	4629      	mov	r1, r5
 8011b92:	4620      	mov	r0, r4
 8011b94:	f7ff febe 	bl	8011914 <rshift>
 8011b98:	442f      	add	r7, r5
 8011b9a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011b9e:	42bb      	cmp	r3, r7
 8011ba0:	da42      	bge.n	8011c28 <__gethex+0x244>
 8011ba2:	9801      	ldr	r0, [sp, #4]
 8011ba4:	4621      	mov	r1, r4
 8011ba6:	f7fd ff3b 	bl	800fa20 <_Bfree>
 8011baa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011bac:	2300      	movs	r3, #0
 8011bae:	6013      	str	r3, [r2, #0]
 8011bb0:	25a3      	movs	r5, #163	@ 0xa3
 8011bb2:	e793      	b.n	8011adc <__gethex+0xf8>
 8011bb4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8011bb8:	2a2e      	cmp	r2, #46	@ 0x2e
 8011bba:	d012      	beq.n	8011be2 <__gethex+0x1fe>
 8011bbc:	2b20      	cmp	r3, #32
 8011bbe:	d104      	bne.n	8011bca <__gethex+0x1e6>
 8011bc0:	f845 bb04 	str.w	fp, [r5], #4
 8011bc4:	f04f 0b00 	mov.w	fp, #0
 8011bc8:	465b      	mov	r3, fp
 8011bca:	7830      	ldrb	r0, [r6, #0]
 8011bcc:	9303      	str	r3, [sp, #12]
 8011bce:	f7ff fef3 	bl	80119b8 <__hexdig_fun>
 8011bd2:	9b03      	ldr	r3, [sp, #12]
 8011bd4:	f000 000f 	and.w	r0, r0, #15
 8011bd8:	4098      	lsls	r0, r3
 8011bda:	ea4b 0b00 	orr.w	fp, fp, r0
 8011bde:	3304      	adds	r3, #4
 8011be0:	e7ae      	b.n	8011b40 <__gethex+0x15c>
 8011be2:	45b1      	cmp	r9, r6
 8011be4:	d8ea      	bhi.n	8011bbc <__gethex+0x1d8>
 8011be6:	492b      	ldr	r1, [pc, #172]	@ (8011c94 <__gethex+0x2b0>)
 8011be8:	9303      	str	r3, [sp, #12]
 8011bea:	2201      	movs	r2, #1
 8011bec:	4630      	mov	r0, r6
 8011bee:	f7ff fe10 	bl	8011812 <strncmp>
 8011bf2:	9b03      	ldr	r3, [sp, #12]
 8011bf4:	2800      	cmp	r0, #0
 8011bf6:	d1e1      	bne.n	8011bbc <__gethex+0x1d8>
 8011bf8:	e7a2      	b.n	8011b40 <__gethex+0x15c>
 8011bfa:	1ea9      	subs	r1, r5, #2
 8011bfc:	4620      	mov	r0, r4
 8011bfe:	f7fe fb60 	bl	80102c2 <__any_on>
 8011c02:	2800      	cmp	r0, #0
 8011c04:	d0c2      	beq.n	8011b8c <__gethex+0x1a8>
 8011c06:	f04f 0903 	mov.w	r9, #3
 8011c0a:	e7c1      	b.n	8011b90 <__gethex+0x1ac>
 8011c0c:	da09      	bge.n	8011c22 <__gethex+0x23e>
 8011c0e:	1b75      	subs	r5, r6, r5
 8011c10:	4621      	mov	r1, r4
 8011c12:	9801      	ldr	r0, [sp, #4]
 8011c14:	462a      	mov	r2, r5
 8011c16:	f7fe f91b 	bl	800fe50 <__lshift>
 8011c1a:	1b7f      	subs	r7, r7, r5
 8011c1c:	4604      	mov	r4, r0
 8011c1e:	f100 0a14 	add.w	sl, r0, #20
 8011c22:	f04f 0900 	mov.w	r9, #0
 8011c26:	e7b8      	b.n	8011b9a <__gethex+0x1b6>
 8011c28:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8011c2c:	42bd      	cmp	r5, r7
 8011c2e:	dd6f      	ble.n	8011d10 <__gethex+0x32c>
 8011c30:	1bed      	subs	r5, r5, r7
 8011c32:	42ae      	cmp	r6, r5
 8011c34:	dc34      	bgt.n	8011ca0 <__gethex+0x2bc>
 8011c36:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011c3a:	2b02      	cmp	r3, #2
 8011c3c:	d022      	beq.n	8011c84 <__gethex+0x2a0>
 8011c3e:	2b03      	cmp	r3, #3
 8011c40:	d024      	beq.n	8011c8c <__gethex+0x2a8>
 8011c42:	2b01      	cmp	r3, #1
 8011c44:	d115      	bne.n	8011c72 <__gethex+0x28e>
 8011c46:	42ae      	cmp	r6, r5
 8011c48:	d113      	bne.n	8011c72 <__gethex+0x28e>
 8011c4a:	2e01      	cmp	r6, #1
 8011c4c:	d10b      	bne.n	8011c66 <__gethex+0x282>
 8011c4e:	9a02      	ldr	r2, [sp, #8]
 8011c50:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011c54:	6013      	str	r3, [r2, #0]
 8011c56:	2301      	movs	r3, #1
 8011c58:	6123      	str	r3, [r4, #16]
 8011c5a:	f8ca 3000 	str.w	r3, [sl]
 8011c5e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011c60:	2562      	movs	r5, #98	@ 0x62
 8011c62:	601c      	str	r4, [r3, #0]
 8011c64:	e73a      	b.n	8011adc <__gethex+0xf8>
 8011c66:	1e71      	subs	r1, r6, #1
 8011c68:	4620      	mov	r0, r4
 8011c6a:	f7fe fb2a 	bl	80102c2 <__any_on>
 8011c6e:	2800      	cmp	r0, #0
 8011c70:	d1ed      	bne.n	8011c4e <__gethex+0x26a>
 8011c72:	9801      	ldr	r0, [sp, #4]
 8011c74:	4621      	mov	r1, r4
 8011c76:	f7fd fed3 	bl	800fa20 <_Bfree>
 8011c7a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011c7c:	2300      	movs	r3, #0
 8011c7e:	6013      	str	r3, [r2, #0]
 8011c80:	2550      	movs	r5, #80	@ 0x50
 8011c82:	e72b      	b.n	8011adc <__gethex+0xf8>
 8011c84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d1f3      	bne.n	8011c72 <__gethex+0x28e>
 8011c8a:	e7e0      	b.n	8011c4e <__gethex+0x26a>
 8011c8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	d1dd      	bne.n	8011c4e <__gethex+0x26a>
 8011c92:	e7ee      	b.n	8011c72 <__gethex+0x28e>
 8011c94:	08013a80 	.word	0x08013a80
 8011c98:	08013916 	.word	0x08013916
 8011c9c:	08013c2e 	.word	0x08013c2e
 8011ca0:	1e6f      	subs	r7, r5, #1
 8011ca2:	f1b9 0f00 	cmp.w	r9, #0
 8011ca6:	d130      	bne.n	8011d0a <__gethex+0x326>
 8011ca8:	b127      	cbz	r7, 8011cb4 <__gethex+0x2d0>
 8011caa:	4639      	mov	r1, r7
 8011cac:	4620      	mov	r0, r4
 8011cae:	f7fe fb08 	bl	80102c2 <__any_on>
 8011cb2:	4681      	mov	r9, r0
 8011cb4:	117a      	asrs	r2, r7, #5
 8011cb6:	2301      	movs	r3, #1
 8011cb8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8011cbc:	f007 071f 	and.w	r7, r7, #31
 8011cc0:	40bb      	lsls	r3, r7
 8011cc2:	4213      	tst	r3, r2
 8011cc4:	4629      	mov	r1, r5
 8011cc6:	4620      	mov	r0, r4
 8011cc8:	bf18      	it	ne
 8011cca:	f049 0902 	orrne.w	r9, r9, #2
 8011cce:	f7ff fe21 	bl	8011914 <rshift>
 8011cd2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8011cd6:	1b76      	subs	r6, r6, r5
 8011cd8:	2502      	movs	r5, #2
 8011cda:	f1b9 0f00 	cmp.w	r9, #0
 8011cde:	d047      	beq.n	8011d70 <__gethex+0x38c>
 8011ce0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011ce4:	2b02      	cmp	r3, #2
 8011ce6:	d015      	beq.n	8011d14 <__gethex+0x330>
 8011ce8:	2b03      	cmp	r3, #3
 8011cea:	d017      	beq.n	8011d1c <__gethex+0x338>
 8011cec:	2b01      	cmp	r3, #1
 8011cee:	d109      	bne.n	8011d04 <__gethex+0x320>
 8011cf0:	f019 0f02 	tst.w	r9, #2
 8011cf4:	d006      	beq.n	8011d04 <__gethex+0x320>
 8011cf6:	f8da 3000 	ldr.w	r3, [sl]
 8011cfa:	ea49 0903 	orr.w	r9, r9, r3
 8011cfe:	f019 0f01 	tst.w	r9, #1
 8011d02:	d10e      	bne.n	8011d22 <__gethex+0x33e>
 8011d04:	f045 0510 	orr.w	r5, r5, #16
 8011d08:	e032      	b.n	8011d70 <__gethex+0x38c>
 8011d0a:	f04f 0901 	mov.w	r9, #1
 8011d0e:	e7d1      	b.n	8011cb4 <__gethex+0x2d0>
 8011d10:	2501      	movs	r5, #1
 8011d12:	e7e2      	b.n	8011cda <__gethex+0x2f6>
 8011d14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011d16:	f1c3 0301 	rsb	r3, r3, #1
 8011d1a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011d1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d0f0      	beq.n	8011d04 <__gethex+0x320>
 8011d22:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011d26:	f104 0314 	add.w	r3, r4, #20
 8011d2a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8011d2e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011d32:	f04f 0c00 	mov.w	ip, #0
 8011d36:	4618      	mov	r0, r3
 8011d38:	f853 2b04 	ldr.w	r2, [r3], #4
 8011d3c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011d40:	d01b      	beq.n	8011d7a <__gethex+0x396>
 8011d42:	3201      	adds	r2, #1
 8011d44:	6002      	str	r2, [r0, #0]
 8011d46:	2d02      	cmp	r5, #2
 8011d48:	f104 0314 	add.w	r3, r4, #20
 8011d4c:	d13c      	bne.n	8011dc8 <__gethex+0x3e4>
 8011d4e:	f8d8 2000 	ldr.w	r2, [r8]
 8011d52:	3a01      	subs	r2, #1
 8011d54:	42b2      	cmp	r2, r6
 8011d56:	d109      	bne.n	8011d6c <__gethex+0x388>
 8011d58:	1171      	asrs	r1, r6, #5
 8011d5a:	2201      	movs	r2, #1
 8011d5c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011d60:	f006 061f 	and.w	r6, r6, #31
 8011d64:	fa02 f606 	lsl.w	r6, r2, r6
 8011d68:	421e      	tst	r6, r3
 8011d6a:	d13a      	bne.n	8011de2 <__gethex+0x3fe>
 8011d6c:	f045 0520 	orr.w	r5, r5, #32
 8011d70:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011d72:	601c      	str	r4, [r3, #0]
 8011d74:	9b02      	ldr	r3, [sp, #8]
 8011d76:	601f      	str	r7, [r3, #0]
 8011d78:	e6b0      	b.n	8011adc <__gethex+0xf8>
 8011d7a:	4299      	cmp	r1, r3
 8011d7c:	f843 cc04 	str.w	ip, [r3, #-4]
 8011d80:	d8d9      	bhi.n	8011d36 <__gethex+0x352>
 8011d82:	68a3      	ldr	r3, [r4, #8]
 8011d84:	459b      	cmp	fp, r3
 8011d86:	db17      	blt.n	8011db8 <__gethex+0x3d4>
 8011d88:	6861      	ldr	r1, [r4, #4]
 8011d8a:	9801      	ldr	r0, [sp, #4]
 8011d8c:	3101      	adds	r1, #1
 8011d8e:	f7fd fe07 	bl	800f9a0 <_Balloc>
 8011d92:	4681      	mov	r9, r0
 8011d94:	b918      	cbnz	r0, 8011d9e <__gethex+0x3ba>
 8011d96:	4b1a      	ldr	r3, [pc, #104]	@ (8011e00 <__gethex+0x41c>)
 8011d98:	4602      	mov	r2, r0
 8011d9a:	2184      	movs	r1, #132	@ 0x84
 8011d9c:	e6c5      	b.n	8011b2a <__gethex+0x146>
 8011d9e:	6922      	ldr	r2, [r4, #16]
 8011da0:	3202      	adds	r2, #2
 8011da2:	f104 010c 	add.w	r1, r4, #12
 8011da6:	0092      	lsls	r2, r2, #2
 8011da8:	300c      	adds	r0, #12
 8011daa:	f7fc fe98 	bl	800eade <memcpy>
 8011dae:	4621      	mov	r1, r4
 8011db0:	9801      	ldr	r0, [sp, #4]
 8011db2:	f7fd fe35 	bl	800fa20 <_Bfree>
 8011db6:	464c      	mov	r4, r9
 8011db8:	6923      	ldr	r3, [r4, #16]
 8011dba:	1c5a      	adds	r2, r3, #1
 8011dbc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011dc0:	6122      	str	r2, [r4, #16]
 8011dc2:	2201      	movs	r2, #1
 8011dc4:	615a      	str	r2, [r3, #20]
 8011dc6:	e7be      	b.n	8011d46 <__gethex+0x362>
 8011dc8:	6922      	ldr	r2, [r4, #16]
 8011dca:	455a      	cmp	r2, fp
 8011dcc:	dd0b      	ble.n	8011de6 <__gethex+0x402>
 8011dce:	2101      	movs	r1, #1
 8011dd0:	4620      	mov	r0, r4
 8011dd2:	f7ff fd9f 	bl	8011914 <rshift>
 8011dd6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011dda:	3701      	adds	r7, #1
 8011ddc:	42bb      	cmp	r3, r7
 8011dde:	f6ff aee0 	blt.w	8011ba2 <__gethex+0x1be>
 8011de2:	2501      	movs	r5, #1
 8011de4:	e7c2      	b.n	8011d6c <__gethex+0x388>
 8011de6:	f016 061f 	ands.w	r6, r6, #31
 8011dea:	d0fa      	beq.n	8011de2 <__gethex+0x3fe>
 8011dec:	4453      	add	r3, sl
 8011dee:	f1c6 0620 	rsb	r6, r6, #32
 8011df2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8011df6:	f7fd fec5 	bl	800fb84 <__hi0bits>
 8011dfa:	42b0      	cmp	r0, r6
 8011dfc:	dbe7      	blt.n	8011dce <__gethex+0x3ea>
 8011dfe:	e7f0      	b.n	8011de2 <__gethex+0x3fe>
 8011e00:	08013916 	.word	0x08013916

08011e04 <L_shift>:
 8011e04:	f1c2 0208 	rsb	r2, r2, #8
 8011e08:	0092      	lsls	r2, r2, #2
 8011e0a:	b570      	push	{r4, r5, r6, lr}
 8011e0c:	f1c2 0620 	rsb	r6, r2, #32
 8011e10:	6843      	ldr	r3, [r0, #4]
 8011e12:	6804      	ldr	r4, [r0, #0]
 8011e14:	fa03 f506 	lsl.w	r5, r3, r6
 8011e18:	432c      	orrs	r4, r5
 8011e1a:	40d3      	lsrs	r3, r2
 8011e1c:	6004      	str	r4, [r0, #0]
 8011e1e:	f840 3f04 	str.w	r3, [r0, #4]!
 8011e22:	4288      	cmp	r0, r1
 8011e24:	d3f4      	bcc.n	8011e10 <L_shift+0xc>
 8011e26:	bd70      	pop	{r4, r5, r6, pc}

08011e28 <__match>:
 8011e28:	b530      	push	{r4, r5, lr}
 8011e2a:	6803      	ldr	r3, [r0, #0]
 8011e2c:	3301      	adds	r3, #1
 8011e2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011e32:	b914      	cbnz	r4, 8011e3a <__match+0x12>
 8011e34:	6003      	str	r3, [r0, #0]
 8011e36:	2001      	movs	r0, #1
 8011e38:	bd30      	pop	{r4, r5, pc}
 8011e3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011e3e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8011e42:	2d19      	cmp	r5, #25
 8011e44:	bf98      	it	ls
 8011e46:	3220      	addls	r2, #32
 8011e48:	42a2      	cmp	r2, r4
 8011e4a:	d0f0      	beq.n	8011e2e <__match+0x6>
 8011e4c:	2000      	movs	r0, #0
 8011e4e:	e7f3      	b.n	8011e38 <__match+0x10>

08011e50 <__hexnan>:
 8011e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e54:	680b      	ldr	r3, [r1, #0]
 8011e56:	6801      	ldr	r1, [r0, #0]
 8011e58:	115e      	asrs	r6, r3, #5
 8011e5a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011e5e:	f013 031f 	ands.w	r3, r3, #31
 8011e62:	b087      	sub	sp, #28
 8011e64:	bf18      	it	ne
 8011e66:	3604      	addne	r6, #4
 8011e68:	2500      	movs	r5, #0
 8011e6a:	1f37      	subs	r7, r6, #4
 8011e6c:	4682      	mov	sl, r0
 8011e6e:	4690      	mov	r8, r2
 8011e70:	9301      	str	r3, [sp, #4]
 8011e72:	f846 5c04 	str.w	r5, [r6, #-4]
 8011e76:	46b9      	mov	r9, r7
 8011e78:	463c      	mov	r4, r7
 8011e7a:	9502      	str	r5, [sp, #8]
 8011e7c:	46ab      	mov	fp, r5
 8011e7e:	784a      	ldrb	r2, [r1, #1]
 8011e80:	1c4b      	adds	r3, r1, #1
 8011e82:	9303      	str	r3, [sp, #12]
 8011e84:	b342      	cbz	r2, 8011ed8 <__hexnan+0x88>
 8011e86:	4610      	mov	r0, r2
 8011e88:	9105      	str	r1, [sp, #20]
 8011e8a:	9204      	str	r2, [sp, #16]
 8011e8c:	f7ff fd94 	bl	80119b8 <__hexdig_fun>
 8011e90:	2800      	cmp	r0, #0
 8011e92:	d151      	bne.n	8011f38 <__hexnan+0xe8>
 8011e94:	9a04      	ldr	r2, [sp, #16]
 8011e96:	9905      	ldr	r1, [sp, #20]
 8011e98:	2a20      	cmp	r2, #32
 8011e9a:	d818      	bhi.n	8011ece <__hexnan+0x7e>
 8011e9c:	9b02      	ldr	r3, [sp, #8]
 8011e9e:	459b      	cmp	fp, r3
 8011ea0:	dd13      	ble.n	8011eca <__hexnan+0x7a>
 8011ea2:	454c      	cmp	r4, r9
 8011ea4:	d206      	bcs.n	8011eb4 <__hexnan+0x64>
 8011ea6:	2d07      	cmp	r5, #7
 8011ea8:	dc04      	bgt.n	8011eb4 <__hexnan+0x64>
 8011eaa:	462a      	mov	r2, r5
 8011eac:	4649      	mov	r1, r9
 8011eae:	4620      	mov	r0, r4
 8011eb0:	f7ff ffa8 	bl	8011e04 <L_shift>
 8011eb4:	4544      	cmp	r4, r8
 8011eb6:	d952      	bls.n	8011f5e <__hexnan+0x10e>
 8011eb8:	2300      	movs	r3, #0
 8011eba:	f1a4 0904 	sub.w	r9, r4, #4
 8011ebe:	f844 3c04 	str.w	r3, [r4, #-4]
 8011ec2:	f8cd b008 	str.w	fp, [sp, #8]
 8011ec6:	464c      	mov	r4, r9
 8011ec8:	461d      	mov	r5, r3
 8011eca:	9903      	ldr	r1, [sp, #12]
 8011ecc:	e7d7      	b.n	8011e7e <__hexnan+0x2e>
 8011ece:	2a29      	cmp	r2, #41	@ 0x29
 8011ed0:	d157      	bne.n	8011f82 <__hexnan+0x132>
 8011ed2:	3102      	adds	r1, #2
 8011ed4:	f8ca 1000 	str.w	r1, [sl]
 8011ed8:	f1bb 0f00 	cmp.w	fp, #0
 8011edc:	d051      	beq.n	8011f82 <__hexnan+0x132>
 8011ede:	454c      	cmp	r4, r9
 8011ee0:	d206      	bcs.n	8011ef0 <__hexnan+0xa0>
 8011ee2:	2d07      	cmp	r5, #7
 8011ee4:	dc04      	bgt.n	8011ef0 <__hexnan+0xa0>
 8011ee6:	462a      	mov	r2, r5
 8011ee8:	4649      	mov	r1, r9
 8011eea:	4620      	mov	r0, r4
 8011eec:	f7ff ff8a 	bl	8011e04 <L_shift>
 8011ef0:	4544      	cmp	r4, r8
 8011ef2:	d936      	bls.n	8011f62 <__hexnan+0x112>
 8011ef4:	f1a8 0204 	sub.w	r2, r8, #4
 8011ef8:	4623      	mov	r3, r4
 8011efa:	f853 1b04 	ldr.w	r1, [r3], #4
 8011efe:	f842 1f04 	str.w	r1, [r2, #4]!
 8011f02:	429f      	cmp	r7, r3
 8011f04:	d2f9      	bcs.n	8011efa <__hexnan+0xaa>
 8011f06:	1b3b      	subs	r3, r7, r4
 8011f08:	f023 0303 	bic.w	r3, r3, #3
 8011f0c:	3304      	adds	r3, #4
 8011f0e:	3401      	adds	r4, #1
 8011f10:	3e03      	subs	r6, #3
 8011f12:	42b4      	cmp	r4, r6
 8011f14:	bf88      	it	hi
 8011f16:	2304      	movhi	r3, #4
 8011f18:	4443      	add	r3, r8
 8011f1a:	2200      	movs	r2, #0
 8011f1c:	f843 2b04 	str.w	r2, [r3], #4
 8011f20:	429f      	cmp	r7, r3
 8011f22:	d2fb      	bcs.n	8011f1c <__hexnan+0xcc>
 8011f24:	683b      	ldr	r3, [r7, #0]
 8011f26:	b91b      	cbnz	r3, 8011f30 <__hexnan+0xe0>
 8011f28:	4547      	cmp	r7, r8
 8011f2a:	d128      	bne.n	8011f7e <__hexnan+0x12e>
 8011f2c:	2301      	movs	r3, #1
 8011f2e:	603b      	str	r3, [r7, #0]
 8011f30:	2005      	movs	r0, #5
 8011f32:	b007      	add	sp, #28
 8011f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f38:	3501      	adds	r5, #1
 8011f3a:	2d08      	cmp	r5, #8
 8011f3c:	f10b 0b01 	add.w	fp, fp, #1
 8011f40:	dd06      	ble.n	8011f50 <__hexnan+0x100>
 8011f42:	4544      	cmp	r4, r8
 8011f44:	d9c1      	bls.n	8011eca <__hexnan+0x7a>
 8011f46:	2300      	movs	r3, #0
 8011f48:	f844 3c04 	str.w	r3, [r4, #-4]
 8011f4c:	2501      	movs	r5, #1
 8011f4e:	3c04      	subs	r4, #4
 8011f50:	6822      	ldr	r2, [r4, #0]
 8011f52:	f000 000f 	and.w	r0, r0, #15
 8011f56:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8011f5a:	6020      	str	r0, [r4, #0]
 8011f5c:	e7b5      	b.n	8011eca <__hexnan+0x7a>
 8011f5e:	2508      	movs	r5, #8
 8011f60:	e7b3      	b.n	8011eca <__hexnan+0x7a>
 8011f62:	9b01      	ldr	r3, [sp, #4]
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	d0dd      	beq.n	8011f24 <__hexnan+0xd4>
 8011f68:	f1c3 0320 	rsb	r3, r3, #32
 8011f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8011f70:	40da      	lsrs	r2, r3
 8011f72:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8011f76:	4013      	ands	r3, r2
 8011f78:	f846 3c04 	str.w	r3, [r6, #-4]
 8011f7c:	e7d2      	b.n	8011f24 <__hexnan+0xd4>
 8011f7e:	3f04      	subs	r7, #4
 8011f80:	e7d0      	b.n	8011f24 <__hexnan+0xd4>
 8011f82:	2004      	movs	r0, #4
 8011f84:	e7d5      	b.n	8011f32 <__hexnan+0xe2>

08011f86 <__ascii_mbtowc>:
 8011f86:	b082      	sub	sp, #8
 8011f88:	b901      	cbnz	r1, 8011f8c <__ascii_mbtowc+0x6>
 8011f8a:	a901      	add	r1, sp, #4
 8011f8c:	b142      	cbz	r2, 8011fa0 <__ascii_mbtowc+0x1a>
 8011f8e:	b14b      	cbz	r3, 8011fa4 <__ascii_mbtowc+0x1e>
 8011f90:	7813      	ldrb	r3, [r2, #0]
 8011f92:	600b      	str	r3, [r1, #0]
 8011f94:	7812      	ldrb	r2, [r2, #0]
 8011f96:	1e10      	subs	r0, r2, #0
 8011f98:	bf18      	it	ne
 8011f9a:	2001      	movne	r0, #1
 8011f9c:	b002      	add	sp, #8
 8011f9e:	4770      	bx	lr
 8011fa0:	4610      	mov	r0, r2
 8011fa2:	e7fb      	b.n	8011f9c <__ascii_mbtowc+0x16>
 8011fa4:	f06f 0001 	mvn.w	r0, #1
 8011fa8:	e7f8      	b.n	8011f9c <__ascii_mbtowc+0x16>

08011faa <_realloc_r>:
 8011faa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011fae:	4680      	mov	r8, r0
 8011fb0:	4615      	mov	r5, r2
 8011fb2:	460c      	mov	r4, r1
 8011fb4:	b921      	cbnz	r1, 8011fc0 <_realloc_r+0x16>
 8011fb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011fba:	4611      	mov	r1, r2
 8011fbc:	f7fd bc64 	b.w	800f888 <_malloc_r>
 8011fc0:	b92a      	cbnz	r2, 8011fce <_realloc_r+0x24>
 8011fc2:	f7fd fbed 	bl	800f7a0 <_free_r>
 8011fc6:	2400      	movs	r4, #0
 8011fc8:	4620      	mov	r0, r4
 8011fca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011fce:	f000 f840 	bl	8012052 <_malloc_usable_size_r>
 8011fd2:	4285      	cmp	r5, r0
 8011fd4:	4606      	mov	r6, r0
 8011fd6:	d802      	bhi.n	8011fde <_realloc_r+0x34>
 8011fd8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8011fdc:	d8f4      	bhi.n	8011fc8 <_realloc_r+0x1e>
 8011fde:	4629      	mov	r1, r5
 8011fe0:	4640      	mov	r0, r8
 8011fe2:	f7fd fc51 	bl	800f888 <_malloc_r>
 8011fe6:	4607      	mov	r7, r0
 8011fe8:	2800      	cmp	r0, #0
 8011fea:	d0ec      	beq.n	8011fc6 <_realloc_r+0x1c>
 8011fec:	42b5      	cmp	r5, r6
 8011fee:	462a      	mov	r2, r5
 8011ff0:	4621      	mov	r1, r4
 8011ff2:	bf28      	it	cs
 8011ff4:	4632      	movcs	r2, r6
 8011ff6:	f7fc fd72 	bl	800eade <memcpy>
 8011ffa:	4621      	mov	r1, r4
 8011ffc:	4640      	mov	r0, r8
 8011ffe:	f7fd fbcf 	bl	800f7a0 <_free_r>
 8012002:	463c      	mov	r4, r7
 8012004:	e7e0      	b.n	8011fc8 <_realloc_r+0x1e>

08012006 <__ascii_wctomb>:
 8012006:	4603      	mov	r3, r0
 8012008:	4608      	mov	r0, r1
 801200a:	b141      	cbz	r1, 801201e <__ascii_wctomb+0x18>
 801200c:	2aff      	cmp	r2, #255	@ 0xff
 801200e:	d904      	bls.n	801201a <__ascii_wctomb+0x14>
 8012010:	228a      	movs	r2, #138	@ 0x8a
 8012012:	601a      	str	r2, [r3, #0]
 8012014:	f04f 30ff 	mov.w	r0, #4294967295
 8012018:	4770      	bx	lr
 801201a:	700a      	strb	r2, [r1, #0]
 801201c:	2001      	movs	r0, #1
 801201e:	4770      	bx	lr

08012020 <fiprintf>:
 8012020:	b40e      	push	{r1, r2, r3}
 8012022:	b503      	push	{r0, r1, lr}
 8012024:	4601      	mov	r1, r0
 8012026:	ab03      	add	r3, sp, #12
 8012028:	4805      	ldr	r0, [pc, #20]	@ (8012040 <fiprintf+0x20>)
 801202a:	f853 2b04 	ldr.w	r2, [r3], #4
 801202e:	6800      	ldr	r0, [r0, #0]
 8012030:	9301      	str	r3, [sp, #4]
 8012032:	f7ff f96d 	bl	8011310 <_vfiprintf_r>
 8012036:	b002      	add	sp, #8
 8012038:	f85d eb04 	ldr.w	lr, [sp], #4
 801203c:	b003      	add	sp, #12
 801203e:	4770      	bx	lr
 8012040:	2000003c 	.word	0x2000003c

08012044 <abort>:
 8012044:	b508      	push	{r3, lr}
 8012046:	2006      	movs	r0, #6
 8012048:	f000 f834 	bl	80120b4 <raise>
 801204c:	2001      	movs	r0, #1
 801204e:	f7f1 fb5f 	bl	8003710 <_exit>

08012052 <_malloc_usable_size_r>:
 8012052:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012056:	1f18      	subs	r0, r3, #4
 8012058:	2b00      	cmp	r3, #0
 801205a:	bfbc      	itt	lt
 801205c:	580b      	ldrlt	r3, [r1, r0]
 801205e:	18c0      	addlt	r0, r0, r3
 8012060:	4770      	bx	lr

08012062 <_raise_r>:
 8012062:	291f      	cmp	r1, #31
 8012064:	b538      	push	{r3, r4, r5, lr}
 8012066:	4605      	mov	r5, r0
 8012068:	460c      	mov	r4, r1
 801206a:	d904      	bls.n	8012076 <_raise_r+0x14>
 801206c:	2316      	movs	r3, #22
 801206e:	6003      	str	r3, [r0, #0]
 8012070:	f04f 30ff 	mov.w	r0, #4294967295
 8012074:	bd38      	pop	{r3, r4, r5, pc}
 8012076:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012078:	b112      	cbz	r2, 8012080 <_raise_r+0x1e>
 801207a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801207e:	b94b      	cbnz	r3, 8012094 <_raise_r+0x32>
 8012080:	4628      	mov	r0, r5
 8012082:	f000 f831 	bl	80120e8 <_getpid_r>
 8012086:	4622      	mov	r2, r4
 8012088:	4601      	mov	r1, r0
 801208a:	4628      	mov	r0, r5
 801208c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012090:	f000 b818 	b.w	80120c4 <_kill_r>
 8012094:	2b01      	cmp	r3, #1
 8012096:	d00a      	beq.n	80120ae <_raise_r+0x4c>
 8012098:	1c59      	adds	r1, r3, #1
 801209a:	d103      	bne.n	80120a4 <_raise_r+0x42>
 801209c:	2316      	movs	r3, #22
 801209e:	6003      	str	r3, [r0, #0]
 80120a0:	2001      	movs	r0, #1
 80120a2:	e7e7      	b.n	8012074 <_raise_r+0x12>
 80120a4:	2100      	movs	r1, #0
 80120a6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80120aa:	4620      	mov	r0, r4
 80120ac:	4798      	blx	r3
 80120ae:	2000      	movs	r0, #0
 80120b0:	e7e0      	b.n	8012074 <_raise_r+0x12>
	...

080120b4 <raise>:
 80120b4:	4b02      	ldr	r3, [pc, #8]	@ (80120c0 <raise+0xc>)
 80120b6:	4601      	mov	r1, r0
 80120b8:	6818      	ldr	r0, [r3, #0]
 80120ba:	f7ff bfd2 	b.w	8012062 <_raise_r>
 80120be:	bf00      	nop
 80120c0:	2000003c 	.word	0x2000003c

080120c4 <_kill_r>:
 80120c4:	b538      	push	{r3, r4, r5, lr}
 80120c6:	4d07      	ldr	r5, [pc, #28]	@ (80120e4 <_kill_r+0x20>)
 80120c8:	2300      	movs	r3, #0
 80120ca:	4604      	mov	r4, r0
 80120cc:	4608      	mov	r0, r1
 80120ce:	4611      	mov	r1, r2
 80120d0:	602b      	str	r3, [r5, #0]
 80120d2:	f7f1 fb0d 	bl	80036f0 <_kill>
 80120d6:	1c43      	adds	r3, r0, #1
 80120d8:	d102      	bne.n	80120e0 <_kill_r+0x1c>
 80120da:	682b      	ldr	r3, [r5, #0]
 80120dc:	b103      	cbz	r3, 80120e0 <_kill_r+0x1c>
 80120de:	6023      	str	r3, [r4, #0]
 80120e0:	bd38      	pop	{r3, r4, r5, pc}
 80120e2:	bf00      	nop
 80120e4:	20003770 	.word	0x20003770

080120e8 <_getpid_r>:
 80120e8:	f7f1 bafa 	b.w	80036e0 <_getpid>

080120ec <_init>:
 80120ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120ee:	bf00      	nop
 80120f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80120f2:	bc08      	pop	{r3}
 80120f4:	469e      	mov	lr, r3
 80120f6:	4770      	bx	lr

080120f8 <_fini>:
 80120f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120fa:	bf00      	nop
 80120fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80120fe:	bc08      	pop	{r3}
 8012100:	469e      	mov	lr, r3
 8012102:	4770      	bx	lr
